// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "./constants/Env.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as RelayEnv from "./constants/RelayEnv.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as DeviceDetect from "./bindings/DeviceDetect.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as MO_Main_Buyer from "./pages/buyer/mobile/main/MO_Main_Buyer.mjs";
import * as PC_Main_Buyer from "./pages/buyer/pc/main/PC_Main_Buyer.mjs";
import * as ShopMain_Buyer from "./pages/buyer/ShopMain_Buyer.mjs";
import * as ServerSideHelper from "./utils/ServerSideHelper.mjs";
import * as FeatureFlagWrapper from "./pages/buyer/pc/FeatureFlagWrapper.mjs";
import * as ShopMain_SubBanner_Buyer from "./components/ShopMain_SubBanner_Buyer.mjs";
import * as ShopMain_MainBanner_Buyer from "./components/ShopMain_MainBanner_Buyer.mjs";
import * as MO_AuctionPrice_Chips_Buyer from "./pages/buyer/mobile/auction-price/MO_AuctionPrice_Chips_Buyer.mjs";
import * as ShopMain_CategoryList_Buyer from "./components/ShopMain_CategoryList_Buyer.mjs";

function Index$Container(Props) {
  var deviceType = Props.deviceType;
  var match = FeatureFlagWrapper.Query.use(undefined, undefined, undefined, undefined, undefined);
  var isMainRenewal = Belt_Option.mapWithDefault(Garter_Array.first(Belt_Array.keep(match.features, (function (param) {
                  return param.featureType === "HOME_UI_UX";
                }))), false, (function (param) {
          return param.active;
        }));
  if (isMainRenewal) {
    if (deviceType >= 2) {
      return React.createElement(MO_Main_Buyer.make, {});
    } else {
      return React.createElement(PC_Main_Buyer.make, {});
    }
  } else {
    return React.createElement(ShopMain_Buyer.make, {
                deviceType: deviceType
              });
  }
}

var Container = {
  make: Index$Container
};

function $$default(props) {
  return React.createElement(React.Suspense, {
              children: React.createElement(Index$Container, {
                    deviceType: props.deviceType
                  }),
              fallback: "Loading..."
            });
}

function getServerSideProps(ctx) {
  var deviceType = DeviceDetect.detectDeviceFromCtx2(ctx.req);
  var environment = RelayEnv.environment({
        TAG: /* SinsunMarket */0,
        _0: Env.graphqlApiUrl
      });
  var features = ServerSideHelper.featureFlags(environment);
  return Js_promise.then_((function (homeUiUx) {
                if (homeUiUx !== undefined && homeUiUx && deviceType >= 2) {
                  var tab = Js_dict.get(ctx.query, "tab");
                  var auc = Js_dict.get(ctx.query, "auction-price");
                  if (tab !== undefined) {
                    var auction = Belt_Option.getWithDefault(Belt_Option.flatMap(auc, MO_AuctionPrice_Chips_Buyer.Chip.fromString), "TODAY_RISE");
                    var p1 = MO_Main_Buyer.ServerSideWithParamQuery.fetchPromised(environment, {
                          marketPriceDiffFilter: auction === "TODAY_RISE" ? ({
                                isFromLatestBusinessDay: true,
                                sign: "PLUS",
                                unit: "DAILY"
                              }) : (
                              auction === "WEEK_FALL" ? ({
                                    isFromLatestBusinessDay: true,
                                    sign: "MINUS",
                                    unit: "WEEKLY"
                                  }) : (
                                  auction === "WEEK_RISE" ? ({
                                        isFromLatestBusinessDay: true,
                                        sign: "PLUS",
                                        unit: "WEEKLY"
                                      }) : ({
                                        isFromLatestBusinessDay: true,
                                        sign: "MINUS",
                                        unit: "DAILY"
                                      })
                                )
                            )
                        }, undefined, undefined, undefined);
                    return ServerSideHelper.makeResultWithQuery(Promise.allSettled([
                                    features,
                                    p1
                                  ]), environment, {
                                deviceType: deviceType
                              });
                  }
                  var p1$1 = MO_Main_Buyer.ServerSideQuery.fetchPromised(environment, undefined, undefined, undefined, undefined);
                  return ServerSideHelper.makeResultWithQuery(Promise.allSettled([
                                  features,
                                  p1$1
                                ]), environment, {
                              deviceType: deviceType
                            });
                }
                var gnbAndCategoryQuery = ServerSideHelper.gnbAndCategory(environment);
                var p1$2 = ShopMain_MainBanner_Buyer.Query.fetchPromised(environment, undefined, undefined, undefined, undefined);
                var p2 = ShopMain_SubBanner_Buyer.Query.fetchPromised(environment, undefined, undefined, undefined, undefined);
                var p3 = ShopMain_CategoryList_Buyer.Query.fetchPromised(environment, {
                      onlyDisplayable: true
                    }, undefined, undefined, undefined);
                return ServerSideHelper.makeResultWithQuery(Promise.allSettled([
                                gnbAndCategoryQuery,
                                features,
                                p1$2,
                                p2,
                                p3
                              ]), environment, {
                            deviceType: deviceType
                          });
              }), Js_promise.then_((function (response) {
                    return Promise.resolve(Belt_Option.map(Garter_Array.first(Belt_Array.keep(response.features, (function (param) {
                                              return param.featureType === "HOME_UI_UX";
                                            }))), (function (param) {
                                      return param.active;
                                    })));
                  }), FeatureFlagWrapper.Query.fetchPromised(environment, undefined, undefined, undefined, undefined)));
}

export {
  Container ,
  $$default ,
  $$default as default,
  getServerSideProps ,
}
/* Env Not a pure module */
