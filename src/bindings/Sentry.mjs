// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Nextjs from "@sentry/nextjs";

var ErrorBoundary = {};

var Scope = {};

var Integrations = {};

function relayRequest_encode(v) {
  return Js_dict.fromArray([
              [
                "query",
                Spice.optionToJson((function (v) {
                        return v;
                      }), v.query)
              ],
              [
                "variables",
                Spice.optionToJson((function (v) {
                        return v;
                      }), v.variables)
              ]
            ]);
}

function relayRequest_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var query = Spice.optionFromJson((function (v) {
          return {
                  TAG: /* Ok */0,
                  _0: v
                };
        }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "query"), null));
  if (query.TAG === /* Ok */0) {
    var variables = Spice.optionFromJson((function (v) {
            return {
                    TAG: /* Ok */0,
                    _0: v
                  };
          }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "variables"), null));
    if (variables.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                query: query._0,
                variables: variables._0
              }
            };
    }
    var e = variables._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".variables" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = query._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".query" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function parseStringToJson(s) {
  try {
    return {
            TAG: /* Ok */0,
            _0: JSON.parse(s)
          };
  }
  catch (exn){
    return Spice.error(undefined, "\xec\x9a\x94\xec\xb2\xad body \xed\x8c\x8c\xec\x8b\xb1\xec\x97\x90 \xec\x8b\xa4\xed\x8c\xa8\xed\x95\x98\xec\x98\x80\xec\x8a\xb5\xeb\x8b\x88\xeb\x8b\xa4.", s);
  }
}

function getRelayRequestInfo(s) {
  return Belt_Result.flatMap(Belt_Result.flatMap(parseStringToJson(s), relayRequest_decode), (function (relayRequest) {
                var match = relayRequest.query;
                var match$1 = relayRequest.variables;
                if (match !== undefined && match$1 !== undefined) {
                  return {
                          TAG: /* Ok */0,
                          _0: [
                            JSON.stringify(Caml_option.valFromOption(match)),
                            JSON.stringify(Caml_option.valFromOption(match$1))
                          ]
                        };
                } else {
                  return Spice.error(undefined, "\xec\x9a\x94\xec\xb2\xad query, variables \xed\x8c\x8c\xec\x8b\xb1\xec\x97\x90 \xec\x8b\xa4\xed\x8c\xa8\xed\x95\x98\xec\x98\x80\xec\x8a\xb5\xeb\x8b\x88\xeb\x8b\xa4.", s);
                }
              }));
}

function makeWithURLError(error, url) {
  Nextjs.withScope(function (scope) {
        scope.setExtra("Invalid Url Error", error);
        scope.setExtra("URL Input", url);
        scope.setTag("type", "InvalidUrlError");
        Nextjs.captureException(scope);
        
      });
  
}

function makeWithRelayError(errorType, errorMessage, body) {
  Nextjs.withScope(function (scope) {
        var match = getRelayRequestInfo(body);
        if (match.TAG === /* Ok */0) {
          var match$1 = match._0;
          scope.setExtra("query", match$1[0]);
          scope.setExtra("variables", match$1[1]);
        }
        scope.setTag("type", errorType);
        scope.setExtra("message", errorMessage);
        Nextjs.captureException(scope);
        
      });
  
}

var CaptureException = {
  makeWithURLError: makeWithURLError,
  makeWithRelayError: makeWithRelayError
};

export {
  ErrorBoundary ,
  Scope ,
  Integrations ,
  relayRequest_encode ,
  relayRequest_decode ,
  parseStringToJson ,
  getRelayRequestInfo ,
  CaptureException ,
  
}
/* @sentry/nextjs Not a pure module */
