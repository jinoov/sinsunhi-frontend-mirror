// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as IconError from "../../components/svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactEvents from "../../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Authorization from "../../utils/Authorization.mjs";
import * as ReactHookForm from "../../bindings/ReactHookForm/ReactHookForm.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Select_Delivery from "../../components/Select_Delivery.mjs";
import * as ReactHookForm$1 from "react-hook-form";
import * as Select_Tax_Status from "../../components/Select_Tax_Status.mjs";
import EndOfDay from "date-fns/endOfDay";
import * as Hooks from "react-relay/hooks";
import * as Select_Product_Type from "../../components/Select_Product_Type.mjs";
import StartOfDay from "date-fns/startOfDay";
import * as Select_Display_Categories from "../../components/Select_Display_Categories.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as Product_Detail_Basic_Admin from "../../components/Product_Detail_Basic_Admin.mjs";
import * as Add_Normal_Product_Form_Admin from "../../components/Add_Normal_Product_Form_Admin.mjs";
import * as Add_Quoted_Product_Form_Admin from "../../components/Add_Quoted_Product_Form_Admin.mjs";
import * as Product_Detail_Description_Admin from "../../components/Product_Detail_Description_Admin.mjs";
import * as AddProductAdminNormalMutation_graphql from "../../__generated__/AddProductAdminNormalMutation_graphql.mjs";
import * as AddProductAdminQuotedMutation_graphql from "../../__generated__/AddProductAdminQuotedMutation_graphql.mjs";

var makeVariables = AddProductAdminNormalMutation_graphql.Utils.makeVariables;

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: AddProductAdminNormalMutation_graphql.node,
              variables: AddProductAdminNormalMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, AddProductAdminNormalMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? AddProductAdminNormalMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, AddProductAdminNormalMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use(param) {
  var match = Hooks.useMutation(AddProductAdminNormalMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, AddProductAdminNormalMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? AddProductAdminNormalMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, AddProductAdminNormalMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: AddProductAdminNormalMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var NormalMutation_errorCode_decode = AddProductAdminNormalMutation_graphql.Utils.errorCode_decode;

var NormalMutation_errorCode_fromString = AddProductAdminNormalMutation_graphql.Utils.errorCode_fromString;

var NormalMutation_normalProductType_decode = AddProductAdminNormalMutation_graphql.Utils.normalProductType_decode;

var NormalMutation_normalProductType_fromString = AddProductAdminNormalMutation_graphql.Utils.normalProductType_fromString;

var NormalMutation_productStatus_decode = AddProductAdminNormalMutation_graphql.Utils.productStatus_decode;

var NormalMutation_productStatus_fromString = AddProductAdminNormalMutation_graphql.Utils.productStatus_fromString;

var NormalMutation_make_imageInput = AddProductAdminNormalMutation_graphql.Utils.make_imageInput;

var NormalMutation = {
  errorCode_decode: NormalMutation_errorCode_decode,
  errorCode_fromString: NormalMutation_errorCode_fromString,
  normalProductType_decode: NormalMutation_normalProductType_decode,
  normalProductType_fromString: NormalMutation_normalProductType_fromString,
  productStatus_decode: NormalMutation_productStatus_decode,
  productStatus_fromString: NormalMutation_productStatus_fromString,
  make_imageInput: NormalMutation_make_imageInput,
  makeVariables: makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use
};

var makeVariables$1 = AddProductAdminQuotedMutation_graphql.Utils.makeVariables;

function commitMutation$1(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: AddProductAdminQuotedMutation_graphql.node,
              variables: AddProductAdminQuotedMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, AddProductAdminQuotedMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? AddProductAdminQuotedMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, AddProductAdminQuotedMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$1(param) {
  var match = Hooks.useMutation(AddProductAdminQuotedMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, AddProductAdminQuotedMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? AddProductAdminQuotedMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, AddProductAdminQuotedMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: AddProductAdminQuotedMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var QuotedMutation_errorCode_decode = AddProductAdminQuotedMutation_graphql.Utils.errorCode_decode;

var QuotedMutation_errorCode_fromString = AddProductAdminQuotedMutation_graphql.Utils.errorCode_fromString;

var QuotedMutation_productStatus_decode = AddProductAdminQuotedMutation_graphql.Utils.productStatus_decode;

var QuotedMutation_productStatus_fromString = AddProductAdminQuotedMutation_graphql.Utils.productStatus_fromString;

var QuotedMutation_make_imageInput = AddProductAdminQuotedMutation_graphql.Utils.make_imageInput;

var QuotedMutation = {
  errorCode_decode: QuotedMutation_errorCode_decode,
  errorCode_fromString: QuotedMutation_errorCode_fromString,
  productStatus_decode: QuotedMutation_productStatus_decode,
  productStatus_fromString: QuotedMutation_productStatus_fromString,
  make_imageInput: QuotedMutation_make_imageInput,
  makeVariables: makeVariables$1,
  Types: undefined,
  commitMutation: commitMutation$1,
  use: use$1
};

function AddProduct_Admin$NormalSuccessDialog(Props) {
  var showWithId = Props.showWithId;
  var router = Router.useRouter();
  var match = showWithId ? [
      /* Show */0,
      showWithId._0
    ] : [
      /* Hide */1,
      undefined
    ];
  var id = match[1];
  return React.createElement(Dialog.make, {
              isShow: match[0],
              children: React.createElement("div", {
                    className: "flex flex-col"
                  }, React.createElement("span", undefined, "상품등록이 완료되었습니다."), React.createElement("span", undefined, "이어서 상품의 단품을 등록하시겠어요?")),
              onCancel: (function (param) {
                  router.push("/admin/products");
                  
                }),
              onConfirm: (function (param) {
                  Belt_Option.map(id, (function (id$p) {
                          router.push("/admin/products/" + id$p + "/create-options");
                          
                        }));
                  
                }),
              textOnCancel: "아니오(목록으로)",
              textOnConfirm: "네",
              kindOfConfirm: /* Positive */0,
              boxStyle: "text-center rounded-2xl"
            });
}

var NormalSuccessDialog = {
  make: AddProduct_Admin$NormalSuccessDialog
};

function AddProduct_Admin$QuotedSuccessDialog(Props) {
  var isShow = Props.isShow;
  var router = Router.useRouter();
  return React.createElement(Dialog.make, {
              isShow: isShow,
              children: React.createElement("div", {
                    className: "flex flex-col"
                  }, React.createElement("span", undefined, "견적상품등록이 완료되었습니다.")),
              onCancel: (function (param) {
                  router.push("/admin/products");
                  
                }),
              textOnCancel: "확인",
              kindOfConfirm: /* Positive */0,
              boxStyle: "text-center rounded-2xl"
            });
}

var QuotedSuccessDialog = {
  make: AddProduct_Admin$QuotedSuccessDialog
};

function makeCategoryId(form) {
  if (form) {
    return form.value;
  } else {
    return "";
  }
}

function makeDisplayCategoryIds(form) {
  return Belt_Array.keepMap(form, (function (param) {
                return Garter_Array.last(Belt_Array.keepMap([
                                param.c1,
                                param.c2,
                                param.c3,
                                param.c4,
                                param.c5
                              ], (function (select) {
                                  if (select) {
                                    return select.value;
                                  }
                                  
                                })));
              }));
}

function makeNoticeDate(dateStr, setTimeFn) {
  return Belt_Option.map(Belt_Option.keep(dateStr, (function (str) {
                    return str !== "";
                  })), (function (dateStr$p) {
                return Curry._1(setTimeFn, new Date(dateStr$p)).toISOString();
              }));
}

function makeNormalProductVariables(form) {
  var match = form.operationStatus;
  var tmp;
  switch (match) {
    case /* SALE */0 :
        tmp = "SALE";
        break;
    case /* SOLDOUT */1 :
        tmp = "SOLDOUT";
        break;
    case /* NOSALE */2 :
        tmp = "NOSALE";
        break;
    case /* RETIRE */3 :
        tmp = "RETIRE";
        break;
    case /* HIDDEN_SALE */4 :
        tmp = "HIDDEN_SALE";
        break;
    
  }
  return Curry.app(makeVariables, [
              makeCategoryId(form.productCategory.c5),
              form.editor,
              makeDisplayCategoryIds(form.displayCategories),
              form.buyerProductName,
              {
                original: form.thumbnail.original,
                thumb100x100: form.thumbnail.thumb100x100,
                thumb400x400: form.thumbnail.thumb400x400,
                thumb800x800: form.thumbnail.thumb800x800,
                thumb1000x1000: form.thumbnail.thumb1000x1000,
                thumb1920x1920: form.thumbnail.thumb1920x1920
              },
              Select_Delivery.toBool(form.delivery),
              Select_Tax_Status.toBool(form.tax),
              form.producerProductName,
              Belt_Option.keep(form.notice, (function (str) {
                      return str !== "";
                    })),
              makeNoticeDate(form.noticeEndAt, (function (prim) {
                      return EndOfDay(prim);
                    })),
              makeNoticeDate(form.noticeStartAt, (function (prim) {
                      return StartOfDay(prim);
                    })),
              form.origin,
              form.basePrice,
              form.producerName.value,
              Belt_Option.keep(form.documentURL, (function (str) {
                      return str !== "";
                    })),
              tmp,
              form.quotable ? "QUOTABLE" : "NORMAL",
              undefined
            ]);
}

function makeQuotedProductVariables(form) {
  var match = form.operationStatus;
  var tmp;
  switch (match) {
    case /* SALE */0 :
        tmp = "SALE";
        break;
    case /* SOLDOUT */1 :
        tmp = "SOLDOUT";
        break;
    case /* NOSALE */2 :
        tmp = "NOSALE";
        break;
    case /* RETIRE */3 :
        tmp = "RETIRE";
        break;
    case /* HIDDEN_SALE */4 :
        tmp = "HIDDEN_SALE";
        break;
    
  }
  return Curry.app(makeVariables$1, [
              makeCategoryId(form.productCategory.c5),
              form.editor,
              makeDisplayCategoryIds(form.displayCategories),
              form.buyerProductName,
              {
                original: form.thumbnail.original,
                thumb100x100: form.thumbnail.thumb100x100,
                thumb400x400: form.thumbnail.thumb400x400,
                thumb800x800: form.thumbnail.thumb800x800,
                thumb1000x1000: form.thumbnail.thumb1000x1000,
                thumb1920x1920: form.thumbnail.thumb1920x1920
              },
              form.producerProductName,
              Belt_Option.keep(form.notice, (function (str) {
                      return str !== "";
                    })),
              makeNoticeDate(form.noticeEndAt, (function (prim) {
                      return EndOfDay(prim);
                    })),
              makeNoticeDate(form.noticeStartAt, (function (prim) {
                      return StartOfDay(prim);
                    })),
              form.origin,
              form.grade,
              form.producerName.value,
              Belt_Option.keep(form.documentURL, (function (str) {
                      return str !== "";
                    })),
              tmp,
              undefined
            ]);
}

function AddProduct_Admin$Product(Props) {
  var match = use(undefined);
  var isNormalMutating = match[1];
  var normalMutate = match[0];
  var match$1 = use$1(undefined);
  var isQuotedMutating = match$1[1];
  var quotedMutate = match$1[0];
  var match$2 = ReactToastNotifications.useToasts();
  var addToast = match$2.addToast;
  var match$3 = React.useState(function () {
        return /* NORMAL */0;
      });
  var setProductType = match$3[1];
  var productType = match$3[0];
  var methods = ReactHookForm$1.useForm({
        mode: "onChange",
        defaultValues: Js_dict.fromArray([
              [
                Product_Detail_Basic_Admin.Form.formName.displayCategories,
                [Select_Display_Categories.Form.defaultDisplayCategory(/* Normal */0)]
              ],
              [
                Product_Detail_Description_Admin.Form.formName.thumbnail,
                ""
              ]
            ])
      }, undefined);
  var reset = methods.reset;
  var match$4 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowReset = match$4[1];
  var match$5 = React.useState(function () {
        return /* Hide */0;
      });
  var setShowNormalSucess = match$5[1];
  var match$6 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowQuotedSucess = match$6[1];
  var onSubmit = function (data, param) {
    console.log(data);
    var result = productType ? Belt_Result.map(Add_Quoted_Product_Form_Admin.Form.submit_decode(data), (function (data$p) {
              Curry.app(quotedMutate, [
                    undefined,
                    (function (param, param$1) {
                        var createQuotedProduct = param.createQuotedProduct;
                        if (typeof createQuotedProduct === "object" && createQuotedProduct.NAME === "CreateQuotedProductResult") {
                          return setShowQuotedSucess(function (param) {
                                      return /* Show */0;
                                    });
                        }
                        
                      }),
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    makeQuotedProductVariables(data$p),
                    undefined,
                    undefined
                  ]);
              
            })) : Belt_Result.map(Add_Normal_Product_Form_Admin.Form.submit_decode(data), (function (data$p) {
              Curry.app(normalMutate, [
                    undefined,
                    (function (param, param$1) {
                        var createProduct = param.createProduct;
                        if (typeof createProduct !== "object") {
                          return ;
                        }
                        if (createProduct.NAME !== "CreateProductResult") {
                          return ;
                        }
                        var product = createProduct.VAL.product;
                        return setShowNormalSucess(function (param) {
                                    return /* Show */{
                                            _0: product.id
                                          };
                                  });
                      }),
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    makeNormalProductVariables(data$p),
                    undefined,
                    undefined
                  ]);
              
            }));
    if (result.TAG === /* Ok */0) {
      return ;
    }
    console.log(result._0);
    return addToast(React.createElement("div", {
                    className: "flex items-center"
                  }, React.createElement(IconError.make, {
                        width: "24",
                        height: "24",
                        className: "mr-2"
                      }), "오류가 발생하였습니다. 등록내용을 확인하세요."), {
                appearance: "error"
              });
  };
  var handleReset = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return setShowReset(function (param) {
                              return /* Show */0;
                            });
                }), param);
  };
  return React.createElement(ReactHookForm.Provider.make, {
              children: null,
              methods: methods
            }, React.createElement("form", {
                  onSubmit: methods.handleSubmit(onSubmit)
                }, React.createElement("div", {
                      className: "max-w-gnb-panel overflow-auto bg-div-shape-L1 min-h-screen"
                    }, React.createElement("header", {
                          className: "flex items-baseline p-7 pb-0"
                        }, React.createElement("h1", {
                              className: "text-text-L1 text-xl font-bold"
                            }, "상품 등록")), React.createElement("div", undefined, React.createElement("div", {
                              className: "px-7 pt-7 mt-4 mx-4 bg-white rounded-t-md shadow-gl"
                            }, React.createElement("h2", {
                                  className: "text-text-L1 text-lg font-bold"
                                }, "상품유형"), React.createElement("div", {
                                  className: "py-6 w-80"
                                }, React.createElement(Select_Product_Type.make, {
                                      status: productType,
                                      onChange: (function (status) {
                                          return setProductType(function (param) {
                                                      return status;
                                                    });
                                        })
                                    }))), productType ? React.createElement(Add_Quoted_Product_Form_Admin.make, {}) : React.createElement(Add_Normal_Product_Form_Admin.make, {}))), React.createElement("div", {
                      className: "relative h-16 max-w-gnb-panel bg-white flex items-center gap-2 justify-end pr-5"
                    }, React.createElement("button", {
                          className: "px-3 py-2 bg-div-shape-L1 rounded-lg focus:outline-none",
                          disabled: isNormalMutating || isQuotedMutating,
                          type: "reset",
                          onClick: handleReset
                        }, "초기화"), React.createElement("button", {
                          className: "px-3 py-2 bg-green-gl text-white rounded-lg hover:bg-green-gl-dark focus:outline-none",
                          disabled: isNormalMutating || isQuotedMutating,
                          type: "submit"
                        }, "상품 등록"))), React.createElement(Dialog.make, {
                  isShow: match$4[0],
                  children: React.createElement("p", undefined, "모든 내용을 초기화 하시겠어요?"),
                  onCancel: (function (param) {
                      return setShowReset(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  onConfirm: (function (param) {
                      reset(undefined);
                      return setShowReset(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  textOnCancel: "닫기",
                  textOnConfirm: "초기화",
                  kindOfConfirm: /* Negative */1,
                  boxStyle: "text-center rounded-2xl"
                }), React.createElement(AddProduct_Admin$NormalSuccessDialog, {
                  showWithId: match$5[0]
                }), React.createElement(AddProduct_Admin$QuotedSuccessDialog, {
                  isShow: match$6[0]
                }));
}

var Product = {
  make: AddProduct_Admin$Product
};

function AddProduct_Admin(Props) {
  return React.createElement(Authorization.Admin.make, {
              children: React.createElement(AddProduct_Admin$Product, {}),
              title: "관리자 상품 조회"
            });
}

var Normal;

var Quoted;

var make = AddProduct_Admin;

export {
  NormalMutation ,
  QuotedMutation ,
  Normal ,
  Quoted ,
  NormalSuccessDialog ,
  QuotedSuccessDialog ,
  makeCategoryId ,
  makeDisplayCategoryIds ,
  makeNoticeDate ,
  makeNormalProductVariables ,
  makeQuotedProductVariables ,
  Product ,
  make ,
  
}
/* react Not a pure module */
