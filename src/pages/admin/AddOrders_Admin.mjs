// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../constants/Env.mjs";
import * as Swr from "swr";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as Helper from "../../utils/Helper.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as FetchHelper from "../../utils/FetchHelper.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Authorization from "../../utils/Authorization.mjs";
import * as UploadStatus_Buyer from "../../components/UploadStatus_Buyer.mjs";
import Async from "react-select/async";
import * as Upload_Orders_Admin from "../../components/Upload_Orders_Admin.mjs";

function AddOrders_Admin$Upload(Props) {
  var userId = Props.userId;
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var match$1 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowSuccess = match$1[1];
  var match$2 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowError = match$2[1];
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "p-7 relative"
                }, React.createElement(Upload_Orders_Admin.make, {
                      userId: userId,
                      onSuccess: (function (param) {
                          setShowSuccess(function (param) {
                                return /* Show */0;
                              });
                          mutate("" + Env.restApiUrl + "/order/recent-uploads?upload-type=order&pay-type=PAID", undefined, undefined);
                        }),
                      onFailure: (function (param) {
                          setShowError(function (param) {
                                return /* Show */0;
                              });
                        })
                    })), React.createElement(Dialog.make, {
                  isShow: match$1[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "주문서 업로드가 실행되었습니다. 성공여부를 꼭 주문서 업로드 결과에서 확인해주세요."),
                  onConfirm: (function (param) {
                      setShowSuccess(function (param) {
                            return /* Hide */1;
                          });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$2[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "파일 업로드에 실패하였습니다."),
                  onConfirm: (function (param) {
                      setShowError(function (param) {
                            return /* Hide */1;
                          });
                    })
                }));
}

var Upload = {
  make: AddOrders_Admin$Upload
};

function AddOrders_Admin(Props) {
  var match = React.useState(function () {
        return /* NotSelected */0;
      });
  var setSelectedUser = match[1];
  var selectedUser = match[0];
  var selectedUserId = selectedUser ? selectedUser.value : undefined;
  var handleLoadOptions = function (inputValue) {
    var __x = FetchHelper.fetchWithRetry(FetchHelper.getWithToken, "" + Env.restApiUrl + "/user?name=" + inputValue + "&role=buyer", "", 3);
    return Js_promise.then_((function (result) {
                  var users$p = Curry._1(CustomHooks.QueryUser.Buyer.users_decode, result);
                  if (users$p.TAG !== /* Ok */0) {
                    return Promise.reject(Js_exn.raiseError("유저 검색 에러"));
                  }
                  var users$p$1 = users$p._0;
                  if (users$p$1.data.length === 0) {
                    return Promise.reject(Js_exn.raiseError("유저 검색 에러"));
                  }
                  var users$p$p = Garter_Array.map(users$p$1.data, (function (user) {
                          return /* Selected */{
                                  value: String(user.id),
                                  label: "" + user.name + "(" + Belt_Option.getWithDefault(Belt_Option.flatMap(Helper.PhoneNumber.parse(user.phone), Helper.PhoneNumber.format), user.phone) + ")"
                                };
                        }));
                  return Promise.resolve(users$p$p);
                }), __x);
  };
  var handleChangeUser = function (selection) {
    setSelectedUser(function (param) {
          return selection;
        });
  };
  return React.createElement(Authorization.Admin.make, {
              children: React.createElement("div", {
                    className: "py-8 px-4 bg-div-shape-L1 min-h-screen"
                  }, React.createElement("header", {
                        className: "md:flex md:items-baseline pb-0"
                      }, React.createElement("h1", {
                            className: "font-bold text-xl"
                          }, "주문서 등록"), React.createElement("span", {
                            className: "md:ml-2 text-sm text-primary"
                          }, "바이어를 검색한 후, 대신 주문서를 업로드할 수 있습니다.")), React.createElement("div", {
                        className: "flex flex-row bg-div-shape-L1"
                      }, React.createElement("div", {
                            className: "flex-1 mr-4 max-w-lg mt-4 shadow-gl h-full bg-white rounded"
                          }, React.createElement("div", {
                                className: "p-7 pb-4"
                              }, React.createElement("h3", {
                                    className: "font-bold text-lg mb-4"
                                  }, "1. 바이어 선택"), React.createElement("div", {
                                    className: "flex"
                                  }, React.createElement("div", {
                                        className: "flex-auto relative"
                                      }, React.createElement(Async, {
                                            value: selectedUser,
                                            cacheOptions: true,
                                            defaultOptions: false,
                                            loadOptions: handleLoadOptions,
                                            onChange: handleChangeUser,
                                            placeholder: "바이어 검색",
                                            noOptionsMessage: (function (param) {
                                                return "검색 결과가 없습니다.";
                                              }),
                                            isClearable: true
                                          })))), React.createElement(AddOrders_Admin$Upload, {
                                userId: selectedUserId
                              })), React.createElement("div", {
                            className: "flex-1 max-w-lg shadow-gl mt-4 p-7 bg-white rounded"
                          }, React.createElement("div", {
                                className: "pb-4"
                              }, React.createElement("h4", {
                                    className: "text-xl font-bold"
                                  }, "주문서 업로드 결과"), React.createElement(UploadStatus_Buyer.make, {
                                    kind: /* Admin */2,
                                    onChangeLatestUpload: (function (param) {
                                        console.log("업로드 처리 완료");
                                      }),
                                    uploadType: /* Order */0
                                  })), React.createElement("div", {
                                className: "pt-4"
                              }, React.createElement("section", undefined, React.createElement("h4", {
                                        className: "text-sm text-gray-500 font-semibold"
                                      }, "주문서 업로드 사용설명서"), React.createElement("p", {
                                        className: "mt-5 text-sm text-gray-400"
                                      }, "주의: 송장번호 일괄 업로드가 완료되기 전까지 일부 기능을 사용하실 수 없습니다. 업로드하신 엑셀 내용에 따라 정상적으로 처리되지 않는 경우가 있을 수 있습니다. 처리결과를 반드시 확인해 주시기 바랍니다. 주문서 업로드는 상황에 따라 5분까지 소요될 수 있습니다. 처리 결과를 필히 확인해주시기 바랍니다")))))),
              title: "관리자 주문서 등록"
            });
}

var UploadFile;

var make = AddOrders_Admin;

export {
  UploadFile ,
  Upload ,
  make ,
}
/* Env Not a pure module */
