// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as Authorization from "../../utils/Authorization.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Product_Parser from "../../utils/Product_Parser.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as RescriptReactErrorBoundary from "@rescript/react/src/RescriptReactErrorBoundary.mjs";
import * as UpdateProduct_Detail_Admin from "../../components/UpdateProduct_Detail_Admin.mjs";
import * as UpdateProductAdminQuery_graphql from "../../__generated__/UpdateProductAdminQuery_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(UpdateProductAdminQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(UpdateProductAdminQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(UpdateProductAdminQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(UpdateProductAdminQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, UpdateProductAdminQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, UpdateProductAdminQuery_graphql.node, UpdateProductAdminQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: UpdateProductAdminQuery_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, UpdateProductAdminQuery_graphql.node, UpdateProductAdminQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(UpdateProductAdminQuery_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(UpdateProductAdminQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(UpdateProductAdminQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(UpdateProductAdminQuery_graphql.node, UpdateProductAdminQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query = {
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function UpdateProduct_Admin$Detail(Props) {
  var productId = Props.productId;
  var queryData = use({
        productId: productId
      }, /* StoreAndNetwork */2, undefined, undefined, undefined);
  var node = queryData.node;
  if (node === undefined) {
    return React.createElement("div", undefined, "상품 정보가 존재하지 않습니다.");
  }
  var productType = Product_Parser.Type.decode(node.__typename);
  if (productType !== undefined) {
    return React.createElement(UpdateProduct_Detail_Admin.make, {
                query: node.fragmentRefs,
                productType: productType
              });
  } else {
    return React.createElement("div", undefined, "지원하지 않은 상품 타입입니다.");
  }
}

var Detail = {
  make: UpdateProduct_Admin$Detail
};

function UpdateProduct_Admin(Props) {
  var router = Router.useRouter();
  var pid = Js_dict.get(router.query, "pid");
  return React.createElement(Authorization.Admin.make, {
              children: React.createElement(RescriptReactErrorBoundary.make, {
                    children: React.createElement(React.Suspense, {
                          children: pid !== undefined ? React.createElement(UpdateProduct_Admin$Detail, {
                                  productId: pid
                                }) : React.createElement("div", undefined, "상품 정보가 존재하지 않습니다."),
                          fallback: React.createElement("div", undefined, "로딩 중..")
                        }),
                    fallback: (function (param) {
                        return React.createElement("div", undefined, "에러 발생");
                      })
                  }),
              title: "상품 조회/수정"
            });
}

var make = UpdateProduct_Admin;

export {
  Query ,
  Detail ,
  make ,
}
/* react Not a pure module */
