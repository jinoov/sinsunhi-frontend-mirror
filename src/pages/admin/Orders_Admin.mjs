// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../constants/Env.mjs";
import * as Swr from "swr";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as Period from "../../utils/Period.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Converter from "../../utils/Converter.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as FetchHelper from "../../utils/FetchHelper.mjs";
import * as Order_Admin from "../../components/Order_Admin.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Authorization from "../../utils/Authorization.mjs";
import * as Select_Sorted from "../../components/Select_Sorted.mjs";
import * as Belt_SetString from "rescript/lib/es6/belt_SetString.js";
import * as IconArrowSelect from "../../components/svgs/IconArrowSelect.mjs";
import * as Select_CountPerPage from "../../components/Select_CountPerPage.mjs";
import * as Summary_Order_Admin from "../../components/Summary_Order_Admin.mjs";
import * as Order_List_Admin_Buyer from "../../components/Order_List_Admin_Buyer.mjs";
import * as Excel_Download_Request_Button from "../../components/Excel_Download_Request_Button.mjs";

function data_encode(v) {
  return Js_dict.fromArray([
              [
                "total-count",
                Spice.intToJson(v.totalCount)
              ],
              [
                "update-count",
                Spice.intToJson(v.updateCount)
              ]
            ]);
}

function data_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var totalCount = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-count"), null));
  if (totalCount.TAG === /* Ok */0) {
    var updateCount = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "update-count"), null));
    if (updateCount.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                totalCount: totalCount._0,
                updateCount: updateCount._0
              }
            };
    }
    var e = updateCount._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".update-count" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = totalCount._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".total-count" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function response_encode(v) {
  return Js_dict.fromArray([
              [
                "data",
                data_encode(v.data)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ]
            ]);
}

function response_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = data_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
    if (message.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                data: data._0,
                message: message._0
              }
            };
    }
    var e = message._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".message" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function refundReason_encode(v) {
  if (v) {
    return "defective-product";
  } else {
    return "delivery-delayed";
  }
}

function refundReason_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("delivery-delayed" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DeliveryDelayed */0
          };
  } else if ("defective-product" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DefectiveProduct */1
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function displayRefundReason(rr) {
  if (rr) {
    return "상품불량";
  } else {
    return "배송지연";
  }
}

function Orders_Admin$Orders(Props) {
  var router = Router.useRouter();
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var status = CustomHooks.OrdersAdmin.use(new URLSearchParams(router.query).toString());
  var match$1 = React.useState(function () {
        
      });
  var setSelectedOrders = match$1[1];
  var selectedOrders = match$1[0];
  var match$2 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowCancelConfirm = match$2[1];
  var match$3 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowNothingToCancel = match$3[1];
  var match$4 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowCancelSuccess = match$4[1];
  var match$5 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowCancelError = match$5[1];
  var match$6 = React.useState(function () {
        
      });
  var setSuccessResultCancel = match$6[1];
  var match$7 = React.useState(function () {
        return /* DeliveryDelayed */0;
      });
  var setRefundReason = match$7[1];
  var refundReason = match$7[0];
  var match$8 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowNothingToRefund = match$8[1];
  var match$9 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowRefundConfirm = match$9[1];
  var match$10 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowRefundSuccess = match$10[1];
  var match$11 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowRefundError = match$11[1];
  var match$12 = React.useState(function () {
        
      });
  var setSuccessResultRefund = match$12[1];
  var match$13 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowCompleteConfirm = match$13[1];
  var match$14 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowNothingToComplete = match$14[1];
  var match$15 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowCompleteSuccess = match$15[1];
  var match$16 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowCompleteError = match$16[1];
  var match$17 = React.useState(function () {
        
      });
  var setSuccessResultComplete = match$17[1];
  React.useEffect((function () {
          setSelectedOrders(function (param) {
                
              });
          
        }), [router.query]);
  var count;
  if (typeof status === "number") {
    count = "-";
  } else if (status.TAG === /* Loaded */0) {
    var orders$p = CustomHooks.OrdersAdmin.orders_decode(status._0);
    count = orders$p.TAG === /* Ok */0 ? String(orders$p._0.count) : "-";
  } else {
    count = "-";
  }
  var handleOnCheckOrder = function (orderProductNo, e) {
    var checked = e.target.checked;
    if (checked) {
      var newOrders = Belt_SetString.add(selectedOrders, orderProductNo);
      return setSelectedOrders(function (param) {
                  return newOrders;
                });
    }
    var newOrders$1 = Belt_SetString.remove(selectedOrders, orderProductNo);
    return setSelectedOrders(function (param) {
                return newOrders$1;
              });
  };
  var check = function (orderProductNo) {
    return Belt_SetString.has(selectedOrders, orderProductNo);
  };
  var handleCheckAll = function (e) {
    var checked = e.target.checked;
    if (!checked) {
      return setSelectedOrders(function (param) {
                  
                });
    }
    if (typeof status === "number") {
      return ;
    }
    if (status.TAG !== /* Loaded */0) {
      return ;
    }
    var orders$p = CustomHooks.OrdersAdmin.orders_decode(status._0);
    var allOrderProductNo;
    allOrderProductNo = orders$p.TAG === /* Ok */0 ? Belt_SetString.fromArray(Garter_Array.map(Garter_Array.keep(orders$p._0.data, Order_Admin.isCheckableOrder), (function (order) {
                  return order.orderProductNo;
                }))) : undefined;
    return setSelectedOrders(function (param) {
                return allOrderProductNo;
              });
  };
  var countOfChecked = Belt_SetString.size(selectedOrders);
  var cancelOrder = function (orders) {
    setShowCancelConfirm(function (param) {
          return /* Hide */1;
        });
    Belt_Option.map(JSON.stringify({
              "order-product-numbers": orders
            }), (function (body) {
            return FetchHelper.requestWithRetry(FetchHelper.postWithToken, Env.restApiUrl + "/order/cancel", body, 3, (function (res) {
                          var res$p = response_decode(res);
                          var result;
                          if (res$p.TAG === /* Ok */0) {
                            var res$p$1 = res$p._0;
                            result = [
                              res$p$1.data.totalCount,
                              res$p$1.data.updateCount
                            ];
                          } else {
                            result = undefined;
                          }
                          setSuccessResultCancel(function (param) {
                                return result;
                              });
                          setShowCancelSuccess(function (param) {
                                return /* Show */0;
                              });
                          setSelectedOrders(function (param) {
                                
                              });
                          mutate(Env.restApiUrl + "/order?" + new URLSearchParams(router.query).toString(), undefined, undefined);
                          return mutate(Env.restApiUrl + "/order/summary?" + Period.currentPeriod(router), undefined, undefined);
                        }), (function (param) {
                          return setShowCancelError(function (param) {
                                      return /* Show */0;
                                    });
                        }));
          }));
    
  };
  var handleOnChangeRefundReason = function (e) {
    var value = e.target.value;
    var refundReason = refundReason_decode(value);
    if (refundReason.TAG !== /* Ok */0) {
      return setRefundReason(function (param) {
                  return /* DeliveryDelayed */0;
                });
    }
    var refundReason$1 = refundReason._0;
    return setRefundReason(function (param) {
                return refundReason$1;
              });
  };
  var match$18 = Belt_Option.flatMap(Js_dict.get(router.query, "status"), (function (status$p) {
          var status$p$p = CustomHooks.OrdersAdmin.status_decode(status$p);
          if (status$p$p.TAG === /* Ok */0) {
            return status$p$p._0;
          }
          
        }));
  var tmp;
  var exit = 0;
  if (match$18 !== undefined) {
    switch (match$18) {
      case /* COMPLETE */4 :
          tmp = React.createElement("button", {
                className: "h-9 px-3 text-black-gl bg-gray-button-gl rounded-lg flex items-center mr-2",
                onClick: (function (param) {
                    if (countOfChecked > 0) {
                      return setShowRefundConfirm(function (param) {
                                  return /* Show */0;
                                });
                    } else {
                      return setShowNothingToRefund(function (param) {
                                  return /* Show */0;
                                });
                    }
                  })
              }, "선택 항목 환불 처리");
          break;
      case /* CREATE */0 :
      case /* PACKING */1 :
      case /* DEPARTURE */2 :
      case /* ERROR */6 :
          exit = 1;
          break;
      case /* DELIVERING */3 :
      case /* CANCEL */5 :
      case /* REFUND */7 :
          tmp = null;
          break;
      case /* NEGOTIATING */8 :
          tmp = React.createElement(React.Fragment, undefined, React.createElement("button", {
                    className: "h-9 px-3 text-primary bg-primary-light rounded-lg flex items-center mr-2 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-primary-light focus:ring-opacity-100",
                    onClick: (function (param) {
                        if (countOfChecked > 0) {
                          return setShowCompleteConfirm(function (param) {
                                      return /* Show */0;
                                    });
                        } else {
                          return setShowNothingToComplete(function (param) {
                                      return /* Show */0;
                                    });
                        }
                      })
                  }, "배송완료 처리"), React.createElement("button", {
                    className: "h-9 px-3 text-enabled-L1 bg-div-shape-L1 rounded-lg flex items-center mr-2 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-div-shape-L1 focus:ring-opacity-100",
                    onClick: (function (param) {
                        if (countOfChecked > 0) {
                          return setShowCancelConfirm(function (param) {
                                      return /* Show */0;
                                    });
                        } else {
                          return setShowNothingToCancel(function (param) {
                                      return /* Show */0;
                                    });
                        }
                      })
                  }, "주문 취소"));
          break;
      
    }
  } else {
    tmp = null;
  }
  if (exit === 1) {
    tmp = React.createElement("button", {
          className: "h-9 px-3 text-enabled-L1 bg-div-shape-L1 rounded-lg flex items-center mr-2 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-div-shape-L1 focus:ring-opacity-100",
          onClick: (function (param) {
              if (countOfChecked > 0) {
                return setShowCancelConfirm(function (param) {
                            return /* Show */0;
                          });
              } else {
                return setShowNothingToCancel(function (param) {
                            return /* Show */0;
                          });
              }
            })
        }, "주문 취소");
  }
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "max-w-gnb-panel overflow-auto overflow-x-scroll bg-div-shape-L1 min-h-screen"
                }, React.createElement("header", {
                      className: "flex items-baseline p-7 pb-0"
                    }, React.createElement("h1", {
                          className: "text-text-L1 text-xl font-bold"
                        }, "주문서 조회")), React.createElement(Summary_Order_Admin.make, {}), React.createElement("div", {
                      className: "p-7 m-4 shadow-gl overflow-auto overflow-x-scroll bg-white rounded"
                    }, React.createElement("div", {
                          className: "md:flex md:justify-between pb-4"
                        }, React.createElement("div", {
                              className: "flex flex-auto justify-between"
                            }, React.createElement("h3", {
                                  className: "font-bold"
                                }, "주문내역", React.createElement("span", {
                                      className: "ml-1 text-green-gl font-normal"
                                    }, count + "건")), React.createElement("div", {
                                  className: "flex"
                                }, React.createElement(Select_CountPerPage.make, {
                                      className: "mr-2"
                                    }), React.createElement(Select_Sorted.make, {
                                      className: "mr-2"
                                    }), tmp, React.createElement(Excel_Download_Request_Button.make, {
                                      userType: /* Admin */2,
                                      requestUrl: "/order/request-excel/buyer"
                                    })))), React.createElement(Order_List_Admin_Buyer.make, {
                          status: status,
                          check: check,
                          onCheckOrder: handleOnCheckOrder,
                          onCheckAll: handleCheckAll,
                          countOfChecked: countOfChecked,
                          onClickCancel: cancelOrder
                        }))), React.createElement(Dialog.make, {
                  isShow: match$2[0],
                  children: React.createElement("p", {
                        className: "text-black-gl text-center whitespace-pre-wrap"
                      }, React.createElement("span", {
                            className: "font-bold"
                          }, "선택한 " + String(countOfChecked) + "개"), "의 주문을 취소하시겠습니까?"),
                  onCancel: (function (param) {
                      return setShowCancelConfirm(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  onConfirm: (function (param) {
                      return cancelOrder(Belt_SetString.toArray(selectedOrders));
                    }),
                  textOnCancel: "취소",
                  textOnConfirm: "확인"
                }), React.createElement(Dialog.make, {
                  isShow: match$9[0],
                  children: React.createElement("div", {
                        className: "text-black-gl text-center whitespace-pre-wrap"
                      }, React.createElement("h3", undefined, React.createElement("span", {
                                className: "font-bold"
                              }, "선택한 " + String(countOfChecked) + "개"), "의 주문을 환불 처리하시겠습니까?"), React.createElement("ul", {
                            className: "list-disc list-inside text-left mt-4"
                          }, React.createElement("li", {
                                className: "py-1"
                              }, "자동환불이 되지 않습니다. 카드사, 무통장 입금 환불 완료 후 환불처리를 진행해주세요."), React.createElement("li", {
                                className: "py-1"
                              }, "이후 수정이 어렵습니다. 신중히 처리 부탁드립니다.")), React.createElement("span", {
                            className: "block text-left mt-8 mb-1"
                          }, "환불사유"), React.createElement("span", {
                            className: "block"
                          }, React.createElement("label", {
                                className: "flex items-center relative"
                              }, React.createElement("span", {
                                    className: "flex-1 flex items-center border border-border-default-L1 rounded-lg h-12 px-3 text-enabled-L1"
                                  }, refundReason ? "상품불량" : "배송지연"), React.createElement("span", {
                                    className: "absolute right-2"
                                  }, React.createElement(IconArrowSelect.make, {
                                        height: "24",
                                        width: "24",
                                        fill: "#121212"
                                      })), React.createElement("select", {
                                    className: "block w-full h-full absolute top-0 opacity-0",
                                    value: Converter.getStringFromJsonWithDefault(refundReason ? "defective-product" : "delivery-delayed", ""),
                                    onChange: handleOnChangeRefundReason
                                  }, Garter_Array.map([
                                        /* DeliveryDelayed */0,
                                        /* DefectiveProduct */1
                                      ], (function (rr) {
                                          return React.createElement("option", {
                                                      key: Converter.getStringFromJsonWithDefault(rr ? "defective-product" : "delivery-delayed", ""),
                                                      value: Converter.getStringFromJsonWithDefault(rr ? "defective-product" : "delivery-delayed", "")
                                                    }, rr ? "상품불량" : "배송지연");
                                        })))))),
                  onCancel: (function (param) {
                      return setShowRefundConfirm(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  onConfirm: (function (param) {
                      var orders = Belt_SetString.toArray(selectedOrders);
                      setShowRefundConfirm(function (param) {
                            return /* Hide */1;
                          });
                      Belt_Option.map(JSON.stringify({
                                "order-product-numbers": orders,
                                reason: refundReason ? "defective-product" : "delivery-delayed"
                              }), (function (body) {
                              return FetchHelper.requestWithRetry(FetchHelper.postWithToken, Env.restApiUrl + "/order/refund", body, 3, (function (res) {
                                            var res$p = response_decode(res);
                                            var result;
                                            if (res$p.TAG === /* Ok */0) {
                                              var res$p$1 = res$p._0;
                                              result = [
                                                res$p$1.data.totalCount,
                                                res$p$1.data.updateCount
                                              ];
                                            } else {
                                              result = undefined;
                                            }
                                            setSuccessResultRefund(function (param) {
                                                  return result;
                                                });
                                            setShowRefundSuccess(function (param) {
                                                  return /* Show */0;
                                                });
                                            setSelectedOrders(function (param) {
                                                  
                                                });
                                            mutate(Env.restApiUrl + "/order?" + new URLSearchParams(router.query).toString(), undefined, undefined);
                                            return mutate(Env.restApiUrl + "/order/summary?" + Period.currentPeriod(router), undefined, undefined);
                                          }), (function (param) {
                                            return setShowCancelError(function (param) {
                                                        return /* Show */0;
                                                      });
                                          }));
                            }));
                      
                    }),
                  textOnCancel: "취소",
                  textOnConfirm: "확인"
                }), React.createElement(Dialog.make, {
                  isShow: match$13[0],
                  children: React.createElement("p", {
                        className: "text-black-gl text-center whitespace-pre-wrap"
                      }, React.createElement("span", {
                            className: "font-bold"
                          }, "선택한 " + String(countOfChecked) + "개"), "의 주문을 배송완료처리 하시겠습니까?"),
                  onCancel: (function (param) {
                      return setShowCompleteConfirm(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  onConfirm: (function (param) {
                      var orders = Belt_SetString.toArray(selectedOrders);
                      setShowCompleteConfirm(function (param) {
                            return /* Hide */1;
                          });
                      Belt_Option.map(JSON.stringify({
                                "order-product-numbers": orders
                              }), (function (body) {
                              return FetchHelper.requestWithRetry(FetchHelper.postWithToken, Env.restApiUrl + "/order/complete", body, 3, (function (res) {
                                            var res$p = response_decode(res);
                                            var result;
                                            if (res$p.TAG === /* Ok */0) {
                                              var res$p$1 = res$p._0;
                                              result = [
                                                res$p$1.data.totalCount,
                                                res$p$1.data.updateCount
                                              ];
                                            } else {
                                              result = undefined;
                                            }
                                            setSuccessResultComplete(function (param) {
                                                  return result;
                                                });
                                            setShowCompleteSuccess(function (param) {
                                                  return /* Show */0;
                                                });
                                            setSelectedOrders(function (param) {
                                                  
                                                });
                                            mutate(Env.restApiUrl + "/order?" + new URLSearchParams(router.query).toString(), undefined, undefined);
                                            return mutate(Env.restApiUrl + "/order/summary?" + Period.currentPeriod(router), undefined, undefined);
                                          }), (function (param) {
                                            return setShowCompleteError(function (param) {
                                                        return /* Show */0;
                                                      });
                                          }));
                            }));
                      
                    }),
                  textOnCancel: "취소",
                  textOnConfirm: "확인"
                }), React.createElement(Dialog.make, {
                  isShow: match$3[0],
                  children: React.createElement("p", {
                        className: "text-black-gl text-center whitespace-pre-wrap"
                      }, "취소할 주문을 선택해주세요."),
                  onCancel: (function (param) {
                      return setShowNothingToCancel(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  textOnCancel: "확인"
                }), React.createElement(Dialog.make, {
                  isShow: match$8[0],
                  children: React.createElement("p", {
                        className: "text-black-gl text-center whitespace-pre-wrap"
                      }, "환불 처리할 주문을 선택해주세요."),
                  onCancel: (function (param) {
                      return setShowNothingToRefund(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  textOnCancel: "확인"
                }), React.createElement(Dialog.make, {
                  isShow: match$14[0],
                  children: React.createElement("p", {
                        className: "text-black-gl text-center whitespace-pre-wrap"
                      }, "배송완료할 주문을 선택해주세요."),
                  onCancel: (function (param) {
                      return setShowNothingToComplete(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  textOnCancel: "확인"
                }), React.createElement(Dialog.make, {
                  isShow: match$4[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, Belt_Option.mapWithDefault(match$6[0], "주문 취소에 성공하였습니다.", (function (param) {
                              var updateCount = param[1];
                              var totalCount = param[0];
                              if ((totalCount - updateCount | 0) > 0) {
                                return React.createElement(React.Fragment, undefined, React.createElement("span", {
                                                className: "font-bold"
                                              }, String(totalCount) + "개 중 " + String(updateCount) + "개가 정상적으로 주문취소 처리되었습니다."), "\n\n" + String(totalCount - updateCount | 0) + "개의 주문은 상품준비중 등의 이유로 주문취소 처리되지 못했습니다");
                              } else {
                                return String(totalCount) + "개의 주문이 정상적으로 주문취소 처리되었습니다.";
                              }
                            }))),
                  onConfirm: (function (param) {
                      return setShowCancelSuccess(function (param) {
                                  return /* Hide */1;
                                });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$5[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "주문 취소에 실패하였습니다.\n다시 시도하시기 바랍니다."),
                  onConfirm: (function (param) {
                      return setShowCancelError(function (param) {
                                  return /* Hide */1;
                                });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$10[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, Belt_Option.mapWithDefault(match$12[0], "주문 환불 처리에 성공하였습니다.", (function (param) {
                              var updateCount = param[1];
                              var totalCount = param[0];
                              if ((totalCount - updateCount | 0) > 0) {
                                return React.createElement(React.Fragment, undefined, React.createElement("span", {
                                                className: "font-bold"
                                              }, String(totalCount) + "개 중 " + String(updateCount) + "개가 정상적으로 환불 처리되었습니다."), "\n\n" + String(totalCount - updateCount | 0) + "개의 주문은 상품준비중 등의 이유로 환불 처리되지 못했습니다");
                              } else {
                                return String(totalCount) + "개의 주문이 정상적으로 환불 처리되었습니다.";
                              }
                            }))),
                  onConfirm: (function (param) {
                      return setShowRefundSuccess(function (param) {
                                  return /* Hide */1;
                                });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$11[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "환불 처리에 실패하였습니다.\n다시 시도하시기 바랍니다."),
                  onConfirm: (function (param) {
                      return setShowRefundError(function (param) {
                                  return /* Hide */1;
                                });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$15[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, Belt_Option.mapWithDefault(match$17[0], "배송완료 처리에 성공하였습니다.", (function (param) {
                              var updateCount = param[1];
                              var totalCount = param[0];
                              if ((totalCount - updateCount | 0) > 0) {
                                return React.createElement(React.Fragment, undefined, React.createElement("span", {
                                                className: "font-bold"
                                              }, String(totalCount) + "개 중 " + String(updateCount) + "개가 정상적으로 배송완료 처리되었습니다."), "\n\n" + String(totalCount - updateCount | 0) + "개의 주문은 상품준비중 등의 이유로 배송완료 처리되지 못했습니다");
                              } else {
                                return String(totalCount) + "개의 주문이 정상적으로 배송완료 처리되었습니다.";
                              }
                            }))),
                  onConfirm: (function (param) {
                      return setShowCompleteSuccess(function (param) {
                                  return /* Hide */1;
                                });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$16[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "배송완료 처리에 실패하였습니다.\n다시 시도하시기 바랍니다."),
                  onConfirm: (function (param) {
                      return setShowCompleteError(function (param) {
                                  return /* Hide */1;
                                });
                    })
                }));
}

var Orders = {
  make: Orders_Admin$Orders
};

function Orders_Admin(Props) {
  return React.createElement(Authorization.Admin.make, {
              children: React.createElement(Orders_Admin$Orders, {}),
              title: "관리자 주문서 조회"
            });
}

var List;

var make = Orders_Admin;

export {
  List ,
  data_encode ,
  data_decode ,
  response_encode ,
  response_decode ,
  refundReason_encode ,
  refundReason_decode ,
  displayRefundReason ,
  Orders ,
  make ,
  
}
/* Env Not a pure module */
