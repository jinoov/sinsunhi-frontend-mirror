// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as RelayEnv from "../../constants/RelayEnv.mjs";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as Authorization from "../../utils/Authorization.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import Format from "date-fns/format";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as RescriptReactErrorBoundary from "@rescript/react/src/RescriptReactErrorBoundary.mjs";
import * as BulkSale_Producers_List_Admin from "../../components/BulkSale_Producers_List_Admin.mjs";
import * as Summary_BulkSale_Producers_Admin from "../../components/Summary_BulkSale_Producers_Admin.mjs";
import * as BulkSaleProducersAdminQuery_graphql from "../../__generated__/BulkSaleProducersAdminQuery_graphql.mjs";
import * as BulkSaleProducersAdminTotalSummaryFragment_graphql from "../../__generated__/BulkSaleProducersAdminTotalSummaryFragment_graphql.mjs";
import * as BulkSaleProducersAdminSearchSummaryFragment_graphql from "../../__generated__/BulkSaleProducersAdminSearchSummaryFragment_graphql.mjs";
import * as BulkSaleProducersAdminTotalSummaryRefetchQuery_graphql from "../../__generated__/BulkSaleProducersAdminTotalSummaryRefetchQuery_graphql.mjs";
import * as BulkSaleProducersAdminSearchSummaryRefetchQuery_graphql from "../../__generated__/BulkSaleProducersAdminSearchSummaryRefetchQuery_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(BulkSaleProducersAdminQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(BulkSaleProducersAdminQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProducersAdminQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(BulkSaleProducersAdminQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, BulkSaleProducersAdminQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, BulkSaleProducersAdminQuery_graphql.node, BulkSaleProducersAdminQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: BulkSaleProducersAdminQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, BulkSaleProducersAdminQuery_graphql.node, BulkSaleProducersAdminQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(BulkSaleProducersAdminQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(BulkSaleProducersAdminQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProducersAdminQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(BulkSaleProducersAdminQuery_graphql.node, BulkSaleProducersAdminQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_bulkSaleApplicationProgress_decode = BulkSaleProducersAdminQuery_graphql.Utils.bulkSaleApplicationProgress_decode;

var Query_bulkSaleApplicationProgress_fromString = BulkSaleProducersAdminQuery_graphql.Utils.bulkSaleApplicationProgress_fromString;

var Query_makeVariables = BulkSaleProducersAdminQuery_graphql.Utils.makeVariables;

var Query = {
  bulkSaleApplicationProgress_decode: Query_bulkSaleApplicationProgress_decode,
  bulkSaleApplicationProgress_fromString: Query_bulkSaleApplicationProgress_fromString,
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function internal_makeRefetchableFnOpts(fetchPolicy, onComplete, param) {
  var tmp = {};
  var tmp$1 = RescriptRelay.mapFetchPolicy(fetchPolicy);
  if (tmp$1 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = RescriptRelay_Internal.internal_nullableToOptionalExnHandler(onComplete);
  if (tmp$2 !== undefined) {
    tmp.onComplete = Caml_option.valFromOption(tmp$2);
  }
  return tmp;
}

function useRefetchable(fRef) {
  var match = Hooks.useRefetchableFragment(BulkSaleProducersAdminTotalSummaryFragment_graphql.node, fRef);
  var refetchFn = match[1];
  var data = RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProducersAdminTotalSummaryFragment_graphql.Internal.convertFragment, match[0]);
  return [
          data,
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return Curry._2(refetchFn, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(BulkSaleProducersAdminTotalSummaryRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [refetchFn])
        ];
}

function use$1(fRef) {
  var data = Hooks.useFragment(BulkSaleProducersAdminTotalSummaryFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProducersAdminTotalSummaryFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(BulkSaleProducersAdminTotalSummaryFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return BulkSaleProducersAdminTotalSummaryFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var makeRefetchVariables = BulkSaleProducersAdminTotalSummaryRefetchQuery_graphql.Types.makeRefetchVariables;

var Total = {
  Types: undefined,
  internal_makeRefetchableFnOpts: internal_makeRefetchableFnOpts,
  useRefetchable: useRefetchable,
  use: use$1,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables
};

function internal_makeRefetchableFnOpts$1(fetchPolicy, onComplete, param) {
  var tmp = {};
  var tmp$1 = RescriptRelay.mapFetchPolicy(fetchPolicy);
  if (tmp$1 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = RescriptRelay_Internal.internal_nullableToOptionalExnHandler(onComplete);
  if (tmp$2 !== undefined) {
    tmp.onComplete = Caml_option.valFromOption(tmp$2);
  }
  return tmp;
}

function useRefetchable$1(fRef) {
  var match = Hooks.useRefetchableFragment(BulkSaleProducersAdminSearchSummaryFragment_graphql.node, fRef);
  var refetchFn = match[1];
  var data = RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProducersAdminSearchSummaryFragment_graphql.Internal.convertFragment, match[0]);
  return [
          data,
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return Curry._2(refetchFn, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(BulkSaleProducersAdminSearchSummaryRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts$1(param$1, param$2, undefined));
                  };
                }), [refetchFn])
        ];
}

function use$2(fRef) {
  var data = Hooks.useFragment(BulkSaleProducersAdminSearchSummaryFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProducersAdminSearchSummaryFragment_graphql.Internal.convertFragment, data);
}

function useOpt$1(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(BulkSaleProducersAdminSearchSummaryFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return BulkSaleProducersAdminSearchSummaryFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var makeRefetchVariables$1 = BulkSaleProducersAdminSearchSummaryRefetchQuery_graphql.Types.makeRefetchVariables;

var Search = {
  Types: undefined,
  internal_makeRefetchableFnOpts: internal_makeRefetchableFnOpts$1,
  useRefetchable: useRefetchable$1,
  use: use$2,
  useOpt: useOpt$1,
  makeRefetchVariables: makeRefetchVariables$1
};

var Fragment = {
  Total: Total,
  Search: Search
};

function getRouterQuery(router) {
  var progresses = Belt_Option.flatMap(Js_dict.get(router.query, "status"), (function (s) {
          if (s === "APPLIED") {
            return ["APPLIED"];
          } else if (s === "UNDER_DISCUSSION") {
            return ["UNDER_DISCUSSION"];
          } else if (s === "ON_SITE_MEETING_SCHEDULED") {
            return ["ON_SITE_MEETING_SCHEDULED"];
          } else if (s === "SAMPLE_REQUESTED") {
            return ["SAMPLE_REQUESTED"];
          } else if (s === "SAMPLE_REVIEWING") {
            return ["SAMPLE_REVIEWING"];
          } else if (s === "REJECTED") {
            return ["REJECTED"];
          } else if (s === "CONFIRMED") {
            return ["CONFIRMED"];
          } else if (s === "WITHDRAWN") {
            return ["WITHDRAWN"];
          } else {
            return ;
          }
        }));
  var applicantName = Belt_Option.flatMap(Js_dict.get(router.query, "applicant-name"), (function (x) {
          if (x === "") {
            return ;
          } else {
            return x;
          }
        }));
  var businessName = Belt_Option.flatMap(Js_dict.get(router.query, "business-name"), (function (x) {
          if (x === "") {
            return ;
          } else {
            return x;
          }
        }));
  var farmAddress = Belt_Option.flatMap(Js_dict.get(router.query, "farm-address"), (function (x) {
          if (x === "") {
            return ;
          } else {
            return x;
          }
        }));
  var cropId = Belt_Option.flatMap(Js_dict.get(router.query, "crop-id"), (function (x) {
          if (x === "") {
            return ;
          } else {
            return x;
          }
        }));
  var productCategoryId = Belt_Option.flatMap(Js_dict.get(router.query, "product-category-id"), (function (x) {
          if (x === "") {
            return ;
          } else {
            return x;
          }
        }));
  var appliedDateGe = Belt_Option.mapWithDefault(Js_dict.get(router.query, "from"), "20220124", (function (x) {
          if (x === "") {
            return "20220124";
          } else {
            return x;
          }
        }));
  var appliedDateLe = Belt_Option.mapWithDefault(Js_dict.get(router.query, "to"), Format(new Date(), "yyyyMMdd"), (function (x) {
          if (x === "") {
            return Format(new Date(), "yyyyMMdd");
          } else {
            return x;
          }
        }));
  var staffId = Belt_Option.flatMap(Js_dict.get(router.query, "staff-id"), (function (x) {
          if (x === "") {
            return ;
          } else {
            return x === "" ? [] : [x];
          }
        }));
  var isTest = Belt_Option.mapWithDefault(Js_dict.get(router.query, "is-test"), undefined, (function (x) {
          if (Pervasives.bool_of_string(x)) {
            return false;
          }
          
        }));
  return [
          progresses,
          applicantName,
          businessName,
          farmAddress,
          Belt_Option.mapWithDefault(productCategoryId, Belt_Option.mapWithDefault(cropId, undefined, (function (x) {
                      return [x];
                    })), (function (param) {
                  
                })),
          Belt_Option.mapWithDefault(productCategoryId, undefined, (function (x) {
                  return [x];
                })),
          appliedDateGe,
          appliedDateLe,
          staffId,
          isTest
        ];
}

function BulkSale_Producers_Admin$List(Props) {
  var query = Props.query;
  var refetchSummary = Props.refetchSummary;
  var statistics = Props.statistics;
  return React.createElement("div", {
              className: "p-7 m-4 shadow-gl overflow-auto overflow-x-scroll bg-white rounded"
            }, React.createElement(BulkSale_Producers_List_Admin.make, {
                  query: query,
                  refetchSummary: refetchSummary,
                  statistics: statistics
                }));
}

var List = {
  make: BulkSale_Producers_Admin$List
};

function BulkSale_Producers_Admin$SummaryAndList(Props) {
  var query = Props.query;
  var router = Router.useRouter();
  var match = useRefetchable(query);
  var refetchTotal = match[1];
  var match$1 = useRefetchable$1(query);
  var refetchSearch = match$1[1];
  var refetchSummary = function (param) {
    var match = getRouterQuery(router);
    var searchInput_applicantNameMatch = match[1];
    var searchInput_appliedDateGe = match[6];
    var searchInput_appliedDateLe = match[7];
    var searchInput_businessNameMatch = match[2];
    var searchInput_cropIds = match[4];
    var searchInput_farmAddressMatch = match[3];
    var searchInput_isTest = match[9];
    var searchInput_productCategoryIds = match[5];
    var searchInput_progresses = match[0];
    var searchInput_staffIds = match[8];
    var searchInput = {
      applicantNameMatch: searchInput_applicantNameMatch,
      appliedDateGe: searchInput_appliedDateGe,
      appliedDateLe: searchInput_appliedDateLe,
      businessNameMatch: searchInput_businessNameMatch,
      cropIds: searchInput_cropIds,
      farmAddressMatch: searchInput_farmAddressMatch,
      isTest: searchInput_isTest,
      productCategoryIds: searchInput_productCategoryIds,
      productCategoryNameMatch: undefined,
      progresses: searchInput_progresses,
      staffIds: searchInput_staffIds
    };
    Curry._4(refetchTotal, undefined, /* StoreAndNetwork */2, undefined, undefined);
    Curry._4(refetchSearch, searchInput, /* StoreAndNetwork */2, undefined, undefined);
    
  };
  return React.createElement(React.Fragment, undefined, React.createElement(Summary_BulkSale_Producers_Admin.make, {
                  summary: match[0].totalStatistics
                }), React.createElement(BulkSale_Producers_Admin$List, {
                  query: query,
                  refetchSummary: refetchSummary,
                  statistics: match$1[0].searchStatistics
                }));
}

var SummaryAndList = {
  make: BulkSale_Producers_Admin$SummaryAndList
};

function BulkSale_Producers_Admin$Skeleton(Props) {
  return React.createElement("div", {
              className: "max-w-gnb-panel overflow-auto overflow-x-scroll bg-div-shape-L1 min-h-gnb-admin"
            }, React.createElement("header", {
                  className: "flex items-baseline p-7 pb-0"
                }, React.createElement("h1", {
                      className: "text-text-L1 text-xl font-bold"
                    }, "생산자 소싱 관리")), React.createElement(Summary_BulkSale_Producers_Admin.Skeleton.make, {}), React.createElement("div", {
                  className: "p-7 m-4 shadow-gl overflow-auto overflow-x-scroll bg-white rounded"
                }, React.createElement(BulkSale_Producers_List_Admin.Skeleton.make, {})));
}

var Skeleton = {
  make: BulkSale_Producers_Admin$Skeleton
};

function BulkSale_Producers_Admin$Producers(Props) {
  var router = Router.useRouter();
  var match = getRouterQuery(router);
  var searchInput_progresses = match[0];
  var searchInput_applicantNameMatch = match[1];
  var searchInput_businessNameMatch = match[2];
  var searchInput_farmAddressMatch = match[3];
  var searchInput_appliedDateGe = match[6];
  var searchInput_appliedDateLe = match[7];
  var searchInput_cropIds = match[4];
  var searchInput_productCategoryIds = match[5];
  var searchInput_isTest = match[9];
  var searchInput_staffIds = match[8];
  var searchInput = {
    progresses: searchInput_progresses,
    applicantNameMatch: searchInput_applicantNameMatch,
    businessNameMatch: searchInput_businessNameMatch,
    farmAddressMatch: searchInput_farmAddressMatch,
    appliedDateGe: searchInput_appliedDateGe,
    appliedDateLe: searchInput_appliedDateLe,
    cropIds: searchInput_cropIds,
    productCategoryIds: searchInput_productCategoryIds,
    productCategoryNameMatch: undefined,
    isTest: searchInput_isTest,
    staffIds: searchInput_staffIds
  };
  var queryData = use(searchInput, undefined, undefined, undefined, undefined);
  return React.createElement("div", {
              className: "max-w-gnb-panel overflow-auto overflow-x-scroll bg-div-shape-L1 min-h-gnb-admin"
            }, React.createElement("header", {
                  className: "flex items-baseline p-7 pb-0"
                }, React.createElement("h1", {
                      className: "text-text-L1 text-xl font-bold"
                    }, "생산자 소싱 관리")), React.createElement(BulkSale_Producers_Admin$SummaryAndList, {
                  query: queryData.fragmentRefs
                }));
}

var Producers = {
  make: BulkSale_Producers_Admin$Producers
};

function BulkSale_Producers_Admin(Props) {
  return React.createElement(Authorization.Admin.make, {
              children: React.createElement(RescriptRelay.Context.Provider.make, {
                    environment: RelayEnv.envFMBridge,
                    children: React.createElement(RescriptReactErrorBoundary.make, {
                          children: React.createElement(React.Suspense, {
                                children: React.createElement(BulkSale_Producers_Admin$Producers, {}),
                                fallback: React.createElement(BulkSale_Producers_Admin$Skeleton, {})
                              }),
                          fallback: (function (param) {
                              return React.createElement("div", undefined, "에러 발생");
                            })
                        })
                  }),
              title: "생산자 소싱 관리"
            });
}

var make = BulkSale_Producers_Admin;

export {
  Query ,
  Fragment ,
  getRouterQuery ,
  List ,
  SummaryAndList ,
  Skeleton ,
  Producers ,
  make ,
  
}
/* react Not a pure module */
