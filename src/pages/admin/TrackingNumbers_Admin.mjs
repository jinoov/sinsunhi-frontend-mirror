// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../constants/Env.mjs";
import * as Swr from "swr";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as Period from "../../utils/Period.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as FetchHelper from "../../utils/FetchHelper.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Authorization from "../../utils/Authorization.mjs";
import * as Select_Sorted from "../../components/Select_Sorted.mjs";
import * as Belt_SetString from "rescript/lib/es6/belt_SetString.js";
import * as Select_CountPerPage from "../../components/Select_CountPerPage.mjs";
import * as Summary_Delivery_Admin from "../../components/Summary_Delivery_Admin.mjs";
import * as Order_List_Admin_Seller from "../../components/Order_List_Admin_Seller.mjs";
import * as Excel_Download_Request_Button from "../../components/Excel_Download_Request_Button.mjs";

function data_encode(v) {
  return Js_dict.fromArray([
              [
                "total-count",
                Spice.intToJson(v.totalCount)
              ],
              [
                "update-count",
                Spice.intToJson(v.updateCount)
              ]
            ]);
}

function data_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var totalCount = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-count"), null));
  if (totalCount.TAG === /* Ok */0) {
    var updateCount = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "update-count"), null));
    if (updateCount.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                totalCount: totalCount._0,
                updateCount: updateCount._0
              }
            };
    }
    var e = updateCount._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".update-count" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = totalCount._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".total-count" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function response_encode(v) {
  return Js_dict.fromArray([
              [
                "data",
                data_encode(v.data)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ]
            ]);
}

function response_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = data_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
    if (message.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                data: data._0,
                message: message._0
              }
            };
    }
    var e = message._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".message" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function TrackingNumbers_Admin$Orders(Props) {
  var router = Router.useRouter();
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var status = CustomHooks.OrdersAdmin.use(new URLSearchParams(router.query).toString());
  var match$1 = React.useState(function () {
        
      });
  var setOrdersToPacking = match$1[1];
  var ordersToPacking = match$1[0];
  var match$2 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowPackingConfirm = match$2[1];
  var match$3 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowNothingToPacking = match$3[1];
  var match$4 = React.useState(function () {
        
      });
  var setSuccessResultPacking = match$4[1];
  var match$5 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowPackingSuccess = match$5[1];
  var match$6 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowPackingError = match$6[1];
  React.useEffect((function () {
          setOrdersToPacking(function (param) {
                
              });
        }), [router.query]);
  var count;
  if (typeof status === "number" || status.TAG !== /* Loaded */0) {
    count = "-";
  } else {
    var orders$p = CustomHooks.OrdersAdmin.orders_decode(status._0);
    count = orders$p.TAG === /* Ok */0 ? String(orders$p._0.count) : "-";
  }
  var handleOnCheckOrder = function (orderProductNo, e) {
    var checked = e.target.checked;
    if (checked) {
      var newOrdersToPacking = Belt_SetString.add(ordersToPacking, orderProductNo);
      return setOrdersToPacking(function (param) {
                  return newOrdersToPacking;
                });
    }
    var newOrdersToPacking$1 = Belt_SetString.remove(ordersToPacking, orderProductNo);
    setOrdersToPacking(function (param) {
          return newOrdersToPacking$1;
        });
  };
  var check = function (orderProductNo) {
    return Belt_SetString.has(ordersToPacking, orderProductNo);
  };
  var handleCheckAll = function (e) {
    var checked = e.target.checked;
    if (!checked) {
      return setOrdersToPacking(function (param) {
                  
                });
    }
    if (typeof status === "number") {
      return ;
    }
    if (status.TAG !== /* Loaded */0) {
      return ;
    }
    var orders$p = CustomHooks.Orders.orders_decode(status._0);
    var allOrderProductNo;
    allOrderProductNo = orders$p.TAG === /* Ok */0 ? Belt_SetString.fromArray(Garter_Array.map(Garter_Array.keep(orders$p._0.data, (function (order) {
                      return order.status === /* CREATE */0;
                    })), (function (order) {
                  return order.orderProductNo;
                }))) : undefined;
    setOrdersToPacking(function (param) {
          return allOrderProductNo;
        });
  };
  var countOfChecked = Belt_SetString.size(ordersToPacking);
  var changeOrdersToPacking = function (orders) {
    setShowPackingConfirm(function (param) {
          return /* Hide */1;
        });
    Belt_Option.map(JSON.stringify({
              "order-product-numbers": orders
            }), (function (body) {
            return FetchHelper.requestWithRetry(FetchHelper.postWithToken, "" + Env.restApiUrl + "/order/packing", body, 3, (function (res) {
                          var res$p = response_decode(res);
                          var result;
                          if (res$p.TAG === /* Ok */0) {
                            var res$p$1 = res$p._0;
                            result = [
                              res$p$1.data.totalCount,
                              res$p$1.data.updateCount
                            ];
                          } else {
                            result = undefined;
                          }
                          setSuccessResultPacking(function (param) {
                                return result;
                              });
                          setShowPackingSuccess(function (param) {
                                return /* Show */0;
                              });
                          setOrdersToPacking(function (param) {
                                
                              });
                          mutate("" + Env.restApiUrl + "/order?" + new URLSearchParams(router.query).toString() + "", undefined, undefined);
                          mutate("" + Env.restApiUrl + "/order/summary?" + Period.currentPeriod(router) + "", undefined, undefined);
                        }), (function (param) {
                          setShowPackingError(function (param) {
                                return /* Show */0;
                              });
                        }));
          }));
  };
  var isTotalSelected = Belt_Option.isNone(Js_dict.get(router.query, "status"));
  var isCreateSelected = Belt_Option.isSome(Belt_Option.keep(Js_dict.get(router.query, "status"), (function (status) {
              return status === "CREATE";
            })));
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "max-w-gnb-panel overflow-auto overflow-x-scroll bg-div-shape-L1 min-h-screen"
                }, React.createElement("header", {
                      className: "flex items-baseline p-7 pb-0"
                    }, React.createElement("h1", {
                          className: "font-bold text-xl"
                        }, "송장번호 조회")), React.createElement(Summary_Delivery_Admin.make, {}), React.createElement("div", {
                      className: "p-7 mt-4 mx-4 shadow-gl overflow-auto overflow-x-scroll bg-white rounded"
                    }, React.createElement("div", {
                          className: "flex justify-between pb-4"
                        }, React.createElement("div", {
                              className: "flex flex-auto justify-between"
                            }, React.createElement("h3", {
                                  className: "font-bold"
                                }, "주문내역", React.createElement("span", {
                                      className: "ml-1 text-green-gl font-normal"
                                    }, "" + count + "건")), React.createElement("div", {
                                  className: "flex items-center"
                                }, React.createElement(Select_CountPerPage.make, {
                                      className: "mr-2"
                                    }), React.createElement(Select_Sorted.make, {
                                      className: "mr-2"
                                    }), isTotalSelected || isCreateSelected ? React.createElement("button", {
                                        className: "h-9 px-3 text-white bg-green-gl rounded-lg flex items-center mr-2",
                                        onClick: (function (param) {
                                            if (countOfChecked > 0) {
                                              return setShowPackingConfirm(function (param) {
                                                          return /* Show */0;
                                                        });
                                            } else {
                                              return setShowNothingToPacking(function (param) {
                                                          return /* Show */0;
                                                        });
                                            }
                                          })
                                      }, "상품준비중으로 변경") : null, React.createElement(Excel_Download_Request_Button.make, {
                                      userType: /* Admin */2,
                                      requestUrl: "/order/request-excel/farmer"
                                    })))), React.createElement(Order_List_Admin_Seller.make, {
                          status: status,
                          check: check,
                          onCheckOrder: handleOnCheckOrder,
                          countOfChecked: countOfChecked,
                          onCheckAll: handleCheckAll,
                          onClickPacking: changeOrdersToPacking
                        }))), React.createElement(Dialog.make, {
                  isShow: match$2[0],
                  children: React.createElement("p", {
                        className: "text-black-gl text-center whitespace-pre-wrap"
                      }, React.createElement("span", {
                            className: "font-bold"
                          }, "선택한 " + String(countOfChecked) + "개"), "의 주문을\n상품준비중으로 변경하시겠습니까?"),
                  onCancel: (function (param) {
                      setShowPackingConfirm(function (param) {
                            return /* Hide */1;
                          });
                    }),
                  onConfirm: (function (param) {
                      changeOrdersToPacking(Belt_SetString.toArray(ordersToPacking));
                    }),
                  textOnCancel: "취소",
                  textOnConfirm: "확인"
                }), React.createElement(Dialog.make, {
                  isShow: match$3[0],
                  children: null,
                  onCancel: (function (param) {
                      setShowNothingToPacking(function (param) {
                            return /* Hide */1;
                          });
                    }),
                  textOnCancel: "확인"
                }, React.createElement("a", {
                      className: "hidden",
                      id: "link-of-guide",
                      href: Env.cancelFormUrl,
                      target: "_blank"
                    }), React.createElement("p", {
                      className: "text-black-gl text-center whitespace-pre-wrap"
                    }, "상품준비중으로 변경할 주문을 선택해주세요.")), React.createElement(Dialog.make, {
                  isShow: match$5[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, Belt_Option.mapWithDefault(match$4[0], "상품준비중 변경에 성공하였습니다.", (function (param) {
                              var updateCount = param[1];
                              var totalCount = param[0];
                              if ((totalCount - updateCount | 0) > 0) {
                                return React.createElement(React.Fragment, undefined, React.createElement("span", {
                                                className: "font-bold"
                                              }, "" + String(totalCount) + "개 중 " + String(updateCount) + "개가 정상적으로 상품준비중으로 처리되었습니다."), "\n\n" + String(totalCount - updateCount | 0) + "개의 주문은 바이어 주문취소 등의 이유로 상품준비중으로 처리되지 못했습니다");
                              } else {
                                return "" + String(totalCount) + "개의 주문을 상품준비중으로 변경에 성공하였습니다.";
                              }
                            }))),
                  onConfirm: (function (param) {
                      setShowPackingSuccess(function (param) {
                            return /* Hide */1;
                          });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$6[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "상품준비중 변경에 실패하였습니다.\n다시 시도하시기 바랍니다."),
                  onConfirm: (function (param) {
                      setShowPackingError(function (param) {
                            return /* Hide */1;
                          });
                    })
                }));
}

var Orders = {
  make: TrackingNumbers_Admin$Orders
};

function TrackingNumbers_Admin(Props) {
  return React.createElement(Authorization.Admin.make, {
              children: React.createElement(TrackingNumbers_Admin$Orders, {}),
              title: "관리자 송장번호 조회"
            });
}

var List;

var make = TrackingNumbers_Admin;

export {
  List ,
  data_encode ,
  data_decode ,
  response_encode ,
  response_decode ,
  Orders ,
  make ,
}
/* Env Not a pure module */
