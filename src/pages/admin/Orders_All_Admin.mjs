// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as Router from "next/router";
import * as Authorization from "../../utils/Authorization.mjs";
import * as Select_CountPerPage from "../../components/Select_CountPerPage.mjs";
import * as Summary_Order_All_Admin from "../../components/Summary_Order_All_Admin.mjs";
import * as Order_All_List_Admin_Buyer from "../../components/Order_All_List_Admin_Buyer.mjs";

function data_encode(v) {
  return Js_dict.fromArray([
              [
                "total-count",
                Spice.intToJson(v.totalCount)
              ],
              [
                "update-count",
                Spice.intToJson(v.updateCount)
              ]
            ]);
}

function data_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var totalCount = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-count"), null));
  if (totalCount.TAG === /* Ok */0) {
    var updateCount = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "update-count"), null));
    if (updateCount.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                totalCount: totalCount._0,
                updateCount: updateCount._0
              }
            };
    }
    var e = updateCount._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".update-count" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = totalCount._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".total-count" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function response_encode(v) {
  return Js_dict.fromArray([
              [
                "data",
                data_encode(v.data)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ]
            ]);
}

function response_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = data_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
    if (message.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                data: data._0,
                message: message._0
              }
            };
    }
    var e = message._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".message" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function Orders_All_Admin$Orders(Props) {
  var router = Router.useRouter();
  var status = CustomHooks.OrdersAllAdmin.use(new URLSearchParams(router.query).toString());
  var count;
  if (typeof status === "number") {
    count = "-";
  } else if (status.TAG === /* Loaded */0) {
    var orders$p = CustomHooks.OrdersAllAdmin.orders_decode(status._0);
    count = orders$p.TAG === /* Ok */0 ? String(orders$p._0.count) : "-";
  } else {
    count = "-";
  }
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "max-w-gnb-panel overflow-auto overflow-x-scroll bg-div-shape-L1 min-h-screen"
                }, React.createElement("header", {
                      className: "flex items-baseline p-7 pb-0"
                    }, React.createElement("h1", {
                          className: "text-text-L1 text-xl font-bold"
                        }, "전체주문 조회")), React.createElement(Summary_Order_All_Admin.make, {}), React.createElement("div", {
                      className: "p-7 m-4 shadow-gl overflow-auto overflow-x-scroll bg-white rounded"
                    }, React.createElement("div", {
                          className: "md:flex md:justify-between pb-4"
                        }, React.createElement("div", {
                              className: "flex flex-auto justify-between"
                            }, React.createElement("h3", {
                                  className: "font-bold"
                                }, "주문내역", React.createElement("span", {
                                      className: "ml-1 text-green-gl font-normal"
                                    }, count + "건")), React.createElement("div", {
                                  className: "flex"
                                }, React.createElement(Select_CountPerPage.make, {
                                      className: "mr-2"
                                    })))), React.createElement(Order_All_List_Admin_Buyer.make, {
                          status: status
                        }))));
}

var Orders = {
  make: Orders_All_Admin$Orders
};

function Orders_All_Admin(Props) {
  return React.createElement(Authorization.Admin.make, {
              children: React.createElement(Orders_All_Admin$Orders, {}),
              title: "관리자 주문서 조회"
            });
}

var List;

var make = Orders_All_Admin;

export {
  List ,
  data_encode ,
  data_decode ,
  response_encode ,
  response_decode ,
  Orders ,
  make ,
  
}
/* react Not a pure module */
