// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../constants/Env.mjs";
import * as Swr from "swr";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as Helper from "../../utils/Helper.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as DatePicker from "../../components/DatePicker.mjs";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as FetchHelper from "../../utils/FetchHelper.mjs";
import * as ReactEvents from "../../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Authorization from "../../utils/Authorization.mjs";
import Parse from "date-fns/parse";
import Format from "date-fns/format";
import SubDays from "date-fns/subDays";
import Async from "react-select/async";
import * as Upload_Delivery_Admin from "../../components/Upload_Delivery_Admin.mjs";
import * as UploadStatus_Admin_Seller from "../../components/UploadStatus_Admin_Seller.mjs";
import * as Excel_Download_Request_Button from "../../components/Excel_Download_Request_Button.mjs";
import * as Order_List_Admin_Seller_Packing from "../../components/Order_List_Admin_Seller_Packing.mjs";

function removeQueriesFarmerName(q) {
  return Js_dict.fromArray(Garter_Array.keep(Js_dict.entries(q), (function (param) {
                    return param[0] !== "farmer-id";
                  })));
}

function AddTrackingNumbers_Admin$QueryFarmerPresenter(Props) {
  var farmer = Props.farmer;
  var router = Router.useRouter();
  var match = React.useState(function () {
        return /* NotSelected */0;
      });
  var setSelectedFarmer = match[1];
  React.useEffect((function () {
          if (farmer !== undefined) {
            var phone = farmer.phone;
            var name = farmer.name;
            var id = farmer.id;
            setSelectedFarmer(function (param) {
                  return /* Selected */{
                          value: String(id),
                          label: "" + name + "(" + Belt_Option.getWithDefault(Belt_Option.flatMap(Helper.PhoneNumber.parse(phone), Helper.PhoneNumber.format), phone) + ")"
                        };
                });
          }
          return (function (param) {
                    setSelectedFarmer(function (param) {
                          return /* NotSelected */0;
                        });
                  });
        }), [farmer]);
  var handleLoadOptions = function (inputValue) {
    var __x = FetchHelper.fetchWithRetry(FetchHelper.getWithToken, "" + Env.restApiUrl + "/user?name=" + inputValue + "&role=farmer", "", 3);
    return Js_promise.then_((function (result) {
                  var users$p = Curry._1(CustomHooks.QueryUser.Farmer.users_decode, result);
                  if (users$p.TAG !== /* Ok */0) {
                    return Promise.reject(Js_exn.raiseError("유저 검색 에러"));
                  }
                  var users$p$1 = users$p._0;
                  if (users$p$1.data.length === 0) {
                    return Promise.reject(Js_exn.raiseError("유저 검색 에러"));
                  }
                  var users$p$p = Garter_Array.map(users$p$1.data, (function (user) {
                          return /* Selected */{
                                  value: String(user.id),
                                  label: "" + user.name + "(" + Belt_Option.getWithDefault(Belt_Option.flatMap(Helper.PhoneNumber.parse(user.phone), Helper.PhoneNumber.format), user.phone) + ")"
                                };
                        }));
                  return Promise.resolve(users$p$p);
                }), __x);
  };
  var handleChangeFarmer = function (selection) {
    if (selection) {
      var cleaned = removeQueriesFarmerName(router.query);
      cleaned["farmer-id"] = selection.value;
      var newQueryString = new URLSearchParams(cleaned).toString();
      router.push("" + router.pathname + "?" + newQueryString + "");
      return ;
    }
    var cleaned$1 = removeQueriesFarmerName(router.query);
    var newQueryString$1 = new URLSearchParams(cleaned$1).toString();
    router.push("" + router.pathname + "?" + newQueryString$1 + "");
  };
  return React.createElement("div", {
              className: "w-80 relative"
            }, React.createElement(Async, {
                  value: match[0],
                  cacheOptions: true,
                  defaultOptions: false,
                  loadOptions: handleLoadOptions,
                  onChange: handleChangeFarmer,
                  placeholder: "생산자 이름으로 찾기",
                  noOptionsMessage: (function (param) {
                      return "검색 결과가 없습니다.";
                    }),
                  isClearable: true
                }));
}

var QueryFarmerPresenter = {
  make: AddTrackingNumbers_Admin$QueryFarmerPresenter
};

function AddTrackingNumbers_Admin$QueryFarmerWithId(Props) {
  var id = Props.id;
  var status = Curry._1(CustomHooks.QueryUser.Farmer.use, "user-id=" + id + "&role=farmer");
  var farmer;
  if (typeof status === "number" || status.TAG !== /* Loaded */0) {
    farmer = undefined;
  } else {
    var users$p = Curry._1(CustomHooks.QueryUser.Farmer.users_decode, status._0);
    farmer = users$p.TAG === /* Ok */0 ? Garter_Array.first(users$p._0.data) : undefined;
  }
  return React.createElement(AddTrackingNumbers_Admin$QueryFarmerPresenter, {
              farmer: farmer
            });
}

var QueryFarmerWithId = {
  make: AddTrackingNumbers_Admin$QueryFarmerWithId
};

function AddTrackingNumbers_Admin$QueryFarmerWithoutId(Props) {
  return React.createElement(AddTrackingNumbers_Admin$QueryFarmerPresenter, {
              farmer: undefined
            });
}

var QueryFarmerWithoutId = {
  make: AddTrackingNumbers_Admin$QueryFarmerWithoutId
};

function AddTrackingNumbers_Admin$QueryFarmer(Props) {
  var router = Router.useRouter();
  var id = Js_dict.get(router.query, "farmer-id");
  if (id !== undefined) {
    return React.createElement(AddTrackingNumbers_Admin$QueryFarmerWithId, {
                id: id
              });
  } else {
    return React.createElement(AddTrackingNumbers_Admin$QueryFarmerWithoutId, {});
  }
}

var QueryFarmer = {
  make: AddTrackingNumbers_Admin$QueryFarmer
};

function AddTrackingNumbers_Admin$Orders(Props) {
  var router = Router.useRouter();
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var status = CustomHooks.OrdersAdmin.use(new URLSearchParams(router.query).toString());
  var match$1 = React.useState(function () {
        return {
                from: SubDays(new Date(), 7),
                to_: new Date()
              };
      });
  var setQuery = match$1[1];
  var query = match$1[0];
  var match$2 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowSuccessUpload = match$2[1];
  var match$3 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowErrorUpload = match$3[1];
  var match$4 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowPackingSuccess = match$4[1];
  var match$5 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowPackingError = match$5[1];
  React.useEffect((function () {
          var from = Belt_Option.mapWithDefault(Js_dict.get(router.query, "from"), SubDays(new Date(), 5), (function (from) {
                  return Parse(from, "yyyyMMdd", new Date());
                }));
          var to_ = Belt_Option.mapWithDefault(Js_dict.get(router.query, "to"), new Date(), (function (to_) {
                  return Parse(to_, "yyyyMMdd", new Date());
                }));
          setQuery(function (param) {
                return {
                        from: from,
                        to_: to_
                      };
              });
        }), [router.query]);
  var handleOnChangeDate = function (t, e) {
    var newDate = e.detail.valueAsDate;
    if (t) {
      if (newDate === undefined) {
        return ;
      }
      var newDate$p = Caml_option.valFromOption(newDate);
      return setQuery(function (prev) {
                  return {
                          from: prev.from,
                          to_: newDate$p
                        };
                });
    }
    if (newDate === undefined) {
      return ;
    }
    var newDate$p$1 = Caml_option.valFromOption(newDate);
    setQuery(function (prev) {
          return {
                  from: newDate$p$1,
                  to_: prev.to_
                };
        });
  };
  var handleOnClickQuery = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  router.query["from"] = Format(query.from, "yyyyMMdd");
                  router.query["to"] = Format(query.to_, "yyyyMMdd");
                  var newQueryString = new URLSearchParams(router.query).toString();
                  router.push("" + router.pathname + "?" + newQueryString + "");
                }), param);
  };
  var dictSet = function (dict, key, val) {
    dict[key] = val;
    return dict;
  };
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "max-w-gnb-panel overflow-auto overflow-x-scroll bg-div-shape-L1 rounded min-h-screen"
                }, React.createElement("header", {
                      className: "flex items-baseline p-7 pb-0"
                    }, React.createElement("h1", {
                          className: "font-bold text-xl"
                        }, "송장번호 등록")), React.createElement("div", {
                      className: "p-7 shadow-gl mt-4 mx-4 bg-white rounded"
                    }, React.createElement("h3", {
                          className: "font-bold text-xl"
                        }, "송장번호 대량등록"), React.createElement("div", {
                          className: "flex justify-between divide-x mt-8"
                        }, React.createElement("section", {
                              className: "flex-1 pr-4"
                            }, React.createElement("div", {
                                  className: "flex justify-between"
                                }, React.createElement("div", {
                                      className: "flex justify-between"
                                    }, React.createElement("h4", {
                                          className: "font-semibold"
                                        }, "1.상품준비중인 건 다운로드")), React.createElement(Excel_Download_Request_Button.make, {
                                      userType: /* Admin */2,
                                      requestUrl: "/order/request-excel/farmer",
                                      bodyOption: dictSet(router.query, "status", "PACKING")
                                    }))), React.createElement(Upload_Delivery_Admin.make, {
                              onSuccess: (function (param) {
                                  setShowSuccessUpload(function (param) {
                                        return /* Show */0;
                                      });
                                }),
                              onFailure: (function (param) {
                                  setShowErrorUpload(function (param) {
                                        return /* Show */0;
                                      });
                                })
                            })), React.createElement(UploadStatus_Admin_Seller.make, {
                          kind: /* Admin */2,
                          onChangeLatestUpload: (function (param) {
                              mutate("" + Env.restApiUrl + "/order?" + new URLSearchParams(router.query).toString() + "", undefined, true);
                            })
                        })), React.createElement("div", {
                      className: "p-7 m-4 shadow-gl overflow-auto overflow-x-scroll bg-white rounded"
                    }, React.createElement("div", {
                          className: "md:flex md:justify-between pb-4"
                        }, React.createElement("div", {
                              className: "flex flex-auto justify-between"
                            }, React.createElement("h3", {
                                  className: "font-bold text-xl"
                                }, "송장번호 개별등록")), React.createElement("div", {
                              className: "flex mt-7 justify-end md:mt-0 md:ml-4"
                            }, React.createElement("div", {
                                  className: "flex"
                                }, React.createElement(AddTrackingNumbers_Admin$QueryFarmer, {}), React.createElement("div", {
                                      className: "flex ml-4"
                                    }, React.createElement("span", {
                                          className: "w-40"
                                        }, React.createElement(DatePicker.make, {
                                              id: "from",
                                              onChange: (function (param) {
                                                  return handleOnChangeDate(/* From */0, param);
                                                }),
                                              date: query.from,
                                              maxDate: Format(new Date(), "yyyy-MM-dd"),
                                              firstDayOfWeek: 0
                                            })), React.createElement("span", {
                                          className: "mx-1 flex items-center"
                                        }, "~"), React.createElement("span", {
                                          className: "w-40"
                                        }, React.createElement(DatePicker.make, {
                                              id: "to",
                                              onChange: (function (param) {
                                                  return handleOnChangeDate(/* To */1, param);
                                                }),
                                              date: query.to_,
                                              maxDate: Format(new Date(), "yyyy-MM-dd"),
                                              minDate: Format(query.from, "yyyy-MM-dd"),
                                              firstDayOfWeek: 0
                                            })))), React.createElement("button", {
                                  className: "px-3 py-1 bg-green-gl text-white font-bold rounded-lg ml-2 whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-opacity-100 focus:ring-green-gl",
                                  onClick: handleOnClickQuery
                                }, "조회"))), React.createElement(Order_List_Admin_Seller_Packing.make, {
                          status: status
                        }))), React.createElement(Dialog.make, {
                  isShow: match$4[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "상품준비중 변경에 성공하였습니다."),
                  onConfirm: (function (param) {
                      setShowPackingSuccess(function (param) {
                            return /* Hide */1;
                          });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$5[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "상품준비중 변경에 실패하였습니다.\n다시 시도하시기 바랍니다."),
                  onConfirm: (function (param) {
                      setShowPackingError(function (param) {
                            return /* Hide */1;
                          });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$2[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "업로드에 성공하였습니다."),
                  onConfirm: (function (param) {
                      setShowSuccessUpload(function (param) {
                            return /* Hide */1;
                          });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$3[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "업로드에 실패하였습니다.\n다시 시도하시기 바랍니다."),
                  onConfirm: (function (param) {
                      setShowErrorUpload(function (param) {
                            return /* Hide */1;
                          });
                    })
                }));
}

var Orders = {
  make: AddTrackingNumbers_Admin$Orders
};

function AddTrackingNumbers_Admin(Props) {
  return React.createElement(Authorization.Admin.make, {
              children: React.createElement(AddTrackingNumbers_Admin$Orders, {}),
              title: "관리자 송장번호 등록"
            });
}

var List;

var Upload;

var make = AddTrackingNumbers_Admin;

export {
  List ,
  Upload ,
  removeQueriesFarmerName ,
  QueryFarmerPresenter ,
  QueryFarmerWithId ,
  QueryFarmerWithoutId ,
  QueryFarmer ,
  Orders ,
  make ,
}
/* Env Not a pure module */
