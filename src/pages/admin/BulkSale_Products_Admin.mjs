// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as RelayEnv from "../../constants/RelayEnv.mjs";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as Authorization from "../../utils/Authorization.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as RescriptReactErrorBoundary from "@rescript/react/src/RescriptReactErrorBoundary.mjs";
import * as BulkSale_Products_List_Admin from "../../components/BulkSale_Products_List_Admin.mjs";
import * as Summary_BulkSale_Products_Admin from "../../components/Summary_BulkSale_Products_Admin.mjs";
import * as BulkSaleProductsAdminQuery_graphql from "../../__generated__/BulkSaleProductsAdminQuery_graphql.mjs";
import * as BulkSaleProductsAdminSummaryFragment_graphql from "../../__generated__/BulkSaleProductsAdminSummaryFragment_graphql.mjs";
import * as BulkSaleProductsAdminSummaryRefetchQuery_graphql from "../../__generated__/BulkSaleProductsAdminSummaryRefetchQuery_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(BulkSaleProductsAdminQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(BulkSaleProductsAdminQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProductsAdminQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(BulkSaleProductsAdminQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, BulkSaleProductsAdminQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, BulkSaleProductsAdminQuery_graphql.node, BulkSaleProductsAdminQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: BulkSaleProductsAdminQuery_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, BulkSaleProductsAdminQuery_graphql.node, BulkSaleProductsAdminQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(BulkSaleProductsAdminQuery_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(BulkSaleProductsAdminQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProductsAdminQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(BulkSaleProductsAdminQuery_graphql.node, BulkSaleProductsAdminQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_bulkSaleCampaignOrderBy_decode = BulkSaleProductsAdminQuery_graphql.Utils.bulkSaleCampaignOrderBy_decode;

var Query_bulkSaleCampaignOrderBy_fromString = BulkSaleProductsAdminQuery_graphql.Utils.bulkSaleCampaignOrderBy_fromString;

var Query_orderDirection_decode = BulkSaleProductsAdminQuery_graphql.Utils.orderDirection_decode;

var Query_orderDirection_fromString = BulkSaleProductsAdminQuery_graphql.Utils.orderDirection_fromString;

var Query = {
  bulkSaleCampaignOrderBy_decode: Query_bulkSaleCampaignOrderBy_decode,
  bulkSaleCampaignOrderBy_fromString: Query_bulkSaleCampaignOrderBy_fromString,
  orderDirection_decode: Query_orderDirection_decode,
  orderDirection_fromString: Query_orderDirection_fromString,
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function internal_makeRefetchableFnOpts(fetchPolicy, onComplete, param) {
  var tmp = {};
  var tmp$1 = RescriptRelay.mapFetchPolicy(fetchPolicy);
  if (tmp$1 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = RescriptRelay_Internal.internal_nullableToOptionalExnHandler(onComplete);
  if (tmp$2 !== undefined) {
    tmp.onComplete = Caml_option.valFromOption(tmp$2);
  }
  return tmp;
}

function useRefetchable(fRef) {
  var match = ReactRelay.useRefetchableFragment(BulkSaleProductsAdminSummaryFragment_graphql.node, fRef);
  var refetchFn = match[1];
  var data = RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProductsAdminSummaryFragment_graphql.Internal.convertFragment, match[0]);
  return [
          data,
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return Curry._2(refetchFn, RescriptRelay_Internal.internal_removeUndefinedAndConvertNullsRaw(BulkSaleProductsAdminSummaryRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [refetchFn])
        ];
}

function use$1(fRef) {
  var data = ReactRelay.useFragment(BulkSaleProductsAdminSummaryFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProductsAdminSummaryFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(BulkSaleProductsAdminSummaryFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return BulkSaleProductsAdminSummaryFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var makeRefetchVariables = BulkSaleProductsAdminSummaryRefetchQuery_graphql.Types.makeRefetchVariables;

var Fragment = {
  Types: undefined,
  internal_makeRefetchableFnOpts: internal_makeRefetchableFnOpts,
  useRefetchable: useRefetchable,
  Operation: undefined,
  use: use$1,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables
};

function BulkSale_Products_Admin$List(Props) {
  var query = Props.query;
  var refetchSummary = Props.refetchSummary;
  var statistics = Props.statistics;
  return React.createElement("div", {
              className: "p-7 m-4 shadow-gl overflow-auto overflow-x-scroll bg-white rounded"
            }, React.createElement(BulkSale_Products_List_Admin.make, {
                  query: query,
                  refetchSummary: refetchSummary,
                  statistics: statistics
                }));
}

var List = {
  make: BulkSale_Products_Admin$List
};

function BulkSale_Products_Admin$SummaryAndList(Props) {
  var query = Props.query;
  var match = useRefetchable(query);
  var refetch = match[1];
  var queryData = match[0];
  var refetchSummary = function (param) {
    Curry._4(refetch, undefined, /* StoreAndNetwork */2, undefined, undefined);
  };
  var statistics = queryData.bulkSaleCampaignStatistics;
  return React.createElement(React.Fragment, undefined, React.createElement(Summary_BulkSale_Products_Admin.make, {
                  summary: queryData.bulkSaleCampaignStatistics
                }), React.createElement(BulkSale_Products_Admin$List, {
                  query: query,
                  refetchSummary: refetchSummary,
                  statistics: statistics
                }));
}

var SummaryAndList = {
  make: BulkSale_Products_Admin$SummaryAndList
};

function BulkSale_Products_Admin$Skeleton(Props) {
  return React.createElement("div", {
              className: "max-w-gnb-panel overflow-auto overflow-x-scroll bg-div-shape-L1 min-h-gnb-admin"
            }, React.createElement("header", {
                  className: "flex items-baseline p-7 pb-0"
                }, React.createElement("h1", {
                      className: "text-text-L1 text-xl font-bold"
                    }, "소싱 상품 등록/수정")), React.createElement(Summary_BulkSale_Products_Admin.Skeleton.make, {}), React.createElement("div", {
                  className: "p-7 m-4 shadow-gl overflow-auto overflow-x-scroll bg-white rounded"
                }, React.createElement(BulkSale_Products_List_Admin.Skeleton.make, {})));
}

var Skeleton = {
  make: BulkSale_Products_Admin$Skeleton
};

function BulkSale_Products_Admin$Products(Props) {
  var router = Router.useRouter();
  var isOpen = Belt_Option.flatMap(Js_dict.get(router.query, "status"), (function (s) {
          if (s === "open") {
            return true;
          } else if (s === "ended") {
            return false;
          } else {
            return ;
          }
        }));
  var queryData = use({
        isOpen: isOpen,
        orderBy: "CREATED_AT",
        orderDirection: "DESC"
      }, undefined, undefined, undefined, undefined);
  return React.createElement("div", {
              className: "max-w-gnb-panel overflow-auto overflow-x-scroll bg-div-shape-L1 min-h-gnb-admin"
            }, React.createElement("header", {
                  className: "flex items-baseline p-7 pb-0"
                }, React.createElement("h1", {
                      className: "text-text-L1 text-xl font-bold"
                    }, "소싱 상품 등록/수정")), React.createElement(BulkSale_Products_Admin$SummaryAndList, {
                  query: queryData.fragmentRefs
                }));
}

var Products = {
  make: BulkSale_Products_Admin$Products
};

function BulkSale_Products_Admin(Props) {
  return React.createElement(Authorization.Admin.make, {
              children: React.createElement(RescriptRelay.Context.Provider.make, {
                    environment: RelayEnv.envFMBridge,
                    children: React.createElement(RescriptReactErrorBoundary.make, {
                          children: React.createElement(React.Suspense, {
                                children: React.createElement(BulkSale_Products_Admin$Products, {}),
                                fallback: React.createElement(BulkSale_Products_Admin$Skeleton, {})
                              }),
                          fallback: (function (param) {
                              return React.createElement("div", undefined, "에러 발생");
                            })
                        })
                  }),
              title: "소싱 상품 등록/수정"
            });
}

var make = BulkSale_Products_Admin;

export {
  Query ,
  Fragment ,
  List ,
  SummaryAndList ,
  Skeleton ,
  Products ,
  make ,
}
/* react Not a pure module */
