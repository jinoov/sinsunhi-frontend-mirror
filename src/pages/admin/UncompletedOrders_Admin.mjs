// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as DatePicker from "../../components/DatePicker.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as ReactEvents from "../../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as Authorization from "../../utils/Authorization.mjs";
import Parse from "date-fns/parse";
import Format from "date-fns/format";
import SubDays from "date-fns/subDays";
import * as Order_List_Admin_Uncompleted from "../../components/Order_List_Admin_Uncompleted.mjs";

function UncompletedOrders_Admin(Props) {
  var router = Router.useRouter();
  var status = CustomHooks.OrdersAdminUncompleted.use(new URLSearchParams(router.query).toString());
  var match = React.useState(function () {
        return {
                from: SubDays(new Date(), 7),
                to_: new Date()
              };
      });
  var setQuery = match[1];
  var query = match[0];
  var match$1 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowConfirm = match$1[1];
  var match$2 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowCancelError = match$2[1];
  var match$3 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowDownloadError = match$3[1];
  React.useEffect((function () {
          var from = Belt_Option.mapWithDefault(Js_dict.get(router.query, "from"), SubDays(new Date(), 5), (function (from) {
                  return Parse(from, "yyyyMMdd", new Date());
                }));
          var to_ = Belt_Option.mapWithDefault(Js_dict.get(router.query, "to"), new Date(), (function (to_) {
                  return Parse(to_, "yyyyMMdd", new Date());
                }));
          setQuery(function (param) {
                return {
                        from: from,
                        to_: to_
                      };
              });
        }), [router.query]);
  var handleOnChangeDate = function (t, e) {
    var newDate = e.detail.valueAsDate;
    if (t) {
      if (newDate === undefined) {
        return ;
      }
      var newDate$p = Caml_option.valFromOption(newDate);
      return setQuery(function (prev) {
                  return {
                          from: prev.from,
                          to_: newDate$p
                        };
                });
    }
    if (newDate === undefined) {
      return ;
    }
    var newDate$p$1 = Caml_option.valFromOption(newDate);
    setQuery(function (prev) {
          return {
                  from: newDate$p$1,
                  to_: prev.to_
                };
        });
  };
  var handleOnClickQuery = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  router.query["from"] = Format(query.from, "yyyyMMdd");
                  router.query["to"] = Format(query.to_, "yyyyMMdd");
                  var newQueryString = new URLSearchParams(router.query).toString();
                  router.push("" + router.pathname + "?" + newQueryString + "");
                }), param);
  };
  return React.createElement(Authorization.Admin.make, {
              children: null,
              title: "관리자 주문서 처리실패"
            }, React.createElement("div", {
                  className: "py-10 px-7"
                }, React.createElement("header", {
                      className: "flex items-baseline"
                    }, React.createElement("h1", {
                          className: "font-bold text-xl"
                        }, "주문서 처리실패"), React.createElement("span", {
                          className: "ml-2 text-gray-500 text-sm"
                        }, "잔액이 부족하거나 잔여수량이 부족할 경우에 처리실패가 발생할 수 있습니다.")), React.createElement("div", {
                      className: "p-7 sm:mt-4 sm:shadow-gl"
                    }, React.createElement("div", {
                          className: "md:flex md:justify-between pb-4"
                        }, React.createElement("div", {
                              className: "flex flex-auto justify-between"
                            }, React.createElement("h3", {
                                  className: "font-bold"
                                }, "내역"), React.createElement("div", {
                                  className: "flex"
                                }, React.createElement("button", {
                                      className: "py-1 px-3 text-black-gl bg-gray-button-gl rounded-lg",
                                      onClick: (function (param) {
                                          
                                        })
                                    }, "엑셀 다운로드"))), React.createElement("div", {
                              className: "flex mt-7 justify-end md:mt-0 md:ml-4"
                            }, React.createElement("div", {
                                  className: "flex sm:w-64"
                                }, React.createElement(DatePicker.make, {
                                      id: "from",
                                      onChange: (function (param) {
                                          return handleOnChangeDate(/* From */0, param);
                                        }),
                                      date: query.from,
                                      maxDate: Format(new Date(), "yyyy-MM-dd"),
                                      firstDayOfWeek: 0
                                    }), React.createElement(DatePicker.make, {
                                      id: "to",
                                      onChange: (function (param) {
                                          return handleOnChangeDate(/* To */1, param);
                                        }),
                                      date: query.to_,
                                      maxDate: Format(new Date(), "yyyy-MM-dd"),
                                      minDate: Format(query.from, "yyyy-MM-dd"),
                                      firstDayOfWeek: 0
                                    })), React.createElement("button", {
                                  className: "px-3 py-1 bg-green-gl text-white font-bold rounded-lg ml-1 whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-opacity-100 focus:ring-green-gl",
                                  onClick: handleOnClickQuery
                                }, "조회"))), React.createElement(Order_List_Admin_Uncompleted.make, {
                          status: status
                        }))), React.createElement(Dialog.make, {
                  isShow: match$1[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "선택하신 주문을 취소하시겠습니까?"),
                  onCancel: (function (param) {
                      setShowConfirm(function (param) {
                            return /* Hide */1;
                          });
                    }),
                  onConfirm: (function (param) {
                      
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$2[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "주문 취소에 실패하였습니다.\n다시 시도하시기 바랍니다."),
                  onConfirm: (function (param) {
                      setShowCancelError(function (param) {
                            return /* Hide */1;
                          });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$3[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "다운로드에 실패하였습니다.\n다시 시도하시기 바랍니다."),
                  onConfirm: (function (param) {
                      setShowDownloadError(function (param) {
                            return /* Hide */1;
                          });
                    })
                }));
}

var List;

var make = UncompletedOrders_Admin;

export {
  List ,
  make ,
}
/* react Not a pure module */
