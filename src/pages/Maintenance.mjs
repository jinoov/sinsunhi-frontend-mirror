// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import Head from "next/head";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import Format from "date-fns/format";
import IsAfter from "date-fns/isAfter";
import IsBefore from "date-fns/isBefore";
import * as Hooks from "react-relay/hooks";
import * as ReactDialog from "@radix-ui/react-dialog";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as Maintenance_getSystemMaintenance_Query_graphql from "../__generated__/Maintenance_getSystemMaintenance_Query_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(Maintenance_getSystemMaintenance_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(Maintenance_getSystemMaintenance_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(Maintenance_getSystemMaintenance_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(Maintenance_getSystemMaintenance_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, Maintenance_getSystemMaintenance_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, Maintenance_getSystemMaintenance_Query_graphql.node, Maintenance_getSystemMaintenance_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: Maintenance_getSystemMaintenance_Query_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, Maintenance_getSystemMaintenance_Query_graphql.node, Maintenance_getSystemMaintenance_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(Maintenance_getSystemMaintenance_Query_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(Maintenance_getSystemMaintenance_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(Maintenance_getSystemMaintenance_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(Maintenance_getSystemMaintenance_Query_graphql.node, Maintenance_getSystemMaintenance_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_makeVariables = Maintenance_getSystemMaintenance_Query_graphql.Utils.makeVariables;

var Query = {
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function Maintenance$View(Props) {
  var message = Props.message;
  var maintenanceTime = Props.maintenanceTime;
  return React.createElement("section", {
              className: "w-screen h-screen flex flex-col items-center justify-start dialog-overlay"
            }, React.createElement("div", {
                  className: "flex flex-col h-full items-center justify-center"
                }, React.createElement("img", {
                      height: "156",
                      src: "/images/maintenance.png",
                      width: "140"
                    }), React.createElement("h1", {
                      className: "mt-7 text-3xl text-gray-800 whitespace-pre text-center"
                    }, "더 나은 서비스를 위해서\n시스템 점검 중입니다"), React.createElement("div", {
                      className: "flex flex-col justify-center items-center gap-5"
                    }, React.createElement("h3", {
                          className: "mt-7 text-[17px]"
                        }, Belt_Option.getWithDefault(message, "점검 시간 동안 서비스 이용이 일시 중단됩니다.이용에 불편을 드려서 죄송합니다.")), React.createElement("div", {
                          className: "flex flex-col items-center py-3 bg-gray-gl rounded-lg w-[320px]"
                        }, React.createElement("span", {
                              className: ""
                            }, "점검 시간"), React.createElement("span", {
                              className: "text-gray-800 font-bold"
                            }, Belt_Option.getWithDefault(maintenanceTime, "불러오는 중입니다"))))));
}

var View = {
  make: Maintenance$View
};

function formatDate(date, formatString) {
  var dateObj = new Date(date);
  return Format(dateObj, formatString);
}

function formatForDisplay(date) {
  return formatDate(date, "MM") + "월 " + formatDate(date, "dd") + "일 " + formatDate(date, "HH") + "시";
}

function Maintenance$Content(Props) {
  var queryData = use(undefined, undefined, undefined, undefined, undefined);
  var isMaintenanceTarget = function (targets, startAt, endAt) {
    var now = new Date(Date.now());
    var timeCheck = IsAfter(now, new Date(startAt)) && IsBefore(now, new Date(endAt));
    var targetCheck = Belt_Option.getWithDefault(Belt_Option.map(Belt_Array.getBy(Router.useRouter().pathname.split("/"), (function (x) {
                    return x !== "";
                  })), (function (firstPath) {
                return Belt_Array.some(targets, (function (targetElement) {
                              return firstPath === targetElement;
                            }));
              })), false);
    if (timeCheck && targetCheck) {
      return /* Matched */0;
    } else {
      return /* NotMatched */1;
    }
  };
  var systemMaintenance = queryData.systemMaintenance;
  if (systemMaintenance === undefined) {
    return null;
  }
  var startAt = systemMaintenance.startAt;
  var endAt = systemMaintenance.endAt;
  var match = isMaintenanceTarget(systemMaintenance.targets, startAt, endAt);
  if (match) {
    return null;
  } else {
    return React.createElement(React.Fragment, undefined, React.createElement(ReactDialog.Root, {
                    children: React.createElement(ReactDialog.Portal, {
                          children: null
                        }, React.createElement(ReactDialog.Overlay, {
                              className: "dialog-overlay"
                            }), React.createElement(ReactDialog.Content, {
                              children: null,
                              className: "top-0 bg-white fixed z-20"
                            }, React.createElement(Head, {
                                  children: React.createElement("title", undefined, "🚧 신선하이 점검중입니다 🚧")
                                }), React.createElement(Maintenance$View, {
                                  message: systemMaintenance.message,
                                  maintenanceTime: formatForDisplay(startAt) + " ~ " + formatForDisplay(endAt)
                                }))),
                    open: true
                  }));
  }
}

var Content = {
  formatDate: formatDate,
  formatForDisplay: formatForDisplay,
  make: Maintenance$Content
};

function Maintenance(Props) {
  var match = React.useState(function () {
        return false;
      });
  var setIsCsr = match[1];
  React.useEffect((function () {
          setIsCsr(function (param) {
                return true;
              });
          
        }), []);
  if (match[0]) {
    return React.createElement(Maintenance$Content, {});
  } else {
    return null;
  }
}

var make = Maintenance;

export {
  Query ,
  View ,
  Content ,
  make ,
  
}
/* react Not a pure module */
