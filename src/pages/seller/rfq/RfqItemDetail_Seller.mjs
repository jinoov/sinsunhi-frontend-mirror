// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Intl from "../../../bindings/intl.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as DS_Icon from "../../../components/svgs/DS_Icon.mjs";
import * as DS_None from "../../../components/common/container/DS_None.mjs";
import * as DataGtm from "../../../utils/DataGtm.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as DS_Title from "../../../components/common/container/DS_Title.mjs";
import * as DS_Toast from "../../../components/common/container/DS_Toast.mjs";
import * as DS_Button from "../../../components/common/element/DS_Button.mjs";
import * as DS_Dialog from "../../../components/common/container/DS_Dialog.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as DS_ListItem from "../../../components/common/container/DS_ListItem.mjs";
import * as Router from "next/router";
import * as DS_TitleList from "../../../components/common/element/DS_TitleList.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Authorization from "../../../utils/Authorization.mjs";
import * as DS_InputField from "../../../components/common/container/DS_InputField.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as DS_BottomDrawer from "../../../components/common/container/DS_BottomDrawer.mjs";
import Format from "date-fns/format";
import * as DS_TopNavigation from "../../../components/common/container/DS_TopNavigation.mjs";
import * as Hooks from "react-relay/hooks";
import * as DS_ButtonContainer from "../../../components/common/container/DS_ButtonContainer.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql from "../../../__generated__/RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.mjs";
import * as RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql from "../../../__generated__/RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.mjs";
import * as RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql from "../../../__generated__/RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.node, RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.node, RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.node, RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_meatMadeIn_decode = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.meatMadeIn_decode;

var Query_meatMadeIn_fromString = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.meatMadeIn_fromString;

var Query_rfqDeliveryMethod_decode = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.rfqDeliveryMethod_decode;

var Query_rfqDeliveryMethod_fromString = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.rfqDeliveryMethod_fromString;

var Query_rfqMeatPackageMethod_decode = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.rfqMeatPackageMethod_decode;

var Query_rfqMeatPackageMethod_fromString = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.rfqMeatPackageMethod_fromString;

var Query_rfqMeatStorageMethod_decode = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.rfqMeatStorageMethod_decode;

var Query_rfqMeatStorageMethod_fromString = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.rfqMeatStorageMethod_fromString;

var Query_rfqQuotationStatus_decode = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.rfqQuotationStatus_decode;

var Query_rfqQuotationStatus_fromString = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.rfqQuotationStatus_fromString;

var Query_rfqRequestItemStatus_decode = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.rfqRequestItemStatus_decode;

var Query_rfqRequestItemStatus_fromString = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.rfqRequestItemStatus_fromString;

var Query_rfqRequestStatus_decode = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.rfqRequestStatus_decode;

var Query_rfqRequestStatus_fromString = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.rfqRequestStatus_fromString;

var Query_makeVariables = RfqItemDetailSeller_RfqRequestItemMeatNode_Query_graphql.Utils.makeVariables;

var Query = {
  meatMadeIn_decode: Query_meatMadeIn_decode,
  meatMadeIn_fromString: Query_meatMadeIn_fromString,
  rfqDeliveryMethod_decode: Query_rfqDeliveryMethod_decode,
  rfqDeliveryMethod_fromString: Query_rfqDeliveryMethod_fromString,
  rfqMeatPackageMethod_decode: Query_rfqMeatPackageMethod_decode,
  rfqMeatPackageMethod_fromString: Query_rfqMeatPackageMethod_fromString,
  rfqMeatStorageMethod_decode: Query_rfqMeatStorageMethod_decode,
  rfqMeatStorageMethod_fromString: Query_rfqMeatStorageMethod_fromString,
  rfqQuotationStatus_decode: Query_rfqQuotationStatus_decode,
  rfqQuotationStatus_fromString: Query_rfqQuotationStatus_fromString,
  rfqRequestItemStatus_decode: Query_rfqRequestItemStatus_decode,
  rfqRequestItemStatus_fromString: Query_rfqRequestItemStatus_fromString,
  rfqRequestStatus_decode: Query_rfqRequestStatus_decode,
  rfqRequestStatus_fromString: Query_rfqRequestStatus_fromString,
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.node,
              variables: RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$1(param) {
  var match = Hooks.useMutation(RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var CreateRfqQuotationMeat_errorCode_decode = RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Utils.errorCode_decode;

var CreateRfqQuotationMeat_errorCode_fromString = RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Utils.errorCode_fromString;

var CreateRfqQuotationMeat_rfqQuotationStatus_decode = RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Utils.rfqQuotationStatus_decode;

var CreateRfqQuotationMeat_rfqQuotationStatus_fromString = RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Utils.rfqQuotationStatus_fromString;

var CreateRfqQuotationMeat_make_rfqQuotationMeatInput = RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Utils.make_rfqQuotationMeatInput;

var CreateRfqQuotationMeat_makeVariables = RfqItemDetailSeller_CreateRfqQuotationMeat_Mutation_graphql.Utils.makeVariables;

var CreateRfqQuotationMeat = {
  errorCode_decode: CreateRfqQuotationMeat_errorCode_decode,
  errorCode_fromString: CreateRfqQuotationMeat_errorCode_fromString,
  rfqQuotationStatus_decode: CreateRfqQuotationMeat_rfqQuotationStatus_decode,
  rfqQuotationStatus_fromString: CreateRfqQuotationMeat_rfqQuotationStatus_fromString,
  make_rfqQuotationMeatInput: CreateRfqQuotationMeat_make_rfqQuotationMeatInput,
  makeVariables: CreateRfqQuotationMeat_makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$1
};

function commitMutation$1(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.node,
              variables: RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$2(param) {
  var match = Hooks.useMutation(RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var UpdateRfqQuotationMeat_errorCode_decode = RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Utils.errorCode_decode;

var UpdateRfqQuotationMeat_errorCode_fromString = RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Utils.errorCode_fromString;

var UpdateRfqQuotationMeat_rfqQuotationStatus_decode = RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Utils.rfqQuotationStatus_decode;

var UpdateRfqQuotationMeat_rfqQuotationStatus_fromString = RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Utils.rfqQuotationStatus_fromString;

var UpdateRfqQuotationMeat_make_rfqQuotationMeatInput = RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Utils.make_rfqQuotationMeatInput;

var UpdateRfqQuotationMeat_makeVariables = RfqItemDetailSeller_UpdateRfqQuotationMeat_Mutation_graphql.Utils.makeVariables;

var UpdateRfqQuotationMeat = {
  errorCode_decode: UpdateRfqQuotationMeat_errorCode_decode,
  errorCode_fromString: UpdateRfqQuotationMeat_errorCode_fromString,
  rfqQuotationStatus_decode: UpdateRfqQuotationMeat_rfqQuotationStatus_decode,
  rfqQuotationStatus_fromString: UpdateRfqQuotationMeat_rfqQuotationStatus_fromString,
  make_rfqQuotationMeatInput: UpdateRfqQuotationMeat_make_rfqQuotationMeatInput,
  makeVariables: UpdateRfqQuotationMeat_makeVariables,
  Types: undefined,
  commitMutation: commitMutation$1,
  use: use$2
};

var Mutation = {
  CreateRfqQuotationMeat: CreateRfqQuotationMeat,
  UpdateRfqQuotationMeat: UpdateRfqQuotationMeat
};

function convertNumberInputValue(value) {
  return value.replace(/[^0-9]/g, "").replace(/^[0]/g, "");
}

function displayDeleveryMethod(v) {
  if (v === "DIRECT_DELIVERY") {
    return "신선하이 직접배송";
  } else if (v === "ANY") {
    return "상관없음";
  } else if (v === "WAREHOUSE_TRANSFER") {
    return "창고배송";
  } else if (v === "OTHER") {
    return "기타";
  } else if (v === "WAREHOUSE_PICKUP") {
    return "창고수령";
  } else {
    return "기타";
  }
}

function displayStorageMethod(v) {
  if (v === "CHILLED") {
    return "냉장";
  } else if (v === "FROZEN") {
    return "냉동";
  } else if (v === "ANY") {
    return "모두";
  } else if (v === "FREEZE_DRIED") {
    return "동결";
  } else if (v === "OTHER") {
    return "그 외";
  } else {
    return "";
  }
}

function displayPackageMethod(v) {
  if (v === "SPLIT") {
    return "소분";
  } else if (v === "ANY") {
    return "모두";
  } else if (v === "CUT") {
    return "세절";
  } else if (v === "RAW") {
    return "원료육(박스육)";
  } else if (v === "OTHER") {
    return "그 외";
  } else {
    return "";
  }
}

function displayMadeInMethod(v) {
  if (v === "AU") {
    return "호주산";
  } else if (v === "CA") {
    return "캐나다산";
  } else if (v === "KR") {
    return "국내산";
  } else if (v === "NZ") {
    return "뉴질랜드산";
  } else if (v === "US") {
    return "미국산";
  } else if (v === "OTHER") {
    return "기타";
  } else {
    return "";
  }
}

function numberToComma(n) {
  return Belt_Option.mapWithDefault(Belt_Float.fromString(n), "", (function (x) {
                return $$Intl.Currency.make(x, "ko-KR", undefined, undefined, undefined);
              }));
}

function stringToNumber(s) {
  return numberToComma(Garter_Array.firstExn(s.split(".")));
}

function RfqItemDetail_Seller$TimerTitle(Props) {
  var remainSecondsUntilQuotationExpired = Props.remainSecondsUntilQuotationExpired;
  var match = React.useState(function () {
        return remainSecondsUntilQuotationExpired - 3600 | 0;
      });
  var setTime = match[1];
  var time = match[0];
  React.useEffect((function () {
          var id = setInterval((function (param) {
                  return setTime(function (time) {
                              return Math.max(0, time - 1 | 0);
                            });
                }), 1000);
          return (function (param) {
                    clearInterval(id);
                    
                  });
        }), []);
  var getRemainTimes = function (s) {
    var oneHourSeconds = 3600;
    var oneDaySeconds = Math.imul(oneHourSeconds, 24);
    var remainDays = Caml_int32.div(s, oneDaySeconds);
    var remainHourSeconds = Caml_int32.mod_(s, oneDaySeconds);
    var remainHours = Caml_int32.div(remainHourSeconds, oneHourSeconds);
    var remainMinuteSeconds = Caml_int32.mod_(remainHourSeconds, oneHourSeconds);
    var remainMinutes = remainMinuteSeconds / 60 | 0;
    var remainSeconds = remainMinuteSeconds % 60;
    return [
            {
              TAG: /* Day */0,
              _0: remainDays
            },
            {
              TAG: /* Hour */1,
              _0: remainHours
            },
            {
              TAG: /* Minute */2,
              _0: remainMinutes
            },
            {
              TAG: /* Second */3,
              _0: remainSeconds
            }
          ];
  };
  var getTimeText = function (time) {
    var generateText = function (num, postfix) {
      return Belt_Option.mapWithDefault(Belt_Option.keep(num, (function (x) {
                        return x > 0;
                      })), "", (function (x) {
                    return String(x) + postfix;
                  }));
    };
    switch (time.TAG | 0) {
      case /* Day */0 :
          return generateText(time._0, "일 ");
      case /* Hour */1 :
          return generateText(time._0, "시간 ");
      case /* Minute */2 :
          return generateText(time._0, "분 ");
      case /* Second */3 :
          return generateText(time._0, "초");
      
    }
  };
  var match$1 = getRemainTimes(time);
  var dayText = getTimeText(match$1[0]);
  var hourText = getTimeText(match$1[1]);
  var minuteText = getTimeText(match$1[2]);
  var secondText = getTimeText(match$1[3]);
  if (time > 0) {
    return dayText + hourText + minuteText + secondText + " 후 요청 마감";
  } else {
    return "요청 마감";
  }
}

var TimerTitle = {
  make: RfqItemDetail_Seller$TimerTitle
};

function RfqItemDetail_Seller$Detail$Item(Props) {
  var title = Props.title;
  var value = Props.value;
  return React.createElement(DS_ListItem.Normal1.Item.make, {
              children: null
            }, React.createElement(DS_TitleList.Left.TitleSubtitle1.make, {
                  title1: title,
                  titleStyle: "font-normal text-text-L2"
                }), React.createElement(DS_ListItem.Normal1.RightGroup.make, {
                  children: React.createElement(DS_TitleList.Common.TextIcon1.Root.make, {
                        children: React.createElement(DS_TitleList.Common.TextIcon1.$$Text.make, {
                              children: value,
                              className: "text-right word-keep-all"
                            })
                      })
                }));
}

var Item = {
  make: RfqItemDetail_Seller$Detail$Item
};

function RfqItemDetail_Seller$Detail$Title(Props) {
  var itemMeat = Props.itemMeat;
  var submittedQuotation = Garter_Array.first(Belt_Array.map(itemMeat.quotations.edges, (function (x) {
              return x.node;
            })));
  var hasSubmittedQuotation = Belt_Option.isSome(submittedQuotation);
  var pageTitle;
  if (hasSubmittedQuotation) {
    var match = itemMeat.requestItemStatus;
    pageTitle = React.createElement(DS_TitleList.Left.Title3Subtitle1.make, {
          title1: Belt_Option.mapWithDefault(itemMeat.species, "", (function (x) {
                  return x.shortName;
                })),
          title2: Belt_Option.mapWithDefault(itemMeat.part, "", (function (x) {
                  return x.name;
                })),
          title3: Belt_Option.mapWithDefault(itemMeat.part, "", (function (x) {
                  if (x.isDomestic) {
                    return "국내";
                  } else {
                    return "수입";
                  }
                })),
          titleStyle: "text-xl font-bold",
          subTitle: match === "WAITING_FOR_QUOTATION" ? "오늘 16:00까지 수정 가능합니다." : ""
        });
  } else {
    pageTitle = React.createElement(React.Fragment, undefined, React.createElement(DS_TitleList.Left.TitleSubtitle1.make, {
              title1: "견적요청서가 도착했어요"
            }), null);
  }
  var match$1 = itemMeat.requestItemStatus;
  var pageSubTitle = match$1 === "WAITING_FOR_QUOTATION" ? React.createElement("div", {
          className: "my-3 inline-flex items-center text-sm font-bold leading-5 tracking-tight px-2 py-1.5 rounded text-emphasis bg-emphasis bg-opacity-10"
        }, React.createElement(DS_Icon.Common.PeriodSmall1.make, {
              height: "14",
              width: "14",
              className: "mr-1"
            }), React.createElement(RfqItemDetail_Seller$TimerTitle, {
              remainSecondsUntilQuotationExpired: itemMeat.request.remainSecondsUntilQuotationExpired
            })) : null;
  return React.createElement("div", {
              className: "px-5 pt-8"
            }, React.createElement("div", {
                  className: "mt-3"
                }, pageTitle, pageSubTitle));
}

var Title = {
  make: RfqItemDetail_Seller$Detail$Title
};

function RfqItemDetail_Seller$Detail$MyQuotation(Props) {
  var itemMeat = Props.itemMeat;
  var hasSubmittedQuotation = Belt_Option.isSome(Garter_Array.first(Belt_Array.map(itemMeat.quotations.edges, (function (x) {
                  return x.node;
                }))));
  if (!hasSubmittedQuotation) {
    return null;
  }
  var isGradeIgnore = Belt_Option.mapWithDefault(itemMeat.grade, false, (function (x) {
          return x.grade === "등급무관";
        }));
  var gradeText = Belt_Option.flatMap(Garter_Array.first(itemMeat.quotations.edges), (function (x) {
          return x.node.grade.grade;
        }));
  var quotationPrice = Belt_Option.flatMap(Garter_Array.first(itemMeat.quotations.edges), (function (x) {
          return Garter_Array.firstExn(x.node.pricePerKg.split("."));
        }));
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "px-5 mt-10"
                }, React.createElement("h3", {
                      className: "font-bold leading-6 tracking-tight"
                    }, "제안하신 내용")), React.createElement("div", {
                  className: "flex flex-col items-center space-y-3 mx-5 mt-5"
                }, React.createElement("div", {
                      className: "w-full bg-white rounded-lg py-5"
                    }, React.createElement("div", {
                          className: "flex flex-col px-5 gap-3.5"
                        }, React.createElement(RfqItemDetail_Seller$Detail$Item, {
                              title: "단가",
                              value: numberToComma(Belt_Option.getWithDefault(quotationPrice, "")) + "원/kg"
                            }), isGradeIgnore ? React.createElement(RfqItemDetail_Seller$Detail$Item, {
                                title: "등급",
                                value: Belt_Option.mapWithDefault(gradeText, "", (function (x) {
                                        return x;
                                      }))
                              }) : null))), React.createElement("div", {
                  className: "h-3 bg-border-default-L2 mt-6"
                }));
}

var MyQuotation = {
  make: RfqItemDetail_Seller$Detail$MyQuotation
};

function RfqItemDetail_Seller$Detail$Request(Props) {
  var itemMeat = Props.itemMeat;
  var match = Belt_Option.map(itemMeat.species, (function (x) {
          return x.code;
        }));
  var match$1 = Belt_Option.map(itemMeat.part, (function (x) {
          return x.isDomestic;
        }));
  var isSkipGrade;
  if (match !== undefined && match$1 !== undefined) {
    switch (match) {
      case "CHICKEN" :
          isSkipGrade = true;
          break;
      case "PORK" :
          isSkipGrade = match$1 ? false : true;
          break;
      default:
        isSkipGrade = false;
    }
  } else {
    isSkipGrade = false;
  }
  return React.createElement("div", {
              className: "flex flex-col items-center space-y-3 mx-5 mt-5 pb-28"
            }, React.createElement("div", {
                  className: "w-full bg-white rounded-lg py-5 mx-6"
                }, React.createElement("div", {
                      className: "px-5 mb-6"
                    }, React.createElement(DS_TitleList.Left.Title3Subtitle1.make, {
                          title1: Belt_Option.mapWithDefault(itemMeat.species, "", (function (x) {
                                  return x.shortName;
                                })),
                          title2: Belt_Option.mapWithDefault(itemMeat.part, "", (function (x) {
                                  return x.name;
                                })),
                          title3: Belt_Option.mapWithDefault(itemMeat.part, "", (function (x) {
                                  if (x.isDomestic) {
                                    return "국내";
                                  } else {
                                    return "수입";
                                  }
                                }))
                        })), React.createElement("div", {
                      className: "flex flex-col"
                    }, React.createElement(DS_ListItem.Normal1.Root.make, {
                          children: null,
                          className: "space-y-3.5"
                        }, Belt_Option.mapWithDefault(itemMeat.packageMethod, null, (function (x) {
                                return React.createElement(RfqItemDetail_Seller$Detail$Item, {
                                            title: "포장상태",
                                            value: displayPackageMethod(x)
                                          });
                              })), isSkipGrade ? null : Belt_Option.mapWithDefault(itemMeat.grade, null, (function (x) {
                                  return React.createElement(RfqItemDetail_Seller$Detail$Item, {
                                              title: "등급",
                                              value: x.grade
                                            });
                                })), Belt_Option.mapWithDefault(itemMeat.weightKg, null, (function (x) {
                                return React.createElement(RfqItemDetail_Seller$Detail$Item, {
                                            title: "주문량",
                                            value: numberToComma(Garter_Array.firstExn(x.split("."))) + " kg"
                                          });
                              })), Garter_Array.isEmpty(itemMeat.usages.edges) ? null : React.createElement(RfqItemDetail_Seller$Detail$Item, {
                                title: "사용용도",
                                value: Belt_Array.map(itemMeat.usages.edges, (function (edge) {
                                          return edge.node.name;
                                        })).join(", ")
                              }), Belt_Option.mapWithDefault(itemMeat.storageMethod, null, (function (x) {
                                return React.createElement(RfqItemDetail_Seller$Detail$Item, {
                                            title: "보관상태",
                                            value: displayStorageMethod(x)
                                          });
                              })), itemMeat.preferredBrand === "" ? null : React.createElement(RfqItemDetail_Seller$Detail$Item, {
                                title: "선호브랜드",
                                value: itemMeat.preferredBrand
                              }), React.createElement("li", {
                              className: "h-0.5 bg-border-disabled"
                            }), React.createElement(RfqItemDetail_Seller$Detail$Item, {
                              title: "납품 희망일자",
                              value: Format(new Date(itemMeat.request.desiredDeliveryDate), "yy.MM.dd")
                            }), React.createElement(RfqItemDetail_Seller$Detail$Item, {
                              title: "수령방식",
                              value: displayDeleveryMethod(itemMeat.request.deliveryMethod)
                            }), React.createElement(RfqItemDetail_Seller$Detail$Item, {
                              title: "배송지역",
                              value: itemMeat.request.deliveryAddress
                            }), itemMeat.otherRequirements.trim() === "" ? null : React.createElement(React.Fragment, undefined, React.createElement("li", {
                                    className: "h-0.5 bg-border-disabled"
                                  }), React.createElement("li", {
                                    className: "flex flex-col justify-start items-start space-y-2"
                                  }, React.createElement("span", {
                                        className: "text-text-L2"
                                      }, "요청사항"), React.createElement("div", {
                                        className: "w-full"
                                      }, itemMeat.otherRequirements)))))));
}

var $$Request = {
  make: RfqItemDetail_Seller$Detail$Request
};

function RfqItemDetail_Seller$Detail$Button(Props) {
  var itemMeat = Props.itemMeat;
  var router = Router.useRouter();
  var submittedQuotation = Garter_Array.first(Belt_Array.map(itemMeat.quotations.edges, (function (x) {
              return x.node;
            })));
  var hasSubmittedQuotation = Belt_Option.isSome(submittedQuotation);
  var isGradeIgnore = Belt_Option.mapWithDefault(itemMeat.grade, false, (function (x) {
          return x.grade === "등급무관";
        }));
  var isDomestic = Belt_Option.mapWithDefault(itemMeat.part, true, (function (x) {
          return x.isDomestic;
        }));
  var madeIn = Belt_Option.mapWithDefault(itemMeat.grade, "OTHER", (function (x) {
          return x.madeIn;
        }));
  var madeInText = displayMadeInMethod(madeIn);
  var grades = Belt_Array.map(Belt_Array.keep(Belt_Array.keep(Belt_Option.mapWithDefault(itemMeat.species, [], (function (x) {
                      return x.meatGrades.edges;
                    })), (function (x) {
                  return x.node.madeIn === madeIn;
                })), (function (x) {
              return x.node.grade !== "등급무관";
            })), (function (x) {
          return x.node;
        }));
  var match = React.useState(function () {
        return false;
      });
  var setDrawerShow = match[1];
  var isDrawerShow = match[0];
  var match$1 = React.useState(function () {
        if (isGradeIgnore) {
          return ;
        } else {
          return Belt_Option.mapWithDefault(itemMeat.grade, undefined, (function (x) {
                        return x.id;
                      }));
        }
      });
  var setSelectedGrade = match$1[1];
  var selectedGrade = match$1[0];
  var navigatePriceFormPage = function (param) {
    if (selectedGrade !== undefined) {
      router.query["selected_grade_id"] = selectedGrade;
      var newQueryString = new URLSearchParams(Js_dict.fromArray([[
                    "selected_grade_id",
                    selectedGrade
                  ]])).toString();
      router.push(router.asPath + "?" + newQueryString);
    }
    
  };
  var match$2 = itemMeat.requestItemStatus;
  return React.createElement(React.Fragment, undefined, React.createElement(DS_ButtonContainer.Floating1.make, {
                  label: "견적서 " + (
                    hasSubmittedQuotation ? "수정" : "작성"
                  ) + "하기",
                  disabled: match$2 !== "WAITING_FOR_QUOTATION",
                  onClick: (function (param) {
                      if (isGradeIgnore) {
                        return setDrawerShow(function (param) {
                                    return true;
                                  });
                      } else {
                        return navigatePriceFormPage(undefined);
                      }
                    }),
                  dataGtm: "Click_RFQ_Livestock_Quotation"
                }), React.createElement(DS_BottomDrawer.Root.make, {
                  isShow: isDrawerShow,
                  onClose: (function (param) {
                      return setDrawerShow(function (param) {
                                  return !isDrawerShow;
                                });
                    }),
                  children: null
                }, React.createElement(DS_BottomDrawer.Header.make, {}), React.createElement(DS_BottomDrawer.Body.make, {
                      children: null
                    }, React.createElement("div", {
                          className: "text-text-L3 leading-6 tracking-tight px-5 mb-3"
                        }, "구매자가 " + madeInText + "/등급무관을 선택했어요"), React.createElement(DS_Title.Normal1.Root.make, {
                          children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                                title1: Belt_Option.mapWithDefault(itemMeat.part, "", (function (x) {
                                        return x.name;
                                      })) + "/" + (
                                  isDomestic ? "국내산" : "수입산"
                                ) + "의",
                                title2: "판매하시는 등급을 선택해주세요"
                              })
                        }), React.createElement(DS_ListItem.Normal1.Root.make, {
                          children: Belt_Array.map(grades, (function (x) {
                                  var isSelected = Belt_Option.mapWithDefault(selectedGrade, false, (function (grade$p) {
                                          return grade$p === x.id;
                                        }));
                                  return React.createElement(DS_ListItem.Normal1.Item.make, {
                                              children: null,
                                              onClick: (function (param) {
                                                  return setSelectedGrade(function (param) {
                                                              return x.id;
                                                            });
                                                }),
                                              key: x.id
                                            }, React.createElement(DS_ListItem.Normal1.TextGroup.make, {
                                                  title1: x.grade
                                                }), React.createElement(DS_ListItem.Normal1.RightGroup.make, {
                                                  children: isSelected ? React.createElement(DS_Icon.Common.RadioOnLarge1.make, {
                                                          height: "24",
                                                          width: "24",
                                                          fill: "#12B564"
                                                        }) : React.createElement(DS_Icon.Common.RadioOffLarge1.make, {
                                                          height: "24",
                                                          width: "24",
                                                          fill: "#B2B2B2"
                                                        })
                                                }));
                                })),
                          className: "space-y-8 mt-10 tab-highlight-color pb-[96px] overflow-y-auto"
                        }), React.createElement(DS_ButtonContainer.Floating1.make, {
                          label: "다음",
                          disabled: Belt_Option.isNone(selectedGrade),
                          onClick: (function (param) {
                              return navigatePriceFormPage(undefined);
                            })
                        }), React.createElement("div", undefined))));
}

var Button = {
  make: RfqItemDetail_Seller$Detail$Button
};

function RfqItemDetail_Seller$Detail(Props) {
  var itemMeat = Props.itemMeat;
  return React.createElement("section", {
              className: "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl bg-gray-50"
            }, React.createElement(RfqItemDetail_Seller$Detail$Title, {
                  itemMeat: itemMeat
                }), React.createElement(RfqItemDetail_Seller$Detail$MyQuotation, {
                  itemMeat: itemMeat
                }), React.createElement(RfqItemDetail_Seller$Detail$Request, {
                  itemMeat: itemMeat
                }), React.createElement(RfqItemDetail_Seller$Detail$Button, {
                  itemMeat: itemMeat
                }));
}

var Detail = {
  Item: Item,
  Title: Title,
  MyQuotation: MyQuotation,
  $$Request: $$Request,
  Button: Button,
  make: RfqItemDetail_Seller$Detail
};

function RfqItemDetail_Seller$Apply(Props) {
  var itemMeat = Props.itemMeat;
  var rfqRecommendedPriceForMeat = Props.rfqRecommendedPriceForMeat;
  var sellerSelectedGradeNode = Props.sellerSelectedGradeNode;
  var router = Router.useRouter();
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var match$1 = use$1(undefined);
  var mutateCreate = match$1[0];
  var match$2 = use$2(undefined);
  var mutateUpdate = match$2[0];
  var match$3 = React.useState(function () {
        
      });
  var setPrice = match$3[1];
  var price = match$3[0];
  var submittedQuotation = Garter_Array.first(Belt_Array.map(itemMeat.quotations.edges, (function (x) {
              return x.node;
            })));
  var hasSubmittedQuotation = Belt_Option.isSome(submittedQuotation);
  var handleChangeInput = function (e) {
    var value = convertNumberInputValue(e.target.value);
    return setPrice(function (param) {
                if (value.trim() === "") {
                  return ;
                } else {
                  return value;
                }
              });
  };
  var addToastWhenAfterMutate = function (mutationType, hasError) {
    var submitTypeText = mutationType ? "수정" : "제출";
    if (hasError) {
      return addToast(DS_Toast.getToastComponent("견적서 " + submitTypeText + "에 실패했습니다.", "error"), {
                  appearance: "error"
                });
    } else {
      return addToast(DS_Toast.getToastComponent("견적서를 " + submitTypeText + "했습니다.", "succ"), {
                  appearance: "succ"
                });
    }
  };
  var handleSubmit = function (param) {
    if (submittedQuotation !== undefined) {
      var input_meatGradeId = sellerSelectedGradeNode.id;
      var input_pricePerKg = Belt_Option.getWithDefault(price, "");
      var input_rfqRequestItemId = itemMeat.id;
      var input = {
        brand: "",
        deliveryFee: undefined,
        meatGradeId: input_meatGradeId,
        pricePerKg: input_pricePerKg,
        rfqRequestItemId: input_rfqRequestItemId
      };
      Curry.app(mutateUpdate, [
            undefined,
            (function (param, param$1) {
                var updateRfqQuotationMeat = param.updateRfqQuotationMeat;
                if (typeof updateRfqQuotationMeat !== "object") {
                  return addToastWhenAfterMutate(/* Update */1, true);
                }
                var variant = updateRfqQuotationMeat.NAME;
                if (variant !== "RfqQuotationMeatMutationPayload") {
                  return addToastWhenAfterMutate(/* Update */1, true);
                }
                var match = updateRfqQuotationMeat.VAL.result;
                if (match !== undefined) {
                  addToastWhenAfterMutate(/* Update */1, false);
                  router.replace("/seller/rfq/request/" + itemMeat.id);
                  return ;
                } else {
                  return addToastWhenAfterMutate(/* Update */1, true);
                }
              }),
            undefined,
            undefined,
            undefined,
            undefined,
            {
              id: submittedQuotation.id,
              input: input
            },
            undefined,
            undefined
          ]);
      return ;
    }
    var input_meatGradeId$1 = sellerSelectedGradeNode.id;
    var input_pricePerKg$1 = Belt_Option.getWithDefault(price, "");
    var input_rfqRequestItemId$1 = itemMeat.id;
    var input$1 = {
      brand: "",
      deliveryFee: undefined,
      meatGradeId: input_meatGradeId$1,
      pricePerKg: input_pricePerKg$1,
      rfqRequestItemId: input_rfqRequestItemId$1
    };
    Curry.app(mutateCreate, [
          undefined,
          (function (param, param$1) {
              var createRfqQuotationMeat = param.createRfqQuotationMeat;
              if (typeof createRfqQuotationMeat !== "object") {
                return addToastWhenAfterMutate(/* Create */0, true);
              }
              var variant = createRfqQuotationMeat.NAME;
              if (variant !== "RfqQuotationMeatMutationPayload") {
                return addToastWhenAfterMutate(/* Create */0, true);
              }
              var match = createRfqQuotationMeat.VAL.result;
              if (match !== undefined) {
                addToastWhenAfterMutate(/* Create */0, false);
                router.replace("/seller/rfq/request/" + itemMeat.id);
                return ;
              } else {
                return addToastWhenAfterMutate(/* Create */0, true);
              }
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          {
            input: input$1
          },
          undefined,
          undefined
        ]);
    
  };
  var part = Belt_Option.mapWithDefault(itemMeat.part, "", (function (x) {
          return x.name + "/" + (
                  x.isDomestic ? "국산" : "수입"
                );
        }));
  var price$p = Belt_Option.getWithDefault(price, "");
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl pt-14"
                }, React.createElement(DS_TopNavigation.Detail.Root.make, {
                      children: null
                    }, React.createElement(DS_TopNavigation.Detail.Left.make, {
                          children: React.createElement("a", {
                                className: "cursor-pointer",
                                onClick: (function (param) {
                                    window.history.back();
                                    
                                  })
                              }, React.createElement(DS_Icon.Common.ArrowLeftXLarge1.make, {
                                    height: "32",
                                    width: "32",
                                    className: "relative"
                                  }))
                        }), React.createElement(DS_TopNavigation.Detail.Center.make, {
                          children: "견적서 " + (
                            hasSubmittedQuotation ? "수정" : "작성"
                          )
                        })), React.createElement(DS_Title.Normal1.Root.make, {
                      children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                            title1: Belt_Option.mapWithDefault(itemMeat.part, "", (function (x) {
                                    return x.name;
                                  })) + "/" + Belt_Option.mapWithDefault(itemMeat.part, "", (function (x) {
                                    if (x.isDomestic) {
                                      return "국산";
                                    } else {
                                      return "수입";
                                    }
                                  })) + "의",
                            title2: "제공 가능한 단가를 알려주세요",
                            subTitle: "최대 단가 : " + stringToNumber(rfqRecommendedPriceForMeat.pricePerKg) + "원/kg"
                          }),
                      className: "mt-10"
                    }), React.createElement(DS_InputField.Line1.Root.make, {
                      children: React.createElement(DS_InputField.Line1.Input.make, {
                            type_: "text",
                            placeholder: "단가",
                            value: numberToComma(Belt_Option.getWithDefault(price, "")),
                            onChange: handleChangeInput,
                            autoFocus: true,
                            inputMode: "decimal",
                            isClear: true,
                            fnClear: (function (param) {
                                return setPrice(function (param) {
                                            
                                          });
                              }),
                            unit: "원/kg",
                            underLabelType: "won",
                            maxLength: 10
                          }),
                      className: "mt-10"
                    })), React.createElement(DS_Dialog.Popup.Root.make, {
                  children: null
                }, React.createElement(DS_Dialog.Popup.Trigger.make, {
                      children: React.createElement(DS_ButtonContainer.Full1.make, {
                            label: "다음",
                            disabled: Belt_Option.isNone(price),
                            onClick: (function (param) {
                                return DataGtm.push({
                                            event: "Expose_view_RFQ_Livestock_EnteraPrice_Check_Popup"
                                          });
                              }),
                            dataGtm: "Click_RFQ_Livestock_EnteraPrice"
                          }),
                      asChild: false
                    }), React.createElement(DS_Dialog.Popup.Portal.make, {
                      children: null
                    }, React.createElement(DS_Dialog.Popup.Overlay.make, {}), React.createElement(DS_Dialog.Popup.Content.make, {
                          children: null
                        }, React.createElement(DS_Dialog.Popup.Title.make, {
                              children: "아래 내용으로 견적서를 " + (
                                hasSubmittedQuotation ? "수정합니다." : "보냅니다."
                              )
                            }), React.createElement(DS_Dialog.Popup.Description.make, {
                              children: React.createElement("div", {
                                    className: "text-base leading-6 tracking-tight text-enabled-L2"
                                  }, React.createElement("div", undefined, part + " - " + numberToComma(price$p) + " 원/kg"), React.createElement("div", undefined, "등급 - " + sellerSelectedGradeNode.grade))
                            }), React.createElement(DS_Dialog.Popup.Buttons.make, {
                              children: null
                            }, React.createElement(DS_Dialog.Popup.Close.make, {
                                  children: React.createElement("div", {
                                        className: "w-full"
                                      }, React.createElement(DS_Button.Normal.Large1.make, {
                                            label: "아니오",
                                            buttonType: "white"
                                          })),
                                  asChild: true
                                }), React.createElement(DS_Dialog.Popup.Close.make, {
                                  children: React.createElement(DataGtm.make, {
                                        children: React.createElement("div", {
                                              className: "w-full",
                                              onClick: (function (param) {
                                                  
                                                })
                                            }, React.createElement(DS_Button.Normal.Large1.make, {
                                                  label: "네",
                                                  onClick: handleSubmit
                                                })),
                                        dataGtm: "Click_Yes_RFQ_Livestock_EnteraPrice_Check_Popup"
                                      }),
                                  asChild: true
                                }))))));
}

var Apply = {
  make: RfqItemDetail_Seller$Apply
};

function RfqItemDetail_Seller$DetailPageRouter(Props) {
  var itemId = Props.itemId;
  var match = use({
        itemId: itemId
      }, undefined, undefined, undefined, undefined);
  var node = match.node;
  var router = Router.useRouter();
  var selectedGradeId = Js_dict.get(router.query, "selected_grade_id");
  if (node === undefined) {
    return React.createElement(DS_None.Default.make, {
                message: "견적서 정보가 없습니다."
              });
  }
  if (selectedGradeId !== undefined) {
    var itemStatus = node.requestItemStatus;
    var madeIn = Belt_Option.mapWithDefault(node.grade, "OTHER", (function (x) {
            return x.madeIn;
          }));
    var sellerSelectedGradeNode = Belt_Array.getBy(Belt_Array.keep(Belt_Array.keep(Belt_Option.mapWithDefault(node.species, [], (function (x) {
                        return x.meatGrades.edges;
                      })), (function (x) {
                    return x.node.madeIn === madeIn;
                  })), (function (x) {
                return x.node.grade !== "등급무관";
              })), (function (x) {
            return x.node.id === selectedGradeId;
          }));
    if (sellerSelectedGradeNode !== undefined && itemStatus === "WAITING_FOR_QUOTATION") {
      DataGtm.push({
            event: "Expose_view_RFQ_Livestock_EnteraPrice"
          });
      return React.createElement(RfqItemDetail_Seller$Apply, {
                  itemMeat: node,
                  rfqRecommendedPriceForMeat: match.rfqRecommendedPriceForMeat,
                  sellerSelectedGradeNode: sellerSelectedGradeNode.node
                });
    }
    return React.createElement(DS_None.Default.make, {
                message: "잘못된 접근입니다."
              });
  }
  DataGtm.push({
        event: "Expose_view_RFQ_Livestock_Quotation"
      });
  return React.createElement(RfqItemDetail_Seller$Detail, {
              itemMeat: node
            });
}

var DetailPageRouter = {
  make: RfqItemDetail_Seller$DetailPageRouter
};

function RfqItemDetail_Seller(Props) {
  var itemId = Props.itemId;
  return React.createElement(Authorization.Seller.make, {
              children: React.createElement(React.Suspense, {
                    children: itemId !== undefined ? React.createElement(RfqItemDetail_Seller$DetailPageRouter, {
                            itemId: itemId
                          }) : React.createElement(DS_None.Default.make, {
                            message: "견적서 정보를 불러올 수 없습니다. 관리자에게 문의해주세요."
                          })
                  }),
              title: "견적 확인",
              fallback: null
            });
}

var MeatItemTypes;

var make = RfqItemDetail_Seller;

export {
  Query ,
  Mutation ,
  MeatItemTypes ,
  convertNumberInputValue ,
  displayDeleveryMethod ,
  displayStorageMethod ,
  displayPackageMethod ,
  displayMadeInMethod ,
  numberToComma ,
  stringToNumber ,
  TimerTitle ,
  Detail ,
  Apply ,
  DetailPageRouter ,
  make ,
  
}
/* react Not a pure module */
