// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "../../components/common/Input.mjs";
import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as IconArrow from "../../components/svgs/IconArrow.mjs";
import * as IconError from "../../components/svgs/IconError.mjs";
import Head from "next/head";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as FetchHelper from "../../utils/FetchHelper.mjs";
import * as ReactEvents from "../../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as IconArrowSelect from "../../components/svgs/IconArrowSelect.mjs";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import * as VerifyPhoneNumber from "../../components/VerifyPhoneNumber.mjs";
import * as SignUp_Seller_Form from "../../components/SignUp_Seller_Form.mjs";
import * as SignUp_Seller_Terms from "../../components/SignUp_Seller_Terms.mjs";

function SignUp_Seller$Select(Props) {
  var t = Props.t;
  var values = Props.values;
  var title = Props.title;
  var display = Props.display;
  var onChange = Props.onChange;
  var isError = Props.isError;
  return React.createElement("div", undefined, React.createElement("label", {
                  className: "block text-sm font-medium text-gray-700",
                  id: "select-occupation"
                }), React.createElement("div", {
                  className: "relative"
                }, React.createElement("button", {
                      className: t !== undefined ? (
                          isError ? "relative w-full text-gray-gl border ring-2 ring-notice rounded-xl py-[13px] px-3 remove-spin-button " : "relative w-full bg-gray-gl text-gray-gl border border-gray-gl-light rounded-xl py-[13px] px-3 focus:outline-none focus:ring-1-gl remove-spin-button focus:border-gray-gl"
                        ) : (
                          isError ? "relative w-full text-gray-gl border ring-2 ring-notice rounded-xl py-[13px] px-3 remove-spin-button " : "relative w-full text-gray-gl border border-gray-gl-light rounded-xl py-[13px] px-3 focus:outline-none focus:ring-1-gl remove-spin-button focus:border-gray-gl"
                        ),
                      type: "button"
                    }, React.createElement("span", {
                          className: "flex items-center text-disabled-L1"
                        }, React.createElement("span", {
                              className: "block truncate"
                            }, Belt_Option.getWithDefault(Belt_Option.map(t, Curry.__1(display)), title + " 선택"))), React.createElement("span", {
                          className: "absolute top-2 right-3"
                        }, React.createElement(IconArrowSelect.make, {
                              height: "28",
                              width: "28",
                              fill: "#121212"
                            }))), React.createElement("select", {
                      className: "absolute left-0 w-full py-3 opacity-0",
                      value: Belt_Option.getWithDefault(Belt_Option.map(t, Curry.__1(display)), title + " 선택"),
                      onChange: onChange
                    }, React.createElement("option", {
                          value: title
                        }, "-- " + title + " 선택 --"), Belt_Array.map(values, (function (value) {
                            return React.createElement("option", {
                                        key: value,
                                        value: value
                                      }, value);
                          })))), isError ? React.createElement("span", {
                    className: "flex mt-2"
                  }, React.createElement(IconError.make, {
                        width: "20",
                        height: "20"
                      }), React.createElement("span", {
                        className: "text-sm text-notice ml-1"
                      }, title + "을 선택해주세요.")) : null);
}

var Select = {
  make: SignUp_Seller$Select
};

function SignUp_Seller(Props) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        return /* Unverified */1;
      });
  var setPhoneNumberVerified = match[1];
  var isPhoneNumberVerifed = match[0];
  var match$1 = React.useState(function () {
        return "";
      });
  var setPasswordConfirm = match$1[1];
  var passwordConfirm = match$1[0];
  var match$2 = React.useState(function () {
        return "";
      });
  var setDetailedAddress = match$2[1];
  var detailedAddress = match$2[0];
  var match$3 = React.useState(function () {
        
      });
  var setProductType = match$3[1];
  var productType = match$3[0];
  var match$4 = React.useState(function () {
        
      });
  var setProducerType = match$4[1];
  var producerType = match$4[0];
  var match$5 = React.useState(function () {
        return "";
      });
  var setBusinessRegistrationNumber = match$5[1];
  var businessRegistrationNumber = match$5[0];
  var match$6 = React.useState(function () {
        return false;
      });
  var setTermsConfirmed = match$6[1];
  var isTermsConfirmed = match$6[0];
  var match$7 = React.useState(function () {
        return false;
      });
  var isMarketing = match$7[0];
  var match$8 = React.useState(function () {
        return [
                /* Hide */1,
                undefined
              ];
      });
  var setShowErrorWithMessage = match$8[1];
  var match$9 = match$8[0];
  var match$10 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowConfirmGoBack = match$10[1];
  var onSubmit = function (param) {
    var state = param.state;
    if (!isPhoneNumberVerifed && isTermsConfirmed) {
      var init = state.values;
      var payload_name = init.name;
      var payload_phone = init.phone;
      var payload_email = init.email;
      var payload_password = init.password;
      var payload_address = SignUp_Seller_Form.FormFields.get(state.values, /* Address */4) + " " + detailedAddress;
      var payload_zip$code = init["zip-code"];
      var payload_role = init.role;
      var payload_producer$type = Belt_Option.getWithDefault(Belt_Option.map(producerType, SignUp_Seller_Form.stringifyProducerType), "");
      var payload_terms = isMarketing ? ["marketing"] : [];
      var payload = {
        name: payload_name,
        phone: payload_phone,
        email: payload_email,
        password: payload_password,
        address: payload_address,
        "zip-code": payload_zip$code,
        role: payload_role,
        "business-registration-number": businessRegistrationNumber,
        "producer-type": payload_producer$type,
        terms: payload_terms
      };
      Belt_Option.map(JSON.stringify(payload), (function (body) {
              return FetchHelper.post(Env.restApiUrl + "/user/register", body, (function (param) {
                            router.push("/seller/signin");
                            
                          }), (function (err) {
                            if (err.status === 409) {
                              return setShowErrorWithMessage(function (param) {
                                          return [
                                                  /* Show */0,
                                                  err.message
                                                ];
                                        });
                            } else {
                              return setShowErrorWithMessage(function (param) {
                                          return [
                                                  /* Show */0,
                                                  undefined
                                                ];
                                        });
                            }
                          }));
            }));
    }
    
  };
  var form = Curry._7(SignUp_Seller_Form.Form.use, SignUp_Seller_Form.initialState, /* Schema */{
        _0: Belt_Array.concatMany([
              Curry._3(SignUp_Seller_Form.Form.ReSchema.Validation.nonEmpty, "정확한 이름을 입력해주세요.", undefined, /* Name */0),
              Curry._3(SignUp_Seller_Form.Form.ReSchema.Validation.nonEmpty, "휴대전화 번호를 입력해주세요.", undefined, /* Phone */1),
              Curry._4(SignUp_Seller_Form.Form.ReSchema.Validation.regExp, "비밀번호가 형식에 맞지 않습니다.", "^(?=.*\\d)(?=.*[a-zA-Z]).{6,15}$", undefined, /* Password */3),
              Curry._3(SignUp_Seller_Form.Form.ReSchema.Validation.nonEmpty, "주소를 입력해주세요.", undefined, /* Address */4),
              Curry._3(SignUp_Seller_Form.Form.ReSchema.Validation.nonEmpty, "우편번호를 입력해주세요.", undefined, /* Zipcode */5),
              Curry._3(SignUp_Seller_Form.Form.ReSchema.Validation.nonEmpty, "농부", undefined, /* Role */6),
              Curry._3(SignUp_Seller_Form.Form.ReSchema.Validation.nonEmpty, "필수 입력", undefined, /* ProducerType */8)
            ])
      }, onSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleOnSubmit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return Curry._1(form.submit, undefined);
                }), param);
  };
  var handleOnChangePasswordConfirm = function (e) {
    var value = e.target.value;
    return setPasswordConfirm(function (param) {
                return value;
              });
  };
  var handleOnChangeDetailedAddress = function (e) {
    var value = e.target.value;
    return setDetailedAddress(function (param) {
                return value;
              });
  };
  var handleOnChangeProducerType = function (e) {
    var value = e.currentTarget.value;
    var parsed = SignUp_Seller_Form.parseProducerType(value, productType);
    setProducerType(function (param) {
          return parsed;
        });
    return Curry._4(form.setFieldValue, /* ProducerType */8, Belt_Option.mapWithDefault(parsed, "", SignUp_Seller_Form.stringifyProducerType), true, undefined);
  };
  var handleOnChangeProductType = function (e) {
    var value = e.currentTarget.value;
    setProductType(function (param) {
          return SignUp_Seller_Form.parseProductType(value);
        });
    return setProducerType(function (param) {
                
              });
  };
  var handleOnChangeBusinessRegistrationNumber = function (e) {
    var value = e.target.value;
    return setBusinessRegistrationNumber(function (param) {
                return value;
              });
  };
  var handleOnChangeTerms = function (c) {
    return setTermsConfirmed(function (param) {
                return c;
              });
  };
  var handleVerifiedPhoneNumber = function (n) {
    setPhoneNumberVerified(function (param) {
          return /* Verified */0;
        });
    return Curry._4(form.setFieldValue, /* Phone */1, n, true, undefined);
  };
  var handleOnClickSearchAddress = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  var option = {
                    oncomplete: (function (data) {
                        Curry._4(form.setFieldValue, /* Address */4, data.address, true, undefined);
                        return Curry._4(form.setFieldValue, /* Zipcode */5, data.zonecode, true, undefined);
                      })
                  };
                  var daumPostCode = new (daum.Postcode)(option);
                  var openOption = {
                    popupName: "\xec\x8b\xa0\xec\x84\xa0\xed\x95\x98\xec\x9d\xb4 \xed\x9a\x8c\xec\x9b\x90\xea\xb0\x80\xec\x9e\x85 \xec\xa3\xbc\xec\x86\x8c \xea\xb2\x80\xec\x83\x89"
                  };
                  daumPostCode.open(openOption);
                  
                }), param);
  };
  var isPasswordConfirmed = function (param) {
    var password1 = SignUp_Seller_Form.FormFields.get(form.values, /* Password */3);
    if (password1 !== "" && passwordConfirm !== "") {
      return password1 !== passwordConfirm;
    } else {
      return false;
    }
  };
  var handleOnClickBackButton = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return setShowConfirmGoBack(function (param) {
                              return /* Show */0;
                            });
                }), param);
  };
  var match$11 = form.isSubmitting;
  var isDisabledSubmit = isPhoneNumberVerifed || !(isTermsConfirmed && producerType !== undefined && !match$11) ? true : false;
  var partial_arg = Curry._1(form.handleChange, /* Name */0);
  var partial_arg$1 = Curry._1(form.handleChange, /* Email */2);
  var partial_arg$2 = Curry._1(form.handleChange, /* Password */3);
  var tmp;
  if (producerType !== undefined) {
    switch (producerType.TAG | 0) {
      case /* Farm */0 :
          tmp = producerType._0 !== 0 ? "사업자등록번호(선택)" : "농민경영체번호(선택)";
          break;
      case /* Seafood */1 :
          tmp = producerType._0 !== 0 ? "사업자등록번호(선택)" : "어업경영체등록번호";
          break;
      case /* Livestock */2 :
          tmp = "사업자등록번호(선택)";
          break;
      
    }
  } else {
    tmp = "사업자등록번호(선택)";
  }
  return React.createElement(React.Fragment, undefined, React.createElement(Head, {
                  children: null
                }, React.createElement("title", undefined, "생산자 회원가입 - 신선하이"), React.createElement("script", {
                      src: "//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"
                    })), React.createElement("div", {
                  className: "container mx-auto max-w-lg min-h-screen flex flex-col justify-center items-center relative py-20"
                }, React.createElement("img", {
                      alt: "신선하이 로고",
                      height: "42",
                      src: "/assets/sinsunhi-logo.svg",
                      width: "164"
                    }), React.createElement("div", {
                      className: "text-text-L2 mt-2"
                    }, React.createElement("span", undefined, "농축산물 생산자 "), React.createElement("span", {
                          className: "font-semibold"
                        }, " 판로개척 플랫폼")), React.createElement("div", {
                      className: "w-full px-5 sm:shadow-xl sm:rounded sm:border sm:border-gray-100 sm:py-12 sm:px-20 mt-10"
                    }, React.createElement("h2", {
                          className: "text-text-L1 text-2xl font-bold text-center relative"
                        }, "생산자 회원가입", React.createElement("button", {
                              className: "absolute left-0 p-2",
                              onClick: handleOnClickBackButton
                            }, React.createElement(IconArrow.make, {
                                  height: "24",
                                  width: "24",
                                  stroke: "#262626",
                                  className: "transform rotate-180"
                                }))), React.createElement("form", {
                          onSubmit: handleOnSubmit
                        }, React.createElement("div", {
                              className: "divide-y"
                            }, React.createElement("div", {
                                  className: "py-4 mt-4 sm:mt-6"
                                }, React.createElement(Input.make, {
                                      type_: "text",
                                      name: "username",
                                      placeholder: "업체명 (개인생산자일 경우 대표자 성함)",
                                      onChange: (function (param) {
                                          return ReForm__Helpers.handleChange(partial_arg, param);
                                        }),
                                      size: /* Large */0,
                                      error: Curry._1(form.getFieldError, /* Field */{
                                            _0: /* Name */0
                                          })
                                    })), React.createElement(VerifyPhoneNumber.make, {
                                  onVerified: handleVerifiedPhoneNumber
                                }), React.createElement("div", {
                                  className: "py-4"
                                }, React.createElement("div", {
                                      className: "flex"
                                    }, React.createElement(Input.make, {
                                          type_: "text",
                                          name: "address1",
                                          placeholder: "주소",
                                          className: "flex-1",
                                          defaultValue: SignUp_Seller_Form.FormFields.get(form.values, /* Address */4),
                                          size: /* Large */0,
                                          error: undefined,
                                          disabled: true
                                        }), React.createElement("span", {
                                          className: "flex w-24 h-13 ml-2"
                                        }, React.createElement("button", {
                                              className: "btn-level1",
                                              type: "button",
                                              onClick: handleOnClickSearchAddress
                                            }, "주소검색"))), React.createElement(Input.make, {
                                      type_: "text",
                                      name: "address2",
                                      placeholder: "상세주소",
                                      className: "mt-2",
                                      value: detailedAddress,
                                      onChange: handleOnChangeDetailedAddress,
                                      size: /* Large */0,
                                      error: undefined
                                    })), React.createElement("div", {
                                  className: "py-4"
                                }, React.createElement(Input.make, {
                                      type_: "email",
                                      name: "email",
                                      placeholder: "이메일",
                                      onChange: (function (param) {
                                          return ReForm__Helpers.handleChange(partial_arg$1, param);
                                        }),
                                      size: /* Large */0,
                                      error: Curry._1(form.getFieldError, /* Field */{
                                            _0: /* Email */2
                                          })
                                    }), React.createElement(Input.make, {
                                      type_: "password",
                                      name: "password",
                                      placeholder: "비밀번호 (영문, 숫자 조합 6~15자)",
                                      className: "mt-2",
                                      onChange: (function (param) {
                                          return ReForm__Helpers.handleChange(partial_arg$2, param);
                                        }),
                                      size: /* Large */0,
                                      error: Curry._1(form.getFieldError, /* Field */{
                                            _0: /* Password */3
                                          })
                                    }), React.createElement(Input.make, {
                                      type_: "password",
                                      name: "password2",
                                      placeholder: "비밀번호 재입력",
                                      className: "mt-2",
                                      value: passwordConfirm,
                                      onChange: handleOnChangePasswordConfirm,
                                      size: /* Large */0,
                                      error: undefined
                                    }), isPasswordConfirmed(undefined) ? React.createElement("span", {
                                        className: "flex mt-1"
                                      }, React.createElement(IconError.make, {
                                            width: "20",
                                            height: "20"
                                          }), React.createElement("span", {
                                            className: "text-sm text-red-500 ml-1"
                                          }, "비밀번호가 일치하지 않습니다.")) : null), React.createElement("div", {
                                  className: "flex flex-col py-4 gap-3"
                                }, React.createElement(SignUp_Seller$Select, {
                                      t: productType,
                                      values: [
                                        "농산물",
                                        "축산물",
                                        "수산물"
                                      ],
                                      title: "판매상품",
                                      display: SignUp_Seller_Form.displayProductType,
                                      onChange: handleOnChangeProductType,
                                      isError: Belt_Option.isSome(Curry._1(form.getFieldError, /* Field */{
                                                _0: /* ProducerType */8
                                              })) && Belt_Option.isNone(productType)
                                    }), Belt_Option.isSome(productType) ? React.createElement(SignUp_Seller$Select, {
                                        t: producerType,
                                        values: SignUp_Seller_Form.optionValues(productType),
                                        title: "직업군",
                                        display: SignUp_Seller_Form.displayProducerType,
                                        onChange: handleOnChangeProducerType,
                                        isError: Belt_Option.isSome(Curry._1(form.getFieldError, /* Field */{
                                                  _0: /* ProducerType */8
                                                }))
                                      }) : null, React.createElement(Input.make, {
                                      type_: "text",
                                      name: "business-number",
                                      placeholder: tmp,
                                      value: businessRegistrationNumber,
                                      onChange: handleOnChangeBusinessRegistrationNumber,
                                      size: /* Large */0,
                                      error: undefined
                                    }), React.createElement("span", {
                                      className: "block text-text-L2 -mt-1"
                                    }, "*등록번호가 없을 경우 빈칸으로 제출해 주세요.")), React.createElement(SignUp_Seller_Terms.make, {
                                  onConfirmed: handleOnChangeTerms,
                                  isMarketing: isMarketing,
                                  setMarketing: match$7[1]
                                })), React.createElement("span", {
                              className: "flex h-12"
                            }, React.createElement("button", {
                                  className: isDisabledSubmit ? "btn-level1-disabled" : "btn-level1",
                                  disabled: isDisabledSubmit,
                                  type: "submit"
                                }, "회원가입")))), React.createElement("div", {
                      className: "absolute bottom-4 text-sm text-text-L3"
                    }, "ⓒ Copyright Greenlabs All Reserved. (주)그린랩스")), React.createElement(Dialog.make, {
                  isShow: match$9[0],
                  children: React.createElement("p", {
                        className: "text-text-L1 text-center whitespace-pre-wrap"
                      }, Belt_Option.getWithDefault(match$9[1], "회원가입에 실패하였습니다.\n다시 한번 입력해주세요.")),
                  onConfirm: (function (param) {
                      return setShowErrorWithMessage(function (param) {
                                  return [
                                          /* Hide */1,
                                          undefined
                                        ];
                                });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$10[0],
                  children: React.createElement("p", {
                        className: "text-text-L1 text-center whitespace-pre-wrap"
                      }, "회원가입을 진행중이에요,\n회원가입을 중단하시겠어요?"),
                  onCancel: (function (param) {
                      return setShowConfirmGoBack(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  onConfirm: (function (param) {
                      router.push("/seller/signin");
                      
                    }),
                  textOnCancel: "닫기",
                  textOnConfirm: "그만두기",
                  kindOfConfirm: /* Negative */1
                }));
}

var FormFields;

var Form;

var Terms;

var parseProducerType = SignUp_Seller_Form.parseProducerType;

var parseProductType = SignUp_Seller_Form.parseProductType;

var stringifyProducerType = SignUp_Seller_Form.stringifyProducerType;

var displayProductType = SignUp_Seller_Form.displayProductType;

var displayProducerType = SignUp_Seller_Form.displayProducerType;

var optionValues = SignUp_Seller_Form.optionValues;

var make = SignUp_Seller;

export {
  FormFields ,
  Form ,
  Terms ,
  parseProducerType ,
  parseProductType ,
  stringifyProducerType ,
  displayProductType ,
  displayProducerType ,
  optionValues ,
  Select ,
  make ,
  
}
/* Env Not a pure module */
