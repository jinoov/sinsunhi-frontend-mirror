// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "../../components/common/Input.mjs";
import * as Timer from "../../components/common/Timer.mjs";
import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as ReForm from "@rescriptbr/reform/src/ReForm.mjs";
import * as IconArrow from "../../components/svgs/IconArrow.mjs";
import * as IconError from "../../components/svgs/IconError.mjs";
import Head from "next/head";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as FetchHelper from "../../utils/FetchHelper.mjs";
import * as ReactEvents from "../../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import * as ResetPassword_Style from "../../components/ResetPassword_Style.mjs";

function get(values, field) {
  return values.phoneNumber;
}

function set(values, field, value) {
  return {
          phoneNumber: value
        };
}

var VerifyPhoneNumberFormFields = {
  get: get,
  set: set
};

function get$1(values, field) {
  if (field) {
    return values.password;
  } else {
    return values.verificationCode;
  }
}

function set$1(values, field, value) {
  if (field) {
    return {
            verificationCode: values.verificationCode,
            password: value
          };
  } else {
    return {
            verificationCode: value,
            password: values.password
          };
  }
}

var ResetPasswordFormFields = {
  get: get$1,
  set: set$1
};

var VerifyPhoneNumberForm = ReForm.Make({
      set: set,
      get: get
    });

var ResetPasswordForm = ReForm.Make({
      set: set$1,
      get: get$1
    });

var initialStateVerifyPhoneNumber = {
  phoneNumber: ""
};

var initialStateResetPassword = {
  verificationCode: "",
  password: ""
};

function checkDisabledSubmitVerifyPhoneNumberButton(phoneNumber) {
  return phoneNumber === "";
}

function checkPasswordConfirmed(pw1, pw2) {
  if (pw1 === "" || pw2 === "") {
    return /* Waiting */0;
  } else if (pw1 !== "" && pw2 !== "" && pw1 === pw2) {
    return /* Confirmed */1;
  } else {
    return /* NotConfirmed */2;
  }
}

function ResetPassword_Seller(Props) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        return /* BeforeRequestVerificationCode */0;
      });
  var setStatusRequestVerificationCode = match[1];
  var statusRequestVerificationCode = match[0];
  var match$1 = React.useState(function () {
        return /* BeforeRequestReset */0;
      });
  var setStatusRequestReset = match$1[1];
  var statusRequestReset = match$1[0];
  var match$2 = React.useState(function () {
        return "";
      });
  var setPasswordConfirm = match$2[1];
  var passwordConfirm = match$2[0];
  var match$3 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowConfirmGoBack = match$3[1];
  var match$4 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowSendingVerificationCodeError = match$4[1];
  var match$5 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowResetSuccess = match$5[1];
  var match$6 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowResetError = match$6[1];
  var onSubmitVerifyPhoneNumber = function (param) {
    setStatusRequestVerificationCode(function (param) {
          return /* SendingRequestVerificationCode */1;
        });
    var phoneNumber = param.state.values.phoneNumber.replace(new RegExp("\\-", "g"), "");
    Belt_Option.map(JSON.stringify({
              uid: phoneNumber
            }), (function (body) {
            return FetchHelper.post(Env.restApiUrl + "/user/password-reset", body, (function (param) {
                          return setStatusRequestVerificationCode(function (param) {
                                      return /* SuccessRequestVerificationCode */2;
                                    });
                        }), (function (param) {
                          setShowSendingVerificationCodeError(function (param) {
                                return /* Show */0;
                              });
                          return setStatusRequestVerificationCode(function (param) {
                                      return /* FailedRequestVerificationCode */3;
                                    });
                        }));
          }));
    
  };
  var verifyPhoneNumberForm = Curry._7(VerifyPhoneNumberForm.use, initialStateVerifyPhoneNumber, /* Schema */{
        _0: Belt_Array.concatMany([Curry._4(VerifyPhoneNumberForm.ReSchema.Validation.regExp, "전화번호 형식이 맞지 않습니다.", "^\\d{3}-\\d{3,4}-\\d{4}$", undefined, /* PhoneNumber */0)])
      }, onSubmitVerifyPhoneNumber, undefined, undefined, /* OnChange */0, undefined);
  var onSubmitResetPassword = function (param) {
    var state = param.state;
    setStatusRequestReset(function (param) {
          return /* SendingRequestReset */1;
        });
    var phoneNumber = verifyPhoneNumberForm.values.phoneNumber.replace(new RegExp("\\-", "g"), "");
    var code = state.values.verificationCode;
    var password = state.values.password;
    Belt_Option.map(JSON.stringify({
              uid: phoneNumber,
              "confirmed-no": code,
              password: password
            }), (function (body) {
            return FetchHelper.put(Env.restApiUrl + "/user/password/farmer", body, (function (param) {
                          setStatusRequestReset(function (param) {
                                return /* SuccessRequestReset */2;
                              });
                          return setShowResetSuccess(function (param) {
                                      return /* Show */0;
                                    });
                        }), (function (param) {
                          setStatusRequestReset(function (param) {
                                return /* FailedRequestReset */3;
                              });
                          return setShowResetError(function (param) {
                                      return /* Show */0;
                                    });
                        }));
          }));
    
  };
  var resetPasswordForm = Curry._7(ResetPasswordForm.use, initialStateResetPassword, /* Schema */{
        _0: Belt_Array.concatMany([
              Curry._3(ResetPasswordForm.ReSchema.Validation.nonEmpty, "인증번호를 입력해주세요.", undefined, /* VerificationCode */0),
              Curry._4(ResetPasswordForm.ReSchema.Validation.regExp, "비밀번호가 형식에 맞지 않습니다.", "^(?=.*\\d)(?=.*[a-zA-Z]).{6,15}$", undefined, /* Password */1)
            ])
      }, onSubmitResetPassword, undefined, undefined, /* OnChange */0, undefined);
  var handleOnSubmitPhoneNumber = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  if (statusRequestVerificationCode === 0) {
                    return Curry._1(verifyPhoneNumberForm.submit, undefined);
                  }
                  switch (statusRequestVerificationCode) {
                    case /* SendingRequestVerificationCode */1 :
                        return ;
                    case /* SuccessRequestVerificationCode */2 :
                        setStatusRequestVerificationCode(function (param) {
                              return /* BeforeRequestVerificationCode */0;
                            });
                        Curry._1(resetPasswordForm.resetForm, undefined);
                        return setPasswordConfirm(function (param) {
                                    return "";
                                  });
                    case /* FailedRequestVerificationCode */3 :
                        return Curry._1(verifyPhoneNumberForm.submit, undefined);
                    
                  }
                }), param);
  };
  var handleOnChangePhoneNumber = function (e) {
    var newValue = e.currentTarget.value.replace(/[^0-9]/g, "").replace(/(^1[0-9]{3}|^0[0-9]{2})([0-9]+)?([0-9]{4})$/, "$1-$2-$3").replace("--", "-");
    return Curry._4(verifyPhoneNumberForm.setFieldValue, /* PhoneNumber */0, newValue, true, undefined);
  };
  var handleOnSubmitResetPassword = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return Curry._1(resetPasswordForm.submit, undefined);
                }), param);
  };
  var isDisabledVerifyPhoneNumberForm = statusRequestVerificationCode === 2 || statusRequestVerificationCode === 1;
  var isDisabledSubmitVerifyPhoneNumberButton = verifyPhoneNumberForm.values.phoneNumber === "";
  var timerStatus;
  if (statusRequestVerificationCode !== 2) {
    timerStatus = /* Stop */3;
  } else {
    switch (statusRequestReset) {
      case /* BeforeRequestReset */0 :
          timerStatus = /* Start */0;
          break;
      case /* SendingRequestReset */1 :
          timerStatus = /* Pause */1;
          break;
      case /* SuccessRequestReset */2 :
          timerStatus = /* Stop */3;
          break;
      case /* FailedRequestReset */3 :
          timerStatus = /* Resume */2;
          break;
      
    }
  }
  var isDisabledResetPasswordForm = statusRequestVerificationCode !== 2 ? true : statusRequestReset === 2 || statusRequestReset === 1;
  var isPasswordConfirmed = checkPasswordConfirmed(resetPasswordForm.values.password, passwordConfirm);
  var match$7 = resetPasswordForm.values.verificationCode !== "";
  var match$8 = resetPasswordForm.isSubmitting;
  var isDisabledSubmitResetPasswordButton = match$7 && !match$8 ? isPasswordConfirmed !== 1 : true;
  var onChangeStatus = function (status) {
    if (status >= 3 && statusRequestVerificationCode === 2) {
      setStatusRequestVerificationCode(function (param) {
            return /* BeforeRequestVerificationCode */0;
          });
      return setStatusRequestReset(function (param) {
                  return /* BeforeRequestReset */0;
                });
    }
    
  };
  var handleOnClickBackButton = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return setShowConfirmGoBack(function (param) {
                              return /* Show */0;
                            });
                }), param);
  };
  var handleOnChangePasswordConfirm = function (e) {
    var value = e.target.value;
    return setPasswordConfirm(function (param) {
                return value;
              });
  };
  var partial_arg = Curry._1(resetPasswordForm.handleChange, /* VerificationCode */0);
  var partial_arg$1 = Curry._1(resetPasswordForm.handleChange, /* Password */1);
  return React.createElement(React.Fragment, undefined, React.createElement(Head, {
                  children: React.createElement("title", undefined, "생산자 비밀번호 재설정 - 신선하이")
                }), React.createElement("div", {
                  className: "container mx-auto max-w-lg min-h-screen relative flex flex-col justify-center items-center"
                }, React.createElement("div", {
                      className: "w-full flex-auto flex flex-col sm:justify-center items-center sm:pt-10"
                    }, React.createElement("div", {
                          className: "hidden sm:block"
                        }, React.createElement("img", {
                              alt: "신선하이 로고",
                              height: "42",
                              src: "/assets/sinsunhi-logo.svg",
                              width: "164"
                            })), React.createElement("div", {
                          className: "hidden text-gray-500 sm:block mt-2"
                        }, React.createElement("span", undefined, "농축산물 생산자 "), React.createElement("span", {
                              className: "ml-1 font-semibold"
                            }, "판로개척 플랫폼")), React.createElement("div", {
                          className: "w-full px-5 sm:shadow-xl sm:rounded sm:border sm:border-gray-100 sm:py-12 sm:px-20 mt-6"
                        }, React.createElement("h2", {
                              className: "text-2xl font-bold text-center relative"
                            }, "비밀번호 재설정", React.createElement("button", {
                                  className: "absolute left-0 p-2",
                                  onClick: handleOnClickBackButton
                                }, React.createElement(IconArrow.make, {
                                      height: "24",
                                      width: "24",
                                      fill: "#262626",
                                      className: "transform rotate-180"
                                    }))), React.createElement("div", {
                              className: "py-4 mt-12"
                            }, React.createElement("div", {
                                  className: "flex flex-col"
                                }, React.createElement("span", {
                                      className: "mb-4 text-black-gl"
                                    }, "휴대전화번호를 입력해 주세요"), React.createElement(Input.make, {
                                      type_: "text",
                                      name: "phone-number",
                                      placeholder: "-없이 숫자로만 입력",
                                      value: verifyPhoneNumberForm.values.phoneNumber,
                                      onChange: handleOnChangePhoneNumber,
                                      size: /* Large */0,
                                      error: Curry._1(verifyPhoneNumberForm.getFieldError, /* Field */{
                                            _0: /* PhoneNumber */0
                                          }),
                                      disabled: isDisabledVerifyPhoneNumberForm
                                    }), React.createElement("button", {
                                      className: isDisabledSubmitVerifyPhoneNumberButton ? ResetPassword_Style.disabledButton : ResetPassword_Style.enabledButton,
                                      disabled: isDisabledSubmitVerifyPhoneNumberButton,
                                      type: "button",
                                      onClick: handleOnSubmitPhoneNumber
                                    }, statusRequestVerificationCode !== 2 ? "인증번호 전송" : "재전송"))), React.createElement("form", {
                              className: "pb-96 sm:pb-0"
                            }, React.createElement("span", {
                                  className: "inline-block mb-4 whitespace-pre mt-6 text-black-gl"
                                }, "문자로 발송된 인증번호와\n새 비밀번호를 입력해 주세요"), React.createElement("div", {
                                  className: "relative"
                                }, React.createElement(Input.make, {
                                      type_: "number",
                                      name: "verify-number",
                                      placeholder: "인증번호 6자리 숫자 입력",
                                      value: resetPasswordForm.values.verificationCode,
                                      onChange: (function (param) {
                                          return ReForm__Helpers.handleChange(partial_arg, param);
                                        }),
                                      size: /* Large */0,
                                      error: Curry._1(resetPasswordForm.getFieldError, /* Field */{
                                            _0: /* VerificationCode */0
                                          }),
                                      disabled: isDisabledResetPasswordForm
                                    }), statusRequestVerificationCode !== 2 || statusRequestReset === 2 ? null : React.createElement(Timer.make, {
                                        status: timerStatus,
                                        onChangeStatus: onChangeStatus,
                                        startTimeInSec: 180,
                                        className: "absolute top-3 right-4 text-red-gl"
                                      }), React.createElement("span", {
                                      className: "block py-1.5"
                                    }), React.createElement(Input.make, {
                                      type_: "password",
                                      name: "password",
                                      placeholder: "비밀번호 (영문, 숫자 조합 6~15자)",
                                      value: resetPasswordForm.values.password,
                                      onChange: (function (param) {
                                          return ReForm__Helpers.handleChange(partial_arg$1, param);
                                        }),
                                      size: /* Large */0,
                                      error: Curry._1(resetPasswordForm.getFieldError, /* Field */{
                                            _0: /* Password */1
                                          }),
                                      disabled: isDisabledResetPasswordForm
                                    }), React.createElement("label", {
                                      className: "block py-1",
                                      htmlFor: "password2"
                                    }), React.createElement(Input.make, {
                                      type_: "password",
                                      name: "password2",
                                      placeholder: "비밀번호 확인",
                                      value: passwordConfirm,
                                      onChange: handleOnChangePasswordConfirm,
                                      size: /* Large */0,
                                      error: undefined,
                                      disabled: isDisabledResetPasswordForm
                                    }), isPasswordConfirmed >= 2 ? React.createElement("span", {
                                        className: "flex mt-1"
                                      }, React.createElement(IconError.make, {
                                            width: "20",
                                            height: "20"
                                          }), React.createElement("span", {
                                            className: "text-sm text-red-500 ml-1"
                                          }, "비밀번호가 일치하지 않습니다.")) : null), React.createElement("span", {
                                  className: "block py-1"
                                }), React.createElement("button", {
                                  className: isDisabledSubmitResetPasswordButton ? ResetPassword_Style.disabledButton : ResetPassword_Style.enabledButton,
                                  disabled: isDisabledSubmitResetPasswordButton,
                                  onClick: handleOnSubmitResetPassword
                                }, "비밀번호 재설정"))))), React.createElement(Dialog.make, {
                  isShow: match$3[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "비밀번호 재설정이 진행중 입니다.\n그만 하시겠어요?"),
                  onCancel: (function (param) {
                      return setShowConfirmGoBack(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  onConfirm: (function (param) {
                      router.replace("/seller/signin");
                      
                    }),
                  textOnConfirm: "그만하기",
                  kindOfConfirm: /* Negative */1
                }), React.createElement(Dialog.make, {
                  isShow: match$4[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "문자 전송이 실패했습니다.\n다시한번 시도해주세요."),
                  onCancel: (function (param) {
                      return setShowSendingVerificationCodeError(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  textOnCancel: "확인"
                }), React.createElement(Dialog.make, {
                  isShow: match$5[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "비밀번호 재설정이\n완료되었습니다."),
                  onConfirm: (function (param) {
                      router.replace("/seller/signin");
                      
                    }),
                  textOnConfirm: "확인"
                }), React.createElement(Dialog.make, {
                  isShow: match$6[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "비밀번호 재설정 요청이 실패하였습니다.\n다시 시도해주세요."),
                  onConfirm: (function (param) {
                      return setShowResetError(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  textOnConfirm: "확인"
                }));
}

var Styles;

var make = ResetPassword_Seller;

export {
  Styles ,
  VerifyPhoneNumberFormFields ,
  ResetPasswordFormFields ,
  VerifyPhoneNumberForm ,
  ResetPasswordForm ,
  initialStateVerifyPhoneNumber ,
  initialStateResetPassword ,
  checkDisabledSubmitVerifyPhoneNumberButton ,
  checkPasswordConfirmed ,
  make ,
  
}
/* VerifyPhoneNumberForm Not a pure module */
