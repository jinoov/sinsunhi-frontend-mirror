// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "../../components/common/Input.mjs";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as Global from "../../components/Global.mjs";
import * as Helper from "../../utils/Helper.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Checkbox from "../../components/common/Checkbox.mjs";
import * as Redirect from "../../components/Redirect.mjs";
import * as IconCheck from "../../components/svgs/IconCheck.mjs";
import * as IconError from "../../components/svgs/IconError.mjs";
import Head from "next/head";
import Link from "next/link";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as FetchHelper from "../../utils/FetchHelper.mjs";
import * as ReactEvents from "../../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import * as ChannelTalkHelper from "../../utils/ChannelTalkHelper.mjs";
import * as LocalStorageHooks from "../../utils/LocalStorageHooks.mjs";
import * as SignIn_Seller_Form from "../../components/SignIn_Seller_Form.mjs";
import * as ReactToastNotifications from "react-toast-notifications";

function info_encode(v) {
  return Js_dict.fromArray([
              [
                "message",
                Spice.optionToJson(Spice.stringToJson, v.message)
              ],
              [
                "activation-method",
                Spice.optionToJson((function (param) {
                        return Spice.arrayToJson(Spice.stringToJson, param);
                      }), v.activationMethod)
              ],
              [
                "email",
                Spice.optionToJson(Spice.stringToJson, v.email)
              ]
            ]);
}

function info_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var message = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
  if (message.TAG === /* Ok */0) {
    var activationMethod = Spice.optionFromJson((function (param) {
            return Spice.arrayFromJson(Spice.stringFromJson, param);
          }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "activation-method"), null));
    if (activationMethod.TAG === /* Ok */0) {
      var email = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "email"), null));
      if (email.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  message: message._0,
                  activationMethod: activationMethod._0,
                  email: email._0
                }
              };
      }
      var e = email._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".email" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = activationMethod._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".activation-method" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = message._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".message" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function $$default(param) {
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var router = Router.useRouter();
  var match$1 = React.useState(function () {
        return true;
      });
  var setCheckedSavePhone = match$1[1];
  var isCheckedSavePhone = match$1[0];
  var match$2 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowForError = match$2[1];
  var onSubmit = function (param) {
    var state = param.state;
    var username = Helper.PhoneNumber.removeDash(SignIn_Seller_Form.FormFields.get(state.values, /* Phone */0));
    var password = SignIn_Seller_Form.FormFields.get(state.values, /* Password */1);
    var prim0 = new URLSearchParams(router.query);
    var redirectUrl = Belt_Option.getWithDefault(Caml_option.nullable_to_opt(prim0.get("redirect")), "/seller");
    var urlSearchParams = new URLSearchParams([
            [
              "grant-type",
              "password"
            ],
            [
              "username",
              username
            ],
            [
              "password",
              password
            ]
          ]).toString();
    FetchHelper.postWithURLSearchParams("" + Env.restApiUrl + "/user/token", urlSearchParams, (function (res) {
            var result = FetchHelper.responseToken_decode(res);
            if (result.TAG !== /* Ok */0) {
              return setShowForError(function (param) {
                          return /* Show */0;
                        });
            }
            var res$1 = result._0;
            Curry._1(LocalStorageHooks.AccessToken.set, res$1.token);
            Curry._1(LocalStorageHooks.RefreshToken.set, res$1.refreshToken);
            var user = CustomHooks.Auth.user_decode(CustomHooks.Auth.decodeJwt(res$1.token));
            if (user.TAG === /* Ok */0) {
              Curry._1(Global.$$Window.ReactNativeWebView.PostMessage.signIn, String(user._0.id));
            }
            Redirect.setHref(redirectUrl);
          }), (function (err) {
            if (err.status !== 401) {
              return setShowForError(function (param) {
                          return /* Show */0;
                        });
            }
            var info = info_decode(err.info);
            var tmp;
            tmp = info.TAG === /* Ok */0 ? Belt_Option.map(info._0.activationMethod, (function (method) {
                      return method.join(",");
                    })) : undefined;
            var mode = Belt_Option.map(tmp, (function (methods) {
                    return "mode=" + methods;
                  }));
            var info$1 = info_decode(err.info);
            var activationEmail;
            activationEmail = info$1.TAG === /* Ok */0 ? info$1._0.email : undefined;
            if (mode !== undefined) {
              if (activationEmail !== undefined) {
                router.push("/seller/activate-user?" + mode + "&uid=" + username + "&email=" + activationEmail + "&role=farmer");
              } else {
                router.push("/seller/activate-user?" + mode + "&uid=" + username + "&role=farmer");
              }
            } else {
              router.push("/seller/activate-user?uid=" + username + "&role=farmer");
            }
          }));
  };
  var form = Curry._7(SignIn_Seller_Form.Form.use, SignIn_Seller_Form.initialState, /* Schema */{
        _0: Belt_Array.concatMany([
              Curry._3(SignIn_Seller_Form.Form.ReSchema.Validation.nonEmpty, "휴대전화 번호를 입력해주세요.", undefined, /* Phone */0),
              Curry._3(SignIn_Seller_Form.Form.ReSchema.Validation.nonEmpty, "비밀번호를 입력해주세요.", undefined, /* Password */1)
            ])
      }, onSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleOnSubmit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  var phone = SignIn_Seller_Form.FormFields.get(form.values, /* Phone */0);
                  if (isCheckedSavePhone) {
                    Belt_Option.forEach(Belt_Option.flatMap(Helper.PhoneNumber.parse(phone), Helper.PhoneNumber.format), (function (phoneNumber) {
                            Curry._1(LocalStorageHooks.PhoneNumber.set, phoneNumber);
                          }));
                  } else {
                    Curry._1(LocalStorageHooks.PhoneNumber.remove, undefined);
                  }
                  Curry._1(form.submit, undefined);
                }), param);
  };
  var handleOnCheckSavePhone = function (e) {
    var checked = e.target.checked;
    setCheckedSavePhone(function (param) {
          return checked;
        });
  };
  var handleNavigateToSignUp = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  router.push("/seller/signup");
                }), param);
  };
  React.useEffect((function () {
          var phoneNumber = Curry._1(LocalStorageHooks.PhoneNumber.get, undefined);
          if (phoneNumber !== "") {
            setCheckedSavePhone(function (param) {
                  return true;
                });
            Curry._4(form.setFieldValue, /* Phone */0, phoneNumber, undefined, undefined);
          }
          
        }), []);
  var isFormFilled = function (param) {
    var phone = SignIn_Seller_Form.FormFields.get(form.values, /* Phone */0);
    var password = SignIn_Seller_Form.FormFields.get(form.values, /* Password */1);
    if (phone !== "") {
      return password !== "";
    } else {
      return false;
    }
  };
  var handleOnChangePhoneNumber = function (e) {
    var newValue = e.currentTarget.value.replace(/[^0-9]/g, "").replace(/(^1[0-9]{3}|^0[0-9]{2})([0-9]+)?([0-9]{4})$/, "$1-$2-$3").replace("--", "-");
    Curry._4(form.setFieldValue, /* Phone */0, newValue, true, undefined);
  };
  var user = CustomHooks.Auth.use(undefined);
  React.useEffect((function () {
          if (typeof user !== "number") {
            var match = user._0.role;
            switch (match) {
              case /* Seller */0 :
                  router.push("/seller");
                  break;
              case /* Buyer */1 :
                  router.push("/buyer");
                  break;
              case /* Admin */2 :
                  break;
              
            }
          }
          
        }), [user]);
  React.useEffect((function () {
          var activationToken = Js_dict.get(router.query, "dormant_reset_token");
          var activate = function (token) {
            Belt_Option.map(JSON.stringify({
                      "dormant-reset-token": token
                    }), (function (body) {
                    return FetchHelper.post("" + Env.restApiUrl + "/user/dormant/reset-email", body, (function (param) {
                                  addToast(React.createElement("div", {
                                            className: "flex items-center"
                                          }, React.createElement(IconCheck.make, {
                                                height: "24",
                                                width: "24",
                                                fill: "#12B564",
                                                className: "mr-2"
                                              }), "휴면 계정이 해제되었어요!"), {
                                        appearance: "success"
                                      });
                                }), (function (err) {
                                  addToast(React.createElement("div", {
                                            className: "flex items-center"
                                          }, React.createElement(IconError.make, {
                                                width: "24",
                                                height: "24",
                                                className: "mr-2"
                                              }), "휴면 계정 해제에 실패했어요"), {
                                        appearance: "error"
                                      });
                                }));
                  }));
          };
          if (activationToken !== undefined) {
            activate(activationToken);
          }
          
        }), [router.query]);
  ChannelTalkHelper.Hook.use(undefined, undefined, undefined);
  var partial_arg = Curry._1(form.handleChange, /* Password */1);
  return React.createElement(React.Fragment, undefined, React.createElement(Head, {
                  children: React.createElement("title", undefined, "생산자 로그인 - 신선하이")
                }), React.createElement("div", {
                  className: "container mx-auto max-w-lg min-h-screen relative flex flex-col justify-center items-center"
                }, React.createElement("div", {
                      className: "flex-auto flex flex-col justify-center items-center pt-10"
                    }, React.createElement("img", {
                          alt: "신선하이 로고",
                          height: "42",
                          src: "/assets/sinsunhi-logo.svg",
                          width: "164"
                        }), React.createElement("div", {
                          className: "text-gray-500 mt-2"
                        }, React.createElement("span", undefined, "농축산물 생산자 "), React.createElement("span", {
                              className: "font-semibold"
                            }, " 판로개척 플랫폼")), React.createElement("div", {
                          className: "w-full px-5 sm:shadow-xl sm:rounded sm:border sm:border-gray-100 sm:py-12 sm:px-20 mt-6"
                        }, React.createElement("h2", {
                              className: "text-2xl font-bold text-center"
                            }, "생산자 로그인"), React.createElement("form", {
                              className: "mt-8",
                              onSubmit: handleOnSubmit
                            }, React.createElement("label", {
                                  className: "block mt-3",
                                  htmlFor: "phone-number"
                                }), React.createElement(Input.make, {
                                  type_: "text",
                                  name: "phone-number",
                                  placeholder: "휴대전화번호",
                                  value: SignIn_Seller_Form.FormFields.get(form.values, /* Phone */0),
                                  onChange: handleOnChangePhoneNumber,
                                  size: /* Large */0,
                                  error: Curry._1(form.getFieldError, /* Field */{
                                        _0: /* Phone */0
                                      })
                                }), React.createElement("label", {
                                  className: "block mt-3",
                                  htmlFor: "password"
                                }), React.createElement(Input.make, {
                                  type_: "password",
                                  name: "password",
                                  placeholder: "비밀번호",
                                  onChange: (function (param) {
                                      return ReForm__Helpers.handleChange(partial_arg, param);
                                    }),
                                  size: /* Large */0,
                                  error: Curry._1(form.getFieldError, /* Field */{
                                        _0: /* Password */1
                                      })
                                }), React.createElement("div", {
                                  className: "flex justify-between items-center mt-4"
                                }, React.createElement("span", {
                                      className: "flex"
                                    }, React.createElement(Checkbox.make, {
                                          id: "auto-login",
                                          checked: isCheckedSavePhone,
                                          onChange: handleOnCheckSavePhone
                                        }), React.createElement("span", {
                                          className: "text-sm text-gray-700 ml-1"
                                        }, "아이디 저장")), React.createElement(Link, {
                                      href: "/seller/reset-password",
                                      children: React.createElement("span", {
                                            className: "text-sm text-gray-700 underline"
                                          }, "비밀번호 재설정")
                                    })), React.createElement("button", {
                                  className: form.isSubmitting || !isFormFilled(undefined) ? "w-full mt-12 py-3 bg-gray-300 rounded-xl text-gray-100" : "w-full mt-12 py-3 bg-green-gl rounded-xl text-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-green-gl focus:ring-opacity-100",
                                  disabled: form.isSubmitting || !isFormFilled(undefined),
                                  type: "submit"
                                }, "로그인")), React.createElement("p", {
                              className: "p-4 bg-gray-100 mt-8 rounded-xl"
                            }, React.createElement("span", {
                                  className: "text-gray-500 whitespace-pre-wrap"
                                }, "기존에 신선하이와 거래하던 생산자이신가요?\n비밀번호 재설정 버튼을 눌러 비밀번호를 설정하시고 사용 부탁드립니다."), React.createElement("span", {
                                  className: "block mt-2 cursor-pointer",
                                  onClick: handleNavigateToSignUp
                                }, React.createElement("span", {
                                      className: "text-gray-500 underline"
                                    }, "신규 거래 생산자이신가요? "), React.createElement("span", {
                                      className: "text-gray-500 font-bold underline"
                                    }, " 회원가입"))))), React.createElement("div", {
                      className: "text-sm text-gray-400 py-4"
                    }, "ⓒ Copyright Greenlabs All Reserved. (주)그린랩스")), React.createElement(Dialog.make, {
                  isShow: match$2[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "로그인 정보가 일치하지 않거나 없는 계정입니다. 다시 한번 입력해주세요."),
                  onConfirm: (function (param) {
                      setShowForError(function (param) {
                            return /* Hide */1;
                          });
                    })
                }));
}

var FormFields;

var Form;

export {
  FormFields ,
  Form ,
  info_encode ,
  info_decode ,
  $$default ,
  $$default as default,
}
/* Env Not a pure module */
