// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "../components/common/Input.mjs";
import * as Timer from "../components/common/Timer.mjs";
import * as React from "react";
import * as Dialog from "../components/common/Dialog.mjs";
import * as ReForm from "@rescriptbr/reform/src/ReForm.mjs";
import * as IconCheck from "../components/svgs/IconCheck.mjs";
import * as IconError from "../components/svgs/IconError.mjs";
import * as ReactUtil from "../utils/ReactUtil.mjs";
import Head from "next/head";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as FetchHelper from "../utils/FetchHelper.mjs";
import * as Router from "next/router";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import * as ReactToastNotifications from "react-toast-notifications";

function get(values, field) {
  return values.verificationCode;
}

function set(values, field, value) {
  return {
          verificationCode: value
        };
}

var VerificationCodeFormFields = {
  get: get,
  set: set
};

var VerificationCodeForm = ReForm.Make({
      set: set,
      get: get
    });

var initialStateVerificationCode = {
  verificationCode: ""
};

function ActivateUser_ByPhone_VerificationCode(props) {
  var role = props.role;
  var uid = props.uid;
  var skipEmail = props.skipEmail;
  var phone = props.phone;
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var limitToTry = React.useRef(3);
  var inputVerificationCodeRef = React.useRef(null);
  var router = Router.useRouter();
  var match$1 = React.useState(function () {
        return /* BeforeSendVerificationCode */0;
      });
  var setVerificationCode = match$1[1];
  var verificationCode = match$1[0];
  var match$2 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowVerifyError = match$2[1];
  var match$3 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowTryLimitError = match$3[1];
  var match$4 = React.useState(function () {
        return false;
      });
  var setTimeover = match$4[1];
  var onSubmitVerificationCode = function (param) {
    setVerificationCode(function (param) {
          return /* SendingVerificationCode */1;
        });
    var code = param.state.values.verificationCode;
    Belt_Option.map(JSON.stringify({
              uid: uid,
              "recipient-no": phone,
              "confirmed-no": code
            }), (function (body) {
            return FetchHelper.post("" + Env.restApiUrl + "/user/dormant/reset-phone", body, (function (param) {
                          var role$1 = role === "farmer" ? "seller" : role;
                          router.push("/" + role$1 + "/signin");
                        }), (function (err) {
                          limitToTry.current = limitToTry.current + 1 | 0;
                          if (limitToTry.current >= 10) {
                            setShowTryLimitError(function (param) {
                                  return /* Show */0;
                                });
                            return setVerificationCode(function (param) {
                                        return /* FailureToVerifyCode */3;
                                      });
                          } else {
                            return setShowVerifyError(function (param) {
                                        return /* Show */0;
                                      });
                          }
                        }));
          }));
  };
  var verificationCodeForm = Curry._7(VerificationCodeForm.use, initialStateVerificationCode, /* Schema */{
        _0: Belt_Array.concatMany([Curry._3(VerificationCodeForm.ReSchema.Validation.nonEmpty, "인증번호를 입력해주세요.", undefined, /* VerificationCode */0)])
      }, onSubmitVerificationCode, undefined, undefined, /* OnChange */0, undefined);
  var isDisabledVerifyCodeForm = verificationCode !== 0;
  var timerStatus = verificationCode !== 0 ? (
      verificationCode >= 3 ? /* Stop */3 : /* Pause */1
    ) : /* Resume */2;
  var onChangeStatus = function (status) {
    if (status >= 3) {
      setVerificationCode(function (param) {
            return /* FailureToVerifyCode */3;
          });
      return setTimeover(function (param) {
                  return true;
                });
    }
    
  };
  React.useEffect((function () {
          if (verificationCodeForm.values.verificationCode.length === 6) {
            Curry._1(verificationCodeForm.submit, undefined);
          }
          
        }), [verificationCodeForm.values.verificationCode]);
  React.useEffect((function () {
          setTimeout((function (param) {
                  ReactUtil.focusElementByRef(inputVerificationCodeRef);
                }), 0);
        }), []);
  var partial_arg = Curry._1(verificationCodeForm.handleChange, /* VerificationCode */0);
  return React.createElement(React.Fragment, undefined, React.createElement(Head, {
                  children: React.createElement("title", undefined, "휴대폰으로 휴면계정 해제")
                }), React.createElement("div", {
                  className: "container mx-auto max-w-lg min-h-buyer relative flex flex-col justify-center pb-20"
                }, React.createElement("div", {
                      className: "flex-auto flex flex-col xl:justify-center items-center"
                    }, React.createElement("div", {
                          className: "w-full p-5 xl:py-12 text-text-L1"
                        }, React.createElement("h2", {
                              className: "text-xl font-bold whitespace-pre"
                            }, "문자로 받은\n인증번호 6자리를 입력해주세요"), React.createElement("div", {
                              className: "mt-12 mb-1"
                            }, React.createElement("span", {
                                  className: "text-sm text-text-L2"
                                }, "인증번호")), React.createElement("div", {
                              className: "relative"
                            }, React.createElement(Input.make, {
                                  type_: "number",
                                  name: "verify-number",
                                  placeholder: "6자리 숫자를 입력해주세요",
                                  value: verificationCodeForm.values.verificationCode,
                                  onChange: (function (param) {
                                      return ReForm__Helpers.handleChange(partial_arg, param);
                                    }),
                                  size: /* Large */0,
                                  error: Curry._1(verificationCodeForm.getFieldError, /* Field */{
                                        _0: /* VerificationCode */0
                                      }),
                                  disabled: isDisabledVerifyCodeForm,
                                  inputRef: Caml_option.some(inputVerificationCodeRef)
                                }), verificationCode !== 2 ? React.createElement(Timer.make, {
                                    status: timerStatus,
                                    onChangeStatus: onChangeStatus,
                                    startTimeInSec: 180,
                                    className: "absolute top-3 right-4 text-primary"
                                  }) : React.createElement("div", {
                                    className: "absolute top-3.5 right-4 text-green-gl"
                                  }, "인증됨")), match$4[0] ? React.createElement("div", {
                                className: "mt-4"
                              }, React.createElement("button", {
                                    className: "bg-enabled-L5 rounded-lg text-sm px-3 py-1",
                                    onClick: (function (param) {
                                        Belt_Option.map(JSON.stringify({
                                                  "recipient-no": phone,
                                                  uid: uid,
                                                  "cert-type": "reset-dormant"
                                                }), (function (body) {
                                                return FetchHelper.post("" + Env.restApiUrl + "/user/sms", body, (function (param) {
                                                              addToast(React.createElement("div", {
                                                                        className: "flex items-center"
                                                                      }, React.createElement(IconCheck.make, {
                                                                            height: "24",
                                                                            width: "24",
                                                                            fill: "#12B564",
                                                                            className: "mr-2"
                                                                          }), "문자를 다시 전송했어요"), {
                                                                    appearance: "success"
                                                                  });
                                                              setVerificationCode(function (param) {
                                                                    return /* BeforeSendVerificationCode */0;
                                                                  });
                                                            }), (function (err) {
                                                              addToast(React.createElement("div", {
                                                                        className: "flex items-center"
                                                                      }, React.createElement(IconError.make, {
                                                                            width: "24",
                                                                            height: "24",
                                                                            className: "mr-2"
                                                                          }), "다시 시도해주세요"), {
                                                                    appearance: "error"
                                                                  });
                                                            }));
                                              }));
                                      })
                                  }, "문자 다시 받기")) : null))), React.createElement(Dialog.make, {
                  isShow: match$2[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "인증번호가 일치하지 않습니다."),
                  onConfirm: (function (param) {
                      Curry._4(verificationCodeForm.setFieldValue, /* VerificationCode */0, "", false, undefined);
                      setVerificationCode(function (param) {
                            return /* BeforeSendVerificationCode */0;
                          });
                      setShowVerifyError(function (param) {
                            return /* Hide */1;
                          });
                      setTimeout((function (param) {
                              ReactUtil.focusElementByRef(inputVerificationCodeRef);
                            }), 0);
                    }),
                  textOnConfirm: "확인"
                }), React.createElement(Dialog.make, {
                  isShow: match$3[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "휴대폰 번호를 10회 이상 틀렸어요\n이메일 인증을 하시겠어요?"),
                  onCancel: (function (param) {
                      router.back();
                    }),
                  onConfirm: (function (param) {
                      var role$1 = role === "farmer" ? "seller" : role;
                      if (skipEmail) {
                        router.push("/" + role$1 + "/activate-user");
                      } else {
                        router.push("/" + role$1 + "/activate-user?mode=email");
                      }
                    }),
                  textOnConfirm: "확인"
                }));
}

var sendBtnStyle = "w-full bg-primary rounded-xl text-white font-bold whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-gray-700 focus:ring-offset-1 h-14";

var resendBtnStyle = "w-full bg-gray-50 rounded-xl whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-1 h-14";

var make = ActivateUser_ByPhone_VerificationCode;

export {
  VerificationCodeFormFields ,
  VerificationCodeForm ,
  initialStateVerificationCode ,
  sendBtnStyle ,
  resendBtnStyle ,
  make ,
}
/* VerificationCodeForm Not a pure module */
