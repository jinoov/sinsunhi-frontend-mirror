// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Global from "../../components/Global.mjs";
import * as DataGtm from "../../utils/DataGtm.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as SRP_Tab from "./SRP_Tab.mjs";
import * as RelayEnv from "../../constants/RelayEnv.mjs";
import Head from "next/head";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as DeviceDetect from "../../bindings/DeviceDetect.mjs";
import * as Footer_Buyer from "../../components/Footer_Buyer.mjs";
import * as Header_Buyer from "../../components/Header_Buyer.mjs";
import * as Bottom_Navbar from "../../components/Bottom_Navbar.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as SRP_SortSelect from "./SRP_SortSelect.mjs";
import * as OpenGraph_Header from "../../components/OpenGraph_Header.mjs";
import * as ServerSideHelper from "../../utils/ServerSideHelper.mjs";
import * as ChannelTalkHelper from "../../utils/ChannelTalkHelper.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as FeatureFlagWrapper from "../buyer/pc/FeatureFlagWrapper.mjs";
import * as Product_FilterOption from "../buyer/Product_FilterOption.mjs";
import * as SRP_RecentSearchList from "./SRP_RecentSearchList.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as SRPBuyer_Query_graphql from "../../__generated__/SRPBuyer_Query_graphql.mjs";
import * as PLP_SectionCheckBoxGroup from "../buyer/plp/PLP_SectionCheckBoxGroup.mjs";
import * as SRPBuyer_fragment_graphql from "../../__generated__/SRPBuyer_fragment_graphql.mjs";
import * as ShopProductListItem_Buyer from "../../components/ShopProductListItem_Buyer.mjs";
import * as RescriptReactErrorBoundary from "@rescript/react/src/RescriptReactErrorBoundary.mjs";
import * as ShopSearchBuyerRefetchQuery_graphql from "../../__generated__/ShopSearchBuyerRefetchQuery_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(SRPBuyer_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(SRPBuyer_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(SRPBuyer_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(SRPBuyer_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, SRPBuyer_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, SRPBuyer_Query_graphql.node, SRPBuyer_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: SRPBuyer_Query_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, SRPBuyer_Query_graphql.node, SRPBuyer_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(SRPBuyer_Query_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(SRPBuyer_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(SRPBuyer_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(SRPBuyer_Query_graphql.node, SRPBuyer_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_orderByDirection_decode = SRPBuyer_Query_graphql.Utils.orderByDirection_decode;

var Query_orderByDirection_fromString = SRPBuyer_Query_graphql.Utils.orderByDirection_fromString;

var Query_productType_decode = SRPBuyer_Query_graphql.Utils.productType_decode;

var Query_productType_fromString = SRPBuyer_Query_graphql.Utils.productType_fromString;

var Query_searchProductsOrderField_decode = SRPBuyer_Query_graphql.Utils.searchProductsOrderField_decode;

var Query_searchProductsOrderField_fromString = SRPBuyer_Query_graphql.Utils.searchProductsOrderField_fromString;

var Query = {
  orderByDirection_decode: Query_orderByDirection_decode,
  orderByDirection_fromString: Query_orderByDirection_fromString,
  productType_decode: Query_productType_decode,
  productType_fromString: Query_productType_fromString,
  searchProductsOrderField_decode: Query_searchProductsOrderField_decode,
  searchProductsOrderField_fromString: Query_searchProductsOrderField_fromString,
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function internal_makeRefetchableFnOpts(fetchPolicy, onComplete, param) {
  var tmp = {};
  var tmp$1 = RescriptRelay.mapFetchPolicy(fetchPolicy);
  if (tmp$1 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = RescriptRelay_Internal.internal_nullableToOptionalExnHandler(onComplete);
  if (tmp$2 !== undefined) {
    tmp.onComplete = Caml_option.valFromOption(tmp$2);
  }
  return tmp;
}

function useRefetchable(fRef) {
  var match = ReactRelay.useRefetchableFragment(SRPBuyer_fragment_graphql.node, fRef);
  var refetchFn = match[1];
  var data = RescriptRelay_Internal.internal_useConvertedValue(SRPBuyer_fragment_graphql.Internal.convertFragment, match[0]);
  return [
          data,
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return Curry._2(refetchFn, RescriptRelay_Internal.internal_removeUndefinedAndConvertNullsRaw(ShopSearchBuyerRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [refetchFn])
        ];
}

function use$1(fRef) {
  var data = ReactRelay.useFragment(SRPBuyer_fragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(SRPBuyer_fragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(SRPBuyer_fragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return SRPBuyer_fragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

function usePagination(fr) {
  var p = ReactRelay.usePaginationFragment(SRPBuyer_fragment_graphql.node, fr);
  var data = RescriptRelay_Internal.internal_useConvertedValue(SRPBuyer_fragment_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          isLoadingNext: p.isLoadingNext,
          isLoadingPrevious: p.isLoadingPrevious,
          refetch: React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(ShopSearchBuyerRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

function useBlockingPagination(fRef) {
  var p = ReactRelay.useBlockingPaginationFragment(SRPBuyer_fragment_graphql.node, fRef);
  var data = RescriptRelay_Internal.internal_useConvertedValue(SRPBuyer_fragment_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          refetch: React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(ShopSearchBuyerRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

var makeRefetchVariables = ShopSearchBuyerRefetchQuery_graphql.Types.makeRefetchVariables;

var Fragment_getConnectionNodes = SRPBuyer_fragment_graphql.Utils.getConnectionNodes;

var Fragment = {
  getConnectionNodes: Fragment_getConnectionNodes,
  Types: undefined,
  internal_makeRefetchableFnOpts: internal_makeRefetchableFnOpts,
  useRefetchable: useRefetchable,
  Operation: undefined,
  use: use$1,
  useOpt: useOpt,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination,
  makeRefetchVariables: makeRefetchVariables
};

function SRP_Buyer$Placeholder(Props) {
  var deviceType = Props.deviceType;
  var router = Router.useRouter();
  switch (deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        var oldUI = React.createElement("div", {
              className: "w-full min-w-[1280px] min-h-screen flex flex-col"
            }, React.createElement(Header_Buyer.PC.make, {
                  key: router.asPath
                }), React.createElement("main", {
                  className: "flex flex-col grow w-full h-full bg-white"
                }, React.createElement("div", {
                      className: "w-[1280px] pt-20 mx-auto"
                    }, React.createElement("section", {
                          className: "w-full flex items-center justify-center"
                        }, React.createElement("div", {
                              className: "bg-gray-150 animate-pulse rounded-xl w-[400px] h-[48px]"
                            })), React.createElement("section", {
                          className: "mt-20 w-full flex items-center justify-end"
                        }, React.createElement("div", {
                              className: "bg-gray-150 animate-pulse rounded-xl w-32 h-5"
                            })), React.createElement("section", {
                          className: "w-full mt-12"
                        }, React.createElement("ol", {
                              className: "grid grid-cols-4 gap-x-10 gap-y-16"
                            }, Belt_Array.map(Belt_Array.range(1, 300), (function (number) {
                                    return React.createElement(ShopProductListItem_Buyer.PC.Placeholder.make, {
                                                key: "box-" + String(number) + ""
                                              });
                                  })))))), React.createElement(Footer_Buyer.PC.make, {}));
        return React.createElement(FeatureFlagWrapper.make, {
                    children: React.createElement("div", {
                          className: "w-full min-w-[1280px] min-h-screen flex flex-col bg-[#FAFBFC]"
                        }, React.createElement(Header_Buyer.PC.make, {
                              key: router.asPath
                            }), React.createElement("main", {
                              className: "flex flex-col grow w-full h-full bg-white"
                            }, React.createElement("div", {
                                  className: "w-[1280px] pt-20 mx-auto"
                                }, React.createElement("section", {
                                      className: "w-full flex items-center justify-center"
                                    }, React.createElement("div", {
                                          className: "bg-gray-150 animate-pulse rounded-xl w-[400px] h-[48px]"
                                        })), React.createElement("section", {
                                      className: "mt-20 w-full flex items-center justify-end"
                                    }, React.createElement("div", {
                                          className: "bg-gray-150 animate-pulse rounded-xl w-32 h-5"
                                        })), React.createElement("section", {
                                      className: "w-full mt-12"
                                    }, React.createElement("ol", {
                                          className: "grid grid-cols-4 gap-x-10 gap-y-16"
                                        }, Belt_Array.map(Belt_Array.range(1, 300), (function (number) {
                                                return React.createElement(ShopProductListItem_Buyer.PC.Placeholder.make, {
                                                            key: "box-" + String(number) + ""
                                                          });
                                              })))))), React.createElement(Footer_Buyer.PC.make, {})),
                    fallback: oldUI,
                    featureFlag: "HOME_UI_UX"
                  });
    case /* Mobile */2 :
        return React.createElement("div", {
                    className: "w-full bg-white"
                  }, React.createElement(Header_Buyer.Mobile.make, {
                        key: router.asPath
                      }), React.createElement("main", {
                        className: "w-full max-w-3xl mx-auto relative bg-white min-h-screen"
                      }, React.createElement("div", {
                            className: "w-full pb-8 px-5"
                          }, React.createElement("div", {
                                className: "w-full py-4  flex items-center justify-end"
                              }, React.createElement("div", {
                                    className: "w-12 h-5 rounded-lg animate-pulse bg-gray-150"
                                  })), React.createElement("div", undefined, React.createElement("ol", {
                                    className: "grid grid-cols-2 gap-x-4 gap-y-8"
                                  }, Belt_Array.map(Belt_Array.range(1, 300), (function (idx) {
                                          return React.createElement(ShopProductListItem_Buyer.MO.Placeholder.make, {
                                                      key: "search-result-skeleton-" + String(idx) + ""
                                                    });
                                        })))))));
    
  }
}

var Placeholder = {
  make: SRP_Buyer$Placeholder
};

function SRP_Buyer$Error(Props) {
  var deviceType = Props.deviceType;
  var router = Router.useRouter();
  switch (deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React.createElement("div", {
                    className: "w-full min-w-[1280px] min-h-screen flex flex-col"
                  }, React.createElement(Header_Buyer.PC.make, {
                        key: router.asPath
                      }), React.createElement("main", {
                        className: "flex flex-col grow w-full h-full bg-white"
                      }, React.createElement("div", {
                            className: "w-full flex items-center justify-center mt-40"
                          }, React.createElement("span", {
                                className: "text-3xl text-gray-800"
                              }, "검색에 실패하였습니다"))), React.createElement(Footer_Buyer.PC.make, {}));
    case /* Mobile */2 :
        return React.createElement("div", {
                    className: "w-full bg-white"
                  }, React.createElement(Header_Buyer.Mobile.make, {
                        key: router.asPath
                      }), React.createElement("main", {
                        className: "w-full max-w-3xl mx-auto relative bg-white min-h-screen"
                      }, React.createElement("div", {
                            className: "w-full flex items-center justify-center pt-[134px] px-5"
                          }, React.createElement("span", {
                                className: "text-gray-800 text-xl text-center"
                              }, "검색에 실패하였습니다"))));
    
  }
}

var $$Error = {
  make: SRP_Buyer$Error
};

function SRP_Buyer$PC(Props) {
  var keyword = Props.keyword;
  var query = Props.query;
  var section = Props.section;
  var router = Router.useRouter();
  var match = usePagination(query);
  var hasNext = match.hasNext;
  var loadNext = match.loadNext;
  var searchProducts = match.data.searchProducts;
  var loadMoreRef = React.useRef(null);
  var isIntersecting = CustomHooks.$$IntersectionObserver.use(undefined, loadMoreRef, 0.1, "50px", undefined);
  var resultObjLabel = section === "DELIVERY" ? "신선배송 상품이" : (
      section === "MATCHING" ? "신선매칭 상품이" : "검색결과가"
    );
  React.useEffect((function () {
          if (hasNext && isIntersecting) {
            Curry._3(loadNext, 20, undefined, undefined);
          }
          
        }), [
        hasNext,
        isIntersecting
      ]);
  var tmp;
  if (keyword !== undefined) {
    var edges = searchProducts.edges;
    tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
              className: "w-[1280px] mt-16 mx-auto h-12 px-5"
            }, React.createElement(SRP_Tab.make, {
                  currentSection: section
                })), edges.length !== 0 ? React.createElement("div", {
                className: "w-[1280px] mx-auto min-h-full px-5"
              }, React.createElement("div", {
                    className: "mt-10 w-full flex items-center justify-between"
                  }, React.createElement("div", {
                        className: "text-sm mr-1 text-gray-800"
                      }, "총 " + String(searchProducts.totalCount) + "개"), React.createElement(SRP_SortSelect.PC.make, {})), React.createElement("div", undefined, React.createElement("ol", {
                        className: "mt-6 grid grid-cols-4 gap-x-10 gap-y-16"
                      }, Belt_Array.map(edges, (function (param) {
                              return React.createElement(ShopProductListItem_Buyer.PC.make, {
                                          query: param.node.fragmentRefs,
                                          key: param.cursor
                                        });
                            }))), React.createElement("div", {
                        ref: loadMoreRef,
                        className: "h-20 w-full"
                      }))) : React.createElement("div", {
                className: "my-40"
              }, React.createElement("div", {
                    className: "w-full flex items-center justify-center"
                  }, React.createElement("span", {
                        className: "text-3xl text-gray-800"
                      }, React.createElement("span", {
                            className: "font-bold"
                          }, "\"" + keyword + "\""), "에 대한 검색결과")), React.createElement("div", {
                    className: "mt-7 w-full flex flex-col items-center justify-center"
                  }, React.createElement("span", {
                        className: "text-gray-800"
                      }, React.createElement("span", {
                            className: "text-green-500 font-bold"
                          }, "\"" + keyword + "\""), "의 " + resultObjLabel + " 없습니다."), React.createElement("span", {
                        className: "text-gray-800"
                      }, "다른 검색어를 입력하시거나 철자와 띄어쓰기를 확인해 보세요."))));
  } else {
    tmp = null;
  }
  var oldUI = React.createElement("div", {
        className: "w-full min-w-[1280px] min-h-screen flex flex-col"
      }, React.createElement(Header_Buyer.PC.make, {
            key: router.asPath
          }), React.createElement("main", {
            className: "flex flex-col grow w-full h-full bg-white"
          }, tmp), React.createElement(Footer_Buyer.PC.make, {}));
  var tmp$1;
  if (keyword !== undefined) {
    var edges$1 = searchProducts.edges;
    tmp$1 = React.createElement(React.Fragment, undefined, edges$1.length !== 0 ? React.createElement(React.Fragment, undefined, React.createElement("h3", {
                    className: "text-[26px] font-bold"
                  }, "'" + keyword + "'"), React.createElement("div", {
                    className: "max-w-[1280px] min-w-[872px] w-full min-h-full mt-[60px]"
                  }, React.createElement("div", {
                        className: " w-full flex items-center justify-between mb-8"
                      }, React.createElement(PLP_SectionCheckBoxGroup.make, {}), React.createElement(SRP_SortSelect.PC.make, {})), React.createElement("div", undefined, React.createElement("ol", {
                            className: "grid plp-max:grid-cols-5 grid-cols-4 gap-x-10 gap-y-16"
                          }, Belt_Array.map(edges$1, (function (param) {
                                  return React.createElement(ShopProductListItem_Buyer.PC.make, {
                                              query: param.node.fragmentRefs,
                                              key: param.cursor
                                            });
                                }))), React.createElement("div", {
                            ref: loadMoreRef,
                            className: "h-20 w-full"
                          })))) : React.createElement(React.Fragment, undefined, React.createElement("h3", {
                    className: "text-[26px] font-bold"
                  }, "'" + keyword + "'"), React.createElement("div", {
                    className: "max-w-[1280px] min-w-[872px] w-full h-full flex-1 mt-[60px] flex flex-col"
                  }, React.createElement("div", {
                        className: "flex flex-1  flex-col justify-center items-center text-[17px] text-gray-800 mb-[100px]"
                      }, React.createElement("span", {
                            className: "font-bold mb-6"
                          }, "검색결과가 없습니다."), React.createElement("span", undefined, "다른 검색어를 입력하시거나"), React.createElement("span", undefined, "철자와 띄어쓰기를 확인해 보세요.")))));
  } else {
    tmp$1 = null;
  }
  return React.createElement(FeatureFlagWrapper.make, {
              children: React.createElement("div", {
                    className: "w-full min-w-[1280px] min-h-screen flex flex-col bg-[#FAFBFC]"
                  }, React.createElement(Header_Buyer.PC.make, {
                        key: router.asPath
                      }), React.createElement("main", {
                        className: "max-w-[1280px] min-w-[872px] mx-auto m-10 py-10 flex flex-col grow w-full h-full rounded-sm bg-white shadow-[0px_10px_40px_10px_rgba(0,0,0,0.03)] px-[50px] min-h-[720px]"
                      }, tmp$1), React.createElement(Footer_Buyer.PC.make, {})),
              fallback: oldUI,
              featureFlag: "HOME_UI_UX"
            });
}

var PC = {
  make: SRP_Buyer$PC
};

function SRP_Buyer$MO(Props) {
  var keyword = Props.keyword;
  var query = Props.query;
  var section = Props.section;
  var router = Router.useRouter();
  var match = usePagination(query);
  var hasNext = match.hasNext;
  var loadNext = match.loadNext;
  var searchProducts = match.data.searchProducts;
  var loadMoreRef = React.useRef(null);
  var isIntersecting = CustomHooks.$$IntersectionObserver.use(undefined, loadMoreRef, 0.1, "50px", undefined);
  var resultObjLabel = section === "DELIVERY" ? "신선배송 상품이" : (
      section === "MATCHING" ? "신선매칭 상품이" : "검색결과가"
    );
  React.useEffect((function () {
          if (hasNext && isIntersecting) {
            Curry._3(loadNext, 20, undefined, undefined);
          }
          
        }), [
        hasNext,
        isIntersecting
      ]);
  var tmp;
  if (keyword !== undefined) {
    var edges = searchProducts.edges;
    tmp = React.createElement(React.Fragment, undefined, React.createElement(SRP_Tab.make, {
              currentSection: section
            }), edges.length !== 0 ? React.createElement("div", {
                className: "w-full px-5"
              }, React.createElement("div", {
                    className: "pt-5 pb-4 w-full flex items-center justify-between"
                  }, React.createElement("div", {
                        className: "text-gray-800 text-sm"
                      }, "총 " + String(searchProducts.totalCount) + "개"), React.createElement(SRP_SortSelect.MO.make, {})), React.createElement("div", undefined, React.createElement("ol", {
                        className: "grid grid-cols-2 gap-x-4 gap-y-8"
                      }, Belt_Array.map(edges, (function (param) {
                              return React.createElement(ShopProductListItem_Buyer.MO.make, {
                                          query: param.node.fragmentRefs,
                                          key: param.cursor
                                        });
                            }))), React.createElement("div", {
                        ref: loadMoreRef,
                        className: "h-20 w-full"
                      }))) : React.createElement(React.Fragment, undefined, React.createElement("div", {
                    className: "w-full flex items-center justify-center pt-[134px] px-5"
                  }, React.createElement("span", {
                        className: "text-gray-800 text-xl text-center"
                      }, React.createElement("span", {
                            className: "font-bold"
                          }, "\"" + keyword + "\""), "에 대한 검색결과")), React.createElement("div", {
                    className: "mt-2 w-full flex flex-col items-center justify-center text-center text-base text-gray-600"
                  }, React.createElement("span", undefined, React.createElement("span", {
                            className: "text-green-500 font-bold"
                          }, "\"" + keyword + "\""), "의 " + resultObjLabel + " 없습니다."), React.createElement("span", undefined, "다른 검색어를 입력하시거나"), React.createElement("span", undefined, "철자와 띄어쓰기를 확인해 보세요."))));
  } else {
    tmp = React.createElement(SRP_RecentSearchList.make, {});
  }
  return React.createElement("div", {
              className: "w-full bg-white"
            }, React.createElement(Header_Buyer.Mobile.make, {
                  key: router.asPath
                }), React.createElement("main", {
                  className: "w-full max-w-3xl mx-auto relative bg-white h-full"
                }, tmp));
}

var MO = {
  make: SRP_Buyer$MO
};

function SRP_Buyer$Container(Props) {
  var deviceType = Props.deviceType;
  var keyword = Props.keyword;
  var sort = Props.sort;
  var section = Props.section;
  ChannelTalkHelper.Hook.use(undefined, undefined);
  var match = use({
        count: 20,
        name: Belt_Option.getWithDefault(keyword, ""),
        onlyBuyable: true,
        orderBy: Belt_Option.getWithDefault(Product_FilterOption.Sort.toSearchProductParam(sort), []),
        type_: Product_FilterOption.Section.toQueryParam(section)
      }, /* StoreOrNetwork */1, undefined, undefined, undefined);
  var fragmentRefs = match.fragmentRefs;
  React.useEffect((function () {
          DataGtm.push(DataGtm.mergeUserIdUnsafe({
                    event: "view_search_results",
                    keyword: keyword
                  }));
        }), [keyword]);
  switch (deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React.createElement(SRP_Buyer$PC, {
                    keyword: keyword,
                    query: fragmentRefs,
                    section: section
                  });
    case /* Mobile */2 :
        return React.createElement(SRP_Buyer$MO, {
                    keyword: keyword,
                    query: fragmentRefs,
                    section: section
                  });
    
  }
}

var Container = {
  make: SRP_Buyer$Container
};

function $$default(props) {
  var deviceType = props.deviceType;
  var router = Router.useRouter();
  var keyword = Belt_Option.map(Js_dict.get(router.query, "keyword"), (function (prim) {
          return decodeURIComponent(prim);
        }));
  var section = Belt_Option.getWithDefault(Product_FilterOption.Section.fromUrlParameter(Js_dict.get(router.query, "section")), "ALL");
  var sort = Belt_Option.getWithDefault(Product_FilterOption.Sort.makeSearch(section, Js_dict.get(router.query, "sort")), Product_FilterOption.Sort.defaultValue);
  var isCsr = CustomHooks.useCsr(undefined);
  React.useEffect((function () {
          Belt_Option.forEach(keyword, (function (keyword) {
                  Curry._3(Global.$$Window.ReactNativeWebView.PostMessage.airbridgeWithPayload, "VIEW_SEARCH_RESULT", {
                        query: keyword
                      }, undefined);
                }));
        }), []);
  return React.createElement(React.Fragment, undefined, React.createElement(Head, {
                  children: null
                }, React.createElement("title", undefined, "신선하이 | " + Belt_Option.getWithDefault(keyword, "상품검색") + ""), React.createElement("meta", {
                      content: "농산물 소싱은 신선하이에서! " + Belt_Option.getWithDefault(keyword, "") + "에 대한 검색결과입니다.",
                      name: "description"
                    })), React.createElement(OpenGraph_Header.make, {
                  title: "" + Belt_Option.getWithDefault(keyword, "") + " 검색결과",
                  description: "" + Belt_Option.getWithDefault(keyword, "") + "에 대한 검색결과입니다."
                }), React.createElement(RescriptReactErrorBoundary.make, {
                  children: React.createElement(React.Suspense, {
                        children: isCsr ? React.createElement(SRP_Buyer$Container, {
                                deviceType: deviceType,
                                keyword: keyword,
                                sort: sort,
                                section: section
                              }) : React.createElement(SRP_Buyer$Placeholder, {
                                deviceType: deviceType
                              }),
                        fallback: React.createElement(SRP_Buyer$Placeholder, {
                              deviceType: deviceType
                            })
                      }),
                  fallback: (function (param) {
                      return React.createElement(SRP_Buyer$Error, {
                                  deviceType: deviceType
                                });
                    })
                }), React.createElement(Bottom_Navbar.make, {
                  deviceType: deviceType
                }));
}

function getServerSideProps(ctx) {
  var environment = RelayEnv.environment({
        TAG: /* SinsunMarket */0,
        _0: Env.graphqlApiUrl
      });
  var gnbAndCategoryQuery = ServerSideHelper.gnbAndCategory(environment);
  var deviceType = DeviceDetect.detectDeviceFromCtx2(ctx.req);
  return ServerSideHelper.makeResultWithQuery(gnbAndCategoryQuery, environment, {
              deviceType: deviceType
            });
}

export {
  Query ,
  Fragment ,
  Placeholder ,
  $$Error ,
  PC ,
  MO ,
  Container ,
  $$default ,
  $$default as default,
  getServerSideProps ,
}
/* Env Not a pure module */
