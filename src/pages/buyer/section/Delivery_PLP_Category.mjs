// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cn from "rescript-classnames/src/Cn.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Divider from "../../../components/common/Divider.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../../utils/CustomHooks.mjs";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as DeliveryPLPCategoryQuery_graphql from "../../../__generated__/DeliveryPLPCategoryQuery_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(DeliveryPLPCategoryQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(DeliveryPLPCategoryQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(DeliveryPLPCategoryQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(DeliveryPLPCategoryQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, DeliveryPLPCategoryQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, DeliveryPLPCategoryQuery_graphql.node, DeliveryPLPCategoryQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: DeliveryPLPCategoryQuery_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, DeliveryPLPCategoryQuery_graphql.node, DeliveryPLPCategoryQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(DeliveryPLPCategoryQuery_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(DeliveryPLPCategoryQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(DeliveryPLPCategoryQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(DeliveryPLPCategoryQuery_graphql.node, DeliveryPLPCategoryQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query = {
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function make(id, name) {
  return {
          name: name,
          id: id,
          kind: /* All */0
        };
}

function fromQuery(query) {
  return {
          name: query.name,
          id: query.id,
          kind: /* Specific */1
        };
}

function Delivery_PLP_Category$ListItem$PC$Skeleton(Props) {
  return React.createElement("div", {
              className: "skeleton-base w-16 mt-2 mb-3 rounded h-6"
            });
}

var Skeleton = {
  make: Delivery_PLP_Category$ListItem$PC$Skeleton
};

var PC = {
  Skeleton: Skeleton
};

var ListItem = {
  make: make,
  fromQuery: fromQuery,
  PC: PC
};

function Delivery_PLP_Category$PC$View(Props) {
  var items = Props.items;
  var router = Router.useRouter();
  var subCategoryId = Js_dict.get(router.query, "sub-category-id");
  var categoryId = Js_dict.get(router.query, "category-id");
  var direction = CustomHooks.Scroll.useScrollDirection(undefined);
  var foldableStyle;
  switch (direction) {
    case /* ScrollStop */0 :
        foldableStyle = "top-14";
        break;
    case /* ScrollDown */1 :
        foldableStyle = "top-0 ease-out duration-200";
        break;
    case /* ScrollUp */2 :
        foldableStyle = "top-14 ease-out duration-200";
        break;
    
  }
  React.useEffect((function () {
          var windowWidth = window.innerWidth;
          var container = document.getElementById("horizontal-scroll-container");
          var target = document.getElementById("category-" + Belt_Option.getWithDefault(subCategoryId, "") + "");
          if (!(container == null) && !(target == null)) {
            var targetWidth = target.clientWidth;
            var target$p$p = Webapi__Dom__Element.asHtmlElement(target);
            var targetLeft = target$p$p !== undefined ? Caml_option.valFromOption(target$p$p).offsetLeft : undefined;
            Belt_Option.map(targetLeft, (function (targetLeft$p) {
                    container.scrollLeft = (targetLeft$p - (windowWidth / 2 | 0) | 0) + (targetWidth / 2 | 0) | 0;
                  }));
          }
          
        }), [subCategoryId]);
  return React.createElement("div", {
              className: Cn.make([
                    "w-full z-[5] bg-white left-0 cursor-pointer",
                    foldableStyle
                  ])
            }, React.createElement("section", {
                  className: "w-[1280px] mx-auto bg-white border-b border-gray-50 "
                }, React.createElement("ol", {
                      className: "overflow-x-scroll scrollbar-hide flex items-center px-2 gap-4",
                      id: "horizontal-scroll-container"
                    }, Belt_Array.map(items, (function (item) {
                            var match = item.kind;
                            var selectedStyle = match ? (
                                subCategoryId !== undefined && item.id === subCategoryId ? "border-gray-800 text-gray-800 font-bold" : "border-transparent text-gray-400"
                              ) : (
                                subCategoryId !== undefined || item.id !== Belt_Option.getWithDefault(categoryId, "") ? "border-transparent text-gray-400" : "border-gray-800 text-gray-800 font-bold"
                              );
                            var match$1 = item.kind;
                            var query = match$1 ? "/buyer/delivery/products?category-id=" + Belt_Option.getWithDefault(categoryId, "") + "&sub-category-id=" + item.id + "" : "/buyer/delivery/products?category-id=" + Belt_Option.getWithDefault(categoryId, "") + "";
                            return React.createElement("li", {
                                        key: item.id,
                                        id: "category-" + item.id + "",
                                        onClick: (function (param) {
                                            router.replace(query);
                                          })
                                      }, React.createElement("div", {
                                            className: Cn.make([
                                                  selectedStyle,
                                                  "pt-2 pb-3 border-b-2 w-fit whitespace-nowrap"
                                                ])
                                          }, item.name));
                          })))));
}

var View = {
  make: Delivery_PLP_Category$PC$View
};

function Delivery_PLP_Category$PC$Skeleton(Props) {
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "h-11 px-5 scrollbar-hide"
                }, React.createElement("div", {
                      className: "flex gap-4 h-full"
                    }, Belt_Array.map(Belt_Array.range(0, 3), (function (idx) {
                            return React.createElement(Delivery_PLP_Category$ListItem$PC$Skeleton, {
                                        key: String(idx)
                                      });
                          })))), React.createElement(Divider.make, {
                  className: "mt-0 bg-gray-50"
                }));
}

var Skeleton$1 = {
  make: Delivery_PLP_Category$PC$Skeleton
};

function Delivery_PLP_Category$PC(Props) {
  var categoryName = Props.categoryName;
  var router = Router.useRouter();
  var displayCategoryId = Js_dict.get(router.query, "category-id");
  var match = use({
        parentId: displayCategoryId
      }, undefined, undefined, undefined, undefined);
  var items = Belt_Option.getWithDefault(Belt_Option.map(match.section, (function (section$p) {
              return Belt_Array.concat([{
                            name: categoryName,
                            id: Belt_Option.getWithDefault(displayCategoryId, ""),
                            kind: /* All */0
                          }], Belt_Array.map(section$p.displayCategories, fromQuery));
            })), []);
  return React.createElement(React.Suspense, {
              children: React.createElement(Delivery_PLP_Category$PC$View, {
                    items: items
                  }),
              fallback: React.createElement(Delivery_PLP_Category$PC$Skeleton, {})
            });
}

var PC$1 = {
  View: View,
  Skeleton: Skeleton$1,
  make: Delivery_PLP_Category$PC
};

function Delivery_PLP_Category$MO$View(Props) {
  var items = Props.items;
  var router = Router.useRouter();
  var subCategoryId = Js_dict.get(router.query, "sub-category-id");
  var categoryId = Js_dict.get(router.query, "category-id");
  var direction = CustomHooks.Scroll.useScrollDirection(undefined);
  var foldableStyle;
  switch (direction) {
    case /* ScrollStop */0 :
        foldableStyle = "top-14";
        break;
    case /* ScrollDown */1 :
        foldableStyle = "top-0 ease-out duration-200";
        break;
    case /* ScrollUp */2 :
        foldableStyle = "top-14 ease-out duration-200";
        break;
    
  }
  React.useEffect((function () {
          var windowWidth = window.innerWidth;
          var container = document.getElementById("horizontal-scroll-container");
          var target = document.getElementById("category-" + Belt_Option.getWithDefault(subCategoryId, "") + "");
          if (!(container == null) && !(target == null)) {
            var targetWidth = target.clientWidth;
            var target$p$p = Webapi__Dom__Element.asHtmlElement(target);
            var targetLeft = target$p$p !== undefined ? Caml_option.valFromOption(target$p$p).offsetLeft : undefined;
            Belt_Option.map(targetLeft, (function (targetLeft$p) {
                    container.scrollLeft = (targetLeft$p - (windowWidth / 2 | 0) | 0) + (targetWidth / 2 | 0) | 0;
                  }));
          }
          
        }), [subCategoryId]);
  return React.createElement("div", {
              className: Cn.make([
                    "w-full z-[5] bg-white left-0",
                    foldableStyle
                  ])
            }, React.createElement("section", {
                  className: "w-full max-w-3xl mx-auto bg-white border-b border-gray-50 "
                }, React.createElement("ol", {
                      className: "overflow-x-scroll scrollbar-hide flex items-center px-4 gap-4",
                      id: "horizontal-scroll-container"
                    }, Belt_Array.map(items, (function (item) {
                            var match = item.kind;
                            var selectedStyle = match ? (
                                subCategoryId !== undefined && item.id === subCategoryId ? "border-gray-800 text-gray-800 font-bold" : "border-transparent text-gray-400"
                              ) : (
                                subCategoryId !== undefined || item.id !== Belt_Option.getWithDefault(categoryId, "") ? "border-transparent text-gray-400" : "border-gray-800 text-gray-800 font-bold"
                              );
                            var match$1 = item.kind;
                            var query = match$1 ? "/buyer/delivery/products?category-id=" + Belt_Option.getWithDefault(categoryId, "") + "&sub-category-id=" + item.id + "" : "/buyer/delivery/products?category-id=" + Belt_Option.getWithDefault(categoryId, "") + "";
                            return React.createElement("li", {
                                        key: item.id,
                                        id: "category-" + item.id + "",
                                        onClick: (function (param) {
                                            router.replace(query);
                                          })
                                      }, React.createElement("div", {
                                            className: selectedStyle + " pt-2 pb-3 border-b-2 w-fit whitespace-nowrap"
                                          }, item.name));
                          })))));
}

var View$1 = {
  make: Delivery_PLP_Category$MO$View
};

function Delivery_PLP_Category$MO$Skeleton(Props) {
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "h-11 px-2 scrollbar-hide w-full overflow-x-scroll"
                }, React.createElement("ol", {
                      className: "w-fit flex items-center gap-2"
                    }, Belt_Array.map(Belt_Array.range(0, 8), (function (idx) {
                            return React.createElement("div", {
                                        key: String(idx),
                                        className: "skeleton-base mt-2 mb-3 rounded h-6 w-16"
                                      });
                          })))), React.createElement(Divider.make, {
                  className: "mt-0 bg-gray-50"
                }));
}

var Skeleton$2 = {
  make: Delivery_PLP_Category$MO$Skeleton
};

function Delivery_PLP_Category$MO(Props) {
  var categoryName = Props.categoryName;
  var router = Router.useRouter();
  var displayCategoryId = Js_dict.get(router.query, "category-id");
  var match = use({
        parentId: displayCategoryId
      }, undefined, undefined, undefined, undefined);
  var items = Belt_Option.getWithDefault(Belt_Option.map(match.section, (function (section$p) {
              return Belt_Array.concat([{
                            name: categoryName,
                            id: Belt_Option.getWithDefault(displayCategoryId, ""),
                            kind: /* All */0
                          }], Belt_Array.map(section$p.displayCategories, fromQuery));
            })), []);
  return React.createElement(React.Suspense, {
              children: React.createElement(Delivery_PLP_Category$MO$View, {
                    items: items
                  }),
              fallback: React.createElement(Delivery_PLP_Category$MO$Skeleton, {})
            });
}

var MO = {
  View: View$1,
  Skeleton: Skeleton$2,
  make: Delivery_PLP_Category$MO
};

export {
  Query ,
  ListItem ,
  PC$1 as PC,
  MO ,
}
/* react Not a pure module */
