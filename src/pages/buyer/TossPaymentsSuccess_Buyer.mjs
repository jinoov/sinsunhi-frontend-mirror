// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as RelayRuntime from "relay-runtime";
import * as ReactDialog from "@radix-ui/react-dialog";
import * as TossPaymentsSuccessBuyerMutation_graphql from "../../__generated__/TossPaymentsSuccessBuyerMutation_graphql.mjs";

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: TossPaymentsSuccessBuyerMutation_graphql.node,
              variables: TossPaymentsSuccessBuyerMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, TossPaymentsSuccessBuyerMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? TossPaymentsSuccessBuyerMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    Curry._2(updater, store, TossPaymentsSuccessBuyerMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use(param) {
  var match = ReactRelay.useMutation(TossPaymentsSuccessBuyerMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      Curry._2(param$1, TossPaymentsSuccessBuyerMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? TossPaymentsSuccessBuyerMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      Curry._2(param$5, store, TossPaymentsSuccessBuyerMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: TossPaymentsSuccessBuyerMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Mutation_errorCode_decode = TossPaymentsSuccessBuyerMutation_graphql.Utils.errorCode_decode;

var Mutation_errorCode_fromString = TossPaymentsSuccessBuyerMutation_graphql.Utils.errorCode_fromString;

var Mutation = {
  errorCode_decode: Mutation_errorCode_decode,
  errorCode_fromString: Mutation_errorCode_fromString,
  Operation: undefined,
  Types: undefined,
  commitMutation: commitMutation,
  use: use
};

function TossPaymentsSuccess_Buyer$Dialog(props) {
  var href = props.href;
  var router = Router.useRouter();
  return React.createElement(ReactDialog.Root, {
              children: React.createElement(ReactDialog.Portal, {
                    children: null
                  }, React.createElement(ReactDialog.Overlay, {
                        className: "dialog-overlay"
                      }), React.createElement(ReactDialog.Content, {
                        children: null,
                        className: "dialog-content p-7 bg-white rounded-xl w-[480px] flex flex-col items-center justify-center"
                      }, props.children, React.createElement("button", {
                            className: "flex w-full xl:w-1/2 h-13 mt-5 bg-surface rounded-lg justify-center items-center text-lg cursor-pointer text-enabled-L1",
                            type: "button",
                            onClick: (function (param) {
                                router.replace(href);
                              })
                          }, "확인"))),
              _open: props.show
            });
}

var Dialog = {
  make: TossPaymentsSuccess_Buyer$Dialog
};

function TossPaymentsSuccess_Buyer(props) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        return false;
      });
  var setShowSuccessDialog = match[1];
  var match$1 = React.useState(function () {
        return false;
      });
  var setShowErrorDialog = match$1[1];
  var match$2 = React.useState(function () {
        
      });
  var setErrorMsg = match$2[1];
  var match$3 = React.useState(function () {
        return {
                successUrl: "/buyer",
                failUrl: "/buyer"
              };
      });
  var redirectUrl = match$3[0];
  var setRedirectUrl = match$3[1];
  var match$4 = use(undefined);
  var isMutating = match$4[1];
  var mutate = match$4[0];
  var handleError = function (message) {
    setShowErrorDialog(function (param) {
          return true;
        });
    setErrorMsg(function (param) {
          return message;
        });
  };
  React.useEffect((function () {
          var params = new URLSearchParams(router.query);
          var orderId = params.get("orderId");
          var orderId$1 = (orderId == null) ? undefined : Caml_option.some(orderId);
          var amount = Belt_Option.flatMap(Caml_option.nullable_to_opt(params.get("amount")), Belt_Int.fromString);
          var paymentKey = params.get("paymentKey");
          var paymentId = Belt_Option.flatMap(Caml_option.nullable_to_opt(params.get("payment-id")), Belt_Int.fromString);
          var tempOrderId = Belt_Option.flatMap(Caml_option.nullable_to_opt(params.get("temp-order-id")), Belt_Int.fromString);
          if (!(orderId == null) && !(paymentKey == null) && amount !== undefined && paymentId !== undefined && !isMutating) {
            if (tempOrderId !== undefined) {
              setRedirectUrl(function (param) {
                    return {
                            successUrl: "/buyer/web-order/complete/" + orderId$1 + "",
                            failUrl: "/buyer/web-order/" + String(tempOrderId) + ""
                          };
                  });
            } else {
              setRedirectUrl(function (param) {
                    return {
                            successUrl: "/buyer/transactions",
                            failUrl: "/buyer/transactions"
                          };
                  });
            }
            Curry.app(mutate, [
                  (function (error) {
                      handleError(error.message);
                    }),
                  (function (param, _error) {
                      var requestPaymentApprovalTossPayments = param.requestPaymentApprovalTossPayments;
                      if (requestPaymentApprovalTossPayments === undefined) {
                        return handleError(undefined);
                      }
                      if (typeof requestPaymentApprovalTossPayments !== "object") {
                        return handleError(undefined);
                      }
                      var variant = requestPaymentApprovalTossPayments.NAME;
                      if (variant === "Error") {
                        return handleError(requestPaymentApprovalTossPayments.VAL.message);
                      } else if (variant === "RequestPaymentApprovalTossPaymentsResult") {
                        return setShowSuccessDialog(function (param) {
                                    return true;
                                  });
                      } else {
                        return handleError(undefined);
                      }
                    }),
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  {
                    amount: amount,
                    orderId: orderId$1,
                    paymentId: paymentId,
                    paymentKey: (paymentKey == null) ? undefined : Caml_option.some(paymentKey),
                    tempOrderId: tempOrderId
                  },
                  undefined,
                  undefined
                ]);
          }
          
        }), [router.query]);
  return React.createElement("main", {
              className: "bg-surface w-screen h-[560px]"
            }, React.createElement(TossPaymentsSuccess_Buyer$Dialog, {
                  children: React.createElement("section", {
                        className: "flex flex-col items-center justify-center"
                      }, React.createElement("span", undefined, "결제가 실패하여"), React.createElement("span", {
                            className: "mb-5"
                          }, "주문이 정상 처리되지 못했습니다."), React.createElement("span", undefined, "주문/결제하기 페이지에서"), React.createElement("span", {
                            className: "mb-5"
                          }, "결제를 다시 시도해주세요."), React.createElement("span", {
                            className: "text-notice"
                          }, Belt_Option.getWithDefault(match$2[0], ""))),
                  show: match$1[0],
                  href: redirectUrl.failUrl
                }), React.createElement(TossPaymentsSuccess_Buyer$Dialog, {
                  children: React.createElement(React.Fragment, undefined, React.createElement("span", undefined, "결제 요청이 성공했습니다."), React.createElement("span", undefined, "결제완료 페이지로 이동합니다.")),
                  show: match[0],
                  href: redirectUrl.successUrl
                }));
}

var make = TossPaymentsSuccess_Buyer;

export {
  Mutation ,
  Dialog ,
  make ,
}
/* react Not a pure module */
