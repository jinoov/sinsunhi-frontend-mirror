// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Helper from "../../../../utils/Helper.mjs";
import Uniqid from "uniqid";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import ReactSlick from "react-slick";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Update_Manager_Buyer from "../../../../components/Update_Manager_Buyer.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as Update_SectorAndSale_Buyer from "../../../../components/Update_SectorAndSale_Buyer.mjs";
import * as Update_BusinessNumber_Buyer from "../../../../components/Update_BusinessNumber_Buyer.mjs";
import * as MyInfo_ProfileInfo_Promote_Card from "./MyInfo_ProfileInfo_Promote_Card.mjs";
import * as Update_InterestedCategories_Buyer from "../../../../components/Update_InterestedCategories_Buyer.mjs";
import * as MyInfoProfileCompleteBuyer_Fragment_graphql from "../../../../__generated__/MyInfoProfileCompleteBuyer_Fragment_graphql.mjs";

function use(fRef) {
  var data = ReactRelay.useFragment(MyInfoProfileCompleteBuyer_Fragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(MyInfoProfileCompleteBuyer_Fragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(MyInfoProfileCompleteBuyer_Fragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return MyInfoProfileCompleteBuyer_Fragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  use: use,
  useOpt: useOpt
};

function useCards(query, sectorsOnclick, salesOnClick, categoriesOnClick, bizOnClick, managerOnClick) {
  var match = use(query);
  var match$1 = Belt_Option.map(match.verifications, (function (param) {
          return param.valid;
        }));
  return Belt_Option.getWithDefault(Helper.$$Option.sequence(Belt_Array.keep([
                      Garter_Array.isEmpty(Belt_Option.getWithDefault(match.sectors, [])) ? Caml_option.some(React.createElement(MyInfo_ProfileInfo_Promote_Card.Sectors.make, {
                                  onClick: sectorsOnclick
                                })) : undefined,
                      Belt_Option.isSome(match.sales) ? undefined : Caml_option.some(React.createElement(MyInfo_ProfileInfo_Promote_Card.SalesBin.make, {
                                  onClick: salesOnClick
                                })),
                      Garter_Array.isEmpty(Belt_Option.getWithDefault(match.interestedItemCategories, [])) ? Caml_option.some(React.createElement(MyInfo_ProfileInfo_Promote_Card.InterestCategories.make, {
                                  onClick: categoriesOnClick
                                })) : undefined,
                      match$1 !== undefined && match$1 ? undefined : Caml_option.some(React.createElement(MyInfo_ProfileInfo_Promote_Card.BusinessNumber.make, {
                                  onClick: bizOnClick
                                })),
                      Belt_Option.getWithDefault(match.manager, "") === "" ? Caml_option.some(React.createElement(MyInfo_ProfileInfo_Promote_Card.Manager.make, {
                                  onClick: managerOnClick
                                })) : undefined
                    ], Belt_Option.isSome)), []);
}

function MyInfo_Profile_Complete_Buyer$PC(props) {
  var match = React.useState(function () {
        
      });
  var setOpenModal = match[1];
  var openModal = match[0];
  var items = useCards(props.query, (function (param) {
          setOpenModal(function (param) {
                return /* SectorAndSale */0;
              });
        }), (function (param) {
          setOpenModal(function (param) {
                return /* SectorAndSale */0;
              });
        }), (function (param) {
          setOpenModal(function (param) {
                return /* Categories */1;
              });
        }), (function (param) {
          setOpenModal(function (param) {
                return /* BizNumber */2;
              });
        }), (function (param) {
          setOpenModal(function (param) {
                return /* Manager */3;
              });
        }));
  var cmpNum = 5 - items.length | 0;
  if (Garter_Array.isEmpty(items)) {
    return null;
  } else {
    return React.createElement("div", {
                className: "w-full mt-4 bg-white h-full"
              }, React.createElement("div", {
                    className: "pt-8 p-7"
                  }, React.createElement("div", {
                        className: "mb-5"
                      }, React.createElement("span", {
                            className: "font-bold text-2xl"
                          }, "프로필 완성하기"), React.createElement("span", {
                            className: "ml-1 text-sm text-primary"
                          }, "" + String(cmpNum) + "/5")), React.createElement("div", {
                        className: "mb-4 grid grid-cols-2 gap-2"
                      }, Belt_Array.map(items, (function (i) {
                              return React.createElement("div", {
                                          key: Uniqid("profile")
                                        }, i);
                            })))), React.createElement(Update_SectorAndSale_Buyer.make, {
                    isOpen: Caml_obj.equal(openModal, /* SectorAndSale */0),
                    onClose: (function (param) {
                        setOpenModal(function (param) {
                              
                            });
                      })
                  }), React.createElement(Update_InterestedCategories_Buyer.make, {
                    isOpen: Caml_obj.equal(openModal, /* Categories */1),
                    onClose: (function (param) {
                        setOpenModal(function (param) {
                              
                            });
                      })
                  }), React.createElement(Update_BusinessNumber_Buyer.make, {
                    isOpen: Caml_obj.equal(openModal, /* BizNumber */2),
                    onClose: (function (param) {
                        setOpenModal(function (param) {
                              
                            });
                      })
                  }), React.createElement(Update_Manager_Buyer.make, {
                    isOpen: Caml_obj.equal(openModal, /* Manager */3),
                    onClose: (function (param) {
                        setOpenModal(function (param) {
                              
                            });
                      })
                  }));
  }
}

var PC = {
  make: MyInfo_Profile_Complete_Buyer$PC
};

function toFragment(modal) {
  switch (modal) {
    case /* SectorAndSale */0 :
        return "#sector";
    case /* Categories */1 :
        return "#categories";
    case /* BizNumber */2 :
        return "#biz-number";
    case /* Manager */3 :
        return "#manager";
    
  }
}

function MyInfo_Profile_Complete_Buyer$Mobile(props) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        
      });
  var setOpenModal = match[1];
  var openModal = match[0];
  var open_ = function (modal) {
    if (!router.asPath.includes(toFragment(modal))) {
      router.push("" + router.asPath + "" + toFragment(modal) + "");
    }
    setOpenModal(function (param) {
          return modal;
        });
  };
  var items = useCards(props.query, (function (param) {
          open_(/* SectorAndSale */0);
        }), (function (param) {
          open_(/* SectorAndSale */0);
        }), (function (param) {
          open_(/* Categories */1);
        }), (function (param) {
          open_(/* BizNumber */2);
        }), (function (param) {
          open_(/* Manager */3);
        }));
  var cmpNum = 5 - items.length | 0;
  React.useEffect((function () {
          if (!router.asPath.includes("#") && Belt_Option.isSome(openModal)) {
            setOpenModal(function (param) {
                  
                });
          }
          
        }), [router.asPath]);
  if (Garter_Array.isEmpty(items)) {
    return null;
  }
  var match$1 = items.length;
  return React.createElement(React.Fragment, undefined, React.createElement("div", undefined, React.createElement("div", {
                      className: "mb-4"
                    }, React.createElement("span", {
                          className: "font-bold text-lg"
                        }, "프로필 완성하기"), React.createElement("span", {
                          className: "ml-1 text-sm text-primary"
                        }, "" + String(cmpNum) + "/5")), React.createElement("div", undefined, match$1 === 0 || match$1 === 1 ? Belt_Array.map(items, (function (i) {
                              return React.createElement("div", {
                                          key: Uniqid("profile"),
                                          className: "w-full"
                                        }, i);
                            })) : React.createElement(ReactSlick, {
                            infinite: false,
                            slidesToShow: 1,
                            variableWidth: true,
                            children: Belt_Array.map(items, (function (i) {
                                    return React.createElement("div", {
                                                key: Uniqid("profile"),
                                                className: "pl-[5px]"
                                              }, i);
                                  }))
                          }))), React.createElement(Update_SectorAndSale_Buyer.make, {
                  isOpen: Caml_obj.equal(openModal, /* SectorAndSale */0),
                  onClose: (function (param) {
                      router.back();
                    })
                }), React.createElement(Update_InterestedCategories_Buyer.make, {
                  isOpen: Caml_obj.equal(openModal, /* Categories */1),
                  onClose: (function (param) {
                      router.back();
                    })
                }), React.createElement(Update_BusinessNumber_Buyer.make, {
                  isOpen: Caml_obj.equal(openModal, /* BizNumber */2),
                  onClose: (function (param) {
                      router.back();
                    })
                }), React.createElement(Update_Manager_Buyer.make, {
                  isOpen: Caml_obj.equal(openModal, /* Manager */3),
                  onClose: (function (param) {
                      router.back();
                    })
                }));
}

var Mobile = {
  toFragment: toFragment,
  make: MyInfo_Profile_Complete_Buyer$Mobile
};

export {
  Fragment ,
  useCards ,
  PC ,
  Mobile ,
}
/* react Not a pure module */
