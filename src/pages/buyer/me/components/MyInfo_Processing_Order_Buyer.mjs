// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as IconArrow from "../../../../components/svgs/IconArrow.mjs";
import Link from "next/link";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactRelay from "react-relay";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as MyInfoProcessingOrderBuyer_Fragment_graphql from "../../../../__generated__/MyInfoProcessingOrderBuyer_Fragment_graphql.mjs";

function use(fRef) {
  var data = ReactRelay.useFragment(MyInfoProcessingOrderBuyer_Fragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(MyInfoProcessingOrderBuyer_Fragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(MyInfoProcessingOrderBuyer_Fragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return MyInfoProcessingOrderBuyer_Fragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_orderProductStatus_decode = MyInfoProcessingOrderBuyer_Fragment_graphql.Utils.orderProductStatus_decode;

var Fragment_orderProductStatus_fromString = MyInfoProcessingOrderBuyer_Fragment_graphql.Utils.orderProductStatus_fromString;

var Fragment = {
  orderProductStatus_decode: Fragment_orderProductStatus_decode,
  orderProductStatus_fromString: Fragment_orderProductStatus_fromString,
  Types: undefined,
  Operation: undefined,
  use: use,
  useOpt: useOpt
};

var initStatus = {
  create: 0,
  ready: 0,
  delivering: 0,
  complete: 0
};

function useStatus(query) {
  var match = use(query);
  return Belt_Array.reduce(match.orderProductCountByStatus, initStatus, (function (acc, i) {
                var match = i.status;
                var count = i.count;
                if (match === "DEPARTURE" || match === "PACKING") {
                  return {
                          create: acc.create,
                          ready: acc.ready + count | 0,
                          delivering: acc.delivering,
                          complete: acc.complete
                        };
                } else if (match === "COMPLETE") {
                  return {
                          create: acc.create,
                          ready: acc.ready,
                          delivering: acc.delivering,
                          complete: acc.complete + count | 0
                        };
                } else if (match === "REFUND" || match === "CANCEL") {
                  return acc;
                } else if (match === "DELIVERING") {
                  return {
                          create: acc.create,
                          ready: acc.ready,
                          delivering: acc.delivering + count | 0,
                          complete: acc.complete
                        };
                } else if (match === "NEGOTIATING" || match === "CREATE") {
                  return {
                          create: acc.create + count | 0,
                          ready: acc.ready,
                          delivering: acc.delivering,
                          complete: acc.complete
                        };
                } else {
                  return acc;
                }
              }));
}

function MyInfo_Processing_Order_Buyer$PC(props) {
  var status = useStatus(props.query);
  return React.createElement("div", {
              className: "flex flex-col p-6"
            }, React.createElement("div", {
                  className: "flex items-center justify-between"
                }, React.createElement("div", undefined, React.createElement("span", {
                          className: "font-bold text-2xl"
                        }, "주문내역"), React.createElement("span", {
                          className: "ml-1 text-sm text-text-L3"
                        }, "(최근 1개월)")), React.createElement(Link, {
                      href: "/buyer/orders",
                      children: React.createElement("a", undefined, React.createElement("span", {
                                className: "text-sm mr-1"
                              }, "더보기"), React.createElement(IconArrow.make, {
                                height: "13",
                                width: "13",
                                fill: "#262626",
                                className: "inline"
                              }))
                    })), React.createElement("div", {
                  className: "pt-8 flex divide-x"
                }, React.createElement("div", {
                      className: "px-5 first:pl-4 last:pr-4 text-center flex-1 word-keep-all flex flex-col justify-around"
                    }, React.createElement("div", {
                          className: "text-gray-600 text-sm"
                        }, "신규 주문"), React.createElement("div", {
                          className: "font-bold text-lg"
                        }, String(status.create))), React.createElement("div", {
                      className: "px-5 first:pl-4 last:pr-4 text-center flex-1 word-keep-all flex flex-col justify-around"
                    }, React.createElement("div", {
                          className: "text-gray-600 text-sm"
                        }, "상품 준비중"), React.createElement("div", {
                          className: "font-bold text-lg"
                        }, String(status.ready))), React.createElement("div", {
                      className: "px-5 first:pl-4 last:pr-4 text-center flex-1 word-keep-all flex flex-col justify-around"
                    }, React.createElement("div", {
                          className: "text-gray-600 text-sm"
                        }, "배송중"), React.createElement("div", {
                          className: "font-bold text-lg"
                        }, String(status.delivering))), React.createElement("div", {
                      className: "px-5 first:pl-4 last:pr-4 text-center flex-1 word-keep-all flex flex-col justify-around"
                    }, React.createElement("div", {
                          className: "text-gray-600 text-sm"
                        }, "배송 완료"), React.createElement("div", {
                          className: "font-bold text-lg"
                        }, String(status.complete)))));
}

var PC = {
  make: MyInfo_Processing_Order_Buyer$PC
};

function MyInfo_Processing_Order_Buyer$Mobile(props) {
  var status = useStatus(props.query);
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "mb-4 flex items-center justify-between"
                }, React.createElement("div", undefined, React.createElement("span", {
                          className: "font-bold text-lg"
                        }, "진행중인 주문"), React.createElement("span", {
                          className: "ml-1 text-sm text-text-L3"
                        }, "(최근 1개월)")), React.createElement(Link, {
                      href: "/buyer/orders",
                      children: React.createElement("a", undefined, React.createElement("span", {
                                className: "text-sm mr-1"
                              }, "더보기"), React.createElement(IconArrow.make, {
                                height: "10",
                                width: "10",
                                fill: "#262626",
                                className: "inline"
                              }))
                    })), React.createElement("div", {
                  className: "mb-4 flex"
                }, React.createElement("div", {
                      className: " text-center flex-1 word-keep-all flex flex-col justify-around"
                    }, React.createElement("div", {
                          className: "text-gray-600 text-sm"
                        }, "신규 주문"), React.createElement("div", {
                          className: "font-bold text-lg"
                        }, String(status.create))), React.createElement("div", {
                      className: "border-l border-gray-100 py-[10px] my-1"
                    }), React.createElement("div", {
                      className: " text-center flex-1 word-keep-all flex flex-col justify-around"
                    }, React.createElement("div", {
                          className: "text-gray-600 text-sm"
                        }, "상품 준비중"), React.createElement("div", {
                          className: "font-bold text-lg"
                        }, String(status.ready))), React.createElement("div", {
                      className: "border-l border-gray-100 py-[10px] my-1"
                    }), React.createElement("div", {
                      className: " text-center flex-1 word-keep-all flex flex-col justify-around"
                    }, React.createElement("div", {
                          className: "text-gray-600 text-sm"
                        }, "배송중"), React.createElement("div", {
                          className: "font-bold text-lg"
                        }, String(status.delivering))), React.createElement("div", {
                      className: "border-l border-gray-100 py-[10px] my-1"
                    }), React.createElement("div", {
                      className: " text-center flex-1 word-keep-all flex flex-col justify-around"
                    }, React.createElement("div", {
                          className: "text-gray-600 text-sm"
                        }, "배송 완료"), React.createElement("div", {
                          className: "font-bold text-lg"
                        }, String(status.complete)))));
}

var Mobile = {
  make: MyInfo_Processing_Order_Buyer$Mobile
};

export {
  Fragment ,
  initStatus ,
  useStatus ,
  PC ,
  Mobile ,
}
/* react Not a pure module */
