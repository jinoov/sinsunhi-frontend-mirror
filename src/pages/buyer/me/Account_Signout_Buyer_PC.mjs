// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Env from "../../../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Locale from "../../../utils/Locale.mjs";
import * as Checkbox from "../../../components/common/Checkbox.mjs";
import * as Redirect from "../../../components/Redirect.mjs";
import * as RelayEnv from "../../../constants/RelayEnv.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as IconError from "../../../components/svgs/IconError.mjs";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../../utils/CustomHooks.mjs";
import * as FetchHelper from "../../../utils/FetchHelper.mjs";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as DeviceDetect from "../../../bindings/DeviceDetect.mjs";
import * as Footer_Buyer from "../../../components/Footer_Buyer.mjs";
import * as Header_Buyer from "../../../components/Header_Buyer.mjs";
import * as Authorization from "../../../utils/Authorization.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Belt_SetString from "rescript/lib/es6/belt_SetString.js";
import * as ServerSideHelper from "../../../utils/ServerSideHelper.mjs";
import * as ChannelTalkHelper from "../../../utils/ChannelTalkHelper.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as Account_Signout_Term_Buyer from "./components/Account_Signout_Term_Buyer.mjs";
import * as RescriptReactErrorBoundary from "@rescript/react/src/RescriptReactErrorBoundary.mjs";
import * as Account_Signout_Reason_Buyer from "./components/Account_Signout_Reason_Buyer.mjs";
import * as AccountSignoutBuyerPC_Query_graphql from "../../../__generated__/AccountSignoutBuyerPC_Query_graphql.mjs";
import * as Account_Signout_ConfirmPassword_Buyer from "./components/Account_Signout_ConfirmPassword_Buyer.mjs";
import * as AccountSignoutBuyerPC_Fragment_graphql from "../../../__generated__/AccountSignoutBuyerPC_Fragment_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(AccountSignoutBuyerPC_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(AccountSignoutBuyerPC_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(AccountSignoutBuyerPC_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(AccountSignoutBuyerPC_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, AccountSignoutBuyerPC_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, AccountSignoutBuyerPC_Query_graphql.node, AccountSignoutBuyerPC_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: AccountSignoutBuyerPC_Query_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, AccountSignoutBuyerPC_Query_graphql.node, AccountSignoutBuyerPC_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(AccountSignoutBuyerPC_Query_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(AccountSignoutBuyerPC_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(AccountSignoutBuyerPC_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(AccountSignoutBuyerPC_Query_graphql.node, AccountSignoutBuyerPC_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query = {
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function use$1(fRef) {
  var data = ReactRelay.useFragment(AccountSignoutBuyerPC_Fragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(AccountSignoutBuyerPC_Fragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(AccountSignoutBuyerPC_Fragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return AccountSignoutBuyerPC_Fragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  use: use$1,
  useOpt: useOpt
};

function Account_Signout_Buyer_PC$Signout(Props) {
  var sinsunCashDeposit = Props.sinsunCashDeposit;
  var selected = Props.selected;
  var setSelected = Props.setSelected;
  var etc = Props.etc;
  var setEtc = Props.setEtc;
  var loading = Props.loading;
  var onClickSignout = Props.onClickSignout;
  var debtAmount = Props.debtAmount;
  var router = Router.useRouter();
  var match = React.useState(function () {
        return false;
      });
  var setAgree = match[1];
  var agree = match[0];
  var isDebtor = Belt_Option.mapWithDefault(debtAmount, false, (function (a) {
          return a > 0;
        }));
  var disabled = !agree || loading || Belt_SetString.isEmpty(selected) || isDebtor;
  return React.createElement("div", {
              className: "flex flex-col mt-10 max-w-[640px]"
            }, React.createElement(Account_Signout_Reason_Buyer.PC.make, {
                  selected: selected,
                  setSelected: setSelected,
                  etc: etc,
                  setEtc: setEtc
                }), React.createElement("div", {
                  className: "mt-4 p-10 border border-[#DCDFE3]"
                }, React.createElement("div", undefined, "회원탈퇴 전에 유의사항을 꼭 확인하세요."), React.createElement("div", {
                      className: "border border-gray-100 mt-6 mb-4"
                    }), React.createElement(Account_Signout_Term_Buyer.make, {
                      className: "mt-6 list-disc pl-4 text-sm"
                    })), React.createElement("div", {
                  className: "mt-4 py-[22px] px-10 border border-[#DCDFE3] flex items-center justify-between"
                }, React.createElement("div", {
                      className: "text-gray-600 text-sm"
                    }, "신선캐시 잔액"), React.createElement("div", {
                      className: "font-bold text-text-L1 text-[15px]"
                    }, "" + Locale.Float.show(undefined, sinsunCashDeposit, 0) + "원")), debtAmount !== undefined ? React.createElement("div", {
                    className: "mt-4 py-[22px] px-10 border border-[#DCDFE3] flex items-center justify-between"
                  }, React.createElement("div", {
                        className: "text-gray-600 text-sm"
                      }, "나중결제 미정산 금액"), React.createElement("div", {
                        className: "font-bold text-text-L1 text-[15px]"
                      }, "" + Locale.Float.show(undefined, debtAmount, 0) + "원")) : null, isDebtor ? React.createElement("div", {
                    className: "text-notice text-sm mt-1 text-right"
                  }, "미정산 금액이 남아있기 때문에 탈퇴를 할 수 없습니다.") : null, React.createElement("div", {
                  className: "mt-10 flex flex-col items-center mb-20"
                }, React.createElement("div", {
                      className: "flex items-center"
                    }, React.createElement(Checkbox.make, {
                          id: "agree",
                          name: "agree",
                          checked: agree,
                          onChange: (function (param) {
                              setAgree(function (param) {
                                    return !agree;
                                  });
                            }),
                          disabled: isDebtor
                        }), React.createElement("label", {
                          className: "ml-2",
                          htmlFor: "agree"
                        }, "유의사항을 모두 확인했습니다.")), React.createElement("div", {
                      className: "flex mt-10"
                    }, React.createElement("button", {
                          className: "bg-gray-150 rounded-xl focus:outline-none w-full py-4 text-center mr-1 px-[70px]",
                          disabled: loading,
                          onClick: (function (param) {
                              router.push("/buyer/me/account");
                            })
                        }, React.createElement("span", {
                              className: "font-bold"
                            }, "취소")), React.createElement("button", {
                          className: Cx.cx([
                                "rounded-xl focus:outline-none w-full py-4 text-center ml-1 px-[70px]",
                                disabled ? "bg-gray-150" : "bg-[#FCF0E6]"
                              ]),
                          disabled: disabled,
                          onClick: (function (param) {
                              Curry._1(onClickSignout, undefined);
                            })
                        }, React.createElement("span", {
                              className: Cx.cx([
                                    "font-bold",
                                    disabled ? "text-gray-300" : "text-[#FF7A38]"
                                  ])
                            }, "탈퇴")))));
}

var Signout = {
  make: Account_Signout_Buyer_PC$Signout
};

function Account_Signout_Buyer_PC$Content(Props) {
  var query = Props.query;
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var match$1 = use$1(query);
  var match$2 = React.useState(function () {
        return /* Confirm */0;
      });
  var setStep = match$2[1];
  var match$3 = React.useState(function () {
        return "";
      });
  var password = match$3[0];
  var match$4 = React.useState(function () {
        
      });
  var selected = match$4[0];
  var match$5 = React.useState(function () {
        return "";
      });
  var etc = match$5[0];
  var match$6 = React.useState(function () {
        return false;
      });
  var setLoading = match$6[1];
  var onClickSignout = function (param) {
    setLoading(function (param) {
          return true;
        });
    var reason = Belt_List.reduce(Belt_List.map(Belt_SetString.toList(selected), (function (reason) {
                  if (reason === "기타") {
                    return "기타(" + etc + ")";
                  } else {
                    return reason;
                  }
                })), "", (function (acc, str) {
              return acc + "|" + str;
            })).replace(new RegExp("^,", "g"), "");
    Belt_Option.map(JSON.stringify({
              password: password,
              reason: reason
            }), (function (body) {
            return FetchHelper.requestWithRetry(FetchHelper.postWithToken, "" + Env.restApiUrl + "/user/leave", body, 1, (function (param) {
                          setLoading(function (param) {
                                return false;
                              });
                          CustomHooks.Auth.logOut(undefined);
                          ChannelTalkHelper.logout(undefined);
                          Redirect.setHref("/");
                        }), (function (param) {
                          addToast(React.createElement("div", {
                                    className: "flex items-center"
                                  }, React.createElement(IconError.make, {
                                        width: "24",
                                        height: "24",
                                        className: "mr-2"
                                      }), "탈퇴 중 오류가 발생했습니다. 잠시후 다시 시도해주세요."), {
                                appearance: "error"
                              });
                          setLoading(function (param) {
                                return false;
                              });
                        }));
          }));
  };
  return React.createElement("div", {
              className: "m-auto pt-10 flex flex-col min-w-[375px]"
            }, React.createElement("div", {
                  className: "text-center"
                }, React.createElement("span", {
                      className: "font-bold text-[26px]"
                    }, "회원탈퇴")), match$2[0] ? React.createElement(Account_Signout_Buyer_PC$Signout, {
                    sinsunCashDeposit: match$1.sinsunCashDeposit,
                    selected: selected,
                    setSelected: match$4[1],
                    etc: etc,
                    setEtc: match$5[1],
                    loading: match$6[0],
                    onClickSignout: onClickSignout,
                    debtAmount: match$1.debtAmount
                  }) : React.createElement(Account_Signout_ConfirmPassword_Buyer.PC.make, {
                    email: match$1.uid,
                    nextStep: (function (param) {
                        setStep(function (param) {
                              return /* Signout */1;
                            });
                      }),
                    password: password,
                    setPassword: match$3[1]
                  }));
}

var Content = {
  make: Account_Signout_Buyer_PC$Content
};

function $$default(param) {
  var router = Router.useRouter();
  var queryData = use(undefined, undefined, undefined, undefined, undefined);
  var viewer = queryData.viewer;
  return React.createElement("div", {
              className: "w-full min-h-screen flex flex-col"
            }, React.createElement("div", {
                  className: "flex"
                }, React.createElement(Header_Buyer.PC.make, {
                      key: router.asPath
                    })), React.createElement(Authorization.Buyer.make, {
                  children: React.createElement(RescriptReactErrorBoundary.make, {
                        children: React.createElement(React.Suspense, {
                              children: viewer !== undefined ? React.createElement(Account_Signout_Buyer_PC$Content, {
                                      query: viewer.fragmentRefs
                                    }) : React.createElement("div", undefined, "계정정보를 가져오는데 실패했습니다"),
                              fallback: null
                            }),
                        fallback: (function (param) {
                            return React.createElement("div", undefined, "계정정보를 가져오는데 실패했습니다");
                          })
                      })
                }), React.createElement(Footer_Buyer.PC.make, {}));
}

function getServerSideProps(ctx) {
  var environment = RelayEnv.environment({
        TAG: /* SinsunMarket */0,
        _0: Env.graphqlApiUrl
      });
  var gnbAndCategoryQuery = ServerSideHelper.gnbAndCategory(environment);
  var deviceType = DeviceDetect.detectDeviceFromCtx2(ctx.req);
  if (deviceType !== 1) {
    return Promise.resolve({
                redirect: {
                  permanent: true,
                  destination: "/buyer/me/account"
                }
              });
  } else {
    return ServerSideHelper.makeResultWithQuery(gnbAndCategoryQuery, environment, {});
  }
}

export {
  Query ,
  Fragment ,
  Signout ,
  Content ,
  $$default ,
  $$default as default,
  getServerSideProps ,
}
/* Env Not a pure module */
