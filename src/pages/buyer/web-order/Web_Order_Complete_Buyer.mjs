// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "@rescript/react/src/React.mjs";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React$1 from "react";
import * as Global from "../../../components/Global.mjs";
import * as DataGtm from "../../../utils/DataGtm.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as NotFound from "../../NotFound.mjs";
import * as RelayEnv from "../../../constants/RelayEnv.mjs";
import * as Garter_Fn from "@greenlabs/garter/src/Garter_Fn.mjs";
import Head from "next/head";
import Link from "next/link";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ChannelTalk from "../../../bindings/ChannelTalk.mjs";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as DeviceDetect from "../../../bindings/DeviceDetect.mjs";
import * as Footer_Buyer from "../../../components/Footer_Buyer.mjs";
import * as Header_Buyer from "../../../components/Header_Buyer.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as GnbBannerList_Buyer from "../../../components/GnbBannerList_Buyer.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as RescriptReactErrorBoundary from "@rescript/react/src/RescriptReactErrorBoundary.mjs";
import * as WebOrderCompleteBuyerQuery_graphql from "../../../__generated__/WebOrderCompleteBuyerQuery_graphql.mjs";
import * as Web_Order_Complete_Orderer_Info_Buyer from "../../../components/Web_Order_Complete_Orderer_Info_Buyer.mjs";
import * as Web_Order_Complete_Payment_Info_Buyer from "../../../components/Web_Order_Complete_Payment_Info_Buyer.mjs";
import * as Web_Order_Complete_Product_Info_Buyer from "../../../components/Web_Order_Complete_Product_Info_Buyer.mjs";
import * as Web_Order_Complete_Delivery_Info_Buyer from "../../../components/Web_Order_Complete_Delivery_Info_Buyer.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(WebOrderCompleteBuyerQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(WebOrderCompleteBuyerQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(WebOrderCompleteBuyerQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(WebOrderCompleteBuyerQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React$1.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, WebOrderCompleteBuyerQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, WebOrderCompleteBuyerQuery_graphql.node, WebOrderCompleteBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: WebOrderCompleteBuyerQuery_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, WebOrderCompleteBuyerQuery_graphql.node, WebOrderCompleteBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(WebOrderCompleteBuyerQuery_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(WebOrderCompleteBuyerQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(WebOrderCompleteBuyerQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(WebOrderCompleteBuyerQuery_graphql.node, WebOrderCompleteBuyerQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_paymentMethod_decode = WebOrderCompleteBuyerQuery_graphql.Utils.paymentMethod_decode;

var Query_paymentMethod_fromString = WebOrderCompleteBuyerQuery_graphql.Utils.paymentMethod_fromString;

var Query_wosDeliveryType_decode = WebOrderCompleteBuyerQuery_graphql.Utils.wosDeliveryType_decode;

var Query_wosDeliveryType_fromString = WebOrderCompleteBuyerQuery_graphql.Utils.wosDeliveryType_fromString;

var Query = {
  paymentMethod_decode: Query_paymentMethod_decode,
  paymentMethod_fromString: Query_paymentMethod_fromString,
  wosDeliveryType_decode: Query_wosDeliveryType_decode,
  wosDeliveryType_fromString: Query_wosDeliveryType_fromString,
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function item_encode(v) {
  return Js_dict.fromArray([
              [
                "item_id",
                Spice.stringToJson(v.itemId)
              ],
              [
                "item_name",
                Spice.stringToJson(v.itemName)
              ],
              [
                "currency",
                Spice.stringToJson(v.currency)
              ],
              [
                "item_variant",
                Spice.stringToJson(v.itemVariant)
              ],
              [
                "price",
                Spice.intToJson(v.price)
              ],
              [
                "quantity",
                Spice.intToJson(v.quantity)
              ],
              [
                "index",
                Spice.intToJson(v.index)
              ]
            ]);
}

function item_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var itemId = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "item_id"), null));
  if (itemId.TAG === /* Ok */0) {
    var itemName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "item_name"), null));
    if (itemName.TAG === /* Ok */0) {
      var currency = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "currency"), null));
      if (currency.TAG === /* Ok */0) {
        var itemVariant = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "item_variant"), null));
        if (itemVariant.TAG === /* Ok */0) {
          var price = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "price"), null));
          if (price.TAG === /* Ok */0) {
            var quantity = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "quantity"), null));
            if (quantity.TAG === /* Ok */0) {
              var index = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "index"), null));
              if (index.TAG === /* Ok */0) {
                return {
                        TAG: /* Ok */0,
                        _0: {
                          itemId: itemId._0,
                          itemName: itemName._0,
                          currency: currency._0,
                          itemVariant: itemVariant._0,
                          price: price._0,
                          quantity: quantity._0,
                          index: index._0
                        }
                      };
              }
              var e = index._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".index" + e.path,
                        message: e.message,
                        value: e.value
                      }
                    };
            }
            var e$1 = quantity._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".quantity" + e$1.path,
                      message: e$1.message,
                      value: e$1.value
                    }
                  };
          }
          var e$2 = price._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".price" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
        }
        var e$3 = itemVariant._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: "." + ("item_variant" + e$3.path),
                  message: e$3.message,
                  value: e$3.value
                }
              };
      }
      var e$4 = currency._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".currency" + e$4.path,
                message: e$4.message,
                value: e$4.value
              }
            };
    }
    var e$5 = itemName._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: "." + ("item_name" + e$5.path),
              message: e$5.message,
              value: e$5.value
            }
          };
  }
  var e$6 = itemId._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: "." + ("item_id" + e$6.path),
            message: e$6.message,
            value: e$6.value
          }
        };
}

function ecommerce_encode(v) {
  return Js_dict.fromArray([
              [
                "transaction_id",
                Spice.stringToJson(v.transactionId)
              ],
              [
                "currency",
                Spice.stringToJson(v.currency)
              ],
              [
                "value",
                Spice.intToJson(v.value)
              ],
              [
                "shipping_value",
                Spice.intToJson(v.shippingValue)
              ]
            ]);
}

function ecommerce_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var transactionId = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "transaction_id"), null));
  if (transactionId.TAG === /* Ok */0) {
    var currency = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "currency"), null));
    if (currency.TAG === /* Ok */0) {
      var value = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "value"), null));
      if (value.TAG === /* Ok */0) {
        var shippingValue = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "shipping_value"), null));
        if (shippingValue.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    transactionId: transactionId._0,
                    currency: currency._0,
                    value: value._0,
                    shippingValue: shippingValue._0
                  }
                };
        }
        var e = shippingValue._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: "." + ("shipping_value" + e.path),
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = value._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".value" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = currency._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".currency" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = transactionId._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: "." + ("transaction_id" + e$3.path),
            message: e$3.message,
            value: e$3.value
          }
        };
}

function toItems(index, param) {
  return item_encode({
              itemId: String(param.productId),
              itemName: param.productName,
              currency: "KRW",
              itemVariant: param.stockSku,
              price: param.price,
              quantity: param.quantity,
              index: index
            });
}

function Web_Order_Complete_Buyer$Placeholder(props) {
  var deviceType = props.deviceType;
  var router = Router.useRouter();
  var tmp;
  switch (deviceType) {
    case /* Unknown */0 :
        tmp = null;
        break;
    case /* PC */1 :
        tmp = React.createElementWithKey(Header_Buyer.PC_Old.make, {}, router.asPath);
        break;
    case /* Mobile */2 :
        tmp = React$1.createElement(Header_Buyer.Mobile.make, {});
        break;
    
  }
  var tmp$1;
  switch (deviceType) {
    case /* Unknown */0 :
        tmp$1 = null;
        break;
    case /* PC */1 :
        tmp$1 = React$1.createElement(Footer_Buyer.PC.make, {});
        break;
    case /* Mobile */2 :
        tmp$1 = React$1.createElement(Footer_Buyer.MO.make, {});
        break;
    
  }
  return React$1.createElement(React$1.Fragment, undefined, tmp, React$1.createElement("main", {
                  className: "flex flex-col gap-5 xl:px-[16%] xl:py-20 bg-surface min-w-[375px]"
                }, React$1.createElement("label", {
                      className: "hidden xl:flex ml-5 mb-3 text-3xl font-bold text-enabled-L1"
                    }, "주문 완료"), React$1.createElement("div", {
                      className: "flex flex-col xl:flex-row gap-4 xl:gap-5"
                    }, React$1.createElement("article", {
                          className: "w-full xl:w-3/5 flex flex-col gap-5"
                        }, React$1.createElement("section", {
                              className: "flex justify-center bg-white rounded-sm p-7 xl:p-0 min-w-[375px]"
                            }, React$1.createElement("span", {
                                  className: "w-full text-center text-base xl:text-xl p-6 font-bold text-text-L1 shadow-card-box xl:shadow-none"
                                }, "총 N건의 상품 주문이 완료되었습니다 📦")), React$1.createElement("section", {
                              className: "flex flex-col p-7 gap-7 bg-white rounded-sm min-w-max"
                            }, React$1.createElement(Web_Order_Complete_Product_Info_Buyer.Placeholder.make, {}), React$1.createElement("div", {
                                  className: "h-px bg-border-default-L2"
                                }), React$1.createElement(Web_Order_Complete_Orderer_Info_Buyer.Placeholder.make, {
                                  deviceType: deviceType
                                }), React$1.createElement("div", {
                                  className: "h-px bg-border-default-L2"
                                }), React$1.createElement(Web_Order_Complete_Delivery_Info_Buyer.Placeholder.make, {
                                  deviceType: deviceType
                                }), React$1.createElement("div", {
                                  className: "h-px bg-border-default-L2"
                                }))), React$1.createElement("aside", {
                          className: "xl:w-2/5 min-w-[375px]"
                        }, React$1.createElement(Web_Order_Complete_Payment_Info_Buyer.Placeholder.make, {
                              deviceType: deviceType
                            }))), React$1.createElement("nav", {
                      className: "w-full xl:w-[59%] flex flex-col xl:flex-row gap-2 p-7 pb-16 xl:pb-7 bg-white min-w-[375px]"
                    }, React$1.createElement(Link, {
                          href: "/buyer/orders",
                          children: React$1.createElement("a", {
                                className: "flex w-full xl:w-1/2 h-13 bg-surface rounded-lg justify-center items-center text-lg cursor-pointer text-enabled-L1"
                              }, "주문 상세내역 보기")
                        }), React$1.createElement(Link, {
                          href: "/buyer",
                          children: React$1.createElement("a", {
                                className: "flex w-full xl:w-1/2 h-13 bg-green-100 rounded-lg justify-center items-center font-bold text-lg cursor-pointer text-primary"
                              }, "쇼핑 계속하기")
                        }))), tmp$1);
}

var Placeholder = {
  make: Web_Order_Complete_Buyer$Placeholder
};

function Web_Order_Complete_Buyer$PC(props) {
  var deviceType = props.deviceType;
  var query = props.query;
  return React$1.createElement("main", {
              className: "flex flex-col gap-5 px-[16%] py-20 bg-surface min-w-[375px]"
            }, React$1.createElement("label", {
                  className: "flex ml-5 mb-3 text-3xl font-bold text-enabled-L1"
                }, "주문 완료"), React$1.createElement("div", {
                  className: "flex flex-row gap-5"
                }, React$1.createElement("article", {
                      className: "w-3/5 flex flex-col gap-5 min-w-[550px]"
                    }, React$1.createElement("section", {
                          className: "flex justify-center bg-white rounded-sm p-0"
                        }, React$1.createElement("span", {
                              className: "w-full text-center text-xl p-6 font-bold text-text-L1 shadow-none"
                            }, "총 " + String(props.numberOfProductOptions) + "건의 상품 주문이 완료되었습니다 📦")), React$1.createElement("section", {
                          className: "flex flex-col p-7 gap-7 bg-white rounded-sm min-w-max"
                        }, React$1.createElement(Web_Order_Complete_Product_Info_Buyer.make, {
                              query: query,
                              deviceType: deviceType
                            }), React$1.createElement("div", {
                              className: "h-px bg-border-default-L2"
                            }), React$1.createElement(Web_Order_Complete_Orderer_Info_Buyer.make, {
                              deviceType: deviceType
                            }), React$1.createElement("div", {
                              className: "h-px bg-border-default-L2"
                            }), React$1.createElement(Web_Order_Complete_Delivery_Info_Buyer.make, {
                              query: query,
                              deviceType: deviceType
                            }))), React$1.createElement("aside", {
                      className: "w-2/5 min-w-[375px]"
                    }, React$1.createElement(Web_Order_Complete_Payment_Info_Buyer.make, {
                          query: query,
                          deviceType: deviceType
                        }))), React$1.createElement("nav", {
                  className: "w-[59%] flex flex-row gap-2 p-7 bg-white min-w-[550px]"
                }, React$1.createElement(Link, {
                      href: "/buyer/orders",
                      children: React$1.createElement("a", {
                            className: "flex w-1/2 h-13 bg-surface rounded-lg justify-center items-center text-lg cursor-pointer text-enabled-L1"
                          }, "주문 상세내역 보기")
                    }), React$1.createElement(Link, {
                      href: "/buyer",
                      children: React$1.createElement("a", {
                            className: "flex w-1/2 h-13 bg-green-100 rounded-lg justify-center items-center font-bold text-lg cursor-pointer text-primary"
                          }, "쇼핑 계속하기")
                    })));
}

var PC = {
  make: Web_Order_Complete_Buyer$PC
};

function Web_Order_Complete_Buyer$MO(props) {
  var deviceType = props.deviceType;
  var query = props.query;
  return React$1.createElement("main", {
              className: "flex flex-col gap-5 bg-surface min-w-[375px]"
            }, React$1.createElement("div", {
                  className: "flex flex-col gap-4"
                }, React$1.createElement("article", {
                      className: "w-full flex flex-col gap-5"
                    }, React$1.createElement("section", {
                          className: "flex justify-center bg-white rounded-sm p-7 min-w-[375px]"
                        }, React$1.createElement("span", {
                              className: "w-full text-center text-base p-6 font-bold text-text-L1 shadow-card-box"
                            }, "총 " + String(props.numberOfProductOptions) + "건의 상품 주문이 완료되었습니다 📦")), React$1.createElement("section", {
                          className: "flex flex-col p-7 gap-7 bg-white rounded-sm min-w-max"
                        }, React$1.createElement(Web_Order_Complete_Product_Info_Buyer.make, {
                              query: query,
                              deviceType: deviceType
                            }), React$1.createElement("div", {
                              className: "h-px bg-border-default-L2"
                            }), React$1.createElement(Web_Order_Complete_Orderer_Info_Buyer.make, {
                              deviceType: deviceType
                            }), React$1.createElement("div", {
                              className: "h-px bg-border-default-L2"
                            }), React$1.createElement(Web_Order_Complete_Delivery_Info_Buyer.make, {
                              query: query,
                              deviceType: deviceType
                            }))), React$1.createElement("aside", {
                      className: "min-w-[375px]"
                    }, React$1.createElement(Web_Order_Complete_Payment_Info_Buyer.make, {
                          query: query,
                          deviceType: deviceType
                        }))), React$1.createElement("nav", {
                  className: "w-full flex flex-col gap-2 p-7 pb-16 bg-white min-w-[375px]"
                }, React$1.createElement(Link, {
                      href: "/buyer/orders",
                      children: React$1.createElement("a", {
                            className: "flex w-full h-13 bg-surface rounded-lg justify-center items-center text-lg cursor-pointer text-enabled-L1"
                          }, "주문 상세내역 보기")
                    }), React$1.createElement(Link, {
                      href: "/buyer",
                      children: React$1.createElement("a", {
                            className: "flex w-full h-13 bg-green-100 rounded-lg justify-center items-center font-bold text-lg cursor-pointer text-primary"
                          }, "쇼핑 계속하기")
                    })));
}

var MO = {
  make: Web_Order_Complete_Buyer$MO
};

function Web_Order_Complete_Buyer$Container(props) {
  var deviceType = props.deviceType;
  var router = Router.useRouter();
  var match = use({
        orderNo: props.nodeId
      }, undefined, undefined, undefined, undefined);
  var fragmentRefs = match.fragmentRefs;
  var wosOrder = match.wosOrder;
  React$1.useEffect((function () {
          Belt_Option.forEach(wosOrder, (function (wosOrder$p) {
                  DataGtm.push({
                        ecommerce: null
                      });
                  var match = Belt_Array.get(wosOrder$p.orderProducts, 0);
                  var tmp;
                  if (match !== undefined) {
                    var match$1 = Caml_option.valFromOption(match);
                    tmp = match$1 !== undefined ? Web_Order_Complete_Delivery_Info_Buyer.deliveryTypetoString(match$1.deliveryType) : "";
                  } else {
                    tmp = "";
                  }
                  var match$2 = wosOrder$p.paymentMethod;
                  DataGtm.push(DataGtm.mergeUserIdUnsafe({
                            event: "purchase",
                            ecommerce: {
                              transaction_id: wosOrder$p.orderNo,
                              currency: "KRW",
                              value: wosOrder$p.totalOrderPrice,
                              shipping_value: Belt_Option.getWithDefault(wosOrder$p.totalDeliveryCost, 0),
                              shipping_method: tmp,
                              payment_method: match$2 !== undefined ? (
                                  match$2 === "VIRTUAL_ACCOUNT" ? "가상계좌" : (
                                      match$2 === "CREDIT_CARD" ? "신용카드" : (
                                          match$2 === "TRANSFER" ? "계좌이체" : ""
                                        )
                                    )
                                ) : "",
                              items: Belt_Array.mapWithIndex(Belt_Array.keepMap(wosOrder$p.orderProducts, Garter_Fn.identity), toItems)
                            }
                          }));
                }));
          Belt_Option.forEach(wosOrder, (function (wosOrder$p) {
                  ChannelTalk.track("track", "CheckoutCompleted", {
                        price: wosOrder$p.totalOrderPrice,
                        currency: "KRW"
                      });
                }));
          Belt_Option.forEach(wosOrder, (function (wosOrder) {
                  Curry._3(Global.$$Window.ReactNativeWebView.PostMessage.airbridgeWithPayload, "PURCHASE", {
                        transactionID: wosOrder.orderNo,
                        price: wosOrder.totalOrderPrice,
                        currency: "KRW",
                        items: Belt_Array.mapWithIndex(Belt_Array.keepMap(wosOrder.orderProducts, Garter_Fn.identity), toItems),
                        quantity: wosOrder.orderProducts.length
                      }, undefined);
                }));
        }), []);
  var numberOfProductOptions = Belt_Option.mapWithDefault(wosOrder, 0, (function (w) {
          return Belt_Array.keepMap(w.orderProducts, Garter_Fn.identity).length;
        }));
  switch (deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React$1.createElement(React$1.Fragment, undefined, React.createElementWithKey(Header_Buyer.PC_Old.make, {}, router.asPath), React$1.createElement(Web_Order_Complete_Buyer$PC, {
                        query: fragmentRefs,
                        numberOfProductOptions: numberOfProductOptions,
                        deviceType: deviceType
                      }), React$1.createElement(Footer_Buyer.PC.make, {}));
    case /* Mobile */2 :
        return React$1.createElement(React$1.Fragment, undefined, React$1.createElement(Header_Buyer.Mobile.make, {}), React$1.createElement(Web_Order_Complete_Buyer$MO, {
                        query: fragmentRefs,
                        numberOfProductOptions: numberOfProductOptions,
                        deviceType: deviceType
                      }), React$1.createElement(Footer_Buyer.MO.make, {}));
    
  }
}

var Container = {
  make: Web_Order_Complete_Buyer$Container
};

function $$default(props) {
  var deviceType = props.deviceType;
  var router = Router.useRouter();
  var orderId = Js_dict.get(router.query, "order-id");
  var match = React$1.useState(function () {
        return false;
      });
  var setIsCsr = match[1];
  React$1.useEffect((function () {
          setIsCsr(function (param) {
                return true;
              });
        }), []);
  return React$1.createElement(React$1.Fragment, undefined, React$1.createElement(Head, {
                  children: React$1.createElement("title", undefined, "주문완료 - 신선하이")
                }), React$1.createElement(RescriptReactErrorBoundary.make, {
                  children: React$1.createElement(React$1.Suspense, {
                        children: Caml_option.some(match[0] && orderId !== undefined ? React$1.createElement(Web_Order_Complete_Buyer$Container, {
                                    nodeId: orderId,
                                    deviceType: deviceType
                                  }) : React$1.createElement(Web_Order_Complete_Buyer$Placeholder, {
                                    deviceType: deviceType
                                  })),
                        fallback: Caml_option.some(React$1.createElement(Web_Order_Complete_Buyer$Placeholder, {
                                  deviceType: deviceType
                                }))
                      }),
                  fallback: (function (param) {
                      return React$1.createElement(NotFound.make, {});
                    })
                }));
}

function getServerSideProps(ctx) {
  var deviceType = DeviceDetect.detectDeviceFromCtx2(ctx.req);
  return Js_promise.$$catch((function (err) {
                console.log("에러 GnbBannerListBuyerQuery", err);
                return Promise.resolve({
                            props: {
                              query: ctx.query,
                              deviceType: deviceType,
                              gnbBanners: []
                            }
                          });
              }), Js_promise.then_((function (res) {
                    return Promise.resolve({
                                props: {
                                  query: ctx.query,
                                  deviceType: deviceType,
                                  gnbBanners: res.gnbBanners
                                }
                              });
                  }), GnbBannerList_Buyer.Query.fetchPromised(RelayEnv.envSinsunMarket, undefined, undefined, undefined, undefined)));
}

export {
  Query ,
  item_encode ,
  item_decode ,
  ecommerce_encode ,
  ecommerce_decode ,
  toItems ,
  Placeholder ,
  PC ,
  MO ,
  Container ,
  $$default ,
  $$default as default,
  getServerSideProps ,
}
/* React Not a pure module */
