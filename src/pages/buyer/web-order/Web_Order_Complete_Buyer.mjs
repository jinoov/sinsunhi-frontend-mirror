// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as DataGtm from "../../../utils/DataGtm.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as NotFound from "../../NotFound.mjs";
import * as Garter_Fn from "@greenlabs/garter/src/Garter_Fn.mjs";
import Head from "next/head";
import Link from "next/link";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as RescriptReactErrorBoundary from "@rescript/react/src/RescriptReactErrorBoundary.mjs";
import * as WebOrderCompleteBuyerQuery_graphql from "../../../__generated__/WebOrderCompleteBuyerQuery_graphql.mjs";
import * as Web_Order_Complete_Orderer_Info_Buyer from "../../../components/Web_Order_Complete_Orderer_Info_Buyer.mjs";
import * as Web_Order_Complete_Payment_Info_Buyer from "../../../components/Web_Order_Complete_Payment_Info_Buyer.mjs";
import * as Web_Order_Complete_Product_Info_Buyer from "../../../components/Web_Order_Complete_Product_Info_Buyer.mjs";
import * as Web_Order_Complete_Delivery_Info_Buyer from "../../../components/Web_Order_Complete_Delivery_Info_Buyer.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(WebOrderCompleteBuyerQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(WebOrderCompleteBuyerQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(WebOrderCompleteBuyerQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(WebOrderCompleteBuyerQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, WebOrderCompleteBuyerQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, WebOrderCompleteBuyerQuery_graphql.node, WebOrderCompleteBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: WebOrderCompleteBuyerQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, WebOrderCompleteBuyerQuery_graphql.node, WebOrderCompleteBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(WebOrderCompleteBuyerQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(WebOrderCompleteBuyerQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(WebOrderCompleteBuyerQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(WebOrderCompleteBuyerQuery_graphql.node, WebOrderCompleteBuyerQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_makeVariables = WebOrderCompleteBuyerQuery_graphql.Utils.makeVariables;

var Query = {
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function item_encode(v) {
  return Js_dict.fromArray([
              [
                "item_id",
                Spice.stringToJson(v.itemId)
              ],
              [
                "item_name",
                Spice.stringToJson(v.itemName)
              ],
              [
                "currency",
                Spice.stringToJson(v.currency)
              ],
              [
                "item_variant",
                Spice.stringToJson(v.itemVariant)
              ],
              [
                "price",
                Spice.intToJson(v.price)
              ],
              [
                "quantity",
                Spice.intToJson(v.quantity)
              ]
            ]);
}

function item_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var itemId = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "item_id"), null));
  if (itemId.TAG === /* Ok */0) {
    var itemName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "item_name"), null));
    if (itemName.TAG === /* Ok */0) {
      var currency = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "currency"), null));
      if (currency.TAG === /* Ok */0) {
        var itemVariant = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "item_variant"), null));
        if (itemVariant.TAG === /* Ok */0) {
          var price = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "price"), null));
          if (price.TAG === /* Ok */0) {
            var quantity = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "quantity"), null));
            if (quantity.TAG === /* Ok */0) {
              return {
                      TAG: /* Ok */0,
                      _0: {
                        itemId: itemId._0,
                        itemName: itemName._0,
                        currency: currency._0,
                        itemVariant: itemVariant._0,
                        price: price._0,
                        quantity: quantity._0
                      }
                    };
            }
            var e = quantity._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".quantity" + e.path,
                      message: e.message,
                      value: e.value
                    }
                  };
          }
          var e$1 = price._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".price" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
        }
        var e$2 = itemVariant._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".item_variant" + e$2.path,
                  message: e$2.message,
                  value: e$2.value
                }
              };
      }
      var e$3 = currency._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".currency" + e$3.path,
                message: e$3.message,
                value: e$3.value
              }
            };
    }
    var e$4 = itemName._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".item_name" + e$4.path,
              message: e$4.message,
              value: e$4.value
            }
          };
  }
  var e$5 = itemId._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".item_id" + e$5.path,
            message: e$5.message,
            value: e$5.value
          }
        };
}

function ecommerce_encode(v) {
  return Js_dict.fromArray([
              [
                "transaction_id",
                Spice.stringToJson(v.transactionId)
              ],
              [
                "currency",
                Spice.stringToJson(v.currency)
              ],
              [
                "purchase_revenue",
                Spice.intToJson(v.purchaseRevenue)
              ],
              [
                "shipping_value",
                Spice.intToJson(v.shippingValue)
              ]
            ]);
}

function ecommerce_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var transactionId = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "transaction_id"), null));
  if (transactionId.TAG === /* Ok */0) {
    var currency = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "currency"), null));
    if (currency.TAG === /* Ok */0) {
      var purchaseRevenue = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "purchase_revenue"), null));
      if (purchaseRevenue.TAG === /* Ok */0) {
        var shippingValue = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "shipping_value"), null));
        if (shippingValue.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    transactionId: transactionId._0,
                    currency: currency._0,
                    purchaseRevenue: purchaseRevenue._0,
                    shippingValue: shippingValue._0
                  }
                };
        }
        var e = shippingValue._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".shipping_value" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = purchaseRevenue._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".purchase_revenue" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = currency._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".currency" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = transactionId._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".transaction_id" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function toEcommerce(w) {
  return ecommerce_encode({
              transactionId: w.orderNo,
              currency: "KRW",
              purchaseRevenue: w.totalOrderPrice,
              shippingValue: Belt_Option.getWithDefault(w.totalDeliveryCost, 0)
            });
}

function toItems(param) {
  return item_encode({
              itemId: String(param.productId),
              itemName: param.productName,
              currency: "KRW",
              itemVariant: param.stockSku,
              price: param.price,
              quantity: param.quantity
            });
}

function Web_Order_Complete_Buyer$Placeholder(Props) {
  return React.createElement("main", {
              className: "flex flex-col gap-5 xl:px-[16%] xl:py-20 bg-surface min-w-[375px]"
            }, React.createElement("label", {
                  className: "hidden xl:flex ml-5 mb-3 text-3xl font-bold text-enabled-L1"
                }, "주문 완료"), React.createElement("div", {
                  className: "flex flex-col xl:flex-row gap-4 xl:gap-5"
                }, React.createElement("article", {
                      className: "w-full xl:w-3/5 flex flex-col gap-5"
                    }, React.createElement("section", {
                          className: "flex justify-center bg-white rounded-sm p-7 xl:p-0 min-w-[375px]"
                        }, React.createElement("span", {
                              className: "w-full text-center text-base xl:text-xl p-6 font-bold text-text-L1 shadow-card-box xl:shadow-none"
                            }, "주문이 완료되었습니다 📦")), React.createElement("section", {
                          className: "flex flex-col p-7 gap-7 bg-white rounded-sm min-w-max"
                        }, React.createElement(Web_Order_Complete_Product_Info_Buyer.Placeholder.make, {}), React.createElement("div", {
                              className: "h-px bg-border-default-L2"
                            }), React.createElement(Web_Order_Complete_Orderer_Info_Buyer.Placeholder.make, {}), React.createElement("div", {
                              className: "h-px bg-border-default-L2"
                            }), React.createElement(Web_Order_Complete_Delivery_Info_Buyer.Placeholder.make, {}), React.createElement("div", {
                              className: "h-px bg-border-default-L2"
                            }))), React.createElement("aside", {
                      className: "xl:w-2/5 min-w-[375px]"
                    }, React.createElement(Web_Order_Complete_Payment_Info_Buyer.Placeholder.make, {}))), React.createElement("nav", {
                  className: "w-full xl:w-[59%] flex flex-col xl:flex-row gap-2 p-7 pb-16 xl:pb-7 bg-white min-w-[375px]"
                }, React.createElement(Link, {
                      href: "/buyer/orders",
                      children: React.createElement("a", {
                            className: "flex w-full xl:w-1/2 h-13 bg-surface rounded-lg justify-center items-center text-lg cursor-pointer text-enabled-L1"
                          }, "주문 상세내역 보기")
                    }), React.createElement(Link, {
                      href: "/buyer",
                      children: React.createElement("a", {
                            className: "flex w-full xl:w-1/2 h-13 bg-green-100 rounded-lg justify-center items-center font-bold text-lg cursor-pointer text-primary"
                          }, "쇼핑 계속하기")
                    })));
}

var Placeholder = {
  make: Web_Order_Complete_Buyer$Placeholder
};

function Web_Order_Complete_Buyer$Container(Props) {
  var nodeId = Props.nodeId;
  var queryData = use({
        orderNo: nodeId
      }, undefined, undefined, undefined, undefined);
  React.useEffect((function () {
          Belt_Option.forEach(queryData.wosOrder, (function (wosOrder) {
                  return DataGtm.push({
                              evnet: "purchase",
                              ecommerce: [toEcommerce(wosOrder)],
                              items: Belt_Array.map(Belt_Array.keepMap(wosOrder.orderProducts, Garter_Fn.identity), toItems)
                            });
                }));
          
        }), []);
  return React.createElement("main", {
              className: "flex flex-col gap-5 xl:px-[16%] xl:py-20 bg-surface min-w-[375px]"
            }, React.createElement("label", {
                  className: "hidden xl:flex ml-5 mb-3 text-3xl font-bold text-enabled-L1"
                }, "주문 완료"), React.createElement("div", {
                  className: "flex flex-col xl:flex-row gap-4 xl:gap-5"
                }, React.createElement("article", {
                      className: "w-full xl:w-3/5 flex flex-col gap-5"
                    }, React.createElement("section", {
                          className: "flex justify-center bg-white rounded-sm p-7 xl:p-0 min-w-[375px]"
                        }, React.createElement("span", {
                              className: "w-full text-center text-base xl:text-xl p-6 font-bold text-text-L1 shadow-card-box xl:shadow-none"
                            }, "주문이 완료되었습니다 📦")), React.createElement("section", {
                          className: "flex flex-col p-7 gap-7 bg-white rounded-sm min-w-max"
                        }, React.createElement(Web_Order_Complete_Product_Info_Buyer.make, {
                              query: queryData.fragmentRefs
                            }), React.createElement("div", {
                              className: "h-px bg-border-default-L2"
                            }), React.createElement(Web_Order_Complete_Orderer_Info_Buyer.make, {}), React.createElement("div", {
                              className: "h-px bg-border-default-L2"
                            }), React.createElement(Web_Order_Complete_Delivery_Info_Buyer.make, {
                              query: queryData.fragmentRefs
                            }))), React.createElement("aside", {
                      className: "xl:w-2/5 min-w-[375px]"
                    }, React.createElement(Web_Order_Complete_Payment_Info_Buyer.make, {
                          query: queryData.fragmentRefs
                        }))), React.createElement("nav", {
                  className: "w-full xl:w-[59%] flex flex-col xl:flex-row gap-2 p-7 pb-16 xl:pb-7 bg-white min-w-[375px]"
                }, React.createElement(Link, {
                      href: "/buyer/orders",
                      children: React.createElement("a", {
                            className: "flex w-full xl:w-1/2 h-13 bg-surface rounded-lg justify-center items-center text-lg cursor-pointer text-enabled-L1"
                          }, "주문 상세내역 보기")
                    }), React.createElement(Link, {
                      href: "/buyer",
                      children: React.createElement("a", {
                            className: "flex w-full xl:w-1/2 h-13 bg-green-100 rounded-lg justify-center items-center font-bold text-lg cursor-pointer text-primary"
                          }, "쇼핑 계속하기")
                    })));
}

var Container = {
  make: Web_Order_Complete_Buyer$Container
};

function Web_Order_Complete_Buyer(Props) {
  var router = Router.useRouter();
  var orderId = Js_dict.get(router.query, "order-id");
  return React.createElement(React.Fragment, undefined, React.createElement(Head, {
                  children: React.createElement("title", undefined, "주문완료 - 신선하이")
                }), React.createElement(RescriptReactErrorBoundary.make, {
                  children: React.createElement(React.Suspense, {
                        children: orderId !== undefined ? React.createElement(Web_Order_Complete_Buyer$Container, {
                                nodeId: orderId
                              }) : React.createElement(Web_Order_Complete_Buyer$Placeholder, {}),
                        fallback: React.createElement(Web_Order_Complete_Buyer$Placeholder, {})
                      }),
                  fallback: (function (param) {
                      return React.createElement(NotFound.make, {});
                    })
                }));
}

var make = Web_Order_Complete_Buyer;

export {
  Query ,
  item_encode ,
  item_decode ,
  ecommerce_encode ,
  ecommerce_decode ,
  toEcommerce ,
  toItems ,
  Placeholder ,
  Container ,
  make ,
  
}
/* react Not a pure module */
