// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as DS_Tab from "../../../components/common/container/DS_Tab.mjs";
import * as DS_Icon from "../../../components/svgs/DS_Icon.mjs";
import * as DataGtm from "../../../utils/DataGtm.mjs";
import * as DS_Title from "../../../components/common/container/DS_Title.mjs";
import * as DS_Button from "../../../components/common/element/DS_Button.mjs";
import * as Garter_Fn from "@greenlabs/garter/src/Garter_Fn.mjs";
import * as RfqCommon from "./RfqCommon.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../../utils/CustomHooks.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Authorization from "../../../utils/Authorization.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as DS_TopNavigation from "../../../components/common/container/DS_TopNavigation.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as DS_ButtonContainer from "../../../components/common/container/DS_ButtonContainer.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as RfqBasketBuyer_MeatParts_Query_graphql from "../../../__generated__/RfqBasketBuyer_MeatParts_Query_graphql.mjs";
import * as RfqBasketBuyer_MeatSpecies_Query_graphql from "../../../__generated__/RfqBasketBuyer_MeatSpecies_Query_graphql.mjs";
import * as RfqBasketBuyer_Current_Request_Query_graphql from "../../../__generated__/RfqBasketBuyer_Current_Request_Query_graphql.mjs";
import * as RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql from "../../../__generated__/RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.mjs";
import * as RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql from "../../../__generated__/RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.mjs";
import * as RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql from "../../../__generated__/RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.mjs";
import * as RfqBasketBuyer_RfqRequestItemsMeat_Fragment_Query_graphql from "../../../__generated__/RfqBasketBuyer_RfqRequestItemsMeat_Fragment_Query_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(RfqBasketBuyer_Current_Request_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqBasketBuyer_Current_Request_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(RfqBasketBuyer_Current_Request_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(RfqBasketBuyer_Current_Request_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, RfqBasketBuyer_Current_Request_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, RfqBasketBuyer_Current_Request_Query_graphql.node, RfqBasketBuyer_Current_Request_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: RfqBasketBuyer_Current_Request_Query_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, RfqBasketBuyer_Current_Request_Query_graphql.node, RfqBasketBuyer_Current_Request_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(RfqBasketBuyer_Current_Request_Query_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(RfqBasketBuyer_Current_Request_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqBasketBuyer_Current_Request_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(RfqBasketBuyer_Current_Request_Query_graphql.node, RfqBasketBuyer_Current_Request_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var CurrentRequest_makeVariables = RfqBasketBuyer_Current_Request_Query_graphql.Utils.makeVariables;

var CurrentRequest = {
  makeVariables: CurrentRequest_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function use$1(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(RfqBasketBuyer_MeatSpecies_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqBasketBuyer_MeatSpecies_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(RfqBasketBuyer_MeatSpecies_Query_graphql.Internal.convertResponse, data);
}

function useLoader$1(param) {
  var match = Hooks.useQueryLoader(RfqBasketBuyer_MeatSpecies_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, RfqBasketBuyer_MeatSpecies_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch$1(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, RfqBasketBuyer_MeatSpecies_Query_graphql.node, RfqBasketBuyer_MeatSpecies_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: RfqBasketBuyer_MeatSpecies_Query_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised$1(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, RfqBasketBuyer_MeatSpecies_Query_graphql.node, RfqBasketBuyer_MeatSpecies_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(RfqBasketBuyer_MeatSpecies_Query_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded$1(queryRef, param) {
  var data = Hooks.usePreloadedQuery(RfqBasketBuyer_MeatSpecies_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqBasketBuyer_MeatSpecies_Query_graphql.Internal.convertResponse, data);
}

function retain$1(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(RfqBasketBuyer_MeatSpecies_Query_graphql.node, RfqBasketBuyer_MeatSpecies_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var MeatSpecies_meatSpeciesOrderBy_decode = RfqBasketBuyer_MeatSpecies_Query_graphql.Utils.meatSpeciesOrderBy_decode;

var MeatSpecies_meatSpeciesOrderBy_fromString = RfqBasketBuyer_MeatSpecies_Query_graphql.Utils.meatSpeciesOrderBy_fromString;

var MeatSpecies_makeVariables = RfqBasketBuyer_MeatSpecies_Query_graphql.Utils.makeVariables;

var MeatSpecies = {
  meatSpeciesOrderBy_decode: MeatSpecies_meatSpeciesOrderBy_decode,
  meatSpeciesOrderBy_fromString: MeatSpecies_meatSpeciesOrderBy_fromString,
  makeVariables: MeatSpecies_makeVariables,
  Types: undefined,
  use: use$1,
  useLoader: useLoader$1,
  $$fetch: $$fetch$1,
  fetchPromised: fetchPromised$1,
  usePreloaded: usePreloaded$1,
  retain: retain$1
};

function use$2(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(RfqBasketBuyer_MeatParts_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqBasketBuyer_MeatParts_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(RfqBasketBuyer_MeatParts_Query_graphql.Internal.convertResponse, data);
}

function useLoader$2(param) {
  var match = Hooks.useQueryLoader(RfqBasketBuyer_MeatParts_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, RfqBasketBuyer_MeatParts_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch$2(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, RfqBasketBuyer_MeatParts_Query_graphql.node, RfqBasketBuyer_MeatParts_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: RfqBasketBuyer_MeatParts_Query_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised$2(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, RfqBasketBuyer_MeatParts_Query_graphql.node, RfqBasketBuyer_MeatParts_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(RfqBasketBuyer_MeatParts_Query_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded$2(queryRef, param) {
  var data = Hooks.usePreloadedQuery(RfqBasketBuyer_MeatParts_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqBasketBuyer_MeatParts_Query_graphql.Internal.convertResponse, data);
}

function retain$2(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(RfqBasketBuyer_MeatParts_Query_graphql.node, RfqBasketBuyer_MeatParts_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var MeatParts_makeVariables = RfqBasketBuyer_MeatParts_Query_graphql.Utils.makeVariables;

var MeatParts = {
  makeVariables: MeatParts_makeVariables,
  Types: undefined,
  use: use$2,
  useLoader: useLoader$2,
  $$fetch: $$fetch$2,
  fetchPromised: fetchPromised$2,
  usePreloaded: usePreloaded$2,
  retain: retain$2
};

var Query = {
  CurrentRequest: CurrentRequest,
  MeatSpecies: MeatSpecies,
  MeatParts: MeatParts
};

function internal_makeRefetchableFnOpts(fetchPolicy, onComplete, param) {
  var tmp = {};
  var tmp$1 = RescriptRelay.mapFetchPolicy(fetchPolicy);
  if (tmp$1 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = RescriptRelay_Internal.internal_nullableToOptionalExnHandler(onComplete);
  if (tmp$2 !== undefined) {
    tmp.onComplete = Caml_option.valFromOption(tmp$2);
  }
  return tmp;
}

function useRefetchable(fRef) {
  var match = Hooks.useRefetchableFragment(RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.node, fRef);
  var refetchFn = match[1];
  var data = RescriptRelay_Internal.internal_useConvertedValue(RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Internal.convertFragment, match[0]);
  return [
          data,
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return Curry._2(refetchFn, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqBasketBuyer_RfqRequestItemsMeat_Fragment_Query_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [refetchFn])
        ];
}

function use$3(fRef) {
  var data = Hooks.useFragment(RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

function usePagination(fr) {
  var p = Hooks.usePaginationFragment(RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.node, fr);
  var data = RescriptRelay_Internal.internal_useConvertedValue(RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          isLoadingNext: p.isLoadingNext,
          isLoadingPrevious: p.isLoadingPrevious,
          refetch: React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqBasketBuyer_RfqRequestItemsMeat_Fragment_Query_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

function useBlockingPagination(fRef) {
  var p = Hooks.useBlockingPaginationFragment(RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.node, fRef);
  var data = RescriptRelay_Internal.internal_useConvertedValue(RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          refetch: React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqBasketBuyer_RfqRequestItemsMeat_Fragment_Query_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

var makeRefetchVariables = RfqBasketBuyer_RfqRequestItemsMeat_Fragment_Query_graphql.Types.makeRefetchVariables;

var RequestItemsMeat_meatMadeIn_decode = RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Utils.meatMadeIn_decode;

var RequestItemsMeat_meatMadeIn_fromString = RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Utils.meatMadeIn_fromString;

var RequestItemsMeat_rfqMeatPackageMethod_decode = RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Utils.rfqMeatPackageMethod_decode;

var RequestItemsMeat_rfqMeatPackageMethod_fromString = RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Utils.rfqMeatPackageMethod_fromString;

var RequestItemsMeat_rfqMeatStorageMethod_decode = RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Utils.rfqMeatStorageMethod_decode;

var RequestItemsMeat_rfqMeatStorageMethod_fromString = RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Utils.rfqMeatStorageMethod_fromString;

var RequestItemsMeat_rfqRequestItemStatus_decode = RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Utils.rfqRequestItemStatus_decode;

var RequestItemsMeat_rfqRequestItemStatus_fromString = RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Utils.rfqRequestItemStatus_fromString;

var RequestItemsMeat_getConnectionNodes = RfqBasketBuyer_RfqRequestItemsMeat_Fragment_graphql.Utils.getConnectionNodes;

var RequestItemsMeat = {
  meatMadeIn_decode: RequestItemsMeat_meatMadeIn_decode,
  meatMadeIn_fromString: RequestItemsMeat_meatMadeIn_fromString,
  rfqMeatPackageMethod_decode: RequestItemsMeat_rfqMeatPackageMethod_decode,
  rfqMeatPackageMethod_fromString: RequestItemsMeat_rfqMeatPackageMethod_fromString,
  rfqMeatStorageMethod_decode: RequestItemsMeat_rfqMeatStorageMethod_decode,
  rfqMeatStorageMethod_fromString: RequestItemsMeat_rfqMeatStorageMethod_fromString,
  rfqRequestItemStatus_decode: RequestItemsMeat_rfqRequestItemStatus_decode,
  rfqRequestItemStatus_fromString: RequestItemsMeat_rfqRequestItemStatus_fromString,
  getConnectionNodes: RequestItemsMeat_getConnectionNodes,
  Types: undefined,
  internal_makeRefetchableFnOpts: internal_makeRefetchableFnOpts,
  useRefetchable: useRefetchable,
  use: use$3,
  useOpt: useOpt,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination,
  makeRefetchVariables: makeRefetchVariables
};

var Fragment = {
  RequestItemsMeat: RequestItemsMeat
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.node,
              variables: RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$4(param) {
  var match = Hooks.useMutation(RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var CreateRequestItemsMeat_rfqRequestItemStatus_decode = RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.Utils.rfqRequestItemStatus_decode;

var CreateRequestItemsMeat_rfqRequestItemStatus_fromString = RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.Utils.rfqRequestItemStatus_fromString;

var CreateRequestItemsMeat_makeVariables = RfqBasketBuyer_CreateRequestItemsMeat_Mutation_graphql.Utils.makeVariables;

var CreateRequestItemsMeat = {
  rfqRequestItemStatus_decode: CreateRequestItemsMeat_rfqRequestItemStatus_decode,
  rfqRequestItemStatus_fromString: CreateRequestItemsMeat_rfqRequestItemStatus_fromString,
  makeVariables: CreateRequestItemsMeat_makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$4
};

function commitMutation$1(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.node,
              variables: RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$5(param) {
  var match = Hooks.useMutation(RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var DeleteRequestItemsMeat_errorCode_decode = RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.Utils.errorCode_decode;

var DeleteRequestItemsMeat_errorCode_fromString = RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.Utils.errorCode_fromString;

var DeleteRequestItemsMeat_makeVariables = RfqBasketBuyer_DeleteRequestItemsMeat_Mutation_graphql.Utils.makeVariables;

var DeleteRequestItemsMeat = {
  errorCode_decode: DeleteRequestItemsMeat_errorCode_decode,
  errorCode_fromString: DeleteRequestItemsMeat_errorCode_fromString,
  makeVariables: DeleteRequestItemsMeat_makeVariables,
  Types: undefined,
  commitMutation: commitMutation$1,
  use: use$5
};

var Mutation = {
  CreateRequestItemsMeat: CreateRequestItemsMeat,
  DeleteRequestItemsMeat: DeleteRequestItemsMeat
};

function RfqBasket_Buyer$BasketListItems(Props) {
  var id = Props.id;
  var isDomestic = Props.isDomestic;
  var handleClickListitem = Props.handleClickListitem;
  var selectedPartIds = Props.selectedPartIds;
  var query = use$2({
        isDomestic: isDomestic,
        meatSpeciesIds: [id]
      }, undefined, undefined, undefined, undefined);
  return React.createElement("ul", {
              "aria-multiselectable": true,
              className: "my-4"
            }, Belt_Array.map(query.meatParts.edges, (function (param) {
                    var node = param.node;
                    var id = node.id;
                    var isSelected = selectedPartIds.includes(id);
                    return React.createElement("li", {
                                key: id,
                                "aria-selected": isSelected,
                                className: "flex items-center min-h-[48px] mx-5 cursor-pointer tab-highlight-color",
                                onClick: (function (param) {
                                    return Curry._1(handleClickListitem, id);
                                  })
                              }, React.createElement("div", {
                                    className: "flex flex-col justify-between truncate"
                                  }, React.createElement("span", {
                                        className: "block text-base truncate text-text-L1"
                                      }, "" + node.name)), React.createElement("div", {
                                    className: "ml-auto pl-2"
                                  }, isSelected ? React.createElement(DS_Icon.Common.CheckedLarge1.make, {
                                          height: "24",
                                          width: "24",
                                          fill: "#12B564"
                                        }) : React.createElement(DS_Icon.Common.UncheckedLarge1.make, {
                                          height: "24",
                                          width: "24",
                                          fill: "#12B564"
                                        })));
                  })));
}

var BasketListItems = {
  make: RfqBasket_Buyer$BasketListItems
};

function RfqBasket_Buyer$Basket(Props) {
  var requestId = Props.requestId;
  var from = Props.from;
  var router = Router.useRouter();
  var match = CustomHooks.Scroll.useScrollObserver({
        TAG: /* Px */1,
        _0: 50.0
      }, undefined);
  var isScrolled = match[3] >= 112.0;
  React.useEffect((function () {
          DataGtm.push({
                event: "Expose_view_RFQ_Livestock_SelectingPart"
              });
          
        }), []);
  var query = use$1({
        orderBy: "PRIORITY"
      }, undefined, undefined, undefined, undefined);
  var match$1 = use({
        requestIds: [requestId]
      }, undefined, undefined, undefined, undefined);
  var match$2 = use$4(undefined);
  var createRequestItemMeat = match$2[0];
  var match$3 = use$5(undefined);
  var deleteRequestItemMeat = match$3[0];
  var match$4 = usePagination(match$1.fragmentRefs);
  var data = match$4.data;
  var selectedPartIds = Belt_Array.map(Belt_Array.keepMap(Belt_Array.map(data.rfqRequestItemsMeat.edges, (function (x) {
                  return x.node.part;
                })), Garter_Fn.identity), (function (x) {
          return x.id;
        }));
  var selectedMeatsCountText = data.rfqRequestItemsMeat.edges.length;
  var match$5 = React.useState(function () {
        return [
                Belt_Option.mapWithDefault(Garter_Array.first(query.meatSpecies.edges), "bWVhdC1zcGVjaWVzOkJFRUY=", (function (x) {
                        return x.node.id;
                      })),
                false
              ];
      });
  var setSelectedTab = match$5[1];
  var match$6 = match$5[0];
  var selectedDomestic = match$6[1];
  var selectedId = match$6[0];
  var handleClickListitem = function (meatPartId) {
    var selectedItemMeat = data.rfqRequestItemsMeat.edges.find(function (x) {
          var part$p = x.node.part;
          if (part$p !== undefined) {
            return part$p.id === meatPartId;
          } else {
            return false;
          }
        });
    if (selectedItemMeat !== undefined) {
      Curry.app(deleteRequestItemMeat, [
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            {
              id: selectedItemMeat.node.id,
              connections: [data.rfqRequestItemsMeat.__id]
            },
            undefined,
            undefined
          ]);
    } else {
      Curry.app(createRequestItemMeat, [
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            {
              rfqRequestId: requestId,
              meatPartId: meatPartId,
              meatSpeciesId: selectedId,
              status: "DRAFT",
              connections: [data.rfqRequestItemsMeat.__id]
            },
            undefined,
            undefined
          ]);
    }
    
  };
  var getLabelCount = function (speciesId, isDomestic) {
    var count = Belt_Array.keep(Belt_Array.keep(Belt_Array.map(data.rfqRequestItemsMeat.edges, (function (x) {
                    return x.node;
                  })), (function (x) {
                return Belt_Option.mapWithDefault(x.species, false, (function (x) {
                              return x.id === speciesId;
                            }));
              })), (function (x) {
            return Belt_Option.mapWithDefault(x.part, false, (function (x) {
                          return x.isDomestic === isDomestic;
                        }));
          })).length;
    if (count > 0) {
      return String(count);
    }
    
  };
  var paddingClassName = isScrolled ? "pt-[167px]" : "pt-14";
  return React.createElement("div", {
              className: Cx.cx([
                    paddingClassName,
                    "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl"
                  ])
            }, React.createElement(DS_TopNavigation.Detail.Root.make, {
                  children: React.createElement(DS_TopNavigation.Detail.Left.make, {
                        children: React.createElement("a", {
                              className: "cursor-pointer",
                              onClick: (function (param) {
                                  if (from === "list") {
                                    router.push("/buyer/rfq");
                                  } else {
                                    window.history.back();
                                  }
                                  
                                })
                            }, React.createElement(DS_Icon.Common.ArrowLeftXLarge1.make, {
                                  height: "32",
                                  width: "32",
                                  className: "relative"
                                }))
                      })
                }), isScrolled ? null : React.createElement(DS_Title.Normal1.Root.make, {
                    children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                          title1: "견적요청할 부위를",
                          title2: "선택해주세요"
                        }),
                    className: "pt-3"
                  }), React.createElement("section", {
                  className: isScrolled ? "sticky top-14 left-0" : "mt-9"
                }, React.createElement(DS_Tab.LeftTab.Root.make, {
                      children: Belt_Array.map(query.meatSpecies.edges, (function (param) {
                              var node = param.node;
                              var name = node.name;
                              var id = node.id;
                              return React.createElement(React.Fragment, {
                                          children: null,
                                          key: id
                                        }, React.createElement(DS_Tab.LeftTab.Item.make, {
                                              children: React.createElement(DS_Button.Tab.LeftTab1.make, {
                                                    text: "" + name + "/수입",
                                                    selected: selectedId === id && selectedDomestic === false,
                                                    labelNumber: getLabelCount(id, false),
                                                    onClick: (function (param) {
                                                        return setSelectedTab(function (param) {
                                                                    return [
                                                                            id,
                                                                            false
                                                                          ];
                                                                  });
                                                      })
                                                  })
                                            }), React.createElement(DS_Tab.LeftTab.Item.make, {
                                              children: React.createElement(DS_Button.Tab.LeftTab1.make, {
                                                    text: "" + name + "/국내",
                                                    selected: selectedId === id && selectedDomestic === true,
                                                    labelNumber: getLabelCount(id, true),
                                                    onClick: (function (param) {
                                                        return setSelectedTab(function (param) {
                                                                    return [
                                                                            id,
                                                                            true
                                                                          ];
                                                                  });
                                                      })
                                                  })
                                            }));
                            }))
                    })), React.createElement(React.Suspense, {
                  children: React.createElement(RfqBasket_Buyer$BasketListItems, {
                        id: selectedId,
                        isDomestic: selectedDomestic,
                        handleClickListitem: handleClickListitem,
                        selectedPartIds: selectedPartIds
                      })
                }), React.createElement("div", {
                  className: "h-[104px]"
                }), React.createElement(DS_ButtonContainer.Floating1.make, {
                  label: selectedMeatsCountText > 0 ? "" + selectedMeatsCountText + "개 선택하기" : "선택하기",
                  disabled: selectedMeatsCountText <= 0,
                  onClick: (function (param) {
                      router.push("/buyer/rfq/request/draft/list?requestId=" + requestId);
                      
                    }),
                  dataGtm: "Click_RFQ_Livestock_SelectingPart"
                }));
}

var Basket = {
  make: RfqBasket_Buyer$Basket
};

function RfqBasket_Buyer(Props) {
  var requestId = Props.requestId;
  var from = Props.from;
  var router = Router.useRouter();
  if (requestId !== undefined) {
    return React.createElement(Authorization.Buyer.make, {
                children: React.createElement(React.Suspense, {
                      children: React.createElement(RfqCommon.CheckBuyerRequestStatus.make, {
                            children: React.createElement(RfqBasket_Buyer$Basket, {
                                  requestId: requestId,
                                  from: from
                                }),
                            requestId: requestId
                          })
                    }),
                title: "바이어 견적 요청",
                fallback: null
              });
  } else {
    React.useEffect((function () {
            router.push("/buyer/rfq");
            
          }), []);
    return null;
  }
}

var make = RfqBasket_Buyer;

export {
  Query ,
  Fragment ,
  Mutation ,
  BasketListItems ,
  Basket ,
  make ,
  
}
/* react Not a pure module */
