// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as DS_Icon from "../../../components/svgs/DS_Icon.mjs";
import * as DataGtm from "../../../utils/DataGtm.mjs";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as DS_Toast from "../../../components/common/container/DS_Toast.mjs";
import * as RfqCommon from "./RfqCommon.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Authorization from "../../../utils/Authorization.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as DS_ProgressBar from "../../../components/common/element/DS_ProgressBar.mjs";
import * as DS_TopNavigation from "../../../components/common/container/DS_TopNavigation.mjs";
import * as Hooks from "react-relay/hooks";
import * as DS_ButtonContainer from "../../../components/common/container/DS_ButtonContainer.mjs";
import * as RfqApplyDetail_Buyer from "../../../components/RfqApplyDetail_Buyer.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as RfqApplyBuyer_Query_graphql from "../../../__generated__/RfqApplyBuyer_Query_graphql.mjs";
import * as RfqApplyBuyer_Update_Mutation_graphql from "../../../__generated__/RfqApplyBuyer_Update_Mutation_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(RfqApplyBuyer_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqApplyBuyer_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(RfqApplyBuyer_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(RfqApplyBuyer_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, RfqApplyBuyer_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, RfqApplyBuyer_Query_graphql.node, RfqApplyBuyer_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: RfqApplyBuyer_Query_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, RfqApplyBuyer_Query_graphql.node, RfqApplyBuyer_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(RfqApplyBuyer_Query_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(RfqApplyBuyer_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqApplyBuyer_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(RfqApplyBuyer_Query_graphql.node, RfqApplyBuyer_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_meatMadeIn_decode = RfqApplyBuyer_Query_graphql.Utils.meatMadeIn_decode;

var Query_meatMadeIn_fromString = RfqApplyBuyer_Query_graphql.Utils.meatMadeIn_fromString;

var Query_rfqMeatPackageMethod_decode = RfqApplyBuyer_Query_graphql.Utils.rfqMeatPackageMethod_decode;

var Query_rfqMeatPackageMethod_fromString = RfqApplyBuyer_Query_graphql.Utils.rfqMeatPackageMethod_fromString;

var Query_rfqMeatStorageMethod_decode = RfqApplyBuyer_Query_graphql.Utils.rfqMeatStorageMethod_decode;

var Query_rfqMeatStorageMethod_fromString = RfqApplyBuyer_Query_graphql.Utils.rfqMeatStorageMethod_fromString;

var Query_makeVariables = RfqApplyBuyer_Query_graphql.Utils.makeVariables;

var Query = {
  meatMadeIn_decode: Query_meatMadeIn_decode,
  meatMadeIn_fromString: Query_meatMadeIn_fromString,
  rfqMeatPackageMethod_decode: Query_rfqMeatPackageMethod_decode,
  rfqMeatPackageMethod_fromString: Query_rfqMeatPackageMethod_fromString,
  rfqMeatStorageMethod_decode: Query_rfqMeatStorageMethod_decode,
  rfqMeatStorageMethod_fromString: Query_rfqMeatStorageMethod_fromString,
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RfqApplyBuyer_Update_Mutation_graphql.node,
              variables: RfqApplyBuyer_Update_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RfqApplyBuyer_Update_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RfqApplyBuyer_Update_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, RfqApplyBuyer_Update_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$1(param) {
  var match = Hooks.useMutation(RfqApplyBuyer_Update_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, RfqApplyBuyer_Update_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RfqApplyBuyer_Update_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, RfqApplyBuyer_Update_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RfqApplyBuyer_Update_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Mutation_errorCode_decode = RfqApplyBuyer_Update_Mutation_graphql.Utils.errorCode_decode;

var Mutation_errorCode_fromString = RfqApplyBuyer_Update_Mutation_graphql.Utils.errorCode_fromString;

var Mutation_meatMadeIn_decode = RfqApplyBuyer_Update_Mutation_graphql.Utils.meatMadeIn_decode;

var Mutation_meatMadeIn_fromString = RfqApplyBuyer_Update_Mutation_graphql.Utils.meatMadeIn_fromString;

var Mutation_rfqMeatPackageMethod_decode = RfqApplyBuyer_Update_Mutation_graphql.Utils.rfqMeatPackageMethod_decode;

var Mutation_rfqMeatPackageMethod_fromString = RfqApplyBuyer_Update_Mutation_graphql.Utils.rfqMeatPackageMethod_fromString;

var Mutation_rfqMeatStorageMethod_decode = RfqApplyBuyer_Update_Mutation_graphql.Utils.rfqMeatStorageMethod_decode;

var Mutation_rfqMeatStorageMethod_fromString = RfqApplyBuyer_Update_Mutation_graphql.Utils.rfqMeatStorageMethod_fromString;

var Mutation_rfqRequestItemStatus_decode = RfqApplyBuyer_Update_Mutation_graphql.Utils.rfqRequestItemStatus_decode;

var Mutation_rfqRequestItemStatus_fromString = RfqApplyBuyer_Update_Mutation_graphql.Utils.rfqRequestItemStatus_fromString;

var Mutation_make_rfqRequestItemMeatUpdateInput = RfqApplyBuyer_Update_Mutation_graphql.Utils.make_rfqRequestItemMeatUpdateInput;

var Mutation_makeVariables = RfqApplyBuyer_Update_Mutation_graphql.Utils.makeVariables;

var Mutation = {
  errorCode_decode: Mutation_errorCode_decode,
  errorCode_fromString: Mutation_errorCode_fromString,
  meatMadeIn_decode: Mutation_meatMadeIn_decode,
  meatMadeIn_fromString: Mutation_meatMadeIn_fromString,
  rfqMeatPackageMethod_decode: Mutation_rfqMeatPackageMethod_decode,
  rfqMeatPackageMethod_fromString: Mutation_rfqMeatPackageMethod_fromString,
  rfqMeatStorageMethod_decode: Mutation_rfqMeatStorageMethod_decode,
  rfqMeatStorageMethod_fromString: Mutation_rfqMeatStorageMethod_fromString,
  rfqRequestItemStatus_decode: Mutation_rfqRequestItemStatus_decode,
  rfqRequestItemStatus_fromString: Mutation_rfqRequestItemStatus_fromString,
  make_rfqRequestItemMeatUpdateInput: Mutation_make_rfqRequestItemMeatUpdateInput,
  makeVariables: Mutation_makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$1
};

function convertToOptionStep(s) {
  switch (s) {
    case "brand" :
        return /* Brand */6;
    case "etc" :
        return /* Etc */7;
    case "grade" :
        return /* Grade */0;
    case "orderAmount" :
        return /* OrderAmount */1;
    case "packageMethod" :
        return /* PackageMethod */4;
    case "storageMethod" :
        return /* StorageMethod */3;
    case "supplyPrice" :
        return /* SupplyPrice */5;
    case "usage" :
        return /* Usage */2;
    default:
      return ;
  }
}

function toStringStorageMethod(v) {
  if (v === "CHILLED") {
    return "CHILLED";
  } else if (v === "FROZEN") {
    return "FROZEN";
  } else if (v === "ANY") {
    return "ANY";
  } else if (v === "FREEZE_DRIED") {
    return "FREEZE_DRIED";
  } else if (v === "OTHER") {
    return "OTHER";
  } else {
    return "";
  }
}

function toStringPackageMethod(v) {
  if (v === "SPLIT") {
    return "SPLIT";
  } else if (v === "ANY") {
    return "ANY";
  } else if (v === "CUT") {
    return "CUT";
  } else if (v === "RAW") {
    return "RAW";
  } else if (v === "OTHER") {
    return "OTHER";
  } else {
    return "";
  }
}

function getItemInfo(node) {
  var itemInfo = node !== undefined ? ({
        grade: Belt_Option.mapWithDefault(node.grade, undefined, (function (grade$p) {
                return grade$p.id;
              })),
        weightKg: Belt_Option.mapWithDefault(node.weightKg, undefined, (function (weightKg$p) {
                return String(weightKg$p);
              })),
        usages: Garter_Array.isEmpty(node.usages.edges) ? [] : Belt_Array.map(node.usages.edges, (function (edge) {
                  return edge.node.id;
                })),
        storageMethod: Belt_Option.mapWithDefault(node.storageMethod, undefined, (function (storageMethod$p) {
                return toStringStorageMethod(storageMethod$p);
              })),
        packageMethod: Belt_Option.mapWithDefault(node.packageMethod, undefined, (function (packageMethod$p) {
                return toStringPackageMethod(packageMethod$p);
              })),
        prevTradePricePerKg: Belt_Option.mapWithDefault(node.prevTradePricePerKg, undefined, (function (prevTradePricePerKg$p) {
                return String(prevTradePricePerKg$p);
              })),
        prevTradeSellerName: node.prevTradeSellerName === "" ? undefined : node.prevTradeSellerName,
        preferredBrand: node.preferredBrand === "" ? undefined : node.preferredBrand,
        otherRequirements: node.otherRequirements === "" ? undefined : node.otherRequirements
      }) : ({
        grade: undefined,
        weightKg: undefined,
        usages: [],
        storageMethod: undefined,
        packageMethod: undefined,
        prevTradePricePerKg: undefined,
        prevTradeSellerName: undefined,
        preferredBrand: undefined,
        otherRequirements: undefined
      });
  var getEmptyGradeId = function (speciesCode, isDomestic) {
    return Belt_Option.mapWithDefault(Belt_Option.mapWithDefault(Belt_Option.map(Belt_Option.flatMap(node, (function (x) {
                              return x.species;
                            })), (function (x) {
                          return x.meatGrades.edges;
                        })), undefined, (function (x) {
                      return Garter_Array.first(Belt_Array.keep(Belt_Array.keep(Belt_Array.map(x, (function (x) {
                                                return x.node;
                                              })), (function (x) {
                                            return speciesCode === x.meatSpecies.code;
                                          })), (function (x) {
                                        return x.isDomestic === isDomestic;
                                      })));
                    })), undefined, (function (x) {
                  return x.id;
                }));
  };
  var match = Belt_Option.mapWithDefault(node, [
        false,
        undefined
      ], (function (node$p) {
          var match = Belt_Option.map(node$p.species, (function (x) {
                  return x.code;
                }));
          var match$1 = Belt_Option.map(node$p.part, (function (x) {
                  return x.isDomestic;
                }));
          if (match === undefined) {
            return [
                    false,
                    undefined
                  ];
          }
          if (match$1 === undefined) {
            return [
                    false,
                    undefined
                  ];
          }
          switch (match) {
            case "CHICKEN" :
                return [
                        true,
                        getEmptyGradeId(match, match$1)
                      ];
            case "PORK" :
                if (match$1) {
                  return [
                          false,
                          undefined
                        ];
                } else {
                  return [
                          true,
                          getEmptyGradeId(match, match$1)
                        ];
                }
            default:
              return [
                      false,
                      undefined
                    ];
          }
        }));
  return [
          itemInfo,
          match[0],
          match[1]
        ];
}

function RfqApply_Buyer$Apply(Props) {
  var itemId = Props.itemId;
  var requestId = Props.requestId;
  var step = Props.step;
  var isModifyDetail = Belt_Option.isSome(Belt_Option.flatMap(step, convertToOptionStep));
  var router = Router.useRouter();
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var match$1 = use({
        itemId: itemId
      }, undefined, undefined, undefined, undefined);
  var node = match$1.node;
  var match$2 = use$1(undefined);
  var mutateUpdate = match$2[0];
  var match$3 = getItemInfo(node);
  var emtyGradeId = match$3[2];
  var isSkipGrade = match$3[1];
  var itemInfo = match$3[0];
  var match$4 = React.useState(function () {
        return Belt_Option.getWithDefault(Belt_Option.flatMap(step, convertToOptionStep), /* PackageMethod */4);
      });
  var setStep = match$4[1];
  var step$1 = match$4[0];
  var match$5 = React.useState(function () {
        if (isModifyDetail) {
          return itemInfo.grade;
        } else if (isSkipGrade) {
          return emtyGradeId;
        } else {
          return ;
        }
      });
  var setGrade = match$5[1];
  var grade = match$5[0];
  var match$6 = React.useState(function () {
        if (isModifyDetail) {
          return itemInfo.weightKg;
        }
        
      });
  var setWeightKg = match$6[1];
  var weightKg = match$6[0];
  var match$7 = React.useState(function () {
        if (isModifyDetail) {
          return itemInfo.usages;
        } else {
          return [];
        }
      });
  var setUsage = match$7[1];
  var usage = match$7[0];
  var match$8 = React.useState(function () {
        if (isModifyDetail) {
          return itemInfo.storageMethod;
        }
        
      });
  var setStorageMethod = match$8[1];
  var storageMethod = match$8[0];
  var match$9 = React.useState(function () {
        if (isModifyDetail) {
          return itemInfo.packageMethod;
        }
        
      });
  var setPackageMethod = match$9[1];
  var packageMethod = match$9[0];
  var match$10 = React.useState(function () {
        if (isModifyDetail) {
          return itemInfo.prevTradePricePerKg;
        }
        
      });
  var setPrevTradePricePerKg = match$10[1];
  var prevTradePricePerKg = match$10[0];
  var match$11 = React.useState(function () {
        if (isModifyDetail) {
          return itemInfo.prevTradeSellerName;
        }
        
      });
  var setPrevTradeSellerName = match$11[1];
  var prevTradeSellerName = match$11[0];
  var match$12 = React.useState(function () {
        if (isModifyDetail) {
          return itemInfo.preferredBrand;
        }
        
      });
  var setPreferredBrand = match$12[1];
  var preferredBrand = match$12[0];
  var match$13 = React.useState(function () {
        if (isModifyDetail) {
          return itemInfo.otherRequirements;
        }
        
      });
  var setEtc = match$13[1];
  var etc = match$13[0];
  React.useEffect((function () {
          var tmp;
          switch (step$1) {
            case /* Grade */0 :
                tmp = "Expose_view_RFQ_Livestock_MeatGrade";
                break;
            case /* OrderAmount */1 :
                tmp = "Expose_view_RFQ_Livestock_WeightKg";
                break;
            case /* Usage */2 :
                tmp = "Expose_view_RFQ_Livestock_MeatUsage";
                break;
            case /* StorageMethod */3 :
                tmp = "Expose_view_RFQ_Livestock_StorageStatus";
                break;
            case /* PackageMethod */4 :
                tmp = "Expose_view_RFQ_Livestock_PackageMethod";
                break;
            case /* SupplyPrice */5 :
                tmp = "Expose_view_RFQ_Livestock_Prevtradepriceperkg";
                break;
            case /* Brand */6 :
                tmp = "Expose_view_RFQ_Livestock_PreferredBrand";
                break;
            case /* Etc */7 :
                tmp = "Expose_view_RFQ_Livestock_Otherrequest";
                break;
            
          }
          DataGtm.push({
                event: tmp
              });
          
        }), [step$1]);
  var getTitle = Belt_Option.mapWithDefault(node, "", (function (node$p) {
          return Belt_Option.mapWithDefault(node$p.part, "", (function (part$p) {
                        return part$p.name + " / " + (
                                part$p.isDomestic ? "국내" : "수입"
                              );
                      }));
        }));
  var handleOnChange = function (setFn, value) {
    return setFn(function (param) {
                if (value.trim() === "") {
                  return ;
                } else {
                  return value;
                }
              });
  };
  var checkDisabled = function (step) {
    var disableFlag;
    switch (step) {
      case /* Grade */0 :
          disableFlag = Belt_Option.isNone(grade);
          break;
      case /* OrderAmount */1 :
          disableFlag = Belt_Option.isNone(weightKg) || Belt_Option.mapWithDefault(Belt_Option.flatMap(weightKg, Belt_Int.fromString), false, (function (x) {
                  return x < 100;
                }));
          break;
      case /* Usage */2 :
          disableFlag = Garter_Array.isEmpty(usage);
          break;
      case /* StorageMethod */3 :
          disableFlag = Belt_Option.isNone(storageMethod);
          break;
      case /* PackageMethod */4 :
          disableFlag = Belt_Option.isNone(packageMethod);
          break;
      case /* SupplyPrice */5 :
          disableFlag = Belt_Option.isNone(prevTradePricePerKg) || Belt_Option.mapWithDefault(Belt_Option.flatMap(prevTradePricePerKg, Belt_Int.fromString), false, (function (x) {
                  return x < 100;
                }));
          break;
      case /* Brand */6 :
          disableFlag = Belt_Option.isNone(preferredBrand);
          break;
      case /* Etc */7 :
          disableFlag = Belt_Option.isNone(etc);
          break;
      
    }
    if (!(!disableFlag && isModifyDetail)) {
      return disableFlag;
    }
    switch (step) {
      case /* Grade */0 :
          return Belt_Option.mapWithDefault(itemInfo.grade, false, (function (x) {
                        return x === Belt_Option.getWithDefault(grade, "");
                      }));
      case /* OrderAmount */1 :
          return Belt_Option.mapWithDefault(itemInfo.weightKg, false, (function (x) {
                        return x === Belt_Option.getWithDefault(weightKg, "");
                      }));
      case /* StorageMethod */3 :
          return Belt_Option.mapWithDefault(itemInfo.storageMethod, false, (function (x) {
                        return x === Belt_Option.getWithDefault(storageMethod, "");
                      }));
      case /* PackageMethod */4 :
          return Belt_Option.mapWithDefault(itemInfo.packageMethod, false, (function (x) {
                        return x === Belt_Option.getWithDefault(packageMethod, "");
                      }));
      case /* Usage */2 :
      case /* SupplyPrice */5 :
      case /* Brand */6 :
      case /* Etc */7 :
          return disableFlag;
      
    }
  };
  var updateItem = function (emptyUsage, emptyBrand, emptyEtc, param) {
    var input_meatUsageIds = emptyUsage !== undefined ? emptyUsage : (
        Garter_Array.isEmpty(usage) ? [] : usage
      );
    var input_otherRequirements = emptyEtc !== undefined ? Caml_option.valFromOption(emptyEtc) : etc;
    var input_preferredBrand = emptyBrand !== undefined ? Caml_option.valFromOption(emptyBrand) : preferredBrand;
    var input = {
      meatGradeId: grade,
      meatPartId: undefined,
      meatSpeciesId: undefined,
      meatUsageIds: input_meatUsageIds,
      otherRequirements: input_otherRequirements,
      packageMethod: packageMethod,
      preferredBrand: input_preferredBrand,
      prevTradePricePerKg: prevTradePricePerKg,
      prevTradeSellerName: prevTradeSellerName,
      status: "READY_TO_REQUEST",
      storageMethod: storageMethod,
      weightKg: weightKg
    };
    Curry.app(mutateUpdate, [
          (function (param) {
              return addToast(DS_Toast.getToastComponent("저장중 문제가 발생하였습니다. 관리자에게 문의해주세요.", "error"), {
                          appearance: "error"
                        });
            }),
          (function (param, param$1) {
              var updateRfqRequestItemsMeat = param.updateRfqRequestItemsMeat;
              var variant = updateRfqRequestItemsMeat.NAME;
              if (variant === "RfqRequestItemMeatMutationPayload") {
                addToast(DS_Toast.getToastComponent(getTitle + " 작성이 완료되었어요!", "succ"), {
                      appearance: "succ"
                    });
              } else if (variant === "UnselectedUnionMember") {
                
              } else {
                console.error(updateRfqRequestItemsMeat.VAL.code);
                addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                      appearance: "error"
                    });
              }
              router.push("/buyer/rfq/request/draft/list?requestId=" + requestId);
              
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          {
            id: itemId,
            input: input
          },
          undefined,
          undefined
        ]);
    
  };
  var handleModifyMutation = function (step, param) {
    if (isModifyDetail) {
      return updateItem(undefined, undefined, undefined, undefined);
    } else {
      return setStep(function (param) {
                  switch (step) {
                    case /* Grade */0 :
                        return /* OrderAmount */1;
                    case /* OrderAmount */1 :
                        return /* Usage */2;
                    case /* Usage */2 :
                        return /* StorageMethod */3;
                    case /* StorageMethod */3 :
                        return /* SupplyPrice */5;
                    case /* PackageMethod */4 :
                        if (isSkipGrade) {
                          return /* OrderAmount */1;
                        } else {
                          return /* Grade */0;
                        }
                    case /* SupplyPrice */5 :
                        return /* Brand */6;
                    case /* Brand */6 :
                        return /* Etc */7;
                    case /* Etc */7 :
                        return /* Grade */0;
                    
                  }
                });
    }
  };
  var nextStep = step$1 !== 2 ? (
      step$1 >= 6 ? /* Etc */7 : undefined
    ) : /* StorageMethod */3;
  var tmp;
  switch (step$1) {
    case /* Grade */0 :
        tmp = 2;
        break;
    case /* OrderAmount */1 :
        tmp = 3;
        break;
    case /* Usage */2 :
        tmp = 4;
        break;
    case /* StorageMethod */3 :
        tmp = 5;
        break;
    case /* PackageMethod */4 :
        tmp = 1;
        break;
    case /* SupplyPrice */5 :
        tmp = 6;
        break;
    case /* Brand */6 :
        tmp = 7;
        break;
    case /* Etc */7 :
        tmp = 8;
        break;
    
  }
  var tmp$1;
  var exit = 0;
  switch (step$1) {
    case /* Grade */0 :
    case /* Usage */2 :
    case /* StorageMethod */3 :
    case /* PackageMethod */4 :
        exit = 1;
        break;
    case /* OrderAmount */1 :
    case /* SupplyPrice */5 :
    case /* Brand */6 :
        exit = 2;
        break;
    case /* Etc */7 :
        tmp$1 = React.createElement(DS_ButtonContainer.Full1.make, {
              label: isModifyDetail ? "저장" : "다음",
              disabled: checkDisabled(step$1),
              onClick: (function (param) {
                  return updateItem(undefined, undefined, undefined, undefined);
                }),
              dataGtm: "Click_RFQ_Livestock_OtherRequirements"
            });
        break;
    
  }
  switch (exit) {
    case 1 :
        var tmp$2;
        switch (step$1) {
          case /* Grade */0 :
              tmp$2 = "Click_RFQ_Livestock_MeatGrade";
              break;
          case /* Usage */2 :
              tmp$2 = "Click_RFQ_Livestock_MeatUsage";
              break;
          case /* StorageMethod */3 :
              tmp$2 = "Click_RFQ_Livestock_StorageStatus";
              break;
          case /* PackageMethod */4 :
              tmp$2 = "Click_RFQ_Livestock_PackageMethod";
              break;
          case /* OrderAmount */1 :
          case /* SupplyPrice */5 :
          case /* Brand */6 :
          case /* Etc */7 :
              tmp$2 = "";
              break;
          
        }
        tmp$1 = React.createElement(DS_ButtonContainer.Floating1.make, {
              label: isModifyDetail ? "저장" : "다음",
              disabled: checkDisabled(step$1),
              onClick: (function (param) {
                  return handleModifyMutation(step$1, param);
                }),
              dataGtm: tmp$2
            });
        break;
    case 2 :
        var tmp$3;
        switch (step$1) {
          case /* OrderAmount */1 :
              tmp$3 = "Click_RFQ_Livestock_WeightKg";
              break;
          case /* SupplyPrice */5 :
              tmp$3 = "Click_RFQ_Livestock_Prevtradepriceperkg";
              break;
          case /* Brand */6 :
              tmp$3 = "Click_RFQ_Livestock_PreferredBrand";
              break;
          case /* Grade */0 :
          case /* Usage */2 :
          case /* StorageMethod */3 :
          case /* PackageMethod */4 :
          case /* Etc */7 :
              tmp$3 = "";
              break;
          
        }
        tmp$1 = React.createElement(DS_ButtonContainer.Full1.make, {
              label: isModifyDetail ? "저장" : "다음",
              disabled: checkDisabled(step$1),
              onClick: (function (param) {
                  return handleModifyMutation(step$1, param);
                }),
              dataGtm: tmp$3
            });
        break;
    
  }
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl pt-11"
                }, React.createElement(DS_TopNavigation.Detail.Root.make, {
                      children: null
                    }, React.createElement(DS_TopNavigation.Detail.Left.make, {
                          children: React.createElement("a", {
                                className: "cursor-pointer",
                                onClick: (function (param) {
                                    if (isModifyDetail) {
                                      router.push("/buyer/rfq/request/draft/list?requestId=" + requestId);
                                      return ;
                                    }
                                    switch (step$1) {
                                      case /* Grade */0 :
                                          return setStep(function (param) {
                                                      return /* PackageMethod */4;
                                                    });
                                      case /* OrderAmount */1 :
                                          return setStep(function (param) {
                                                      if (isSkipGrade) {
                                                        return /* PackageMethod */4;
                                                      } else {
                                                        return /* Grade */0;
                                                      }
                                                    });
                                      case /* Usage */2 :
                                          return setStep(function (param) {
                                                      return /* OrderAmount */1;
                                                    });
                                      case /* StorageMethod */3 :
                                          return setStep(function (param) {
                                                      return /* Usage */2;
                                                    });
                                      case /* PackageMethod */4 :
                                          router.push("/buyer/rfq/request/draft/list?requestId=" + requestId);
                                          return ;
                                      case /* SupplyPrice */5 :
                                          return setStep(function (param) {
                                                      return /* StorageMethod */3;
                                                    });
                                      case /* Brand */6 :
                                          return setStep(function (param) {
                                                      return /* SupplyPrice */5;
                                                    });
                                      case /* Etc */7 :
                                          return setStep(function (param) {
                                                      return /* Brand */6;
                                                    });
                                      
                                    }
                                  })
                              }, React.createElement(DS_Icon.Common.ArrowLeftXLarge1.make, {
                                    height: "32",
                                    width: "32",
                                    className: "relative"
                                  }))
                        }), React.createElement(DS_TopNavigation.Detail.Center.make, {
                          children: getTitle
                        }), Belt_Option.mapWithDefault(nextStep, null, (function (nextStep$p) {
                            return React.createElement("button", {
                                        className: "text-enabled-L1",
                                        onClick: (function (param) {
                                            switch (step$1) {
                                              case /* Usage */2 :
                                                  setUsage(function (param) {
                                                        return [];
                                                      });
                                                  break;
                                              case /* Grade */0 :
                                              case /* OrderAmount */1 :
                                              case /* StorageMethod */3 :
                                              case /* PackageMethod */4 :
                                              case /* SupplyPrice */5 :
                                                  break;
                                              case /* Brand */6 :
                                                  setPreferredBrand(function (param) {
                                                        
                                                      });
                                                  break;
                                              case /* Etc */7 :
                                                  setEtc(function (param) {
                                                        
                                                      });
                                                  break;
                                              
                                            }
                                            if (!isModifyDetail) {
                                              if (step$1 >= 7) {
                                                return updateItem(undefined, undefined, undefined, undefined);
                                              } else {
                                                return setStep(function (param) {
                                                            return nextStep$p;
                                                          });
                                              }
                                            }
                                            switch (step$1) {
                                              case /* Usage */2 :
                                                  return updateItem([], undefined, undefined, undefined);
                                              case /* Grade */0 :
                                              case /* OrderAmount */1 :
                                              case /* StorageMethod */3 :
                                              case /* PackageMethod */4 :
                                              case /* SupplyPrice */5 :
                                                  return ;
                                              case /* Brand */6 :
                                                  return updateItem(undefined, "", undefined, undefined);
                                              case /* Etc */7 :
                                                  return updateItem(undefined, undefined, "", undefined);
                                              
                                            }
                                          })
                                      }, "건너뛰기");
                          }))), React.createElement(DS_ProgressBar.StepGuide.make, {
                      step: tmp,
                      totalStep: 8
                    }), Belt_Option.mapWithDefault(node, null, (function (node$p) {
                        switch (step$1) {
                          case /* Grade */0 :
                              return React.createElement(RfqApplyDetail_Buyer.Grade.make, {
                                          grade: grade,
                                          handleOnChangeGrade: (function (param) {
                                              return handleOnChange(setGrade, param);
                                            }),
                                          node: node$p
                                        });
                          case /* OrderAmount */1 :
                              return React.createElement(RfqApplyDetail_Buyer.OrderAmount.make, {
                                          weightKg: weightKg,
                                          handleOnChangeWeightKg: (function (param) {
                                              return handleOnChange(setWeightKg, param);
                                            })
                                        });
                          case /* Usage */2 :
                              return React.createElement(RfqApplyDetail_Buyer.Purpose.make, {
                                          usage: usage,
                                          setUsage: setUsage,
                                          edges: Belt_Option.mapWithDefault(node$p.species, [], (function (x) {
                                                  return x.meatUsages.edges;
                                                }))
                                        });
                          case /* StorageMethod */3 :
                              return React.createElement(RfqApplyDetail_Buyer.StorageMethod.make, {
                                          storageMethod: storageMethod,
                                          handleOnChangeStorageMethod: (function (param) {
                                              return handleOnChange(setStorageMethod, param);
                                            })
                                        });
                          case /* PackageMethod */4 :
                              return React.createElement(RfqApplyDetail_Buyer.PackageMethod.make, {
                                          packageMethod: packageMethod,
                                          handleOnChangePackageMethod: (function (param) {
                                              return handleOnChange(setPackageMethod, param);
                                            })
                                        });
                          case /* SupplyPrice */5 :
                              return React.createElement(RfqApplyDetail_Buyer.SupplyPrice.make, {
                                          prevTradeSellerName: prevTradeSellerName,
                                          handleOnChangePrevTradeSellerName: (function (param) {
                                              return handleOnChange(setPrevTradeSellerName, param);
                                            }),
                                          prevTradePricePerKg: prevTradePricePerKg,
                                          handleOnChangePrevTradePricePerKg: (function (param) {
                                              return handleOnChange(setPrevTradePricePerKg, param);
                                            })
                                        });
                          case /* Brand */6 :
                              return React.createElement(RfqApplyDetail_Buyer.Brand.make, {
                                          preferredBrand: preferredBrand,
                                          handleOnChangePreferredBrand: (function (param) {
                                              return handleOnChange(setPreferredBrand, param);
                                            })
                                        });
                          case /* Etc */7 :
                              return React.createElement(RfqApplyDetail_Buyer.Etc.make, {
                                          etc: etc,
                                          handleOnChangeEtc: (function (param) {
                                              return handleOnChange(setEtc, param);
                                            })
                                        });
                          
                        }
                      }))), tmp$1);
}

var Apply = {
  getItemInfo: getItemInfo,
  make: RfqApply_Buyer$Apply
};

function RfqApply_Buyer(Props) {
  var itemId = Props.itemId;
  var requestId = Props.requestId;
  var step = Props.step;
  var router = Router.useRouter();
  if (itemId !== undefined && requestId !== undefined) {
    return React.createElement(Authorization.Buyer.make, {
                children: React.createElement(React.Suspense, {
                      children: React.createElement(RfqCommon.CheckBuyerRequestStatus.make, {
                            children: React.createElement(RfqApply_Buyer$Apply, {
                                  itemId: itemId,
                                  requestId: requestId,
                                  step: step
                                }),
                            requestId: requestId
                          })
                    }),
                title: "바이어 견적 요청",
                fallback: null
              });
  }
  React.useEffect((function () {
          router.push("/buyer/rfq");
          
        }), []);
  return null;
}

var make = RfqApply_Buyer;

export {
  Query ,
  Mutation ,
  convertToOptionStep ,
  toStringStorageMethod ,
  toStringPackageMethod ,
  Apply ,
  make ,
  
}
/* react Not a pure module */
