// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as DataGtm from "../../../../utils/DataGtm.mjs";
import * as DS_Toast from "../../../../components/common/container/DS_Toast.mjs";
import * as RfqCommon from "./RfqCommon.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Authorization from "../../../../utils/Authorization.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as RfqApply_Steps_Buyer from "./RfqApply_Steps_Buyer.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as RfqApplyBuyer_Query_graphql from "../../../../__generated__/RfqApplyBuyer_Query_graphql.mjs";
import * as RfqApply_Steps_Skeleton_Buyer from "./RfqApply_Steps_Skeleton_Buyer.mjs";
import * as RfqApplyBuyer_Update_Mutation_graphql from "../../../../__generated__/RfqApplyBuyer_Update_Mutation_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(RfqApplyBuyer_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqApplyBuyer_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(RfqApplyBuyer_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(RfqApplyBuyer_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, RfqApplyBuyer_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, RfqApplyBuyer_Query_graphql.node, RfqApplyBuyer_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: RfqApplyBuyer_Query_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, RfqApplyBuyer_Query_graphql.node, RfqApplyBuyer_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(RfqApplyBuyer_Query_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(RfqApplyBuyer_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqApplyBuyer_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(RfqApplyBuyer_Query_graphql.node, RfqApplyBuyer_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_countryCode_decode = RfqApplyBuyer_Query_graphql.Utils.countryCode_decode;

var Query_countryCode_fromString = RfqApplyBuyer_Query_graphql.Utils.countryCode_fromString;

var Query_rfqMeatPackageMethod_decode = RfqApplyBuyer_Query_graphql.Utils.rfqMeatPackageMethod_decode;

var Query_rfqMeatPackageMethod_fromString = RfqApplyBuyer_Query_graphql.Utils.rfqMeatPackageMethod_fromString;

var Query_rfqMeatStorageMethod_decode = RfqApplyBuyer_Query_graphql.Utils.rfqMeatStorageMethod_decode;

var Query_rfqMeatStorageMethod_fromString = RfqApplyBuyer_Query_graphql.Utils.rfqMeatStorageMethod_fromString;

var Query = {
  countryCode_decode: Query_countryCode_decode,
  countryCode_fromString: Query_countryCode_fromString,
  rfqMeatPackageMethod_decode: Query_rfqMeatPackageMethod_decode,
  rfqMeatPackageMethod_fromString: Query_rfqMeatPackageMethod_fromString,
  rfqMeatStorageMethod_decode: Query_rfqMeatStorageMethod_decode,
  rfqMeatStorageMethod_fromString: Query_rfqMeatStorageMethod_fromString,
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RfqApplyBuyer_Update_Mutation_graphql.node,
              variables: RfqApplyBuyer_Update_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RfqApplyBuyer_Update_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RfqApplyBuyer_Update_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    Curry._2(updater, store, RfqApplyBuyer_Update_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$1(param) {
  var match = ReactRelay.useMutation(RfqApplyBuyer_Update_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      Curry._2(param$1, RfqApplyBuyer_Update_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RfqApplyBuyer_Update_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      Curry._2(param$5, store, RfqApplyBuyer_Update_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RfqApplyBuyer_Update_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Mutation_countryCode_decode = RfqApplyBuyer_Update_Mutation_graphql.Utils.countryCode_decode;

var Mutation_countryCode_fromString = RfqApplyBuyer_Update_Mutation_graphql.Utils.countryCode_fromString;

var Mutation_errorCode_decode = RfqApplyBuyer_Update_Mutation_graphql.Utils.errorCode_decode;

var Mutation_errorCode_fromString = RfqApplyBuyer_Update_Mutation_graphql.Utils.errorCode_fromString;

var Mutation_rfqMeatPackageMethod_decode = RfqApplyBuyer_Update_Mutation_graphql.Utils.rfqMeatPackageMethod_decode;

var Mutation_rfqMeatPackageMethod_fromString = RfqApplyBuyer_Update_Mutation_graphql.Utils.rfqMeatPackageMethod_fromString;

var Mutation_rfqMeatStorageMethod_decode = RfqApplyBuyer_Update_Mutation_graphql.Utils.rfqMeatStorageMethod_decode;

var Mutation_rfqMeatStorageMethod_fromString = RfqApplyBuyer_Update_Mutation_graphql.Utils.rfqMeatStorageMethod_fromString;

var Mutation_rfqRequestItemStatus_decode = RfqApplyBuyer_Update_Mutation_graphql.Utils.rfqRequestItemStatus_decode;

var Mutation_rfqRequestItemStatus_fromString = RfqApplyBuyer_Update_Mutation_graphql.Utils.rfqRequestItemStatus_fromString;

var Mutation = {
  countryCode_decode: Mutation_countryCode_decode,
  countryCode_fromString: Mutation_countryCode_fromString,
  errorCode_decode: Mutation_errorCode_decode,
  errorCode_fromString: Mutation_errorCode_fromString,
  rfqMeatPackageMethod_decode: Mutation_rfqMeatPackageMethod_decode,
  rfqMeatPackageMethod_fromString: Mutation_rfqMeatPackageMethod_fromString,
  rfqMeatStorageMethod_decode: Mutation_rfqMeatStorageMethod_decode,
  rfqMeatStorageMethod_fromString: Mutation_rfqMeatStorageMethod_fromString,
  rfqRequestItemStatus_decode: Mutation_rfqRequestItemStatus_decode,
  rfqRequestItemStatus_fromString: Mutation_rfqRequestItemStatus_fromString,
  Operation: undefined,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$1
};

function toStringStorageMethod(v) {
  if (v === "CHILLED") {
    return "CHILLED";
  } else if (v === "FROZEN") {
    return "FROZEN";
  } else if (v === "ANY") {
    return "ANY";
  } else if (v === "FREEZE_DRIED") {
    return "FREEZE_DRIED";
  } else if (v === "OTHER") {
    return "OTHER";
  } else {
    return "";
  }
}

function toStringPackageMethod(v) {
  if (v === "SPLIT") {
    return "SPLIT";
  } else if (v === "ANY") {
    return "ANY";
  } else if (v === "CUT") {
    return "CUT";
  } else if (v === "RAW") {
    return "RAW";
  } else if (v === "OTHER") {
    return "OTHER";
  } else {
    return "";
  }
}

function RfqApply_Buyer$Layout(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: "bg-gray-100"
            }, React.createElement("div", {
                  className: "relative container bg-white max-w-3xl mx-auto min-h-screen"
                }, children));
}

var Layout = {
  make: RfqApply_Buyer$Layout
};

function RfqApply_Buyer$Header(Props) {
  var title = Props.title;
  var handleClickLeftButtonOpt = Props.handleClickLeftButton;
  var updateItem = Props.updateItem;
  var requestId = Props.requestId;
  var itemId = Props.itemId;
  var dispatch = Props.dispatch;
  var handleClickLeftButton = handleClickLeftButtonOpt !== undefined ? handleClickLeftButtonOpt : (function (prim) {
        window.history.back();
      });
  var match = RfqApply_Steps_Buyer.RfqApplyStep.use(undefined);
  var toNext = match.router.toNext;
  var isModify = match.isModify;
  var current = match.current;
  var isAvailableSkip = current !== 3 ? (
      current >= 7 && !isModify ? true : false
    ) : (
      isModify ? false : true
    );
  var trackData = function (param) {
    if (current !== 3) {
      if (current >= 7) {
        return DataGtm.push(DataGtm.mergeUserIdUnsafe({
                        event: "click_rfq_livestock_otherrequirements",
                        request_id: requestId,
                        request_item_id: itemId,
                        other_requirements: "",
                        otherrequirements_skip: true
                      }));
      } else {
        return ;
      }
    } else {
      return DataGtm.push(DataGtm.mergeUserIdUnsafe({
                      event: "click_rfq_livestock_meatusage",
                      request_id: requestId,
                      request_item_id: itemId,
                      meat_usage_ids: [],
                      meatusage_skip: true
                    }));
    }
  };
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "w-full fixed top-0 left-0 z-10"
                }, React.createElement("header", {
                      className: "relative w-full max-w-3xl mx-auto h-14 bg-white"
                    }, React.createElement("div", {
                          className: "flex justify-between px-5 py-4 left-1/2"
                        }, React.createElement("button", {
                              className: "min-w-[60px]",
                              onClick: (function (param) {
                                  Curry._1(handleClickLeftButton, undefined);
                                })
                            }, React.createElement("img", {
                                  className: "w-6 h-6 rotate-180 pointer-events-none",
                                  src: "/assets/arrow-right.svg"
                                })), React.createElement("div", {
                              className: "text-center truncate"
                            }, React.createElement("span", {
                                  className: "font-bold text-base"
                                }, Belt_Option.mapWithDefault(title, "", (function (x) {
                                        return x;
                                      })))), React.createElement("div", {
                              className: "min-w-[60px] flex justify-end"
                            }, isAvailableSkip ? React.createElement("button", {
                                    className: "text-enabled-L1 w-auto word-keep-all",
                                    onClick: (function (param) {
                                        trackData(undefined);
                                        if (current !== 3) {
                                          if (current >= 7 && isAvailableSkip) {
                                            Curry._1(dispatch, {
                                                  TAG: /* ETC */8,
                                                  _0: ""
                                                });
                                            return Curry._2(updateItem, undefined, undefined);
                                          } else {
                                            return ;
                                          }
                                        } else if (isAvailableSkip) {
                                          Curry._1(dispatch, {
                                                TAG: /* Usages */3,
                                                _0: []
                                              });
                                          return Curry._1(toNext, undefined);
                                        } else {
                                          return ;
                                        }
                                      })
                                  }, "건너뛰기") : null)))), React.createElement("div", {
                  className: "w-full h-14"
                }));
}

var Header = {
  make: RfqApply_Buyer$Header
};

function RfqApply_Buyer$ProgressBar(Props) {
  var totalCount = Props.totalCount;
  var currentCount = Props.currentCount;
  var percentage = currentCount / totalCount * 100;
  var style = {
    width: "" + String(percentage) + "%"
  };
  return React.createElement("div", {
              className: "max-w-3xl fixed h-1 w-full bg-surface z-[10]"
            }, React.createElement("div", {
                  className: "absolute left-0 top-0 bg-primary z-30 h-full transition-all",
                  style: style
                }));
}

var ProgressBar = {
  make: RfqApply_Buyer$ProgressBar
};

function getItemInfo(node) {
  var itemInfo = node !== undefined ? ({
        grade: Belt_Option.mapWithDefault(node.grade, undefined, (function (grade$p) {
                return grade$p.id;
              })),
        weightKg: Belt_Option.mapWithDefault(node.weightKg, undefined, (function (weightKg$p) {
                return String(weightKg$p);
              })),
        usages: Belt_Array.map(node.usages.edges, (function (edge) {
                return edge.node.id;
              })),
        storageMethod: Belt_Option.mapWithDefault(node.storageMethod, undefined, (function (storageMethod$p) {
                return toStringStorageMethod(storageMethod$p);
              })),
        packageMethod: Belt_Option.mapWithDefault(node.packageMethod, undefined, (function (packageMethod$p) {
                return toStringPackageMethod(packageMethod$p);
              })),
        prevTradePricePerKg: Belt_Option.mapWithDefault(node.prevTradePricePerKg, undefined, (function (prevTradePricePerKg$p) {
                return String(prevTradePricePerKg$p);
              })),
        prevTradeSellerName: node.prevTradeSellerName === "" ? undefined : node.prevTradeSellerName,
        meatBrandIds: Belt_Array.map(node.brands.edges, (function (edge) {
                return edge.node.id;
              })),
        otherRequirements: node.otherRequirements === "" ? undefined : node.otherRequirements
      }) : ({
        grade: undefined,
        weightKg: undefined,
        usages: [],
        storageMethod: undefined,
        packageMethod: undefined,
        prevTradePricePerKg: undefined,
        prevTradeSellerName: undefined,
        meatBrandIds: [],
        otherRequirements: undefined
      });
  var getEmptyGradeId = function (speciesCode, isDomestic) {
    return Belt_Option.map(Belt_Option.mapWithDefault(Belt_Option.map(Belt_Option.flatMap(node, (function (x) {
                              return x.species;
                            })), (function (x) {
                          return x.meatGrades.edges;
                        })), undefined, (function (x) {
                      return Garter_Array.first(Belt_Array.keep(Belt_Array.keep(Belt_Array.map(x, (function (x) {
                                                return x.node;
                                              })), (function (x) {
                                            return speciesCode === x.meatSpecies.code;
                                          })), (function (x) {
                                        return x.isDomestic === isDomestic;
                                      })));
                    })), (function (x) {
                  return x.id;
                }));
  };
  var match = Belt_Option.mapWithDefault(node, [
        false,
        undefined
      ], (function (node$p) {
          var match = Belt_Option.map(node$p.species, (function (x) {
                  return x.code;
                }));
          var match$1 = Belt_Option.map(node$p.part, (function (x) {
                  return x.isDomestic;
                }));
          if (match === undefined) {
            return [
                    false,
                    undefined
                  ];
          }
          if (match$1 === undefined) {
            return [
                    false,
                    undefined
                  ];
          }
          switch (match) {
            case "CHICKEN" :
                return [
                        true,
                        getEmptyGradeId(match, match$1)
                      ];
            case "PORK" :
                if (match$1) {
                  return [
                          false,
                          undefined
                        ];
                } else {
                  return [
                          true,
                          getEmptyGradeId(match, match$1)
                        ];
                }
            default:
              return [
                      false,
                      undefined
                    ];
          }
        }));
  return [
          itemInfo,
          match[0],
          match[1]
        ];
}

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* PackageMethod */0 :
        return {
                packageMethod: action._0,
                grade: state.grade,
                weightKg: state.weightKg,
                usages: state.usages,
                storageMethod: state.storageMethod,
                prevTradePricePerKg: state.prevTradePricePerKg,
                prevTradeSellerName: state.prevTradeSellerName,
                meatBrandIds: state.meatBrandIds,
                etc: state.etc
              };
    case /* Grade */1 :
        return {
                packageMethod: state.packageMethod,
                grade: action._0,
                weightKg: state.weightKg,
                usages: state.usages,
                storageMethod: state.storageMethod,
                prevTradePricePerKg: state.prevTradePricePerKg,
                prevTradeSellerName: state.prevTradeSellerName,
                meatBrandIds: state.meatBrandIds,
                etc: state.etc
              };
    case /* WeightKg */2 :
        return {
                packageMethod: state.packageMethod,
                grade: state.grade,
                weightKg: action._0,
                usages: state.usages,
                storageMethod: state.storageMethod,
                prevTradePricePerKg: state.prevTradePricePerKg,
                prevTradeSellerName: state.prevTradeSellerName,
                meatBrandIds: state.meatBrandIds,
                etc: state.etc
              };
    case /* Usages */3 :
        return {
                packageMethod: state.packageMethod,
                grade: state.grade,
                weightKg: state.weightKg,
                usages: action._0,
                storageMethod: state.storageMethod,
                prevTradePricePerKg: state.prevTradePricePerKg,
                prevTradeSellerName: state.prevTradeSellerName,
                meatBrandIds: state.meatBrandIds,
                etc: state.etc
              };
    case /* StorageMethod */4 :
        return {
                packageMethod: state.packageMethod,
                grade: state.grade,
                weightKg: state.weightKg,
                usages: state.usages,
                storageMethod: action._0,
                prevTradePricePerKg: state.prevTradePricePerKg,
                prevTradeSellerName: state.prevTradeSellerName,
                meatBrandIds: state.meatBrandIds,
                etc: state.etc
              };
    case /* PrevTradePricePerKg */5 :
        return {
                packageMethod: state.packageMethod,
                grade: state.grade,
                weightKg: state.weightKg,
                usages: state.usages,
                storageMethod: state.storageMethod,
                prevTradePricePerKg: action._0,
                prevTradeSellerName: state.prevTradeSellerName,
                meatBrandIds: state.meatBrandIds,
                etc: state.etc
              };
    case /* PrevTradeSellerName */6 :
        return {
                packageMethod: state.packageMethod,
                grade: state.grade,
                weightKg: state.weightKg,
                usages: state.usages,
                storageMethod: state.storageMethod,
                prevTradePricePerKg: state.prevTradePricePerKg,
                prevTradeSellerName: action._0,
                meatBrandIds: state.meatBrandIds,
                etc: state.etc
              };
    case /* Brands */7 :
        return {
                packageMethod: state.packageMethod,
                grade: state.grade,
                weightKg: state.weightKg,
                usages: state.usages,
                storageMethod: state.storageMethod,
                prevTradePricePerKg: state.prevTradePricePerKg,
                prevTradeSellerName: state.prevTradeSellerName,
                meatBrandIds: action._0,
                etc: state.etc
              };
    case /* ETC */8 :
        return {
                packageMethod: state.packageMethod,
                grade: state.grade,
                weightKg: state.weightKg,
                usages: state.usages,
                storageMethod: state.storageMethod,
                prevTradePricePerKg: state.prevTradePricePerKg,
                prevTradeSellerName: state.prevTradeSellerName,
                meatBrandIds: state.meatBrandIds,
                etc: action._0
              };
    
  }
}

function RfqApply_Buyer$Apply(Props) {
  var itemId = Props.itemId;
  var requestId = Props.requestId;
  var match = RfqApply_Steps_Buyer.RfqApplyStep.use(undefined);
  var current = match.current;
  var match$1 = use({
        itemId: itemId
      }, undefined, undefined, undefined, undefined);
  var node = match$1.node;
  var match$2 = getItemInfo(node);
  var isNotExistGrades = match$2[1];
  var itemInfo = match$2[0];
  var initialState_packageMethod = itemInfo.packageMethod;
  var initialState_grade = isNotExistGrades ? match$2[2] : itemInfo.grade;
  var initialState_weightKg = itemInfo.weightKg;
  var initialState_usages = itemInfo.usages;
  var initialState_storageMethod = itemInfo.storageMethod;
  var initialState_prevTradePricePerKg = itemInfo.prevTradePricePerKg;
  var initialState_prevTradeSellerName = itemInfo.prevTradeSellerName;
  var initialState_meatBrandIds = itemInfo.meatBrandIds;
  var initialState_etc = itemInfo.otherRequirements;
  var initialState = {
    packageMethod: initialState_packageMethod,
    grade: initialState_grade,
    weightKg: initialState_weightKg,
    usages: initialState_usages,
    storageMethod: initialState_storageMethod,
    prevTradePricePerKg: initialState_prevTradePricePerKg,
    prevTradeSellerName: initialState_prevTradeSellerName,
    meatBrandIds: initialState_meatBrandIds,
    etc: initialState_etc
  };
  var match$3 = React.useReducer(reducer, initialState);
  var state = match$3[0];
  var etc = state.etc;
  var meatBrandIds = state.meatBrandIds;
  var prevTradeSellerName = state.prevTradeSellerName;
  var prevTradePricePerKg = state.prevTradePricePerKg;
  var storageMethod = state.storageMethod;
  var usages = state.usages;
  var weightKg = state.weightKg;
  var grade = state.grade;
  var packageMethod = state.packageMethod;
  var dispatch = match$3[1];
  var router = Router.useRouter();
  var match$4 = ReactToastNotifications.useToasts();
  var addToast = match$4.addToast;
  var match$5 = use$1(undefined);
  var isMutating = match$5[1];
  var updateMutate = match$5[0];
  var titleText = Belt_Option.mapWithDefault(node, "", (function (node$p) {
          return Belt_Option.mapWithDefault(node$p.part, "", (function (part$p) {
                        return "" + part$p.name + " / " + (
                                part$p.isDomestic ? "국내" : "수입"
                              ) + "";
                      }));
        }));
  var updateItem = function (initializeBrandsOpt, param) {
    var initializeBrands = initializeBrandsOpt !== undefined ? initializeBrandsOpt : false;
    var input_meatBrandIds = initializeBrands ? [] : meatBrandIds;
    var input = {
      meatBrandIds: input_meatBrandIds,
      meatGradeId: grade,
      meatPartId: undefined,
      meatSpeciesId: undefined,
      meatUsageIds: usages,
      otherRequirements: etc,
      packageMethod: packageMethod,
      prevTradePricePerKg: prevTradePricePerKg,
      prevTradeSellerName: prevTradeSellerName,
      status: "REVIEW_REQUIRED",
      storageMethod: storageMethod,
      weightKg: weightKg
    };
    var toastSuccessMessage = initializeBrands ? "" + titleText + " 작성이 완료되었어요! \n등급 변경으로 인해 선택했던 브랜드가 초기화되었어요." : "" + titleText + " 작성이 완료되었어요!";
    Curry.app(updateMutate, [
          (function (param) {
              addToast(DS_Toast.getToastComponent("저장중 문제가 발생하였습니다. 관리자에게 문의해주세요.", "error"), {
                    appearance: "error"
                  });
            }),
          (function (param, param$1) {
              if (param.updateRfqRequestItemsMeat.NAME === "RfqRequestItemMeatMutationPayload") {
                addToast(React.createElement("div", {
                          className: "flex items-center whitespace-pre-line"
                        }, React.createElement(DS_Toast.Normal.IconSuccess.make, {}), React.createElement("div", undefined, toastSuccessMessage)), {
                      appearance: "success"
                    });
                router.push("/buyer/rfq/request/draft/list?requestId=" + requestId + "");
                return ;
              } else {
                return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                            appearance: "error"
                          });
              }
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          {
            id: itemId,
            input: input
          },
          undefined,
          undefined
        ]);
  };
  return React.createElement(React.Fragment, undefined, React.createElement(RfqApply_Buyer$Header, {
                  title: titleText,
                  updateItem: updateItem,
                  requestId: requestId,
                  itemId: itemId,
                  dispatch: dispatch
                }), React.createElement(RfqApply_Buyer$ProgressBar, {
                  totalCount: 9,
                  currentCount: current + 1 | 0
                }), Belt_Option.mapWithDefault(node, null, (function (node$p) {
                    switch (current) {
                      case /* Package */0 :
                          return React.createElement(RfqApply_Steps_Buyer.PackageMethod.make, {
                                      packageMethod: packageMethod,
                                      dispatch: dispatch,
                                      isMutating: isMutating,
                                      updateItem: updateItem,
                                      isSkipGrade: isNotExistGrades,
                                      itemId: itemId,
                                      requestId: requestId
                                    });
                      case /* Grade */1 :
                          return React.createElement(RfqApply_Steps_Buyer.Grade.make, {
                                      grade: grade,
                                      node: node$p,
                                      dispatch: dispatch,
                                      isMutating: isMutating,
                                      updateItem: updateItem,
                                      itemId: itemId,
                                      requestId: requestId
                                    });
                      case /* Amount */2 :
                          return React.createElement(RfqApply_Steps_Buyer.OrderAmount.make, {
                                      weightKg: weightKg,
                                      dispatch: dispatch,
                                      isMutating: isMutating,
                                      updateItem: updateItem,
                                      itemId: itemId,
                                      requestId: requestId
                                    });
                      case /* Usage */3 :
                          return React.createElement(RfqApply_Steps_Buyer.Usages.make, {
                                      usages: usages,
                                      edges: Belt_Option.mapWithDefault(node$p.species, [], (function (x) {
                                              return x.meatUsages.edges;
                                            })),
                                      dispatch: dispatch,
                                      isMutating: isMutating,
                                      updateItem: updateItem,
                                      itemId: itemId,
                                      requestId: requestId
                                    });
                      case /* Storage */4 :
                          return React.createElement(RfqApply_Steps_Buyer.StorageMethod.make, {
                                      storageMethod: storageMethod,
                                      dispatch: dispatch,
                                      isMutating: isMutating,
                                      updateItem: updateItem,
                                      itemId: itemId,
                                      requestId: requestId
                                    });
                      case /* Price */5 :
                          return React.createElement(RfqApply_Steps_Buyer.SupplyPrice.make, {
                                      prevTradeSellerName: prevTradeSellerName,
                                      prevTradePricePerKg: prevTradePricePerKg,
                                      dispatch: dispatch,
                                      isMutating: isMutating,
                                      updateItem: updateItem,
                                      itemId: itemId,
                                      requestId: requestId
                                    });
                      case /* Brand */6 :
                          return React.createElement(React.Suspense, {
                                      children: React.createElement(RfqApply_Steps_Buyer.Brand.make, {
                                            meatBrandIds: meatBrandIds,
                                            dispatch: dispatch,
                                            isMutating: isMutating,
                                            updateItem: updateItem,
                                            itemId: itemId,
                                            requestId: requestId,
                                            isNotExistGrades: isNotExistGrades,
                                            grade: grade,
                                            node: node$p
                                          }),
                                      fallback: React.createElement(RfqApply_Steps_Skeleton_Buyer.make, {})
                                    });
                      case /* Etc */7 :
                          return React.createElement(RfqApply_Steps_Buyer.Etc.make, {
                                      etc: etc,
                                      dispatch: dispatch,
                                      isMutating: isMutating,
                                      updateItem: updateItem,
                                      itemId: itemId,
                                      requestId: requestId
                                    });
                      
                    }
                  })));
}

var Apply = {
  getItemInfo: getItemInfo,
  reducer: reducer,
  make: RfqApply_Buyer$Apply
};

function RfqApply_Buyer(Props) {
  var itemId = Props.itemId;
  var requestId = Props.requestId;
  var router = Router.useRouter();
  if (itemId !== undefined && requestId !== undefined) {
    return React.createElement(Authorization.Buyer.make, {
                children: React.createElement(React.Suspense, {
                      children: React.createElement(RfqCommon.CheckBuyerRequestStatus.make, {
                            children: React.createElement(RfqApply_Buyer$Layout, {
                                  children: React.createElement(RfqApply_Buyer$Apply, {
                                        itemId: itemId,
                                        requestId: requestId
                                      })
                                }),
                            requestId: requestId
                          })
                    }),
                title: "바이어 견적 요청",
                fallback: null
              });
  }
  React.useEffect((function () {
          router.push("/buyer/rfq");
        }), []);
  return null;
}

var make = RfqApply_Buyer;

export {
  Query ,
  Mutation ,
  toStringStorageMethod ,
  toStringPackageMethod ,
  Layout ,
  Header ,
  ProgressBar ,
  Apply ,
  make ,
}
/* react Not a pure module */
