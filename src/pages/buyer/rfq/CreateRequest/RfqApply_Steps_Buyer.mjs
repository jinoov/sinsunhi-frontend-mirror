// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Env from "../../../../constants/Env.mjs";
import * as $$Intl from "../../../../bindings/intl.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as DS_Tab from "../../../../components/common/container/DS_Tab.mjs";
import * as Global from "../../../../components/Global.mjs";
import * as DS_Icon from "../../../../components/svgs/DS_Icon.mjs";
import * as DataGtm from "../../../../utils/DataGtm.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as DS_Input from "../../../../components/common/element/DS_Input.mjs";
import * as DS_Title from "../../../../components/common/container/DS_Title.mjs";
import * as DS_Button from "../../../../components/common/element/DS_Button.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as DS_ListItem from "../../../../components/common/container/DS_ListItem.mjs";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as DS_InputField from "../../../../components/common/container/DS_InputField.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as RfqApplyBuyer_Query_graphql from "../../../../__generated__/RfqApplyBuyer_Query_graphql.mjs";
import * as RfqApplyStepsBuyer_BrandList_Query_graphql from "../../../../__generated__/RfqApplyStepsBuyer_BrandList_Query_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(RfqApplyStepsBuyer_BrandList_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqApplyStepsBuyer_BrandList_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(RfqApplyStepsBuyer_BrandList_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(RfqApplyStepsBuyer_BrandList_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, RfqApplyStepsBuyer_BrandList_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, RfqApplyStepsBuyer_BrandList_Query_graphql.node, RfqApplyStepsBuyer_BrandList_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: RfqApplyStepsBuyer_BrandList_Query_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, RfqApplyStepsBuyer_BrandList_Query_graphql.node, RfqApplyStepsBuyer_BrandList_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(RfqApplyStepsBuyer_BrandList_Query_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(RfqApplyStepsBuyer_BrandList_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqApplyStepsBuyer_BrandList_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(RfqApplyStepsBuyer_BrandList_Query_graphql.node, RfqApplyStepsBuyer_BrandList_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_countryCode_decode = RfqApplyStepsBuyer_BrandList_Query_graphql.Utils.countryCode_decode;

var Query_countryCode_fromString = RfqApplyStepsBuyer_BrandList_Query_graphql.Utils.countryCode_fromString;

var Query = {
  countryCode_decode: Query_countryCode_decode,
  countryCode_fromString: Query_countryCode_fromString,
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function tToJs(param) {
  return param + 0 | 0;
}

function tFromJs(param) {
  if (param <= 7 && 0 <= param) {
    return param - 0 | 0;
  }
  
}

function getNext(step) {
  switch (step) {
    case /* Package */0 :
        return /* Grade */1;
    case /* Grade */1 :
        return /* Amount */2;
    case /* Amount */2 :
        return /* Usage */3;
    case /* Usage */3 :
        return /* Storage */4;
    case /* Storage */4 :
        return /* Price */5;
    case /* Price */5 :
        return /* Brand */6;
    case /* Brand */6 :
        return /* Etc */7;
    case /* Etc */7 :
        return ;
    
  }
}

function getPrev(step) {
  switch (step) {
    case /* Package */0 :
        return ;
    case /* Grade */1 :
        return /* Package */0;
    case /* Amount */2 :
        return /* Grade */1;
    case /* Usage */3 :
        return /* Amount */2;
    case /* Storage */4 :
        return /* Usage */3;
    case /* Price */5 :
        return /* Storage */4;
    case /* Brand */6 :
        return /* Price */5;
    case /* Etc */7 :
        return /* Brand */6;
    
  }
}

function fromString(str) {
  switch (str) {
    case "brand" :
        return {
                TAG: /* Ok */0,
                _0: /* Brand */6
              };
    case "etc" :
        return {
                TAG: /* Ok */0,
                _0: /* Etc */7
              };
    case "grade" :
        return {
                TAG: /* Ok */0,
                _0: /* Grade */1
              };
    case "orderAmount" :
        return {
                TAG: /* Ok */0,
                _0: /* Amount */2
              };
    case "packageMethod" :
        return {
                TAG: /* Ok */0,
                _0: /* Package */0
              };
    case "storageMethod" :
        return {
                TAG: /* Ok */0,
                _0: /* Storage */4
              };
    case "supplyPrice" :
        return {
                TAG: /* Ok */0,
                _0: /* Price */5
              };
    case "usage" :
        return {
                TAG: /* Ok */0,
                _0: /* Usage */3
              };
    default:
      return {
              TAG: /* Error */1,
              _0: "parse error"
            };
  }
}

function toString(step) {
  switch (step) {
    case /* Package */0 :
        return "packageMethod";
    case /* Grade */1 :
        return "grade";
    case /* Amount */2 :
        return "orderAmount";
    case /* Usage */3 :
        return "usage";
    case /* Storage */4 :
        return "storageMethod";
    case /* Price */5 :
        return "supplyPrice";
    case /* Brand */6 :
        return "brand";
    case /* Etc */7 :
        return "etc";
    
  }
}

var ApplySteps = {
  tToJs: tToJs,
  tFromJs: tFromJs,
  first: /* Package */0,
  last: /* Etc */7,
  length: 8,
  getNext: getNext,
  getPrev: getPrev,
  fromString: fromString,
  toString: toString
};

function RfqStep(Steps) {
  var use = function (param) {
    var router = Router.useRouter();
    var getStepQueryString = function (step) {
      router.query["step"] = Curry._1(Steps.toString, step);
      return new URLSearchParams(router.query).toString();
    };
    var match = Belt_Option.map(Js_dict.get(router.query, "step"), Steps.fromString);
    var currentStep = match !== undefined && match.TAG === /* Ok */0 ? match._0 : Steps.first;
    var match$1 = Js_dict.get(router.query, "isModify");
    var isModify = match$1 === "true" ? true : false;
    var toList = function (param) {
      var requestId = Js_dict.get(router.query, "requestId");
      var nextQueryString = new URLSearchParams(requestId !== undefined ? Js_dict.fromArray([[
                      "requestId",
                      encodeURIComponent(requestId)
                    ]]) : ({})).toString();
      router.push("/buyer/rfq/request/draft/list?" + nextQueryString + "");
    };
    var getNextStep = function (currentStep) {
      var nextStep = Curry._1(Steps.getNext, currentStep);
      if (nextStep !== undefined) {
        return Caml_option.valFromOption(nextStep);
      } else {
        return currentStep;
      }
    };
    var toNext = function (param) {
      var nextStep = getNextStep(currentStep);
      var newQueryString = getStepQueryString(nextStep);
      router.push("" + router.pathname + "?" + newQueryString + "");
    };
    var toNextDouble = function (param) {
      var nextStep = getNextStep(getNextStep(currentStep));
      var newQueryString = getStepQueryString(nextStep);
      router.push("" + router.pathname + "?" + newQueryString + "");
    };
    var toPrev = function (param) {
      var prevStep = Curry._1(Steps.getPrev, currentStep);
      if (prevStep !== undefined) {
        var newQueryString = getStepQueryString(Caml_option.valFromOption(prevStep));
        router.push("" + router.pathname + "?" + newQueryString + "");
        return ;
      }
      router.back();
    };
    var toFirst = function (param) {
      router.replace("" + router.pathname + "?" + getStepQueryString(Steps.first) + "");
    };
    var push = function (step) {
      router.push("" + router.pathname + "?" + getStepQueryString(step) + "");
    };
    var replace = function (step) {
      router.replace("" + router.pathname + "?" + getStepQueryString(step) + "");
    };
    return {
            first: Steps.first,
            current: currentStep,
            currentIndex: Curry._1(Steps.tToJs, currentStep),
            next: Curry._1(Steps.getNext, currentStep),
            nextIndex: Curry._1(Steps.tToJs, currentStep) + 1 | 0,
            length: Steps.length,
            isModify: isModify,
            isFirst: Caml_obj.equal(currentStep, Steps.first),
            isLast: Caml_obj.equal(currentStep, Steps.last),
            router: {
              toList: toList,
              toNext: toNext,
              toNextDouble: toNextDouble,
              toPrev: toPrev,
              toFirst: toFirst,
              push: push,
              replace: replace
            }
          };
  };
  return {
          use: use
        };
}

function use$1(param) {
  var router = Router.useRouter();
  var getStepQueryString = function (step) {
    router.query["step"] = toString(step);
    return new URLSearchParams(router.query).toString();
  };
  var match = Belt_Option.map(Js_dict.get(router.query, "step"), fromString);
  var currentStep = match !== undefined && match.TAG === /* Ok */0 ? match._0 : /* Package */0;
  var match$1 = Js_dict.get(router.query, "isModify");
  var isModify = match$1 === "true" ? true : false;
  var toList = function (param) {
    var requestId = Js_dict.get(router.query, "requestId");
    var nextQueryString = new URLSearchParams(requestId !== undefined ? Js_dict.fromArray([[
                    "requestId",
                    encodeURIComponent(requestId)
                  ]]) : ({})).toString();
    router.push("/buyer/rfq/request/draft/list?" + nextQueryString + "");
  };
  var getNextStep = function (currentStep) {
    var nextStep = getNext(currentStep);
    if (nextStep !== undefined) {
      return Caml_option.valFromOption(nextStep);
    } else {
      return currentStep;
    }
  };
  var toNext = function (param) {
    var nextStep = getNextStep(currentStep);
    var newQueryString = getStepQueryString(nextStep);
    router.push("" + router.pathname + "?" + newQueryString + "");
  };
  var toNextDouble = function (param) {
    var nextStep = getNextStep(getNextStep(currentStep));
    var newQueryString = getStepQueryString(nextStep);
    router.push("" + router.pathname + "?" + newQueryString + "");
  };
  var toPrev = function (param) {
    var prevStep = getPrev(currentStep);
    if (prevStep !== undefined) {
      var newQueryString = getStepQueryString(Caml_option.valFromOption(prevStep));
      router.push("" + router.pathname + "?" + newQueryString + "");
      return ;
    }
    router.back();
  };
  var toFirst = function (param) {
    router.replace("" + router.pathname + "?" + getStepQueryString(/* Package */0) + "");
  };
  var push = function (step) {
    router.push("" + router.pathname + "?" + getStepQueryString(step) + "");
  };
  var replace = function (step) {
    router.replace("" + router.pathname + "?" + getStepQueryString(step) + "");
  };
  return {
          first: /* Package */0,
          current: currentStep,
          currentIndex: currentStep + 0 | 0,
          next: getNext(currentStep),
          nextIndex: (currentStep + 0 | 0) + 1 | 0,
          length: 8,
          isModify: isModify,
          isFirst: Caml_obj.equal(currentStep, /* Package */0),
          isLast: Caml_obj.equal(currentStep, /* Etc */7),
          router: {
            toList: toList,
            toNext: toNext,
            toNextDouble: toNextDouble,
            toPrev: toPrev,
            toFirst: toFirst,
            push: push,
            replace: replace
          }
        };
}

var RfqApplyStep = {
  use: use$1
};

function convertNumberInputValue(value) {
  return value.replace(/[^0-9]/g, "").replace(/^[0]/g, "");
}

function numberToComma(n) {
  return Belt_Option.mapWithDefault(Belt_Float.fromString(n), "", (function (x) {
                return $$Intl.Currency.make(x, "ko-KR", undefined, undefined, undefined);
              }));
}

function RfqApply_Steps_Buyer$FloatingButton(Props) {
  var handleClickButton = Props.handleClickButton;
  var buttonText = Props.buttonText;
  var disabledOpt = Props.disabled;
  var buttonType = Props.buttonType;
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "fixed bottom-0 max-w-3xl w-full gradient-cta-t tab-highlight-color"
                }, React.createElement("div", {
                      className: buttonType ? "px-4 py-5" : ""
                    }, React.createElement("button", {
                          className: Cx.cx([
                                buttonType ? "rounded-xl" : "",
                                "w-full h-14 bg-primary text-white text-lg font-bold",
                                "disabled:bg-disabled-L2 disabled:text-inverted disabled:text-opacity-50"
                              ]),
                          disabled: disabled,
                          onClick: handleClickButton
                        }, buttonText))), React.createElement("div", {
                  className: "h-24"
                }));
}

var FloatingButton = {
  make: RfqApply_Steps_Buyer$FloatingButton
};

var checkValidPackageMethod = Belt_Option.isSome;

function RfqApply_Steps_Buyer$PackageMethod(Props) {
  var packageMethod = Props.packageMethod;
  var dispatch = Props.dispatch;
  var isMutating = Props.isMutating;
  var updateItem = Props.updateItem;
  var isSkipGrade = Props.isSkipGrade;
  var itemId = Props.itemId;
  var requestId = Props.requestId;
  var match = use$1(undefined);
  var match$1 = match.router;
  var toNextDouble = match$1.toNextDouble;
  var toNext = match$1.toNext;
  var isModify = match.isModify;
  var trackData = function (param) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_rfq_livestock_packagemethod",
              package_method: packageMethod,
              request_id: requestId,
              request_item_id: itemId
            }));
  };
  var isValidItem = Belt_Option.isSome(packageMethod);
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "pt-7"
                }, React.createElement(DS_Title.Normal1.Root.make, {
                      children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                            title1: "원하시는 포장상태를",
                            title2: "선택해주세요"
                          })
                    }), React.createElement(DS_ListItem.Normal1.Root.make, {
                      children: React.createElement(DS_ListItem.Normal1.Item.make, {
                            children: null,
                            onClick: (function (param) {
                                Curry._1(dispatch, {
                                      TAG: /* PackageMethod */0,
                                      _0: Belt_Option.isNone(packageMethod) ? "RAW" : undefined
                                    });
                              })
                          }, React.createElement(DS_ListItem.Normal1.TextGroup.make, {
                                title1: "원료육(박스육)"
                              }), React.createElement(DS_ListItem.Normal1.RightGroup.make, {
                                children: Belt_Option.mapWithDefault(packageMethod, React.createElement(DS_Icon.Common.UncheckedLarge1.make, {
                                          height: "22",
                                          width: "22"
                                        }), (function (param) {
                                        return React.createElement(DS_Icon.Common.CheckedLarge1.make, {
                                                    height: "22",
                                                    width: "22",
                                                    fill: "#12B564"
                                                  });
                                      }))
                              })),
                      className: "space-y-8 text-lg mt-9 tab-highlight-color"
                    }), React.createElement("div", {
                      className: "absolute w-full bottom-[108px] px-5 flex justify-between"
                    }, React.createElement("div", {
                          className: "leading-6 tracking-tight"
                        }, React.createElement("h5", undefined, "세절/분쇄가 필요한 경우,"), React.createElement("h5", undefined, "담당자에게 문의 부탁드립니다.")), React.createElement(DataGtm.make, {
                          children: React.createElement("button", {
                                className: "text-[15px] leading-6 tracking-tight font-bold rounded-lg px-3.5 py-3 border border-border-default-L1 bg-surface",
                                onClick: (function (param) {
                                    if (Global.$$window !== undefined) {
                                      Caml_option.valFromOption(Global.$$window).open("" + Env.customerServiceUrl + "" + Env.customerServicePaths.rfqMeatProcess + "", undefined, "");
                                      return ;
                                    }
                                    
                                  })
                              }, "문의하기"),
                          dataGtm: "Contact_RFQ_Livestock_PackageMethod"
                        }))), React.createElement(RfqApply_Steps_Buyer$FloatingButton, {
                  handleClickButton: (function (param) {
                      trackData(undefined);
                      if (isModify) {
                        return Curry._2(updateItem, undefined, undefined);
                      } else if (isSkipGrade) {
                        return Curry._1(toNextDouble, undefined);
                      } else {
                        return Curry._1(toNext, undefined);
                      }
                    }),
                  buttonText: isModify ? "저장" : "다음",
                  disabled: !isValidItem || isMutating,
                  buttonType: /* Normal */1
                }));
}

var PackageMethod = {
  checkValidPackageMethod: checkValidPackageMethod,
  make: RfqApply_Steps_Buyer$PackageMethod
};

var checkValidGrade = Belt_Option.isSome;

function RfqApply_Steps_Buyer$Grade$List(Props) {
  var edges = Props.edges;
  var madeIn = Props.madeIn;
  var handleOnChangeGrade = Props.handleOnChangeGrade;
  var grade = Props.grade;
  return React.createElement(React.Fragment, undefined, Belt_Array.map(Belt_Array.keep(edges, (function (x) {
                        return x.node.madeIn === madeIn;
                      })), (function (x) {
                    var isSelected = Belt_Option.mapWithDefault(grade, false, (function (grade$p) {
                            return grade$p === x.node.id;
                          }));
                    return React.createElement(DS_ListItem.Normal1.Item.make, {
                                children: null,
                                onClick: (function (param) {
                                    Curry._1(handleOnChangeGrade, {
                                          TAG: /* Grade */1,
                                          _0: x.node.id
                                        });
                                  }),
                                key: x.node.id
                              }, React.createElement(DS_ListItem.Normal1.TextGroup.make, {
                                    title1: x.node.grade
                                  }), React.createElement(DS_ListItem.Normal1.RightGroup.make, {
                                    children: isSelected ? React.createElement(DS_Icon.Common.RadioOnLarge1.make, {
                                            height: "24",
                                            width: "24",
                                            fill: "#12B564"
                                          }) : React.createElement(DS_Icon.Common.RadioOffLarge1.make, {
                                            height: "24",
                                            width: "24",
                                            fill: "#B2B2B2"
                                          })
                                  }));
                  })));
}

var List = {
  make: RfqApply_Steps_Buyer$Grade$List
};

function RfqApply_Steps_Buyer$Grade(Props) {
  var grade = Props.grade;
  var node = Props.node;
  var dispatch = Props.dispatch;
  var isMutating = Props.isMutating;
  var updateItem = Props.updateItem;
  var itemId = Props.itemId;
  var requestId = Props.requestId;
  var match = use$1(undefined);
  var toNext = match.router.toNext;
  var isModify = match.isModify;
  var trackData = function (param) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_rfq_livestock_meatgrade",
              request_id: requestId,
              request_item_id: itemId,
              meat_grade_id: grade
            }));
  };
  var species = node.species;
  var isBeef = Belt_Option.mapWithDefault(species, false, (function (x) {
          return x.name === "소고기";
        }));
  var isDomestic = Belt_Option.mapWithDefault(node.part, false, (function (x) {
          return x.isDomestic;
        }));
  var edges = Belt_Option.mapWithDefault(species, [], (function (x) {
          return x.meatGrades.edges;
        }));
  var isValidItem = Belt_Option.isSome(grade);
  var match$1 = React.useState(function () {
        if (isDomestic) {
          return "KR";
        } else if (isBeef) {
          return "US";
        } else {
          return "OTHER";
        }
      });
  var setMadeIn = match$1[1];
  var madeIn = match$1[0];
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "pt-7"
                }, React.createElement(DS_Title.Normal1.Root.make, {
                      children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                            title1: "찾으시는 상품의",
                            title2: "등급을 선택해주세요"
                          })
                    }), React.createElement("div", {
                      className: "sticky top-[60px] px-5 mt-8"
                    }, React.createElement(DS_Tab.LeftTab.Root.make, {
                          children: isDomestic ? React.createElement(DS_Tab.LeftTab.Item.make, {
                                  children: React.createElement(DS_Button.Chip.TextSmall1.make, {
                                        label: "국내산",
                                        selected: madeIn === "KR",
                                        className: "text-sm",
                                        onClick: (function (param) {
                                            setMadeIn(function (param) {
                                                  return "KR";
                                                });
                                          })
                                      })
                                }) : (
                              isBeef ? React.createElement(React.Fragment, undefined, React.createElement(DS_Tab.LeftTab.Item.make, {
                                          children: React.createElement(DS_Button.Chip.TextSmall1.make, {
                                                label: "미국산",
                                                selected: madeIn === "US",
                                                className: "text-sm",
                                                onClick: (function (param) {
                                                    setMadeIn(function (param) {
                                                          return "US";
                                                        });
                                                  })
                                              })
                                        }), React.createElement(DS_Tab.LeftTab.Item.make, {
                                          children: React.createElement(DS_Button.Chip.TextSmall1.make, {
                                                label: "호주산",
                                                selected: madeIn === "AU",
                                                className: "text-sm",
                                                onClick: (function (param) {
                                                    setMadeIn(function (param) {
                                                          return "AU";
                                                        });
                                                  })
                                              })
                                        }), React.createElement(DS_Tab.LeftTab.Item.make, {
                                          children: React.createElement(DS_Button.Chip.TextSmall1.make, {
                                                label: "캐나다산",
                                                selected: madeIn === "CA",
                                                className: "text-sm",
                                                onClick: (function (param) {
                                                    setMadeIn(function (param) {
                                                          return "CA";
                                                        });
                                                  })
                                              })
                                        }), React.createElement(DS_Tab.LeftTab.Item.make, {
                                          children: React.createElement(DS_Button.Chip.TextSmall1.make, {
                                                label: "뉴질랜드산",
                                                selected: madeIn === "NZ",
                                                className: "text-sm",
                                                onClick: (function (param) {
                                                    setMadeIn(function (param) {
                                                          return "NZ";
                                                        });
                                                  })
                                              })
                                        })) : React.createElement(DS_Tab.LeftTab.Item.make, {
                                      children: React.createElement(DS_Button.Chip.TextSmall1.make, {
                                            label: "수입산",
                                            selected: madeIn === "OTHER",
                                            className: "text-sm",
                                            onClick: (function (param) {
                                                setMadeIn(function (param) {
                                                      return "OTHER";
                                                    });
                                              })
                                          })
                                    })
                            ),
                          className: "space-x-0"
                        })), React.createElement(DS_ListItem.Normal1.Root.make, {
                      children: React.createElement(RfqApply_Steps_Buyer$Grade$List, {
                            edges: edges,
                            madeIn: madeIn,
                            handleOnChangeGrade: dispatch,
                            grade: grade
                          }),
                      className: "space-y-8 mt-11 tab-highlight-color"
                    })), React.createElement(RfqApply_Steps_Buyer$FloatingButton, {
                  handleClickButton: (function (param) {
                      trackData(undefined);
                      if (isModify) {
                        return Curry._2(updateItem, true, undefined);
                      } else {
                        return Curry._1(toNext, undefined);
                      }
                    }),
                  buttonText: isModify ? "저장" : "다음",
                  disabled: !isValidItem || isMutating,
                  buttonType: /* Normal */1
                }));
}

var Grade = {
  checkValidGrade: checkValidGrade,
  List: List,
  make: RfqApply_Steps_Buyer$Grade
};

function checkValidOrderAmount(weightKg) {
  return Belt_Option.mapWithDefault(Belt_Option.flatMap(weightKg, Belt_Int.fromString), false, (function (x) {
                return x >= 50;
              }));
}

function RfqApply_Steps_Buyer$OrderAmount(Props) {
  var weightKg = Props.weightKg;
  var dispatch = Props.dispatch;
  var isMutating = Props.isMutating;
  var updateItem = Props.updateItem;
  var itemId = Props.itemId;
  var requestId = Props.requestId;
  var match = use$1(undefined);
  var toNext = match.router.toNext;
  var isModify = match.isModify;
  var isValidItem = checkValidOrderAmount(weightKg);
  var trackData = function (param) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_rfq_livestock_weightkg",
              request_id: requestId,
              request_item_id: itemId,
              meat_weight_kg: weightKg
            }));
  };
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "pt-7"
                }, React.createElement(DS_Title.Normal1.Root.make, {
                      children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                            title1: "주문량을",
                            title2: "작성해주세요"
                          })
                    }), React.createElement(DS_InputField.Line1.Root.make, {
                      children: React.createElement(DS_InputField.Line1.Input.make, {
                            type_: "text",
                            placeholder: "납품 1회당 배송량",
                            value: Belt_Option.mapWithDefault(weightKg, "", (function (x) {
                                    return numberToComma(Garter_Array.firstExn(x.split(".")));
                                  })),
                            onChange: (function (e) {
                                var value = e.target.value;
                                Curry._1(dispatch, {
                                      TAG: /* WeightKg */2,
                                      _0: convertNumberInputValue(value)
                                    });
                              }),
                            autoFocus: true,
                            inputMode: "decimal",
                            isClear: true,
                            fnClear: (function (param) {
                                Curry._1(dispatch, {
                                      TAG: /* WeightKg */2,
                                      _0: ""
                                    });
                              }),
                            unit: "kg",
                            errorMessage: Belt_Option.mapWithDefault(weightKg, undefined, (function (x) {
                                    return Belt_Option.mapWithDefault(Belt_Option.flatMap(Garter_Array.first(x.split(".")), Belt_Int.fromString), undefined, (function (x) {
                                                  if (x < 50) {
                                                    return "최소 주문량은 " + String(50) + "kg 입니다.";
                                                  }
                                                  
                                                }));
                                  })),
                            underLabel: "최소 주문량 " + String(50) + "kg",
                            underLabelType: "ton",
                            maxLength: 6
                          }),
                      className: "mt-4"
                    })), React.createElement(RfqApply_Steps_Buyer$FloatingButton, {
                  handleClickButton: (function (param) {
                      trackData(undefined);
                      if (isModify) {
                        return Curry._2(updateItem, undefined, undefined);
                      } else {
                        return Curry._1(toNext, undefined);
                      }
                    }),
                  buttonText: isModify ? "저장" : "다음",
                  disabled: !isValidItem || isMutating,
                  buttonType: /* Normal */1
                }));
}

var OrderAmount = {
  minimumAmount: 50,
  checkValidOrderAmount: checkValidOrderAmount,
  make: RfqApply_Steps_Buyer$OrderAmount
};

function checkValidUsage(usages) {
  return usages.length !== 0;
}

function RfqApply_Steps_Buyer$Usages(Props) {
  var usages = Props.usages;
  var edges = Props.edges;
  var dispatch = Props.dispatch;
  var isMutating = Props.isMutating;
  var updateItem = Props.updateItem;
  var itemId = Props.itemId;
  var requestId = Props.requestId;
  var match = use$1(undefined);
  var toNext = match.router.toNext;
  var isModify = match.isModify;
  var isValidItem = usages.length !== 0;
  var trackData = function (param) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_rfq_livestock_meatusage",
              request_id: requestId,
              request_item_id: itemId,
              meat_usage_ids: usages,
              meatusage_skip: false
            }));
  };
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "pt-7"
                }, React.createElement(DS_Title.Normal1.Root.make, {
                      children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                            title1: "사용용도를 알려주세요"
                          })
                    }), React.createElement("div", {
                      className: "flex justify-end items-center px-5 mt-1.5"
                    }, React.createElement("span", {
                          className: "text-[13px] text-enabled-L2"
                        }, "중복 선택 가능")), React.createElement(DS_ListItem.Normal1.Root.make, {
                      children: Belt_Array.map(edges, (function (param) {
                              var match = param.node;
                              var id = match.id;
                              var isUnChecked = Garter_Array.isEmpty(Belt_Array.keep(usages, (function (x) {
                                          return x === id;
                                        })));
                              return React.createElement(DS_ListItem.Normal1.Item.make, {
                                          children: null,
                                          onClick: (function (param) {
                                              Curry._1(dispatch, {
                                                    TAG: /* Usages */3,
                                                    _0: isUnChecked ? Belt_Array.concat(usages, [id]) : Belt_Array.keep(usages, (function (x) {
                                                              return x !== id;
                                                            }))
                                                  });
                                            }),
                                          key: id
                                        }, React.createElement(DS_ListItem.Normal1.TextGroup.make, {
                                              title1: match.name,
                                              titleStyle: "text-lg"
                                            }), React.createElement(DS_ListItem.Normal1.RightGroup.make, {
                                              children: isUnChecked ? React.createElement(DS_Icon.Common.UncheckedLarge1.make, {
                                                      height: "22",
                                                      width: "22"
                                                    }) : React.createElement(DS_Icon.Common.CheckedLarge1.make, {
                                                      height: "22",
                                                      width: "22",
                                                      fill: "#12B564"
                                                    })
                                            }));
                            })),
                      className: "mt-7 space-y-8 tab-highlight-color"
                    })), React.createElement(RfqApply_Steps_Buyer$FloatingButton, {
                  handleClickButton: (function (param) {
                      trackData(undefined);
                      if (isModify) {
                        return Curry._2(updateItem, undefined, undefined);
                      } else {
                        return Curry._1(toNext, undefined);
                      }
                    }),
                  buttonText: isModify ? "저장" : "다음",
                  disabled: !isValidItem || isMutating,
                  buttonType: /* Normal */1
                }));
}

var Usages = {
  checkValidUsage: checkValidUsage,
  make: RfqApply_Steps_Buyer$Usages
};

var checkValidStorageMethod = Belt_Option.isSome;

function RfqApply_Steps_Buyer$StorageMethod$List(Props) {
  var arr = Props.arr;
  var handleOnChangeStorageMethod = Props.handleOnChangeStorageMethod;
  var storageMethod = Props.storageMethod;
  return Belt_Array.map(arr, (function (x) {
                var value = x[1];
                var isSelected = Belt_Option.mapWithDefault(storageMethod, false, (function (storageMethod$p) {
                        return storageMethod$p === value;
                      }));
                return React.createElement(DS_ListItem.Normal1.Item.make, {
                            children: null,
                            onClick: (function (param) {
                                Curry._1(handleOnChangeStorageMethod, {
                                      TAG: /* StorageMethod */4,
                                      _0: value
                                    });
                              }),
                            key: value
                          }, React.createElement(DS_ListItem.Normal1.TextGroup.make, {
                                title1: x[0]
                              }), React.createElement(DS_ListItem.Normal1.RightGroup.make, {
                                children: isSelected ? React.createElement(DS_Icon.Common.RadioOnLarge1.make, {
                                        height: "24",
                                        width: "24",
                                        fill: "#12B564"
                                      }) : React.createElement(DS_Icon.Common.RadioOffLarge1.make, {
                                        height: "24",
                                        width: "24",
                                        fill: "#B2B2B2"
                                      })
                              }));
              }));
}

var List$1 = {
  make: RfqApply_Steps_Buyer$StorageMethod$List
};

function RfqApply_Steps_Buyer$StorageMethod(Props) {
  var storageMethod = Props.storageMethod;
  var dispatch = Props.dispatch;
  var isMutating = Props.isMutating;
  var updateItem = Props.updateItem;
  var itemId = Props.itemId;
  var requestId = Props.requestId;
  var match = use$1(undefined);
  var toNext = match.router.toNext;
  var isModify = match.isModify;
  var isValidItem = Belt_Option.isSome(storageMethod);
  var trackData = function (param) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_rfq_livestock_storagestatus",
              request_id: requestId,
              request_item_id: itemId,
              storage_method: storageMethod
            }));
  };
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "pt-7"
                }, React.createElement(DS_Title.Normal1.Root.make, {
                      children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                            title1: "원하시는 보관상태를",
                            title2: "선택해주세요"
                          })
                    }), React.createElement(DS_ListItem.Normal1.Root.make, {
                      children: React.createElement(RfqApply_Steps_Buyer$StorageMethod$List, {
                            arr: [
                              [
                                "냉동",
                                "FROZEN"
                              ],
                              [
                                "냉장",
                                "CHILLED"
                              ],
                              [
                                "동결",
                                "FREEZE_DRIED"
                              ]
                            ],
                            handleOnChangeStorageMethod: dispatch,
                            storageMethod: storageMethod
                          }),
                      className: "space-y-8 text-lg mt-11 tab-highlight-color"
                    })), React.createElement(RfqApply_Steps_Buyer$FloatingButton, {
                  handleClickButton: (function (param) {
                      trackData(undefined);
                      if (isModify) {
                        return Curry._2(updateItem, undefined, undefined);
                      } else {
                        return Curry._1(toNext, undefined);
                      }
                    }),
                  buttonText: isModify ? "저장" : "다음",
                  disabled: !isValidItem || isMutating,
                  buttonType: /* Normal */1
                }));
}

var StorageMethod = {
  checkValidStorageMethod: checkValidStorageMethod,
  List: List$1,
  make: RfqApply_Steps_Buyer$StorageMethod
};

function checkValidSupplyPrice(prevTradePricePerKg) {
  return Belt_Option.mapWithDefault(Belt_Option.flatMap(prevTradePricePerKg, Belt_Int.fromString), false, (function (x) {
                return x >= 100;
              }));
}

function RfqApply_Steps_Buyer$SupplyPrice(Props) {
  var prevTradeSellerName = Props.prevTradeSellerName;
  var prevTradePricePerKg = Props.prevTradePricePerKg;
  var dispatch = Props.dispatch;
  var isMutating = Props.isMutating;
  var updateItem = Props.updateItem;
  var itemId = Props.itemId;
  var requestId = Props.requestId;
  var match = use$1(undefined);
  var toNext = match.router.toNext;
  var isModify = match.isModify;
  var isValidItem = checkValidSupplyPrice(prevTradePricePerKg);
  var trackData = function (param) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_rfq_livestock_prevtradepriceperkg",
              request_id: requestId,
              request_item_id: itemId,
              prev_trade_price_per_kg: prevTradePricePerKg,
              prev_trade_seller_name: prevTradeSellerName
            }));
  };
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "pt-7"
                }, React.createElement(DS_Title.Normal1.Root.make, {
                      children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                            title1: "기존 거래 단가를",
                            title2: "알려주세요"
                          })
                    }), React.createElement(DS_InputField.Line1.Root.make, {
                      children: React.createElement(DS_InputField.Line1.Input.make, {
                            type_: "text",
                            placeholder: "기존 거래 단가",
                            value: numberToComma(Belt_Option.getWithDefault(prevTradePricePerKg, "")),
                            onChange: (function (e) {
                                var value = e.target.value;
                                Curry._1(dispatch, {
                                      TAG: /* PrevTradePricePerKg */5,
                                      _0: convertNumberInputValue(value)
                                    });
                              }),
                            inputMode: "decimal",
                            isClear: true,
                            fnClear: (function (param) {
                                Curry._1(dispatch, {
                                      TAG: /* PrevTradePricePerKg */5,
                                      _0: ""
                                    });
                              }),
                            unit: "원/kg",
                            errorMessage: Belt_Option.mapWithDefault(prevTradePricePerKg, undefined, (function (x) {
                                    return Belt_Option.mapWithDefault(Belt_Option.flatMap(Garter_Array.first(x.split(".")), Belt_Int.fromString), undefined, (function (x) {
                                                  if (x < 100) {
                                                    return "최소 거래 단가는 " + numberToComma(String(100)) + "원/kg 입니다.";
                                                  }
                                                  
                                                }));
                                  })),
                            underLabelType: "won",
                            maxLength: 7
                          }),
                      className: "mt-10"
                    }), React.createElement(DS_InputField.Line1.Root.make, {
                      children: React.createElement(DS_InputField.Line1.Input.make, {
                            type_: "text",
                            placeholder: "기존 거래처명",
                            value: Belt_Option.getWithDefault(prevTradeSellerName, ""),
                            onChange: (function (e) {
                                var value = e.target.value;
                                Curry._1(dispatch, {
                                      TAG: /* PrevTradeSellerName */6,
                                      _0: value
                                    });
                              }),
                            isClear: true,
                            fnClear: (function (param) {
                                Curry._1(dispatch, {
                                      TAG: /* PrevTradeSellerName */6,
                                      _0: ""
                                    });
                              }),
                            maxLength: 30
                          }),
                      className: "mt-5"
                    })), React.createElement(RfqApply_Steps_Buyer$FloatingButton, {
                  handleClickButton: (function (param) {
                      trackData(undefined);
                      if (isModify) {
                        return Curry._2(updateItem, undefined, undefined);
                      } else {
                        return Curry._1(toNext, undefined);
                      }
                    }),
                  buttonText: isModify ? "저장" : "다음",
                  disabled: !isValidItem || isMutating,
                  buttonType: /* Normal */1
                }));
}

var SupplyPrice = {
  minimumTradePricePerKg: 100,
  checkValidSupplyPrice: checkValidSupplyPrice,
  make: RfqApply_Steps_Buyer$SupplyPrice
};

function RfqApply_Steps_Buyer$Brand(Props) {
  var meatBrandIds = Props.meatBrandIds;
  var dispatch = Props.dispatch;
  var isMutating = Props.isMutating;
  var updateItem = Props.updateItem;
  var itemId = Props.itemId;
  var requestId = Props.requestId;
  var isNotExistGrades = Props.isNotExistGrades;
  var grade = Props.grade;
  var node = Props.node;
  var match = use$1(undefined);
  var toNext = match.router.toNext;
  var isModify = match.isModify;
  var madeIn = Belt_Option.getWithDefault(grade !== undefined ? Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.map(node.species, (function (x) {
                        return x.meatGrades.edges;
                      })), (function (x) {
                    return Belt_Array.getBy(x, (function (x) {
                                  return x.node.id === grade;
                                }));
                  })), (function (x) {
                return RfqApplyBuyer_Query_graphql.Utils.countryCode_decode(x.node.madeIn);
              })) : undefined, "OTHER");
  var isDomestic = Belt_Option.map(node.part, (function (x) {
          return x.isDomestic;
        }));
  var speciesId = Belt_Option.mapWithDefault(node.species, "", (function (x) {
          return x.id;
        }));
  var madeIns = isNotExistGrades ? undefined : [madeIn];
  var match$1 = React.useState(function () {
        return meatBrandIds;
      });
  var setSelectedBrandIds = match$1[1];
  var selectedBrandIds = match$1[0];
  var match$2 = React.useState(function () {
        if (isModify) {
          return Garter_Array.isEmpty(meatBrandIds);
        } else {
          return false;
        }
      });
  var setIsSelectedAnyBrand = match$2[1];
  var isSelectedAnyBrand = match$2[0];
  var match$3 = use({
        isDomestic: isDomestic,
        madeIns: madeIns,
        meatSpeciesIds: [speciesId]
      }, undefined, undefined, undefined, undefined);
  var trackData = function (param) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_rfq_livestock_preferredbrand",
              request_id: requestId,
              request_item_id: itemId,
              selected_brand_ids: meatBrandIds
            }));
  };
  var match$4 = Garter_Array.isEmpty(selectedBrandIds);
  var isValidItem = isSelectedAnyBrand ? (
      match$4 ? true : false
    ) : (
      match$4 ? false : true
    );
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "pt-7"
                }, React.createElement(DS_Title.Normal1.Root.make, {
                      children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                            title1: "브랜드를",
                            title2: "선택해주세요"
                          })
                    }), React.createElement("div", {
                      className: "flex justify-end items-center px-5 mt-1.5"
                    }, React.createElement("span", {
                          className: "text-[13px] text-enabled-L2"
                        }, "중복 선택 가능")), React.createElement("form", undefined, React.createElement("ul", {
                          className: "mt-5"
                        }, React.createElement("li", undefined, React.createElement("label", undefined, React.createElement("div", {
                                      className: "flex justify-between items-center px-5 h-14 cursor-pointer"
                                    }, React.createElement("div", undefined, React.createElement("input", {
                                              className: "appearance-none",
                                              checked: isSelectedAnyBrand,
                                              type: "checkbox",
                                              onChange: (function (param) {
                                                  setIsSelectedAnyBrand(function (prev) {
                                                        return !prev;
                                                      });
                                                  setSelectedBrandIds(function (param) {
                                                        return [];
                                                      });
                                                  Curry._1(dispatch, {
                                                        TAG: /* Brands */7,
                                                        _0: []
                                                      });
                                                })
                                            }), "브랜드 무관"), React.createElement("div", undefined, isSelectedAnyBrand ? React.createElement(DS_Icon.Common.CheckedLarge1.make, {
                                                height: "22",
                                                width: "22",
                                                fill: "#12B564"
                                              }) : React.createElement(DS_Icon.Common.UncheckedLarge1.make, {
                                                height: "22",
                                                width: "22"
                                              }))))), Belt_Array.map(match$3.meatBrands.edges, (function (brand) {
                                var match = brand.node;
                                var id = match.id;
                                var isChecked = Belt_Array.some(selectedBrandIds, (function (x) {
                                        return x === id;
                                      }));
                                return React.createElement("li", {
                                            key: id
                                          }, React.createElement("label", undefined, React.createElement("div", {
                                                    className: "flex justify-between items-center px-5 h-14 cursor-pointer"
                                                  }, React.createElement("div", undefined, React.createElement("input", {
                                                            className: "appearance-none",
                                                            checked: isChecked,
                                                            type: "checkbox",
                                                            onChange: (function (param) {
                                                                var nextValue = isChecked ? Belt_Array.keep(selectedBrandIds, (function (x) {
                                                                          return x !== id;
                                                                        })) : Belt_Array.concat(selectedBrandIds, [id]);
                                                                Curry._1(dispatch, {
                                                                      TAG: /* Brands */7,
                                                                      _0: nextValue
                                                                    });
                                                                setSelectedBrandIds(function (param) {
                                                                      return nextValue;
                                                                    });
                                                                setIsSelectedAnyBrand(function (param) {
                                                                      return false;
                                                                    });
                                                              })
                                                          }), match.name), React.createElement("div", undefined, isChecked ? React.createElement(DS_Icon.Common.CheckedLarge1.make, {
                                                              height: "22",
                                                              width: "22",
                                                              fill: "#12B564"
                                                            }) : React.createElement(DS_Icon.Common.UncheckedLarge1.make, {
                                                              height: "22",
                                                              width: "22"
                                                            })))));
                              }))))), React.createElement(RfqApply_Steps_Buyer$FloatingButton, {
                  handleClickButton: (function (param) {
                      trackData(undefined);
                      if (isModify) {
                        return Curry._2(updateItem, undefined, undefined);
                      } else {
                        return Curry._1(toNext, undefined);
                      }
                    }),
                  buttonText: isModify ? "저장" : "다음",
                  disabled: !isValidItem || isMutating,
                  buttonType: /* Normal */1
                }));
}

var Brand = {
  make: RfqApply_Steps_Buyer$Brand
};

function checkValidEtc(etc) {
  return Belt_Option.mapWithDefault(etc, false, (function (x) {
                return x.length > 0;
              }));
}

function RfqApply_Steps_Buyer$Etc(Props) {
  var etc = Props.etc;
  var dispatch = Props.dispatch;
  var isMutating = Props.isMutating;
  var updateItem = Props.updateItem;
  var itemId = Props.itemId;
  var requestId = Props.requestId;
  var match = use$1(undefined);
  var isValidItem = checkValidEtc(etc);
  var trackData = function (param) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_rfq_livestock_otherrequirements",
              request_id: requestId,
              request_item_id: itemId,
              other_requirements: etc,
              otherrequirements_skip: false
            }));
  };
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "pt-7"
                }, React.createElement(DS_Title.Normal1.Root.make, {
                      children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                            title1: "기타 요청사항을",
                            title2: "남겨주세요"
                          })
                    }), React.createElement("div", {
                      className: "px-5"
                    }, React.createElement(DS_Input.InputText1.make, {
                          type_: "text",
                          className: "mt-7",
                          placeholder: "예: 무항생제 찾습니다",
                          value: Belt_Option.getWithDefault(etc, ""),
                          onChange: (function (e) {
                              var value = e.target.value;
                              Curry._1(dispatch, {
                                    TAG: /* ETC */8,
                                    _0: value
                                  });
                            }),
                          autoFocus: true,
                          maxLength: 300
                        }))), React.createElement(RfqApply_Steps_Buyer$FloatingButton, {
                  handleClickButton: (function (param) {
                      trackData(undefined);
                      Curry._2(updateItem, undefined, undefined);
                    }),
                  buttonText: match.isModify ? "저장" : "다음",
                  disabled: !isValidItem || isMutating,
                  buttonType: /* Normal */1
                }));
}

var Etc = {
  checkValidEtc: checkValidEtc,
  make: RfqApply_Steps_Buyer$Etc
};

export {
  Query ,
  ApplySteps ,
  RfqStep ,
  RfqApplyStep ,
  convertNumberInputValue ,
  numberToComma ,
  FloatingButton ,
  PackageMethod ,
  Grade ,
  OrderAmount ,
  Usages ,
  StorageMethod ,
  SupplyPrice ,
  Brand ,
  Etc ,
}
/* Env Not a pure module */
