// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as DS_Icon from "../../../components/svgs/DS_Icon.mjs";
import * as DataGtm from "../../../utils/DataGtm.mjs";
import * as DS_Toast from "../../../components/common/container/DS_Toast.mjs";
import * as RfqCommon from "./RfqCommon.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as DatePicker from "../../../components/DatePicker.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../../utils/CustomHooks.mjs";
import * as DS_ListItem from "../../../components/common/container/DS_ListItem.mjs";
import * as Router from "next/router";
import * as DS_Accordion from "../../../components/common/container/DS_Accordion.mjs";
import * as IconNotFound from "../../../components/svgs/IconNotFound.mjs";
import * as Authorization from "../../../utils/Authorization.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as DS_BottomDrawer from "../../../components/common/container/DS_BottomDrawer.mjs";
import Format from "date-fns/format";
import * as DS_TopNavigation from "../../../components/common/container/DS_TopNavigation.mjs";
import AddDays from "date-fns/addDays";
import * as Hooks from "react-relay/hooks";
import * as DS_ButtonContainer from "../../../components/common/container/DS_ButtonContainer.mjs";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as RescriptReactErrorBoundary from "@rescript/react/src/RescriptReactErrorBoundary.mjs";
import * as RfqShippingBuyer_Holidays_Query_graphql from "../../../__generated__/RfqShippingBuyer_Holidays_Query_graphql.mjs";
import * as RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql from "../../../__generated__/RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.mjs";
import * as RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql from "../../../__generated__/RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.mjs";
import * as RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql from "../../../__generated__/RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.node, RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.node, RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.node, RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var RfqNextAcceptableDeliveryDateAndTerm_makeVariables = RfqShippingBuyer_RfqNextAcceptableDeliveryDateAndTerm_Query_graphql.Utils.makeVariables;

var RfqNextAcceptableDeliveryDateAndTerm = {
  makeVariables: RfqNextAcceptableDeliveryDateAndTerm_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function use$1(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(RfqShippingBuyer_Holidays_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqShippingBuyer_Holidays_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(RfqShippingBuyer_Holidays_Query_graphql.Internal.convertResponse, data);
}

function useLoader$1(param) {
  var match = Hooks.useQueryLoader(RfqShippingBuyer_Holidays_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, RfqShippingBuyer_Holidays_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch$1(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, RfqShippingBuyer_Holidays_Query_graphql.node, RfqShippingBuyer_Holidays_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: RfqShippingBuyer_Holidays_Query_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised$1(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, RfqShippingBuyer_Holidays_Query_graphql.node, RfqShippingBuyer_Holidays_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(RfqShippingBuyer_Holidays_Query_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded$1(queryRef, param) {
  var data = Hooks.usePreloadedQuery(RfqShippingBuyer_Holidays_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqShippingBuyer_Holidays_Query_graphql.Internal.convertResponse, data);
}

function retain$1(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(RfqShippingBuyer_Holidays_Query_graphql.node, RfqShippingBuyer_Holidays_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Holidays_makeVariables = RfqShippingBuyer_Holidays_Query_graphql.Utils.makeVariables;

var Holidays = {
  makeVariables: Holidays_makeVariables,
  Types: undefined,
  use: use$1,
  useLoader: useLoader$1,
  $$fetch: $$fetch$1,
  fetchPromised: fetchPromised$1,
  usePreloaded: usePreloaded$1,
  retain: retain$1
};

var Query = {
  RfqNextAcceptableDeliveryDateAndTerm: RfqNextAcceptableDeliveryDateAndTerm,
  Holidays: Holidays
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.node,
              variables: RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$2(param) {
  var match = Hooks.useMutation(RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var UpdateDeliveryAddress_errorCode_decode = RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Utils.errorCode_decode;

var UpdateDeliveryAddress_errorCode_fromString = RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Utils.errorCode_fromString;

var UpdateDeliveryAddress_rfqDeliveryMethod_decode = RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Utils.rfqDeliveryMethod_decode;

var UpdateDeliveryAddress_rfqDeliveryMethod_fromString = RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Utils.rfqDeliveryMethod_fromString;

var UpdateDeliveryAddress_rfqRequestStatus_decode = RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Utils.rfqRequestStatus_decode;

var UpdateDeliveryAddress_rfqRequestStatus_fromString = RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Utils.rfqRequestStatus_fromString;

var UpdateDeliveryAddress_make_rfqRequestUpdateInput = RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Utils.make_rfqRequestUpdateInput;

var UpdateDeliveryAddress_makeVariables = RfqShippingBuyer_UpdateDeliveryAddress_Mutation_graphql.Utils.makeVariables;

var UpdateDeliveryAddress = {
  errorCode_decode: UpdateDeliveryAddress_errorCode_decode,
  errorCode_fromString: UpdateDeliveryAddress_errorCode_fromString,
  rfqDeliveryMethod_decode: UpdateDeliveryAddress_rfqDeliveryMethod_decode,
  rfqDeliveryMethod_fromString: UpdateDeliveryAddress_rfqDeliveryMethod_fromString,
  rfqRequestStatus_decode: UpdateDeliveryAddress_rfqRequestStatus_decode,
  rfqRequestStatus_fromString: UpdateDeliveryAddress_rfqRequestStatus_fromString,
  make_rfqRequestUpdateInput: UpdateDeliveryAddress_make_rfqRequestUpdateInput,
  makeVariables: UpdateDeliveryAddress_makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$2
};

function commitMutation$1(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.node,
              variables: RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$3(param) {
  var match = Hooks.useMutation(RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var UpdateTermAgreement_errorCode_decode = RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.Utils.errorCode_decode;

var UpdateTermAgreement_errorCode_fromString = RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.Utils.errorCode_fromString;

var UpdateTermAgreement_makeVariables = RfqShippingBuyer_UpdateTermAgreement_Mutation_graphql.Utils.makeVariables;

var UpdateTermAgreement = {
  errorCode_decode: UpdateTermAgreement_errorCode_decode,
  errorCode_fromString: UpdateTermAgreement_errorCode_fromString,
  makeVariables: UpdateTermAgreement_makeVariables,
  Types: undefined,
  commitMutation: commitMutation$1,
  use: use$3
};

var Mutation = {
  UpdateDeliveryAddress: UpdateDeliveryAddress,
  UpdateTermAgreement: UpdateTermAgreement
};

function convertNumberInputValue(value) {
  return value.replace(/[^0-9]/g, "").replace(/^[0]/g, "");
}

function RfqShipping_Buyer$TriggerListitem(Props) {
  var leftText = Props.leftText;
  var rightText = Props.rightText;
  var hasDividerOpt = Props.hasDivider;
  var hasDivider = hasDividerOpt !== undefined ? hasDividerOpt : true;
  return React.createElement("li", {
              className: Cx.cx([
                    "flex items-center min-h-[56px] mx-5 cursor-pointer",
                    hasDivider ? "border-b-2 border-b-border-disabled" : ""
                  ])
            }, React.createElement("div", {
                  className: "flex flex-col justify-between truncate"
                }, React.createElement("span", {
                      className: "block text-base truncate text-text-L1"
                    }, leftText)), React.createElement("div", {
                  className: "ml-auto pl-2"
                }, React.createElement("div", {
                      className: "flex"
                    }, React.createElement("span", undefined, rightText), React.createElement(DS_Icon.Common.ArrowRightLarge1.make, {
                          height: "24",
                          width: "24",
                          fill: "#999999",
                          className: "accordian-icon-degree-90"
                        }))));
}

var TriggerListitem = {
  make: RfqShipping_Buyer$TriggerListitem
};

function RfqShipping_Buyer$CalendarListitem(Props) {
  var leftText = Props.leftText;
  var currentDate = Props.currentDate;
  var handleChangeDate = Props.handleChangeDate;
  var minDate = Props.minDate;
  var maxDate = Props.maxDate;
  var holidays = Props.holidays;
  var checkHolidays = function (e) {
    var date = Format(e, "yyyy-MM-dd");
    var h = Belt_Array.map(holidays, (function (x) {
            return x.date;
          }));
    return h.includes(date);
  };
  var tmp = {
    id: "date",
    onChange: (function (e) {
        var newDate = e.detail.valueAsDate;
        return handleChangeDate(function (param) {
                    return newDate;
                  });
      }),
    maxDate: Format(maxDate, "yyyy-MM-dd"),
    minDate: Format(minDate, "yyyy-MM-dd"),
    firstDayOfWeek: 0,
    isDateDisabled: (function (e) {
        if (checkHolidays(e)) {
          return true;
        } else if (e.getDay() === 0) {
          return true;
        } else {
          return e.getDay() === 6;
        }
      }),
    onFocus: (function (param) {
        return Belt_Option.forEach(Belt_Option.flatMap(Caml_option.nullable_to_opt(document.getElementById("date")), Webapi__Dom__Element.asHtmlElement), (function (inputEl$p) {
                      inputEl$p.blur();
                      
                    }));
      })
  };
  if (currentDate !== undefined) {
    tmp.date = Caml_option.valFromOption(currentDate);
  }
  return React.createElement("li", {
              className: "flex items-center min-h-[56px] mx-5 cursor-pointer border-b-2 border-b-border-disabled"
            }, React.createElement("div", {
                  className: "flex flex-col justify-between truncate"
                }, React.createElement("span", {
                      className: "block text-base truncate text-text-L1"
                    }, leftText)), React.createElement("div", {
                  className: "ml-auto pl-2"
                }, React.createElement(DatePicker.make, tmp)));
}

var CalendarListitem = {
  make: RfqShipping_Buyer$CalendarListitem
};

function RfqShipping_Buyer$DeliveryMethodContent(Props) {
  var currentDeliveryMethod = Props.currentDeliveryMethod;
  var handleChangeDeliveryMethod = Props.handleChangeDeliveryMethod;
  var datas = [
    {
      method: "WAREHOUSE_TRANSFER",
      title: "창고이체",
      text: "보관료를 지불하시면 창고에 보관해드려요"
    },
    {
      method: "DIRECT_DELIVERY",
      title: "포장배송",
      text: "포장해서 보내드려요"
    },
    {
      method: "WAREHOUSE_PICKUP",
      title: "창고수령",
      text: "직접 창고로 오셔서 수령하는 방식이에요"
    }
  ];
  return React.createElement("ul", undefined, Belt_Array.mapWithIndex(datas, (function (index, data) {
                    var isSelected = data.method === currentDeliveryMethod.method;
                    return React.createElement("li", {
                                key: String(index),
                                className: "bg-surface flex items-center min-h-[48px] px-5 py-4 cursor-pointer ",
                                onClick: (function (param) {
                                    return handleChangeDeliveryMethod(function (param) {
                                                return data;
                                              });
                                  })
                              }, React.createElement("div", {
                                    className: "flex flex-col justify-between truncate"
                                  }, React.createElement("span", {
                                        className: "block text-base truncate text-text-L1 font-bold"
                                      }, data.title), React.createElement("span", {
                                        className: "block text-base truncate  font-normal text-text-L2"
                                      }, data.text)), React.createElement("div", {
                                    className: "ml-auto pl-2"
                                  }, isSelected ? React.createElement(DS_Icon.Common.RadioOnLarge1.make, {
                                          height: "24",
                                          width: "24",
                                          fill: "#12B564"
                                        }) : React.createElement(DS_Icon.Common.RadioOffLarge1.make, {
                                          height: "24",
                                          width: "24",
                                          fill: "#B2B2B2"
                                        })));
                  })));
}

var DeliveryMethodContent = {
  make: RfqShipping_Buyer$DeliveryMethodContent
};

function RfqShipping_Buyer$SearchAddress(Props) {
  var onComplete = Props.onComplete;
  var isShow = Props.isShow;
  React.useLayoutEffect((function () {
          if (isShow) {
            var iframeWrapper = document.getElementById("iframe-embed-addr");
            var bodyElement = document.querySelector("body");
            if (!(iframeWrapper == null) && !(bodyElement == null)) {
              var w = iframeWrapper.clientWidth;
              var h = bodyElement.clientHeight - 56 | 0;
              var option = {
                oncomplete: onComplete,
                width: w,
                height: h
              };
              var daumPostCode = new (daum.Postcode)(option);
              var openOption = {
                q: "",
                autoClose: true
              };
              daumPostCode.embed(iframeWrapper, openOption);
              iframeWrapper.setAttribute("style", "display: block;");
            }
            
          }
          
        }), [isShow]);
  return React.createElement("div", {
              id: "iframe-embed-addr"
            });
}

var SearchAddress = {
  make: RfqShipping_Buyer$SearchAddress
};

function RfqShipping_Buyer$AddressDrawer(Props) {
  var onComplete = Props.onComplete;
  var closeDrawer = Props.closeDrawer;
  var isShow = Props.isShow;
  return React.createElement(DS_BottomDrawer.Root.make, {
              isShow: isShow,
              onClose: (function (param) {
                  return Curry._1(closeDrawer, undefined);
                }),
              children: null,
              full: true
            }, React.createElement(DS_BottomDrawer.Header.make, {}), React.createElement(DS_BottomDrawer.Body.make, {
                  children: React.createElement(RescriptReactErrorBoundary.make, {
                        children: React.createElement(RfqShipping_Buyer$SearchAddress, {
                              onComplete: onComplete,
                              isShow: isShow
                            }),
                        fallback: (function (param) {
                            return React.createElement("div", {
                                        className: "flex items-center justify-center"
                                      }, React.createElement("contents", {
                                            className: "flex flex-col items-center justify-center"
                                          }, React.createElement(IconNotFound.make, {
                                                width: "160",
                                                height: "160"
                                              }), React.createElement("h1", {
                                                className: "mt-7 text-2xl text-gray-800 font-bold"
                                              }, "처리중 오류가 발생하였습니다."), React.createElement("span", {
                                                className: "mt-4 text-gray-800"
                                              }, "페이지를 불러오는 중에 문제가 발생하였습니다."), React.createElement("span", {
                                                className: "text-gray-800"
                                              }, "잠시 후 재시도해 주세요.")));
                          })
                      })
                }));
}

var AddressDrawer = {
  make: RfqShipping_Buyer$AddressDrawer
};

function RfqShipping_Buyer$AddressButton(Props) {
  var leftText = Props.leftText;
  var rightText = Props.rightText;
  var handleClick = Props.handleClick;
  return React.createElement("li", {
              className: "flex items-center min-h-[56px] mx-5 cursor-pointer border-b-2 border-b-border-disabled",
              onClick: handleClick
            }, React.createElement("div", {
                  className: "flex flex-col justify-between truncate"
                }, React.createElement("span", {
                      className: "block text-base truncate text-text-L1"
                    }, leftText)), React.createElement("div", {
                  className: "ml-auto pl-2"
                }, React.createElement("div", {
                      className: "flex"
                    }, React.createElement("span", undefined, rightText), React.createElement(DS_Icon.Common.ArrowRightLarge1.make, {
                          height: "24",
                          width: "24",
                          fill: "#999999"
                        }))));
}

var AddressButton = {
  make: RfqShipping_Buyer$AddressButton
};

function RfqShipping_Buyer$DeliveryCycleContent(Props) {
  var currentDeliveryCycle = Props.currentDeliveryCycle;
  var handleChangeDeliveryCycle = Props.handleChangeDeliveryCycle;
  var arr = [
    {
      key: "once",
      text: "안 함 (1회 주문)",
      value: "안 함 (1회 주문)",
      dayCount: "1"
    },
    {
      key: "1week",
      text: "1주에 한 번",
      value: "1주에 한 번",
      dayCount: "7"
    },
    {
      key: "2week",
      text: "2주에 한 번",
      value: "2주에 한 번",
      dayCount: "14"
    },
    {
      key: "3week",
      text: "3주에 한 번",
      value: "3주에 한 번",
      dayCount: "21"
    },
    {
      key: "1month",
      text: "1개월에 한 번",
      value: "1개월에 한 번",
      dayCount: "30"
    },
    {
      key: "2month",
      text: "2개월에 한 번",
      value: "2개월에 한 번",
      dayCount: "60"
    },
    {
      key: "3month",
      text: "3개월에 한 번",
      value: "3개월에 한 번",
      dayCount: "90"
    }
  ];
  return React.createElement("div", {
              className: "bg-surface"
            }, Belt_Array.map(arr, (function (data) {
                    var isSelected = currentDeliveryCycle.key === data.key;
                    return React.createElement(React.Fragment, {
                                children: React.createElement("li", {
                                      className: "flex py-4 items-center min-h-[48px] px-5 cursor-pointer ",
                                      onClick: (function (param) {
                                          return handleChangeDeliveryCycle(function (param) {
                                                      return data;
                                                    });
                                        })
                                    }, React.createElement("div", {
                                          className: "flex flex-col justify-between truncate"
                                        }, React.createElement("span", {
                                              className: "block text-base truncate text-text-L1"
                                            }, data.text)), React.createElement("div", {
                                          className: "ml-auto pl-2"
                                        }, isSelected ? React.createElement(DS_Icon.Common.RadioOnLarge1.make, {
                                                height: "24",
                                                width: "24",
                                                fill: "#12B564"
                                              }) : React.createElement(DS_Icon.Common.RadioOffLarge1.make, {
                                                height: "24",
                                                width: "24",
                                                fill: "#B2B2B2"
                                              }))),
                                key: data.key
                              });
                  })));
}

var DeliveryCycleContent = {
  make: RfqShipping_Buyer$DeliveryCycleContent
};

function RfqShipping_Buyer$Shipping(Props) {
  var requestId = Props.requestId;
  CustomHooks.useSmoothScroll(undefined);
  var router = Router.useRouter();
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  React.useEffect((function () {
          DataGtm.push({
                event: "Expose_view_RFQ_Livestock_ShippingInfo"
              });
          
        }), []);
  var match$1 = use(undefined, undefined, undefined, undefined, undefined);
  var minDateString = match$1.rfqNextAcceptableDeliveryDate.date;
  var isTermAgree = Belt_Array.keep(Belt_Array.map(match$1.terms.edges, (function (x) {
              return x.node.agreement;
            })), (function (x) {
          return x === "rfq";
        })).length !== 0;
  var minDate = new Date(minDateString);
  var maxDate = AddDays(minDate, 30);
  var maxDateString = Format(maxDate, "yyyy-MM-dd");
  var match$2 = use$1({
        startDate: minDateString,
        endDate: maxDateString
      }, undefined, undefined, undefined, undefined);
  var match$3 = use$2(undefined);
  var updateRfqRequest = match$3[0];
  var match$4 = use$3(undefined);
  var updateTermAgreement = match$4[0];
  var match$5 = React.useState(function () {
        return false;
      });
  var setIsAddressDrawerShow = match$5[1];
  var match$6 = React.useState(function () {
        
      });
  var selectedDeliveryDate = match$6[0];
  var match$7 = React.useState(function () {
        return {
                method: "",
                title: "선택해주세요",
                text: ""
              };
      });
  var selectedDeliveryMethod = match$7[0];
  var match$8 = React.useState(function () {
        return {
                key: "none",
                text: "선택해주세요",
                value: "",
                dayCount: ""
              };
      });
  var deliveryCycle = match$8[0];
  var match$9 = React.useState(function () {
        return "";
      });
  var setDeliveryAddress = match$9[1];
  var deliveryAddress = match$9[0];
  var match$10 = React.useState(function () {
        return false;
      });
  var setIsAgreedPrivacyPolicy = match$10[1];
  var isAgreedPrivacyPolicy = match$10[0];
  var deliveryMethodRef = React.useRef(null);
  var deliveryCycleRef = React.useRef(null);
  var scrollToTargetItem = function (text) {
    var moveScroll = function (el) {
      setTimeout((function (param) {
              var rectArray = el.getClientRects();
              var rect = Belt_Array.getExn(Array.prototype.slice.call(rectArray), 0);
              var top = rect.top;
              var currentScrollY = window.scrollY;
              var targetScrollY = top + currentScrollY - 56;
              window.scrollTo(0.0, targetScrollY);
              
            }), 350);
      
    };
    switch (text) {
      case "deliveryCycle" :
          var el = deliveryCycleRef.current;
          if (!(el == null)) {
            return moveScroll(el);
          } else {
            return ;
          }
      case "deliveryMethod" :
          var el$1 = deliveryMethodRef.current;
          if (!(el$1 == null)) {
            return moveScroll(el$1);
          } else {
            return ;
          }
      default:
        return ;
    }
  };
  var toggleDrawer = function (param) {
    return setIsAddressDrawerShow(function (prev) {
                return !prev;
              });
  };
  var onCompleteAddressDrawer = function (data) {
    var newAddress = (data.sido + " " + data.sigungu + " " + data.bname).trim();
    setDeliveryAddress(function (param) {
          return newAddress;
        });
    return setIsAddressDrawerShow(function (prev) {
                return !prev;
              });
  };
  var validDeliveryCycle = convertNumberInputValue(deliveryCycle.dayCount);
  var match$11 = selectedDeliveryMethod.method !== "";
  var match$12 = validDeliveryCycle !== "0" && validDeliveryCycle !== "";
  var match$13 = deliveryAddress !== "";
  var match$14 = isAgreedPrivacyPolicy || isTermAgree;
  var isValidItems = selectedDeliveryDate !== undefined && match$11 && match$12 && match$13 && match$14 ? true : false;
  var handleUpdateRfqRequest = function (param) {
    DataGtm.push({
          event: "Click_RFQ_Livestock_ShippingInfo"
        });
    var match = selectedDeliveryMethod.method;
    var deliveryMethod;
    switch (match) {
      case "DIRECT_DELIVERY" :
          deliveryMethod = "DIRECT_DELIVERY";
          break;
      case "WAREHOUSE_PICKUP" :
          deliveryMethod = "WAREHOUSE_PICKUP";
          break;
      case "WAREHOUSE_TRANSFER" :
          deliveryMethod = "WAREHOUSE_TRANSFER";
          break;
      default:
        deliveryMethod = undefined;
    }
    var desiredDeliveryDate = Belt_Option.mapWithDefault(selectedDeliveryDate, undefined, (function (date) {
            return date.toISOString();
          }));
    Curry.app(updateRfqRequest, [
          (function (param) {
              return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                          appearance: "error"
                        });
            }),
          (function (param, param$1) {
              var variant = param.updateRfqRequest.NAME;
              if (variant === "UnselectedUnionMember" || variant === "Error") {
                return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                            appearance: "error"
                          });
              } else {
                DataGtm.push({
                      event: "Expose_view_RFQ_Livestock_RequestCompleted"
                    });
                router.push("/buyer/rfq/request/draft/complete");
                return ;
              }
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          {
            id: requestId,
            input: {
              deliveryAddress: deliveryAddress,
              deliveryCycle: deliveryCycle.value,
              deliveryMethod: deliveryMethod,
              desiredDeliveryDate: desiredDeliveryDate,
              status: "READY_TO_REQUEST"
            }
          },
          undefined,
          undefined
        ]);
    
  };
  return React.createElement("div", {
              className: "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl pt-14 pb-[96px] "
            }, React.createElement(DS_TopNavigation.Detail.Root.make, {
                  children: React.createElement(DS_TopNavigation.Detail.Left.make, {
                        children: React.createElement("a", {
                              className: "cursor-pointer",
                              onClick: (function (param) {
                                  window.history.back();
                                  
                                })
                            }, React.createElement(DS_Icon.Common.ArrowLeftXLarge1.make, {
                                  height: "32",
                                  width: "32",
                                  className: "relative"
                                }))
                      }),
                  className: "bg-white z-[1000]"
                }), React.createElement("div", {
                  className: "p-5"
                }, React.createElement("h2", {
                      className: "text-xl font-bold leading-8"
                    }, React.createElement("span", {
                          className: "block"
                        }, "마지막으로"), React.createElement("span", undefined, "배송정보를 알려주세요"))), React.createElement("div", undefined, React.createElement("div", {
                      className: ""
                    }, React.createElement(DS_Accordion.RootSingle.make, {
                          children: null,
                          type: "single",
                          collapsible: true,
                          onValueChange: scrollToTargetItem
                        }, React.createElement(DS_Accordion.Item.make, {
                              children: React.createElement(RfqShipping_Buyer$CalendarListitem, {
                                    leftText: "최초 납품 희망일",
                                    currentDate: selectedDeliveryDate,
                                    handleChangeDate: match$6[1],
                                    minDate: minDate,
                                    maxDate: maxDate,
                                    holidays: match$2.holidays
                                  }),
                              value: "desiredDeliveryDate"
                            }), React.createElement(DS_Accordion.Item.make, {
                              children: null,
                              value: "deliveryMethod"
                            }, React.createElement(DS_Accordion.Header.make, {
                                  children: React.createElement(DS_Accordion.Trigger.make, {
                                        children: React.createElement("div", {
                                              ref: deliveryMethodRef
                                            }, React.createElement(RfqShipping_Buyer$TriggerListitem, {
                                                  leftText: "수령방식",
                                                  rightText: selectedDeliveryMethod.title
                                                })),
                                        className: "w-full"
                                      })
                                }), React.createElement(DS_Accordion.Content.make, {
                                  children: React.createElement(RfqShipping_Buyer$DeliveryMethodContent, {
                                        currentDeliveryMethod: selectedDeliveryMethod,
                                        handleChangeDeliveryMethod: match$7[1]
                                      })
                                })), React.createElement(DS_Accordion.Item.make, {
                              children: React.createElement(RfqShipping_Buyer$AddressButton, {
                                    leftText: "배송지역",
                                    rightText: deliveryAddress === "" ? "선택해주세요" : deliveryAddress,
                                    handleClick: toggleDrawer
                                  }),
                              value: "deliveryAddress"
                            }), React.createElement(DS_Accordion.Item.make, {
                              children: null,
                              value: "deliveryCycle"
                            }, React.createElement(DS_Accordion.Header.make, {
                                  children: React.createElement(DS_Accordion.Trigger.make, {
                                        children: React.createElement("div", {
                                              ref: deliveryCycleRef
                                            }, React.createElement(RfqShipping_Buyer$TriggerListitem, {
                                                  leftText: "정기배송 여부",
                                                  rightText: deliveryCycle.text,
                                                  hasDivider: false
                                                })),
                                        className: "w-full"
                                      })
                                }), React.createElement(DS_Accordion.Content.make, {
                                  children: React.createElement(RfqShipping_Buyer$DeliveryCycleContent, {
                                        currentDeliveryCycle: deliveryCycle,
                                        handleChangeDeliveryCycle: match$8[1]
                                      })
                                })))), isTermAgree ? null : React.createElement(React.Fragment, undefined, React.createElement("div", {
                            className: "h-3 bg-border-default-L2"
                          }), React.createElement("div", {
                            className: "pt-7"
                          }, React.createElement("button", {
                                className: "text-left tab-highlight-color",
                                onClick: (function (param) {
                                    return setIsAgreedPrivacyPolicy(function (prev) {
                                                return !prev;
                                              });
                                  })
                              }, React.createElement(DS_ListItem.Information1.make, {
                                    children: React.createElement(DS_ListItem.Information1.Left.make, {
                                          children: isAgreedPrivacyPolicy ? React.createElement(DS_Icon.Common.CheckedLarge1.make, {
                                                  height: "24",
                                                  width: "24",
                                                  fill: "#12B564"
                                                }) : React.createElement(DS_Icon.Common.UncheckedLarge1.make, {
                                                  height: "24",
                                                  width: "24"
                                                })
                                        }),
                                    title: "개인정보 제공에 동의해주세요",
                                    content: React.createElement("p", {
                                          className: "pl-8 text-[13px] text-enabled-L2 leading-5 tracking-tight"
                                        }, React.createElement("div", undefined, "(주)그린랩스는 다음과 같은 목적으로 개인정보를 수집합니다."), React.createElement("div", undefined, "1. 개인정보 수집 항목 : 주소"), React.createElement("div", undefined, "2. 개인정보 수집 목적 : 견적요청 서비스 이용 (농산, 축산, 수산)"), React.createElement("div", undefined, "3. 개인정보의 보유 및 이용 기간 : ", React.createElement("span", {
                                                  className: "font-bold text-base"
                                                }, "회원탈퇴 시 즉시 파기"), " 이용자는 동의를 거부할 권리가 있습니다. 다만, 이에 동의하지 않을 경우 견적요청 서비스 이용이 어려울 수 있습니다."))
                                  }))))), React.createElement(DS_ButtonContainer.Floating1.make, {
                  label: "견적요청하기",
                  disabled: !isValidItems || match$3[1],
                  onClick: (function (param) {
                      if (isTermAgree) {
                        return handleUpdateRfqRequest(undefined);
                      } else {
                        Curry.app(updateTermAgreement, [
                              (function (param) {
                                  return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                                              appearance: "error"
                                            });
                                }),
                              (function (param, param$1) {
                                  var variant = param.createTerm.NAME;
                                  if (variant === "UnselectedUnionMember" || variant === "Error") {
                                    return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                                                appearance: "error"
                                              });
                                  } else {
                                    return handleUpdateRfqRequest(undefined);
                                  }
                                }),
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              {
                                agreement: "rfq"
                              },
                              undefined,
                              undefined
                            ]);
                        return ;
                      }
                    }),
                  dataGtm: "Click_RFQ_Livestock_ShippingInfo"
                }), React.createElement(RfqShipping_Buyer$AddressDrawer, {
                  onComplete: onCompleteAddressDrawer,
                  closeDrawer: toggleDrawer,
                  isShow: match$5[0]
                }));
}

var Shipping = {
  make: RfqShipping_Buyer$Shipping
};

function RfqShipping_Buyer(Props) {
  var requestId = Props.requestId;
  var router = Router.useRouter();
  if (requestId !== undefined) {
    return React.createElement(Authorization.Buyer.make, {
                children: React.createElement(React.Suspense, {
                      children: React.createElement(RfqCommon.CheckBuyerRequestStatus.make, {
                            children: React.createElement(RfqShipping_Buyer$Shipping, {
                                  requestId: requestId
                                }),
                            requestId: requestId
                          }),
                      fallback: React.createElement("div", undefined)
                    }),
                title: "바이어 견적 요청",
                fallback: null
              });
  } else {
    React.useEffect((function () {
            router.push("/buyer/rfq");
            
          }), []);
    return null;
  }
}

var make = RfqShipping_Buyer;

export {
  Query ,
  Mutation ,
  convertNumberInputValue ,
  TriggerListitem ,
  CalendarListitem ,
  DeliveryMethodContent ,
  SearchAddress ,
  AddressDrawer ,
  AddressButton ,
  DeliveryCycleContent ,
  Shipping ,
  make ,
  
}
/* react Not a pure module */
