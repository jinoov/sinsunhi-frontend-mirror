// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Intl from "../../../bindings/intl.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import Uniqid from "uniqid";
import * as DS_Card from "../../../components/common/element/DS_Card.mjs";
import * as DS_Icon from "../../../components/svgs/DS_Icon.mjs";
import * as DataGtm from "../../../utils/DataGtm.mjs";
import * as DS_Title from "../../../components/common/container/DS_Title.mjs";
import * as DS_Toast from "../../../components/common/container/DS_Toast.mjs";
import * as DS_Button from "../../../components/common/element/DS_Button.mjs";
import * as DS_Dialog from "../../../components/common/container/DS_Dialog.mjs";
import * as RfqCommon from "./RfqCommon.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as DS_ListItem from "../../../components/common/container/DS_ListItem.mjs";
import * as Router from "next/router";
import * as DS_TitleList from "../../../components/common/element/DS_TitleList.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Authorization from "../../../utils/Authorization.mjs";
import * as RfqBasket_Buyer from "./RfqBasket_Buyer.mjs";
import * as DS_TopNavigation from "../../../components/common/container/DS_TopNavigation.mjs";
import * as DS_ButtonContainer from "../../../components/common/container/DS_ButtonContainer.mjs";
import * as ReactToastNotifications from "react-toast-notifications";

function displayStorageMethod(v) {
  if (v === "CHILLED") {
    return "냉장";
  } else if (v === "FROZEN") {
    return "냉동";
  } else if (v === "ANY") {
    return "모두";
  } else if (v === "FREEZE_DRIED") {
    return "동결";
  } else if (v === "OTHER") {
    return "그 외";
  } else {
    return "";
  }
}

function displayPackageMethod(v) {
  if (v === "SPLIT") {
    return "소분";
  } else if (v === "ANY") {
    return "모두";
  } else if (v === "CUT") {
    return "세절";
  } else if (v === "RAW") {
    return "원료육(박스육)";
  } else if (v === "OTHER") {
    return "그 외";
  } else {
    return "";
  }
}

function convertToString(v) {
  if (v === "etc") {
    return "etc";
  } else if (v === "orderAmount") {
    return "orderAmount";
  } else if (v === "grade") {
    return "grade";
  } else if (v === "usage") {
    return "usage";
  } else if (v === "storageMethod") {
    return "storageMethod";
  } else if (v === "brand") {
    return "brand";
  } else if (v === "packageMethod") {
    return "packageMethod";
  } else {
    return "supplyPrice";
  }
}

function numberToComma(n) {
  return Belt_Option.mapWithDefault(Belt_Float.fromString(n), "", (function (x) {
                return $$Intl.Currency.make(x, "ko-KR", undefined, undefined, undefined);
              }));
}

function RfqList_Buyer$List$Item(Props) {
  var title = Props.title;
  var value = Props.value;
  var onClick = Props.onClick;
  return React.createElement(DS_ListItem.Normal1.Item.make, {
              children: null,
              key: Uniqid("rfq-items-")
            }, React.createElement(DS_TitleList.Left.TitleSubtitle1.make, {
                  title1: title,
                  titleStyle: "font-normal text-text-L2"
                }), React.createElement(DS_ListItem.Normal1.RightGroup.make, {
                  children: React.createElement(DS_TitleList.Common.TextIcon1.Root.make, {
                        children: null,
                        onClick: onClick
                      }, Belt_Option.mapWithDefault(value, null, (function (value$p) {
                              return React.createElement(DS_TitleList.Common.TextIcon1.$$Text.make, {
                                          children: value$p,
                                          className: "text-right word-keep-all"
                                        });
                            })), React.createElement(DS_TitleList.Common.TextIcon1.Icon.make, {
                            children: React.createElement(DS_Icon.Common.ArrowRightLarge1.make, {
                                  height: "24",
                                  width: "24",
                                  fill: "#999999"
                                })
                          }))
                }));
}

var Item = {
  make: RfqList_Buyer$List$Item
};

function getItemCountInfo(items) {
  var count = items.length;
  var readyCount = Belt_Array.keep(items, (function (x) {
          return x.status === "READY_TO_REQUEST";
        })).length;
  return [
          readyCount,
          count,
          count !== 0 && count === readyCount
        ];
}

function RfqList_Buyer$List(Props) {
  var requestId = Props.requestId;
  var router = Router.useRouter();
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var queryData = Curry._5(RfqBasket_Buyer.Query.CurrentRequest.use, {
        requestIds: [requestId]
      }, /* NetworkOnly */3, undefined, undefined, undefined);
  var match$1 = Curry._1(RfqBasket_Buyer.Fragment.RequestItemsMeat.usePagination, queryData.fragmentRefs);
  var data = match$1.data;
  var match$2 = Curry._1(RfqBasket_Buyer.Mutation.DeleteRequestItemsMeat.use, undefined);
  var deleteRequestItemMeat = match$2[0];
  var arrItem = Curry._1(RfqBasket_Buyer.Fragment.RequestItemsMeat.getConnectionNodes, data.rfqRequestItemsMeat);
  React.useEffect((function () {
          DataGtm.push({
                event: "Expose_view_RFQ_Livestock_PartList"
              });
          
        }), []);
  var handleMove = function (itemId) {
    router.push(itemId !== undefined ? "/buyer/rfq/request/draft/apply?itemId=" + itemId + "&requestId=" + requestId : "/buyer/rfq/request/draft/basket?requestId=" + requestId);
    
  };
  var handleMoveDetail = function (itemId, step, param) {
    router.push("/buyer/rfq/request/draft/apply?itemId=" + itemId + "&requestId=" + requestId + "&step=" + convertToString(step));
    
  };
  var match$3 = getItemCountInfo(arrItem);
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl pt-11 bg-gray-50"
                }, React.createElement(DS_TopNavigation.Detail.Root.make, {
                      children: React.createElement(DS_TopNavigation.Detail.Left.make, {
                            children: React.createElement("a", {
                                  className: "cursor-pointer",
                                  onClick: (function (param) {
                                      router.push("/buyer/rfq/request/draft/basket?requestId=" + requestId + "&from=list");
                                      
                                    })
                                }, React.createElement(DS_Icon.Common.ArrowLeftXLarge1.make, {
                                      height: "32",
                                      width: "32",
                                      className: "relative"
                                    }))
                          }),
                      bgClassName: "bg-gray-50"
                    }), React.createElement("div", undefined, React.createElement(DS_Title.Normal1.Root.make, {
                          children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                                title1: "선택하신 상품의",
                                title2: "견적요청서를 작성해주세요"
                              }),
                          className: "mt-7"
                        }), React.createElement("section", {
                          className: "mt-7"
                        }, React.createElement(DS_ListItem.Normal1.Root.make, {
                              children: React.createElement(DS_ListItem.Normal1.Item.make, {
                                    children: null
                                  }, React.createElement(DS_ListItem.Normal1.TextGroup.make, {
                                        title1: "" + match$3[0] + "개 작성 / " + match$3[1] + "개",
                                        titleStyle: "text-base leading-6 text-enabled-L2"
                                      }), React.createElement(DS_ListItem.Normal1.RightGroup.make, {
                                        children: React.createElement(DS_TitleList.Common.TextIcon1.Root.make, {
                                              children: null
                                            }, React.createElement(DS_TitleList.Common.TextIcon1.$$Text.make, {
                                                  children: "저장됨",
                                                  className: "text-[13px] leading-5 text-enabled-L2"
                                                }), React.createElement(DS_TitleList.Common.TextIcon1.Icon.make, {
                                                  children: React.createElement(DS_Icon.Common.LineCheckedMedium1.make, {
                                                        height: "16",
                                                        width: "16",
                                                        fill: "#999999"
                                                      })
                                                }))
                                      }))
                            }), React.createElement(DS_Card.Infomation1.Root.make, {
                              children: Belt_Array.map(arrItem, (function (node) {
                                      var species = node.species;
                                      var part = node.part;
                                      var itemId = node.id;
                                      var match = Belt_Option.map(node.species, (function (x) {
                                              return x.code;
                                            }));
                                      var match$1 = Belt_Option.map(node.part, (function (x) {
                                              return x.isDomestic;
                                            }));
                                      var isSkipGrade;
                                      if (match !== undefined && match$1 !== undefined) {
                                        switch (match) {
                                          case "CHICKEN" :
                                              isSkipGrade = true;
                                              break;
                                          case "PORK" :
                                              isSkipGrade = match$1 ? false : true;
                                              break;
                                          default:
                                            isSkipGrade = false;
                                        }
                                      } else {
                                        isSkipGrade = false;
                                      }
                                      return React.createElement(DS_Card.Infomation1.Content.make, {
                                                  children: null,
                                                  key: Uniqid("rfq-card-items-")
                                                }, React.createElement(DS_Card.Infomation1.MainList.make, {
                                                      children: null,
                                                      className: "px-5 flex justify-between items-start cursor-pointer",
                                                      onClick: (function (param) {
                                                          return handleMove(itemId);
                                                        })
                                                    }, React.createElement(DS_TitleList.Left.Title3Subtitle1.make, {
                                                          title1: Belt_Option.mapWithDefault(species, "", (function (x) {
                                                                  return x.shortName;
                                                                })),
                                                          title2: Belt_Option.mapWithDefault(part, "", (function (x) {
                                                                  return x.name;
                                                                })),
                                                          title3: Belt_Option.mapWithDefault(part, "", (function (x) {
                                                                  if (x.isDomestic) {
                                                                    return "국내";
                                                                  } else {
                                                                    return "수입";
                                                                  }
                                                                }))
                                                        }), React.createElement("div", {
                                                          onClick: (function (e) {
                                                              e.preventDefault();
                                                              e.stopPropagation();
                                                              
                                                            })
                                                        }, React.createElement(DS_Dialog.Popup.Root.make, {
                                                              children: null
                                                            }, React.createElement(DS_Dialog.Popup.Trigger.make, {
                                                                  children: React.createElement(DataGtm.make, {
                                                                        children: React.createElement("div", {
                                                                              className: "flex justify-start items-center space-x-1 cursor-pointer"
                                                                            }, React.createElement(DS_Icon.Common.DeleteMedium1.make, {
                                                                                  height: "16",
                                                                                  width: "16",
                                                                                  fill: "#727272"
                                                                                }), React.createElement("span", {
                                                                                  className: "text-[13px] leading-5 text-enabled-L2 truncate"
                                                                                }, "삭제")),
                                                                        dataGtm: "Delete_RFQ_Livestock_RequestList"
                                                                      }),
                                                                  asChild: false
                                                                }), React.createElement(DS_Dialog.Popup.Portal.make, {
                                                                  children: null
                                                                }, React.createElement(DS_Dialog.Popup.Overlay.make, {}), React.createElement(DS_Dialog.Popup.Content.make, {
                                                                      children: null
                                                                    }, React.createElement(DS_Dialog.Popup.Title.make, {
                                                                          children: "아래 부위를 삭제할까요?"
                                                                        }), React.createElement(DS_Dialog.Popup.Description.make, {
                                                                          children: Belt_Option.mapWithDefault(species, "", (function (x) {
                                                                                  return x.shortName;
                                                                                })) + " / " + Belt_Option.mapWithDefault(part, "", (function (x) {
                                                                                  return x.name;
                                                                                })) + " / " + Belt_Option.mapWithDefault(part, "", (function (x) {
                                                                                  if (x.isDomestic) {
                                                                                    return "국내";
                                                                                  } else {
                                                                                    return "수입";
                                                                                  }
                                                                                }))
                                                                        }), React.createElement(DS_Dialog.Popup.Buttons.make, {
                                                                          children: null
                                                                        }, React.createElement(DS_Dialog.Popup.Close.make, {
                                                                              children: React.createElement(DS_Button.Normal.Large1.make, {
                                                                                    label: "아니오",
                                                                                    buttonType: "white"
                                                                                  }),
                                                                              asChild: true
                                                                            }), React.createElement(DS_Dialog.Popup.Close.make, {
                                                                              children: React.createElement(DS_Button.Normal.Large1.make, {
                                                                                    label: "네",
                                                                                    onClick: (function (param) {
                                                                                        Curry.app(deleteRequestItemMeat, [
                                                                                              undefined,
                                                                                              (function (param, param$1) {
                                                                                                  var variant = param.deleteRfqRequestItemsMeat.NAME;
                                                                                                  if (variant === "UnselectedUnionMember" || variant === "Error") {
                                                                                                    return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                                                                                                                appearance: "error"
                                                                                                              });
                                                                                                  } else {
                                                                                                    return addToast(DS_Toast.getToastComponent("삭제되었습니다.", "succ"), {
                                                                                                                appearance: "success"
                                                                                                              });
                                                                                                  }
                                                                                                }),
                                                                                              undefined,
                                                                                              undefined,
                                                                                              undefined,
                                                                                              undefined,
                                                                                              {
                                                                                                id: itemId,
                                                                                                connections: [data.rfqRequestItemsMeat.__id]
                                                                                              },
                                                                                              undefined,
                                                                                              undefined
                                                                                            ]);
                                                                                        
                                                                                      })
                                                                                  }),
                                                                              asChild: true
                                                                            }))))))), Belt_Option.isSome(node.grade) ? React.createElement(DS_Card.Infomation1.SubList.make, {
                                                        children: React.createElement(DS_ListItem.Normal1.Root.make, {
                                                              children: null,
                                                              className: "space-y-3.5"
                                                            }, Belt_Option.mapWithDefault(node.packageMethod, null, (function (x) {
                                                                    return React.createElement(RfqList_Buyer$List$Item, {
                                                                                title: "포장상태",
                                                                                value: displayPackageMethod(x),
                                                                                onClick: (function (param) {
                                                                                    return handleMoveDetail(itemId, "packageMethod", param);
                                                                                  })
                                                                              });
                                                                  })), isSkipGrade ? null : Belt_Option.mapWithDefault(node.grade, null, (function (x) {
                                                                      return React.createElement(React.Fragment, undefined, React.createElement(RfqList_Buyer$List$Item, {
                                                                                      title: "등급",
                                                                                      value: x.grade,
                                                                                      onClick: (function (param) {
                                                                                          return handleMoveDetail(itemId, "grade", param);
                                                                                        })
                                                                                    }));
                                                                    })), Belt_Option.mapWithDefault(node.weightKg, null, (function (x) {
                                                                    return React.createElement(RfqList_Buyer$List$Item, {
                                                                                title: "주문량",
                                                                                value: numberToComma(Garter_Array.firstExn(x.split("."))) + " kg",
                                                                                onClick: (function (param) {
                                                                                    return handleMoveDetail(itemId, "orderAmount", param);
                                                                                  })
                                                                              });
                                                                  })), Garter_Array.isEmpty(node.usages.edges) ? null : React.createElement(RfqList_Buyer$List$Item, {
                                                                    title: "사용용도",
                                                                    value: Belt_Array.map(node.usages.edges, (function (edge) {
                                                                              return edge.node.name;
                                                                            })).join(", "),
                                                                    onClick: (function (param) {
                                                                        return handleMoveDetail(itemId, "usage", param);
                                                                      })
                                                                  }), Belt_Option.mapWithDefault(node.storageMethod, null, (function (x) {
                                                                    return React.createElement(RfqList_Buyer$List$Item, {
                                                                                title: "보관상태",
                                                                                value: displayStorageMethod(x),
                                                                                onClick: (function (param) {
                                                                                    return handleMoveDetail(itemId, "storageMethod", param);
                                                                                  })
                                                                              });
                                                                  })), node.prevTradeSellerName === "" ? null : React.createElement(RfqList_Buyer$List$Item, {
                                                                    title: "기존공급처",
                                                                    value: node.prevTradeSellerName,
                                                                    onClick: (function (param) {
                                                                        return handleMoveDetail(itemId, "supplyPrice", param);
                                                                      })
                                                                  }), Belt_Option.mapWithDefault(node.prevTradePricePerKg, null, (function (x) {
                                                                    return React.createElement(RfqList_Buyer$List$Item, {
                                                                                title: "기존공급가",
                                                                                value: numberToComma(String(x)) + "원/kg",
                                                                                onClick: (function (param) {
                                                                                    return handleMoveDetail(itemId, "supplyPrice", param);
                                                                                  })
                                                                              });
                                                                  })), node.preferredBrand === "" ? null : React.createElement(RfqList_Buyer$List$Item, {
                                                                    title: "선호브랜드",
                                                                    value: node.preferredBrand,
                                                                    onClick: (function (param) {
                                                                        return handleMoveDetail(itemId, "brand", param);
                                                                      })
                                                                  }), node.otherRequirements === "" ? null : React.createElement(RfqList_Buyer$List$Item, {
                                                                    title: "기타 요청사항",
                                                                    onClick: (function (param) {
                                                                        return handleMoveDetail(itemId, "etc", param);
                                                                      })
                                                                  }))
                                                      }) : React.createElement(DataGtm.make, {
                                                        children: React.createElement("div", {
                                                              className: "px-5 mt-5 flex justify-center cursor-pointer",
                                                              onClick: (function (param) {
                                                                  return handleMove(itemId);
                                                                })
                                                            }, React.createElement("span", {
                                                                  className: "text-primary"
                                                                }, "상세 요청사항 입력하기"), React.createElement(DS_Icon.Common.ArrowRightLarge1.make, {
                                                                  height: "24",
                                                                  width: "24",
                                                                  fill: "#999999"
                                                                })),
                                                        dataGtm: "Input_RFQ_Livestock_RequestList"
                                                      }));
                                    })),
                              className: "mt-9"
                            }), React.createElement(DataGtm.make, {
                              children: React.createElement("button", {
                                    className: "w-full py-3 flex justify-center items-center gap-1 leading-6 cursor-pointer mt-4 text-enabled-L2 pb-[104px] tab-highlight-color",
                                    onClick: (function (param) {
                                        return handleMove(undefined);
                                      })
                                  }, React.createElement(DS_Icon.Common.PlusSmall1.make, {
                                        height: "12",
                                        width: "12",
                                        fill: "#727272"
                                      }), "부위 추가 하기"),
                              dataGtm: "Create_RFQ_Livestock_RequestList"
                            })))), React.createElement(DS_ButtonContainer.Floating1.make, {
                  label: "작성 완료",
                  disabled: !match$3[2],
                  onClick: (function (param) {
                      router.push("/buyer/rfq/request/draft/shipping?requestId=" + requestId);
                      
                    }),
                  dataGtm: "Click_RFQ_Livestock_PartList"
                }));
}

var List = {
  Item: Item,
  getItemCountInfo: getItemCountInfo,
  make: RfqList_Buyer$List
};

function RfqList_Buyer(Props) {
  var requestId = Props.requestId;
  var router = Router.useRouter();
  if (requestId !== undefined) {
    return React.createElement(Authorization.Buyer.make, {
                children: React.createElement(React.Suspense, {
                      children: React.createElement(RfqCommon.CheckBuyerRequestStatus.make, {
                            children: React.createElement(RfqList_Buyer$List, {
                                  requestId: requestId
                                }),
                            requestId: requestId
                          }),
                      fallback: React.createElement("div", undefined)
                    }),
                title: "바이어 견적 요청",
                fallback: null
              });
  } else {
    React.useEffect((function () {
            router.push("/buyer/rfq");
            
          }), []);
    return null;
  }
}

var Query;

var Fragment;

var Fragment_type;

var Mutation;

var make = RfqList_Buyer;

export {
  Query ,
  Fragment ,
  Fragment_type ,
  Mutation ,
  displayStorageMethod ,
  displayPackageMethod ,
  convertToString ,
  numberToComma ,
  List ,
  make ,
  
}
/* react Not a pure module */
