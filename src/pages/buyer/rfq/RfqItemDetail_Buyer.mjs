// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../../constants/Env.mjs";
import * as $$Intl from "../../../bindings/intl.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as DS_Tab from "../../../components/common/container/DS_Tab.mjs";
import * as Global from "../../../components/Global.mjs";
import * as DS_Icon from "../../../components/svgs/DS_Icon.mjs";
import * as DataGtm from "../../../utils/DataGtm.mjs";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as DS_Title from "../../../components/common/container/DS_Title.mjs";
import * as DS_Toast from "../../../components/common/container/DS_Toast.mjs";
import * as DS_Button from "../../../components/common/element/DS_Button.mjs";
import * as DS_Dialog from "../../../components/common/container/DS_Dialog.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as DS_TitleList from "../../../components/common/element/DS_TitleList.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Authorization from "../../../utils/Authorization.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as DS_BottomDrawer from "../../../components/common/container/DS_BottomDrawer.mjs";
import Format from "date-fns/format";
import * as DS_TopNavigation from "../../../components/common/container/DS_TopNavigation.mjs";
import * as Hooks from "react-relay/hooks";
import * as DS_ButtonContainer from "../../../components/common/container/DS_ButtonContainer.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as RfqItemDetailBuyer_Current_Item_Query_graphql from "../../../__generated__/RfqItemDetailBuyer_Current_Item_Query_graphql.mjs";
import * as RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql from "../../../__generated__/RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(RfqItemDetailBuyer_Current_Item_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqItemDetailBuyer_Current_Item_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(RfqItemDetailBuyer_Current_Item_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(RfqItemDetailBuyer_Current_Item_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, RfqItemDetailBuyer_Current_Item_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, RfqItemDetailBuyer_Current_Item_Query_graphql.node, RfqItemDetailBuyer_Current_Item_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: RfqItemDetailBuyer_Current_Item_Query_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, RfqItemDetailBuyer_Current_Item_Query_graphql.node, RfqItemDetailBuyer_Current_Item_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(RfqItemDetailBuyer_Current_Item_Query_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(RfqItemDetailBuyer_Current_Item_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqItemDetailBuyer_Current_Item_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(RfqItemDetailBuyer_Current_Item_Query_graphql.node, RfqItemDetailBuyer_Current_Item_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_rfqDeliveryMethod_decode = RfqItemDetailBuyer_Current_Item_Query_graphql.Utils.rfqDeliveryMethod_decode;

var Query_rfqDeliveryMethod_fromString = RfqItemDetailBuyer_Current_Item_Query_graphql.Utils.rfqDeliveryMethod_fromString;

var Query_rfqMeatPackageMethod_decode = RfqItemDetailBuyer_Current_Item_Query_graphql.Utils.rfqMeatPackageMethod_decode;

var Query_rfqMeatPackageMethod_fromString = RfqItemDetailBuyer_Current_Item_Query_graphql.Utils.rfqMeatPackageMethod_fromString;

var Query_rfqMeatStorageMethod_decode = RfqItemDetailBuyer_Current_Item_Query_graphql.Utils.rfqMeatStorageMethod_decode;

var Query_rfqMeatStorageMethod_fromString = RfqItemDetailBuyer_Current_Item_Query_graphql.Utils.rfqMeatStorageMethod_fromString;

var Query_rfqRequestItemStatus_decode = RfqItemDetailBuyer_Current_Item_Query_graphql.Utils.rfqRequestItemStatus_decode;

var Query_rfqRequestItemStatus_fromString = RfqItemDetailBuyer_Current_Item_Query_graphql.Utils.rfqRequestItemStatus_fromString;

var Query_makeVariables = RfqItemDetailBuyer_Current_Item_Query_graphql.Utils.makeVariables;

var Query = {
  rfqDeliveryMethod_decode: Query_rfqDeliveryMethod_decode,
  rfqDeliveryMethod_fromString: Query_rfqDeliveryMethod_fromString,
  rfqMeatPackageMethod_decode: Query_rfqMeatPackageMethod_decode,
  rfqMeatPackageMethod_fromString: Query_rfqMeatPackageMethod_fromString,
  rfqMeatStorageMethod_decode: Query_rfqMeatStorageMethod_decode,
  rfqMeatStorageMethod_fromString: Query_rfqMeatStorageMethod_fromString,
  rfqRequestItemStatus_decode: Query_rfqRequestItemStatus_decode,
  rfqRequestItemStatus_fromString: Query_rfqRequestItemStatus_fromString,
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.node,
              variables: RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$1(param) {
  var match = Hooks.useMutation(RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var CreateRfqOrder_errorCode_decode = RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Utils.errorCode_decode;

var CreateRfqOrder_errorCode_fromString = RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Utils.errorCode_fromString;

var CreateRfqOrder_rfqDeliveryMethod_decode = RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Utils.rfqDeliveryMethod_decode;

var CreateRfqOrder_rfqDeliveryMethod_fromString = RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Utils.rfqDeliveryMethod_fromString;

var CreateRfqOrder_rfqRequestItemStatus_decode = RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Utils.rfqRequestItemStatus_decode;

var CreateRfqOrder_rfqRequestItemStatus_fromString = RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Utils.rfqRequestItemStatus_fromString;

var CreateRfqOrder_make_rfqOrderCreateInput = RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Utils.make_rfqOrderCreateInput;

var CreateRfqOrder_makeVariables = RfqItemDetailBuyer_CreateRfqOrder_Mutation_graphql.Utils.makeVariables;

var CreateRfqOrder = {
  errorCode_decode: CreateRfqOrder_errorCode_decode,
  errorCode_fromString: CreateRfqOrder_errorCode_fromString,
  rfqDeliveryMethod_decode: CreateRfqOrder_rfqDeliveryMethod_decode,
  rfqDeliveryMethod_fromString: CreateRfqOrder_rfqDeliveryMethod_fromString,
  rfqRequestItemStatus_decode: CreateRfqOrder_rfqRequestItemStatus_decode,
  rfqRequestItemStatus_fromString: CreateRfqOrder_rfqRequestItemStatus_fromString,
  make_rfqOrderCreateInput: CreateRfqOrder_make_rfqOrderCreateInput,
  makeVariables: CreateRfqOrder_makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$1
};

var Mutation = {
  CreateRfqOrder: CreateRfqOrder
};

function numberToComma(n) {
  return Belt_Option.mapWithDefault(Belt_Float.fromString(n), "", (function (x) {
                return $$Intl.Currency.make(x, "ko-KR", undefined, undefined, undefined);
              }));
}

function displayDeleveryMethod(v) {
  if (v === "DIRECT_DELIVERY") {
    return "직접배송";
  } else if (v === "ANY") {
    return "상관없음";
  } else if (v === "WAREHOUSE_TRANSFER") {
    return "창고배송";
  } else if (v === "OTHER") {
    return "기타";
  } else if (v === "WAREHOUSE_PICKUP") {
    return "창고수령";
  } else {
    return "기타";
  }
}

function displayStorageMethod(v) {
  if (v === "CHILLED") {
    return "냉장";
  } else if (v === "FROZEN") {
    return "냉동";
  } else if (v === "ANY") {
    return "모두";
  } else if (v === "FREEZE_DRIED") {
    return "동결";
  } else if (v === "OTHER") {
    return "그 외";
  } else {
    return "";
  }
}

function displayPackageMethod(v) {
  if (v === "SPLIT") {
    return "소분";
  } else if (v === "ANY") {
    return "모두";
  } else if (v === "CUT") {
    return "세절";
  } else if (v === "RAW") {
    return "원료육(박스육)";
  } else if (v === "OTHER") {
    return "그 외";
  } else {
    return "";
  }
}

function openCustomerService(param) {
  if (Global.$$window !== undefined) {
    Caml_option.valFromOption(Global.$$window).open(Env.customerServiceUrl + Env.customerServicePaths.rfqContactManager, undefined, "");
    return ;
  }
  
}

function RfqItemDetail_Buyer$Listitem$Normal(Props) {
  var label = Props.label;
  var text = Props.text;
  return React.createElement("li", {
              className: "px-5 py-[14px]"
            }, React.createElement("div", {
                  className: "flex items-center"
                }, React.createElement("div", {
                      className: "flex flex-col justify-between word-keep-all"
                    }, React.createElement("span", {
                          className: "block text-base text-text-L2"
                        }, label)), React.createElement("div", {
                      className: "ml-auto pl-2 text-enabled-L1 font-bold text-right word-keep-all"
                    }, text)));
}

var Normal = {
  make: RfqItemDetail_Buyer$Listitem$Normal
};

function RfqItemDetail_Buyer$Listitem$Radio(Props) {
  var label = Props.label;
  var priceText = Props.priceText;
  var isSelected = Props.isSelected;
  var onClick = Props.onClick;
  return React.createElement("li", {
              className: "flex items-center min-h-[48px] px-5 py-4 cursor-pointer",
              onClick: onClick
            }, React.createElement("div", {
                  className: "flex flex-col justify-between truncate"
                }, React.createElement("span", {
                      className: "block truncate text-lg text-text-L1"
                    }, label), React.createElement("span", {
                      className: "block text-sm truncate font-normal text-primary-variant"
                    }, priceText)), React.createElement("div", {
                  className: "ml-auto pl-2"
                }, isSelected ? React.createElement(DS_Icon.Common.RadioOnLarge1.make, {
                        height: "24",
                        width: "24",
                        fill: "#12B564"
                      }) : React.createElement(DS_Icon.Common.RadioOffLarge1.make, {
                        height: "24",
                        width: "24",
                        fill: "#B2B2B2"
                      })));
}

var Radio = {
  make: RfqItemDetail_Buyer$Listitem$Radio
};

function RfqItemDetail_Buyer$Listitem$Quotation(Props) {
  var label = Props.label;
  var text = Props.text;
  var bold = Props.bold;
  var highlightContent = Props.highlightContent;
  return React.createElement("li", {
              className: "mx-5 my-[6px]"
            }, React.createElement("div", {
                  className: "flex items-center"
                }, React.createElement("div", {
                      className: "flex flex-col justify-between"
                    }, React.createElement("span", {
                          className: "block text-base text-text-L2 word-keep-all"
                        }, label)), React.createElement("div", {
                      className: "ml-auto pl-2 text-right"
                    }, React.createElement("span", {
                          className: Belt_Option.mapWithDefault(bold, "text-enabled-L1 word-keep-all", (function (x) {
                                  if (x) {
                                    return "font-bold";
                                  } else {
                                    return "";
                                  }
                                }))
                        }, text))), Belt_Option.mapWithDefault(highlightContent, null, (function (x) {
                    return React.createElement("div", {
                                className: "text-right text-primary-variant"
                              }, x);
                  })));
}

var Quotation = {
  make: RfqItemDetail_Buyer$Listitem$Quotation
};

var Listitem = {
  Normal: Normal,
  Radio: Radio,
  Quotation: Quotation
};

function RfqItemDetail_Buyer$Divider$Screen(Props) {
  return React.createElement("div", {
              className: "h-3 bg-border-default-L2"
            });
}

var $$Screen = {
  make: RfqItemDetail_Buyer$Divider$Screen
};

function RfqItemDetail_Buyer$Divider$Card(Props) {
  return React.createElement("li", {
              className: "mx-5 py-[14px]"
            }, React.createElement("div", {
                  className: "border-b-2 border-gray-200"
                }));
}

var Card = {
  make: RfqItemDetail_Buyer$Divider$Card
};

function RfqItemDetail_Buyer$Divider$List(Props) {
  return React.createElement("li", {
              className: "mx-5 py-[14px]"
            }, React.createElement("div", {
                  className: "border-b-2 border-b-border-disabled"
                }));
}

var List = {
  make: RfqItemDetail_Buyer$Divider$List
};

var Divider = {
  $$Screen: $$Screen,
  Card: Card,
  List: List
};

function RfqItemDetail_Buyer$ItemContent(Props) {
  var item = Props.item;
  return React.createElement("div", {
              className: "mt-7 mb-10"
            }, React.createElement(DS_Title.Normal1.Root.make, {
                  children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                        title1: "요청하신 내용"
                      }),
                  className: "mb-5"
                }), React.createElement("div", {
                  className: "py-[14px] mx-5 bg-gray-100 rounded-xl "
                }, React.createElement("ul", undefined, Belt_Option.mapWithDefault(item.grade, null, (function (x) {
                            return React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                                        label: "등급",
                                        text: x.grade
                                      });
                          })), Belt_Option.mapWithDefault(item.weightKg, null, (function (x) {
                            return React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                                        label: "주문양",
                                        text: numberToComma(x) + "kg"
                                      });
                          })), Garter_Array.isEmpty(item.usages.edges) ? null : React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                            label: "사용용도",
                            text: Belt_Array.map(item.usages.edges, (function (edge) {
                                      return edge.node.name;
                                    })).join(", ")
                          }), Belt_Option.mapWithDefault(item.storageMethod, null, (function (x) {
                            return React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                                        label: "보관상태",
                                        text: displayStorageMethod(x)
                                      });
                          })), Belt_Option.mapWithDefault(item.packageMethod, null, (function (x) {
                            return React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                                        label: "포장상태",
                                        text: displayPackageMethod(x)
                                      });
                          })), item.preferredBrand === "" ? null : React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                            label: "선호브랜드",
                            text: item.preferredBrand
                          }), React.createElement(RfqItemDetail_Buyer$Divider$Card, {}), React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                          label: "납품 희망일자",
                          text: Format(new Date(item.request.desiredDeliveryDate), "yyyy.MM.dd")
                        }), React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                          label: "수령방식",
                          text: displayDeleveryMethod(item.request.deliveryMethod)
                        }), React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                          label: "배송지역",
                          text: item.request.deliveryAddress
                        }), React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                          label: "정기 배송 여부",
                          text: item.request.deliveryCycle
                        }), item.otherRequirements === "" ? null : React.createElement(React.Fragment, undefined, React.createElement(RfqItemDetail_Buyer$Divider$Card, {}), React.createElement("li", {
                                className: "mx-5 my-[7px]"
                              }, React.createElement("div", {
                                    className: "mb-2 truncate"
                                  }, React.createElement("span", {
                                        className: "block text-base truncate text-text-L2"
                                      }, "요청 사항")), React.createElement("div", {
                                    className: "ml-auto"
                                  }, React.createElement("div", {
                                        className: "w-full"
                                      }, item.otherRequirements)))))));
}

var ItemContent = {
  make: RfqItemDetail_Buyer$ItemContent
};

function RfqItemDetail_Buyer$QuotationContent(Props) {
  var quotation = Props.quotation;
  var prevTradePricePerKg = Props.prevTradePricePerKg;
  var match = quotation.node;
  var weightKg = match.weightKg;
  var pricePerKg = match.pricePerKg;
  var pricePerKgIntFloat = Belt_Float.fromString(pricePerKg);
  var prevTradePricePerKgFloat = Belt_Option.flatMap(prevTradePricePerKg, (function (x) {
          return x;
        }));
  var match$1 = Belt_Int.fromString(weightKg);
  var match$2 = Belt_Int.fromString(pricePerKg);
  var lowCostPrice;
  if (match$1 !== undefined && match$2 !== undefined && prevTradePricePerKg !== undefined) {
    var diffPrice = Math.imul(prevTradePricePerKg, match$1) - Math.imul(match$1, match$2) | 0;
    lowCostPrice = Belt_Option.keep(diffPrice / 10000 | 0, (function (x) {
            return x > 0;
          }));
  } else {
    lowCostPrice = undefined;
  }
  var lowCostRate;
  if (pricePerKgIntFloat !== undefined && prevTradePricePerKgFloat !== undefined) {
    var rate = 1 - pricePerKgIntFloat / prevTradePricePerKgFloat;
    lowCostRate = Belt_Option.keep(Math.floor(rate * 100), (function (x) {
            return x > 0;
          }));
  } else {
    lowCostRate = undefined;
  }
  return React.createElement("div", {
              className: "mt-9 mb-[22px]"
            }, React.createElement("ul", undefined, React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                      label: "총 금액",
                      text: numberToComma(String(match.price)) + "원",
                      bold: true,
                      highlightContent: Belt_Option.mapWithDefault(lowCostPrice, null, (function (x) {
                              return React.createElement(React.Fragment, undefined, React.createElement("span", undefined, "기존거래가 보다 "), React.createElement("span", {
                                              className: "font-bold"
                                            }, numberToComma(String(x)) + "만원 저렴"));
                            }))
                    }), React.createElement(RfqItemDetail_Buyer$Divider$List, {}), React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                      label: "등급",
                      text: match.grade.grade
                    }), React.createElement(RfqItemDetail_Buyer$Divider$List, {}), React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                      label: "단가",
                      text: numberToComma(pricePerKg) + "원/kg",
                      highlightContent: Belt_Option.mapWithDefault(lowCostRate, null, (function (x) {
                              return React.createElement(React.Fragment, undefined, React.createElement("span", undefined, "기존거래가 보다 "), React.createElement("span", {
                                              className: "font-bold"
                                            }, String(x) + "% 저렴"));
                            }))
                    }), React.createElement(RfqItemDetail_Buyer$Listitem$Quotation, {
                      label: "주문양",
                      text: numberToComma(weightKg) + "kg"
                    })));
}

var QuotationContent = {
  make: RfqItemDetail_Buyer$QuotationContent
};

function RfqItemDetail_Buyer$ConfirmButton(Props) {
  var item = Props.item;
  var quotation = Props.quotation;
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var match$1 = use$1(undefined);
  var mutate = match$1[0];
  var createOrder = function (param) {
    var match = item.request.deliveryMethod;
    var deliveryMethod = match === "DIRECT_DELIVERY" ? "DIRECT_DELIVERY" : (
        match === "ANY" ? "ANY" : (
            match === "WAREHOUSE_TRANSFER" ? "WAREHOUSE_TRANSFER" : (
                match === "OTHER" ? "OTHER" : (
                    match === "WAREHOUSE_PICKUP" ? "WAREHOUSE_PICKUP" : undefined
                  )
              )
          )
      );
    if (deliveryMethod !== undefined) {
      Curry.app(mutate, [
            (function (param) {
                return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                            appearance: "error"
                          });
              }),
            (function (param, param$1) {
                var variant = param.createRfqOrder.NAME;
                if (variant === "UnselectedUnionMember" || variant === "Error") {
                  return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                              appearance: "error"
                            });
                } else {
                  return addToast(DS_Toast.getToastComponent("발주 요청이 완료되었습니다.", "succ"), {
                              appearance: "success"
                            });
                }
              }),
            undefined,
            undefined,
            undefined,
            undefined,
            {
              input: {
                deliveryMethod: deliveryMethod,
                quotationId: quotation.node.id
              }
            },
            undefined,
            undefined
          ]);
      return ;
    }
    
  };
  return React.createElement(React.Fragment, undefined, React.createElement(DS_Dialog.Popup.Root.make, {
                  children: null
                }, React.createElement(DS_Dialog.Popup.Trigger.make, {
                      children: React.createElement(DS_ButtonContainer.Floating1.make, {
                            label: "주문하기",
                            onClick: (function (param) {
                                return DataGtm.push({
                                            event: "Expose_view_RFQ_Livestock_Quotation_Detail_Check_Popup"
                                          });
                              })
                          }),
                      asChild: true
                    }), React.createElement(DS_Dialog.Popup.Portal.make, {
                      children: null
                    }, React.createElement(DS_Dialog.Popup.Overlay.make, {}), React.createElement(DS_Dialog.Popup.Content.make, {
                          children: null
                        }, React.createElement(DS_Dialog.Popup.Title.make, {
                              children: "주문하시겠어요?"
                            }), React.createElement(DS_Dialog.Popup.Description.make, {
                              children: null
                            }, React.createElement("span", {
                                  className: "block"
                                }, React.createElement("span", undefined, Belt_Option.mapWithDefault(item.part, "", (function (x) {
                                            return x.name;
                                          }))), React.createElement("span", undefined, " / "), React.createElement("span", undefined, Belt_Option.mapWithDefault(item.part, "", (function (x) {
                                            if (x.isDomestic) {
                                              return "국내";
                                            } else {
                                              return "수입";
                                            }
                                          })))), React.createElement("span", {
                                  className: "block"
                                }, quotation.node.grade.grade), React.createElement("span", {
                                  className: "block"
                                }, numberToComma(quotation.node.pricePerKg) + "원/kg"), React.createElement("span", {
                                  className: "block"
                                }, "총 금액:" + numberToComma(String(quotation.node.price)) + "원")), React.createElement(DS_Dialog.Popup.Buttons.make, {
                              children: null
                            }, React.createElement(DS_Dialog.Popup.Close.make, {
                                  children: React.createElement(DS_Button.Normal.Large1.make, {
                                        label: "아니오",
                                        buttonType: "white"
                                      }),
                                  asChild: true
                                }), React.createElement(DS_Dialog.Popup.Close.make, {
                                  children: React.createElement(DataGtm.make, {
                                        children: React.createElement("div", {
                                              className: "w-full",
                                              onClick: (function (param) {
                                                  
                                                })
                                            }, React.createElement(DS_Button.Normal.Large1.make, {
                                                  label: "네",
                                                  disabled: match$1[1],
                                                  onClick: createOrder
                                                })),
                                        dataGtm: "Click_Yes_RFQ_Livestock_Quotation_Detail_Check_Popup"
                                      }),
                                  asChild: true
                                }))))));
}

var ConfirmButton = {
  make: RfqItemDetail_Buyer$ConfirmButton
};

function RfqItemDetail_Buyer$ConfirmContent$Drawer(Props) {
  var item = Props.item;
  var match = React.useState(function () {
        return false;
      });
  var setDrawerShow = match[1];
  var isDrawerShow = match[0];
  var match$1 = React.useState(function () {
        return Garter_Array.first(item.selectedQuotations.edges);
      });
  var setSelectedQuotation = match$1[1];
  var selectedQuotation = match$1[0];
  var togglePopup = function (param) {
    if (isDrawerShow === false) {
      DataGtm.push({
            event: "Click_Order_RFQ_Livestock_Quotation_Detail"
          });
    }
    return setDrawerShow(function (param) {
                return !isDrawerShow;
              });
  };
  var titleText = Belt_Option.mapWithDefault(item.part, "", (function (part) {
          return part.name + "/" + (
                  part.isDomestic ? "국내" : "수입"
                );
        }));
  return React.createElement(React.Fragment, undefined, React.createElement(DS_ButtonContainer.Floating1.make, {
                  label: "주문하기",
                  onClick: togglePopup
                }), React.createElement(DS_BottomDrawer.Root.make, {
                  isShow: isDrawerShow,
                  onClose: togglePopup,
                  children: null
                }, React.createElement(DS_BottomDrawer.Header.make, {}), React.createElement(DS_BottomDrawer.Body.make, {
                      children: null
                    }, React.createElement(DS_Title.Normal1.Root.make, {
                          children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                                title1: titleText + "의",
                                title2: "희망상품을 선택해주세요"
                              }),
                          className: "mb-8"
                        }), React.createElement("ul", {
                          className: "pb-[96px] overflow-y-auto"
                        }, Belt_Array.map(item.selectedQuotations.edges, (function (x) {
                                return React.createElement(RfqItemDetail_Buyer$Listitem$Radio, {
                                            label: x.node.grade.grade,
                                            priceText: numberToComma(x.node.pricePerKg) + "원/kg",
                                            isSelected: Belt_Option.flatMap(selectedQuotation, (function (x) {
                                                    return x.node.id;
                                                  })) === x.node.id,
                                            onClick: (function (param) {
                                                return setSelectedQuotation(function (param) {
                                                            return x;
                                                          });
                                              }),
                                            key: x.node.grade.id
                                          });
                              }))), selectedQuotation !== undefined ? React.createElement(RfqItemDetail_Buyer$ConfirmButton, {
                            item: item,
                            quotation: selectedQuotation
                          }) : null)));
}

var Drawer = {
  make: RfqItemDetail_Buyer$ConfirmContent$Drawer
};

var ConfirmContent = {
  Drawer: Drawer
};

function RfqItemDetail_Buyer$Scene$Ordered(Props) {
  var item = Props.item;
  var titleText = Belt_Option.mapWithDefault(item.part, "요청 내용", (function (part) {
          return part.name + " / " + (
                  part.isDomestic ? "국내" : "수입"
                );
        }));
  var quotation$p = Garter_Array.first(item.selectedQuotations.edges);
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl pt-14 pb-[96px] bg-white"
                }, React.createElement(DS_TopNavigation.Detail.Root.make, {
                      children: null
                    }, React.createElement(DS_TopNavigation.Detail.Left.make, {
                          children: React.createElement("a", {
                                className: "cursor-pointer",
                                onClick: (function (param) {
                                    window.history.back();
                                    
                                  })
                              }, React.createElement(DS_Icon.Common.ArrowLeftXLarge1.make, {
                                    height: "32",
                                    width: "32",
                                    className: "relative"
                                  }))
                        }), React.createElement(DS_TopNavigation.Detail.Center.make, {
                          children: titleText
                        })), React.createElement(DS_Title.Normal1.Root.make, {
                      children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                            title1: "주문이 요청되었습니다.",
                            subTitle: "담당자가 영업일 기준 24시간 이내에\n연락드릴 예정입니다."
                          }),
                      className: "mt-10 mb-14"
                    }), React.createElement("div", {
                      className: "mx-5"
                    }, React.createElement(DS_TitleList.Left.Title2Subtitle1.make, {
                          title1: Belt_Option.mapWithDefault(item.part, "", (function (x) {
                                  return x.name;
                                })),
                          title2: Belt_Option.mapWithDefault(item.part, "", (function (x) {
                                  if (x.isDomestic) {
                                    return "국내";
                                  } else {
                                    return "수입";
                                  }
                                })),
                          titleStyle: "text-xl font-bold"
                        })), quotation$p !== undefined ? React.createElement(RfqItemDetail_Buyer$QuotationContent, {
                        quotation: quotation$p,
                        prevTradePricePerKg: item.prevTradePricePerKg
                      }) : null, React.createElement(RfqItemDetail_Buyer$Divider$Screen, {}), React.createElement(RfqItemDetail_Buyer$ItemContent, {
                      item: item
                    }), React.createElement(DS_ButtonContainer.Floating1.make, {
                      label: "담당자에게 문의하기",
                      onClick: (function (param) {
                          return openCustomerService(undefined);
                        }),
                      buttonType: "white"
                    })));
}

var Ordered = {
  make: RfqItemDetail_Buyer$Scene$Ordered
};

function RfqItemDetail_Buyer$Scene$OrderTimeout(Props) {
  var item = Props.item;
  var router = Router.useRouter();
  var titleText = Belt_Option.mapWithDefault(item.part, "요청 내용", (function (part) {
          return part.name + " / " + (
                  part.isDomestic ? "국내" : "수입"
                );
        }));
  return React.createElement("div", {
              className: "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl pt-14 pb-[96px] bg-white"
            }, React.createElement(DS_TopNavigation.Detail.Root.make, {
                  children: null
                }, React.createElement(DS_TopNavigation.Detail.Left.make, {
                      children: React.createElement("a", {
                            className: "cursor-pointer",
                            onClick: (function (param) {
                                window.history.back();
                                
                              })
                          }, React.createElement(DS_Icon.Common.ArrowLeftXLarge1.make, {
                                height: "32",
                                width: "32",
                                className: "relative"
                              }))
                    }), React.createElement(DS_TopNavigation.Detail.Center.make, {
                      children: titleText
                    })), React.createElement(DS_Title.Normal1.Root.make, {
                  children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                        title1: "만료된 견적서입니다.",
                        subTitle: "견적요청 기간이 만료되었습니다.\n새로 견적서를 작성해주세요."
                      }),
                  className: "mt-10 mb-14"
                }), React.createElement(DS_ButtonContainer.Floating1.make, {
                  label: "신규 견적서 작성하기",
                  onClick: (function (param) {
                      router.push("/buyer/rfq/");
                      
                    })
                }));
}

var OrderTimeout = {
  make: RfqItemDetail_Buyer$Scene$OrderTimeout
};

function RfqItemDetail_Buyer$Scene$WaitingForOrder(Props) {
  var item = Props.item;
  var isGradeFree = Belt_Option.isSome(Belt_Option.keep(item.grade, (function (x) {
              return x.grade === "등급무관";
            })));
  var match = React.useState(function () {
        return Garter_Array.first(item.selectedQuotations.edges);
      });
  var setCurrentQuotation = match[1];
  var currentQuotation = match[0];
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl pt-14 pb-[96px] bg-white"
                }, React.createElement(DS_TopNavigation.Detail.Root.make, {
                      children: React.createElement(DS_TopNavigation.Detail.Left.make, {
                            children: React.createElement("a", {
                                  className: "cursor-pointer",
                                  onClick: (function (param) {
                                      window.history.back();
                                      
                                    })
                                }, React.createElement(DS_Icon.Common.ArrowLeftXLarge1.make, {
                                      height: "32",
                                      width: "32",
                                      className: "relative"
                                    }))
                          })
                    }), React.createElement(DS_Title.Normal1.Root.make, {
                      children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                            title1: "견적서가 도착했어요",
                            subTitle: "최저가로 정기 배송이 가능합니다."
                          }),
                      className: "mt-7 mb-14"
                    }), React.createElement("div", {
                      className: "mx-5"
                    }, React.createElement(DS_TitleList.Left.Title2Subtitle1.make, {
                          title1: Belt_Option.mapWithDefault(item.part, "", (function (x) {
                                  return x.name;
                                })),
                          title2: Belt_Option.mapWithDefault(item.part, "", (function (x) {
                                  if (x.isDomestic) {
                                    return "국내";
                                  } else {
                                    return "수입";
                                  }
                                })),
                          titleStyle: "text-xl font-bold"
                        })), isGradeFree ? React.createElement("div", {
                        className: "mt-5"
                      }, React.createElement("div", {
                            className: "DS_tab_leftTab flex flex-row items-center gap-5 whitespace-nowrap overflow-x-auto h-11 px-5 text-lg text-gray-300"
                          }, Belt_Array.map(item.selectedQuotations.edges, (function (x) {
                                  var isSelected = x.node.id === Belt_Option.flatMap(currentQuotation, (function (x) {
                                          return x.node.id;
                                        }));
                                  return React.createElement(DS_Tab.LeftTab.Item.make, {
                                              children: React.createElement(DS_Button.Chip.TextSmall1.make, {
                                                    label: x.node.grade.grade,
                                                    selected: isSelected,
                                                    className: "text-sm",
                                                    onClick: (function (param) {
                                                        return setCurrentQuotation(function (param) {
                                                                    return x;
                                                                  });
                                                      })
                                                  }),
                                              key: x.node.grade.id
                                            });
                                })))) : null, currentQuotation !== undefined ? React.createElement(RfqItemDetail_Buyer$QuotationContent, {
                        quotation: currentQuotation,
                        prevTradePricePerKg: item.prevTradePricePerKg
                      }) : null, React.createElement(RfqItemDetail_Buyer$Divider$Screen, {}), React.createElement(RfqItemDetail_Buyer$ItemContent, {
                      item: item
                    })), isGradeFree ? React.createElement(RfqItemDetail_Buyer$ConfirmContent$Drawer, {
                    item: item
                  }) : (
                currentQuotation !== undefined ? React.createElement(RfqItemDetail_Buyer$ConfirmButton, {
                        item: item,
                        quotation: currentQuotation
                      }) : null
              ));
}

var WaitingForOrder = {
  make: RfqItemDetail_Buyer$Scene$WaitingForOrder
};

function RfqItemDetail_Buyer$Scene$MatchFailed(Props) {
  var item = Props.item;
  var titleText = Belt_Option.mapWithDefault(item.part, "요청 내용", (function (part) {
          return part.name + " / " + (
                  part.isDomestic ? "국내" : "수입"
                );
        }));
  return React.createElement("div", {
              className: "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl pt-14 pb-[96px] bg-white"
            }, React.createElement(DS_TopNavigation.Detail.Root.make, {
                  children: null
                }, React.createElement(DS_TopNavigation.Detail.Left.make, {
                      children: React.createElement("a", {
                            className: "cursor-pointer",
                            onClick: (function (param) {
                                window.history.back();
                                
                              })
                          }, React.createElement(DS_Icon.Common.ArrowLeftXLarge1.make, {
                                height: "32",
                                width: "32",
                                className: "relative"
                              }))
                    }), React.createElement(DS_TopNavigation.Detail.Center.make, {
                      children: titleText
                    })), React.createElement(DS_Title.Normal1.Root.make, {
                  children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                        title1: "들어온 견적서가 없습니다",
                        subTitle: "궁금하신점은 담당자에게 문의해주세요."
                      }),
                  className: "mt-10 mb-14"
                }), React.createElement(DS_ButtonContainer.Floating1.make, {
                  label: "담당자에게 문의하기",
                  onClick: (function (param) {
                      return openCustomerService(undefined);
                    }),
                  buttonType: "white"
                }));
}

var MatchFailed = {
  make: RfqItemDetail_Buyer$Scene$MatchFailed
};

function RfqItemDetail_Buyer$Scene$WaitingQuotation(Props) {
  var item = Props.item;
  return React.createElement("div", {
              className: "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl pt-14 bg-white"
            }, React.createElement(DS_TopNavigation.Detail.Root.make, {
                  children: null
                }, React.createElement(DS_TopNavigation.Detail.Left.make, {
                      children: React.createElement("a", {
                            className: "cursor-pointer",
                            onClick: (function (param) {
                                window.history.back();
                                
                              })
                          }, React.createElement(DS_Icon.Common.ArrowLeftXLarge1.make, {
                                height: "32",
                                width: "32",
                                className: "relative"
                              }))
                    }), React.createElement(DS_TopNavigation.Detail.Center.make, {
                      children: "요청 내용"
                    })), Belt_Option.mapWithDefault(item.part, null, (function (x) {
                    return React.createElement("div", {
                                className: "mx-5 mt-14 mb-[16px]"
                              }, React.createElement(DS_TitleList.Left.Title2Subtitle1.make, {
                                    title1: x.name,
                                    title2: x.isDomestic ? "국내" : "수입",
                                    titleStyle: "text-xl font-bold"
                                  }));
                  })), React.createElement("ul", undefined, Belt_Option.mapWithDefault(item.grade, null, (function (x) {
                        return React.createElement(RfqItemDetail_Buyer$Listitem$Normal, {
                                    label: "등급",
                                    text: x.grade
                                  });
                      })), Belt_Option.mapWithDefault(item.weightKg, null, (function (x) {
                        return React.createElement(RfqItemDetail_Buyer$Listitem$Normal, {
                                    label: "주문양",
                                    text: numberToComma(x) + "kg"
                                  });
                      })), Garter_Array.isEmpty(item.usages.edges) ? null : React.createElement(RfqItemDetail_Buyer$Listitem$Normal, {
                        label: "사용용도",
                        text: Belt_Array.map(item.usages.edges, (function (edge) {
                                  return edge.node.name;
                                })).join(", ")
                      }), Belt_Option.mapWithDefault(item.storageMethod, null, (function (x) {
                        return React.createElement(RfqItemDetail_Buyer$Listitem$Normal, {
                                    label: "보관상태",
                                    text: displayStorageMethod(x)
                                  });
                      })), Belt_Option.mapWithDefault(item.packageMethod, null, (function (x) {
                        return React.createElement(RfqItemDetail_Buyer$Listitem$Normal, {
                                    label: "포장상태",
                                    text: displayPackageMethod(x)
                                  });
                      })), item.prevTradeSellerName === "" ? null : React.createElement(RfqItemDetail_Buyer$Listitem$Normal, {
                        label: "기존공급처",
                        text: item.prevTradeSellerName
                      }), Belt_Option.mapWithDefault(item.prevTradePricePerKg, null, (function (x) {
                        return React.createElement(RfqItemDetail_Buyer$Listitem$Normal, {
                                    label: "기존공급가",
                                    text: numberToComma(String(x)) + "원/kg"
                                  });
                      })), item.preferredBrand === "" ? null : React.createElement(RfqItemDetail_Buyer$Listitem$Normal, {
                        label: "선호브랜드",
                        text: item.preferredBrand
                      })));
}

var WaitingQuotation = {
  make: RfqItemDetail_Buyer$Scene$WaitingQuotation
};

function RfqItemDetail_Buyer$Scene$Canceled(Props) {
  var item = Props.item;
  var router = Router.useRouter();
  var titleText = Belt_Option.mapWithDefault(item.part, "요청 내용", (function (part) {
          return part.name + " / " + (
                  part.isDomestic ? "국내" : "수입"
                );
        }));
  return React.createElement("div", {
              className: "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl pt-14 pb-[96px] bg-white"
            }, React.createElement(DS_TopNavigation.Detail.Root.make, {
                  children: null
                }, React.createElement(DS_TopNavigation.Detail.Left.make, {
                      children: React.createElement("a", {
                            className: "cursor-pointer",
                            onClick: (function (param) {
                                window.history.back();
                                
                              })
                          }, React.createElement(DS_Icon.Common.ArrowLeftXLarge1.make, {
                                height: "32",
                                width: "32",
                                className: "relative"
                              }))
                    }), React.createElement(DS_TopNavigation.Detail.Center.make, {
                      children: titleText
                    })), React.createElement(DS_Title.Normal1.Root.make, {
                  children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                        title1: "취소한 견적서입니다.",
                        subTitle: "취소처리된 견적서입니다.\n새로 견적서를 작성해주세요."
                      }),
                  className: "mt-10 mb-14"
                }), React.createElement(DS_ButtonContainer.Floating1.make, {
                  label: "신규 견적서 작성하기",
                  onClick: (function (param) {
                      router.push("/buyer/rfq/");
                      
                    })
                }));
}

var Canceled = {
  make: RfqItemDetail_Buyer$Scene$Canceled
};

function RfqItemDetail_Buyer$Scene$NotFound(Props) {
  var router = Router.useRouter();
  return React.createElement("div", {
              className: "relative container max-w-3xl mx-auto min-h-screen sm:shadow-gl pt-14 pb-[96px] bg-white"
            }, React.createElement(DS_TopNavigation.Detail.Root.make, {
                  children: React.createElement(DS_TopNavigation.Detail.Left.make, {
                        children: React.createElement("a", {
                              className: "cursor-pointer",
                              onClick: (function (param) {
                                  window.history.back();
                                  
                                })
                            }, React.createElement(DS_Icon.Common.ArrowLeftXLarge1.make, {
                                  height: "32",
                                  width: "32",
                                  className: "relative"
                                }))
                      })
                }), React.createElement(DS_Title.Normal1.Root.make, {
                  children: React.createElement(DS_Title.Normal1.TextGroup.make, {
                        title1: "잘못된 요청입니다.",
                        subTitle: "해당 견적서를 찾을 수 없습니다."
                      }),
                  className: "mt-7 mb-14"
                }), React.createElement(DS_ButtonContainer.Floating1.make, {
                  label: "신규 견적서 작성하기",
                  onClick: (function (param) {
                      router.push("/buyer/rfq/");
                      
                    })
                }));
}

var NotFound = {
  make: RfqItemDetail_Buyer$Scene$NotFound
};

var Scene = {
  Ordered: Ordered,
  OrderTimeout: OrderTimeout,
  WaitingForOrder: WaitingForOrder,
  MatchFailed: MatchFailed,
  WaitingQuotation: WaitingQuotation,
  Canceled: Canceled,
  NotFound: NotFound
};

function RfqItemDetail_Buyer$Detail(Props) {
  var itemId = Props.itemId;
  var match = use({
        id: itemId
      }, /* NetworkOnly */3, undefined, undefined, undefined);
  var node = match.node;
  React.useEffect((function () {
          DataGtm.push({
                event: "Expose_view_RFQ_Livestock_Quotation_Detail"
              });
          
        }), []);
  if (node === undefined) {
    return React.createElement(RfqItemDetail_Buyer$Scene$NotFound, {});
  }
  var match$1 = node.status;
  if (match$1 === "WAITING_FOR_QUOTATION" || match$1 === "READY_TO_REQUEST") {
    return React.createElement(RfqItemDetail_Buyer$Scene$WaitingQuotation, {
                item: node
              });
  } else if (match$1 === "ORDER_TIMEOUT") {
    return React.createElement(RfqItemDetail_Buyer$Scene$OrderTimeout, {
                item: node
              });
  } else if (match$1 === "WAITING_FOR_ORDER") {
    return React.createElement(RfqItemDetail_Buyer$Scene$WaitingForOrder, {
                item: node
              });
  } else if (match$1 === "DRAFT") {
    return React.createElement(RfqItemDetail_Buyer$Scene$NotFound, {});
  } else if (match$1 === "MATCH_FAILED") {
    return React.createElement(RfqItemDetail_Buyer$Scene$MatchFailed, {
                item: node
              });
  } else if (match$1 === "ORDERED") {
    return React.createElement(RfqItemDetail_Buyer$Scene$Ordered, {
                item: node
              });
  } else if (match$1 === "REQUEST_CANCELED") {
    return React.createElement(RfqItemDetail_Buyer$Scene$Canceled, {
                item: node
              });
  } else {
    return React.createElement(RfqItemDetail_Buyer$Scene$NotFound, {});
  }
}

var Detail = {
  make: RfqItemDetail_Buyer$Detail
};

function RfqItemDetail_Buyer(Props) {
  var itemId = Props.itemId;
  var router = Router.useRouter();
  if (itemId !== undefined) {
    return React.createElement(Authorization.Buyer.make, {
                children: React.createElement(RfqItemDetail_Buyer$Detail, {
                      itemId: itemId
                    }),
                title: "견적서 확인하기",
                fallback: null
              });
  } else {
    React.useEffect((function () {
            router.replace("/buyer/rfq");
            
          }), []);
    return null;
  }
}

var make = RfqItemDetail_Buyer;

export {
  Query ,
  Mutation ,
  numberToComma ,
  displayDeleveryMethod ,
  displayStorageMethod ,
  displayPackageMethod ,
  openCustomerService ,
  Listitem ,
  Divider ,
  ItemContent ,
  QuotationContent ,
  ConfirmButton ,
  ConfirmContent ,
  Scene ,
  Detail ,
  make ,
  
}
/* Env Not a pure module */
