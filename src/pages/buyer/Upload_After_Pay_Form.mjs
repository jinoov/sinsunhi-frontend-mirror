// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../constants/Env.mjs";
import * as Swr from "swr";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as ChannelTalkHelper from "../../utils/ChannelTalkHelper.mjs";
import * as UploadStatus_Buyer from "../../components/UploadStatus_Buyer.mjs";
import * as Upload_After_Pay_Orders from "../../components/Upload_After_Pay_Orders.mjs";

function Upload_After_Pay_Form$UploadForm(Props) {
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var user = Curry._1(CustomHooks.User.Buyer.use, undefined);
  var userId = typeof user === "number" ? undefined : user._0.id;
  var match$1 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowSuccess = match$1[1];
  var match$2 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowError = match$2[1];
  ChannelTalkHelper.Hook.use(undefined, undefined, undefined);
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "container max-w-lg mx-auto p-7 pt-0 sm:shadow-gl"
                }, React.createElement("div", {
                      className: "divide-y"
                    }, React.createElement("div", undefined), React.createElement(Upload_After_Pay_Orders.make, {
                          onSuccess: (function (param) {
                              setShowSuccess(function (param) {
                                    return /* Show */0;
                                  });
                              Belt_Option.forEach(userId, (function (userId$p) {
                                      mutate("" + Env.afterPayApiUrl + "/buyers/" + userId$p.toString() + "/credit", undefined, undefined);
                                    }));
                              var target = "upload-status";
                              var el = document.getElementById(target);
                              Belt_Option.mapWithDefault((el == null) ? undefined : Caml_option.some(el), undefined, (function (el$p) {
                                      el$p.scrollIntoView({
                                            behavior: "smooth",
                                            block: "start"
                                          });
                                    }));
                            }),
                          onFailure: (function (param) {
                              setShowError(function (param) {
                                    return /* Show */0;
                                  });
                            }),
                          startIndex: 1
                        }), React.createElement("section", {
                          className: "py-5"
                        }, React.createElement("div", {
                              className: "flex justify-between"
                            }, React.createElement("h4", {
                                  className: "font-semibold"
                                }, "주문서 양식", React.createElement("span", {
                                      className: "block text-gray-400 text-sm"
                                    }, "*이 양식으로 작성된 주문서만 업로드 가능")), React.createElement("a", {
                                  href: Env.buyerOrderExcelFormUri
                                }, React.createElement("span", {
                                      className: "inline-block text-center text-green-gl font-bold py-2 w-28 border border-green-gl rounded-xl focus:outline-none hover:text-green-gl-dark hover:border-green-gl-dark"
                                    }, "양식 다운로드")))))), React.createElement(Dialog.make, {
                  isShow: match$1[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "주문서 업로드가 실행되었습니다. 성공여부를 꼭 주문서 업로드 결과에서 확인해주세요."),
                  onConfirm: (function (param) {
                      setShowSuccess(function (param) {
                            return /* Hide */1;
                          });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$2[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "파일 업로드에 실패하였습니다."),
                  onConfirm: (function (param) {
                      setShowError(function (param) {
                            return /* Hide */1;
                          });
                    })
                }));
}

var UploadForm = {
  make: Upload_After_Pay_Form$UploadForm
};

function Upload_After_Pay_Form$UploadResult(Props) {
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var creditUrl = CustomHooks.AfterPayCredit.useGetUrl(undefined);
  return React.createElement("div", {
              className: "container max-w-lg mx-auto p-7 sm:shadow-gl sm:mt-4",
              id: "upload-status"
            }, React.createElement("section", {
                  className: "py-5"
                }, React.createElement("h4", {
                      className: "font-semibold"
                    }, "주문서 업로드 결과"), React.createElement("p", {
                      className: "mt-1 text-gray-400 text-sm"
                    }, "*가장 최근 요청한 3가지 등록건만 노출됩니다.")), React.createElement(UploadStatus_Buyer.make, {
                  kind: /* Buyer */1,
                  onChangeLatestUpload: (function (param) {
                      Belt_Option.forEach(creditUrl, (function (url) {
                              mutate(url, undefined, true);
                            }));
                    }),
                  uploadType: /* OrderAfterPay */3
                }), React.createElement("p", {
                  className: "mt-5 text-sm text-gray-400"
                }, "주의: 송장번호 일괄 업로드가 완료되기 전까지 일부 기능을 사용하실 수 없습니다. 업로드하신 엑셀 내용에 따라 정상적으로 처리되지 않는 경우가 있을 수 있습니다. 처리결과를 반드시 확인해 주시기 바랍니다. 주문서 업로드는 상황에 따라 5분까지 소요될 수 있습니다. 처리 결과를 필히 확인해주시기 바랍니다"));
}

var UploadResult = {
  make: Upload_After_Pay_Form$UploadResult
};

export {
  UploadForm ,
  UploadResult ,
}
/* Env Not a pure module */
