// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "../../components/common/Input.mjs";
import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Checkbox from "../../components/common/Checkbox.mjs";
import * as ReactUtil from "../../utils/ReactUtil.mjs";
import Head from "next/head";
import Link from "next/link";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as FetchHelper from "../../utils/FetchHelper.mjs";
import * as ReactEvents from "../../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import * as ChannelTalkHelper from "../../utils/ChannelTalkHelper.mjs";
import * as LocalStorageHooks from "../../utils/LocalStorageHooks.mjs";
import * as SignIn_Buyer_Form from "../../components/SignIn_Buyer_Form.mjs";
import * as SignIn_Buyer_Set_Password from "../../components/SignIn_Buyer_Set_Password.mjs";

function $$default(props) {
  var uid = Js_dict.get(props.query, "uid");
  var router = Router.useRouter();
  var match = CustomHooks.useSetPassword(Js_dict.get(router.query, "token"));
  var match$1 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowErrorSetPassword = match$1[1];
  var match$2 = React.useState(function () {
        return true;
      });
  var setCheckedSaveEmail = match$2[1];
  var isCheckedSaveEmail = match$2[0];
  var match$3 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowForError = match$3[1];
  var match$4 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowForExisted = match$4[1];
  var inputPasswordRef = React.useRef(null);
  var onSubmit = function (param) {
    var state = param.state;
    var email = SignIn_Buyer_Form.FormFields.get(state.values, /* Email */0);
    var password = SignIn_Buyer_Form.FormFields.get(state.values, /* Password */1);
    var prim0 = new URLSearchParams(router.query);
    var redirectUrl = Belt_Option.getWithDefault(Caml_option.nullable_to_opt(prim0.get("redirect")), "/buyer");
    var urlSearchParams = new URLSearchParams([
            [
              "grant-type",
              "password"
            ],
            [
              "username",
              email
            ],
            [
              "password",
              password
            ]
          ]).toString();
    FetchHelper.postWithURLSearchParams(Env.restApiUrl + "/user/token", urlSearchParams, (function (res) {
            var result = FetchHelper.responseToken_decode(res);
            if (result.TAG !== /* Ok */0) {
              return setShowForError(function (param) {
                          return /* Show */0;
                        });
            }
            var res$1 = result._0;
            Curry._1(LocalStorageHooks.AccessToken.set, res$1.token);
            Curry._1(LocalStorageHooks.RefreshToken.set, res$1.refreshToken);
            ChannelTalkHelper.bootWithProfile(undefined);
            router.push(redirectUrl);
            
          }), (function (err) {
            if (err.status === 409) {
              setShowForExisted(function (param) {
                    return /* Show */0;
                  });
              ReactUtil.setValueElementByRef(inputPasswordRef, "");
              SignIn_Buyer_Form.FormFields.set(state.values, /* Password */1, "");
              return ;
            } else {
              return setShowForError(function (param) {
                          return /* Show */0;
                        });
            }
          }));
    
  };
  var form = Curry._7(SignIn_Buyer_Form.Form.use, SignIn_Buyer_Form.initialState, /* Schema */{
        _0: Belt_Array.concatMany([
              Curry._3(SignIn_Buyer_Form.Form.ReSchema.Validation.email, "이메일을 입력해주세요.", undefined, /* Email */0),
              Curry._3(SignIn_Buyer_Form.Form.ReSchema.Validation.nonEmpty, "비밀번호를 입력해주세요.", undefined, /* Password */1)
            ])
      }, onSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleOnSubmit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  var email = SignIn_Buyer_Form.FormFields.get(form.values, /* Email */0);
                  if (isCheckedSaveEmail) {
                    Curry._1(LocalStorageHooks.BuyerEmail.set, email);
                  } else {
                    Curry._1(LocalStorageHooks.BuyerEmail.remove, undefined);
                  }
                  return Curry._1(form.submit, undefined);
                }), param);
  };
  var handleOnCheckSaveEmail = function (e) {
    var checked = e.target.checked;
    return setCheckedSaveEmail(function (param) {
                return checked;
              });
  };
  React.useEffect((function () {
          var email = uid !== undefined ? uid : Curry._1(LocalStorageHooks.BuyerEmail.get, undefined);
          if (email !== "") {
            setCheckedSaveEmail(function (param) {
                  return true;
                });
            Curry._4(form.setFieldValue, /* Email */0, email, true, undefined);
            ReactUtil.focusElementByRef(inputPasswordRef);
          }
          
        }), [uid]);
  var isFormFilled = function (param) {
    var email = SignIn_Buyer_Form.FormFields.get(form.values, /* Email */0);
    var password = SignIn_Buyer_Form.FormFields.get(form.values, /* Password */1);
    if (email !== "") {
      return password !== "";
    } else {
      return false;
    }
  };
  var user = CustomHooks.Auth.use(undefined);
  React.useEffect((function () {
          if (typeof user !== "number") {
            var match = user._0.role;
            switch (match) {
              case /* Seller */0 :
                  router.push("/seller");
                  break;
              case /* Buyer */1 :
                  router.push("/buyer");
                  break;
              case /* Admin */2 :
                  break;
              
            }
          }
          
        }), [user]);
  ChannelTalkHelper.Hook.use(undefined, undefined, undefined);
  var partial_arg = Curry._1(form.handleChange, /* Email */0);
  var partial_arg$1 = Curry._1(form.handleChange, /* Password */1);
  return React.createElement(React.Fragment, undefined, React.createElement(Head, {
                  children: React.createElement("title", undefined, "바이어 로그인 - 신선하이")
                }), React.createElement("div", {
                  className: "container mx-auto max-w-lg min-h-buyer relative flex flex-col justify-center pb-20"
                }, React.createElement("div", {
                      className: "flex-auto flex flex-col xl:justify-center items-center"
                    }, React.createElement("div", {
                          className: "w-full px-5 xl:py-12 sm:px-20"
                        }, React.createElement("h2", {
                              className: "hidden text-[26px] font-bold text-center xl:block"
                            }, "신선하이 로그인"), React.createElement("form", {
                              onSubmit: handleOnSubmit
                            }, React.createElement(Input.make, {
                                  type_: "email",
                                  name: "email",
                                  placeholder: "이메일",
                                  className: "block mt-[60px]",
                                  value: SignIn_Buyer_Form.FormFields.get(form.values, /* Email */0),
                                  onChange: (function (param) {
                                      return ReForm__Helpers.handleChange(partial_arg, param);
                                    }),
                                  size: /* Large */0,
                                  error: Curry._1(form.getFieldError, /* Field */{
                                        _0: /* Email */0
                                      })
                                }), React.createElement(Input.make, {
                                  id: "input-password",
                                  type_: "password",
                                  name: "password",
                                  placeholder: "비밀번호",
                                  className: "block mt-3",
                                  onChange: (function (param) {
                                      return ReForm__Helpers.handleChange(partial_arg$1, param);
                                    }),
                                  size: /* Large */0,
                                  error: Curry._1(form.getFieldError, /* Field */{
                                        _0: /* Password */1
                                      }),
                                  inputRef: inputPasswordRef
                                }), React.createElement("div", {
                                  className: "flex justify-between items-center mt-4"
                                }, React.createElement("span", {
                                      className: "flex flex-1"
                                    }, React.createElement(Checkbox.make, {
                                          id: "auto-login",
                                          checked: isCheckedSaveEmail,
                                          onChange: handleOnCheckSaveEmail
                                        }), React.createElement("span", {
                                          className: "text-sm text-gray-700 ml-1"
                                        }, "아이디 저장")), React.createElement("span", {
                                      className: "divide-x"
                                    }, React.createElement(Link, {
                                          href: "/buyer/signin/find-id-password?mode=find-id",
                                          children: React.createElement("span", {
                                                className: "text-sm text-gray-700 pr-2"
                                              }, "아이디 찾기")
                                        }), React.createElement(Link, {
                                          href: "/buyer/signin/find-id-password?mode=reset-password",
                                          children: React.createElement("span", {
                                                className: "text-sm text-gray-700 pl-2"
                                              }, "비밀번호 재설정")
                                        }))), React.createElement("div", undefined, React.createElement("button", {
                                      className: form.isSubmitting || !isFormFilled(undefined) ? "w-full mt-12 h-14 flex justify-center items-center bg-gray-300 rounded-xl text-white font-bold" : "w-full mt-12 h-14 flex justify-center items-center bg-black-gl rounded-xl text-white font-bold focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-black",
                                      disabled: form.isSubmitting || !isFormFilled(undefined),
                                      type: "submit"
                                    }, "로그인"), React.createElement("p", {
                                      className: "p-4 mt-8 rounded-xl border border-gray-100"
                                    }, React.createElement("span", {
                                          className: "block text-gray-500 font-semibold"
                                        }, "* 첫 발주이신가요?"), React.createElement("span", {
                                          className: "text-gray-500"
                                        }, "가입하신 이메일로 비밀번호 설정하는 방법을 보내드렸습니다. 이메일 확인 부탁드립니다.")))), React.createElement("div", {
                              className: "pt-7"
                            }, React.createElement("button", {
                                  className: "w-full h-14 flex justify-center items-center bg-gray-gl rounded-xl",
                                  onClick: (function (param) {
                                      router.push("/buyer/signup");
                                      
                                    })
                                }, React.createElement("span", {
                                      className: "text-enabled-L1"
                                    }, "회원가입")))))), React.createElement(Dialog.make, {
                  isShow: match[0],
                  children: React.createElement(SignIn_Buyer_Set_Password.make, {
                        onSuccess: match[1],
                        onError: setShowErrorSetPassword
                      }),
                  boxStyle: "overflow-auto"
                }), React.createElement(Dialog.make, {
                  isShow: match$3[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "로그인 정보가 일치하지 않거나 없는 계정입니다. 다시 한번 입력해주세요."),
                  onConfirm: (function (param) {
                      return setShowForError(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  confirmBg: "#ECECEC",
                  confirmTextColor: "#262626"
                }), React.createElement(Dialog.make, {
                  isShow: match$1[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "비밀번호 재설정에 실패하였습니다.\n다시 시도해주세요."),
                  onConfirm: (function (param) {
                      return setShowErrorSetPassword(function (param) {
                                  return /* Hide */1;
                                });
                    })
                }), React.createElement(Dialog.make, {
                  isShow: match$4[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "신선하이를 이용하시려면 비밀번호 재설정이 필요합니다. 이메일로 재설정 메일을 보내드렸습니다. 메일함을 확인해주세요."),
                  onConfirm: (function (param) {
                      return setShowForExisted(function (param) {
                                  return /* Hide */1;
                                });
                    })
                }));
}

function getServerSideProps(param) {
  return Promise.resolve({
              props: {
                query: param.query
              }
            });
}

var FormFields;

var Form;

var SetPassword;

var useSetPassword = CustomHooks.useSetPassword;

export {
  FormFields ,
  Form ,
  SetPassword ,
  useSetPassword ,
  $$default ,
  $$default as default,
  getServerSideProps ,
  
}
/* Env Not a pure module */
