// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Locale from "../../utils/Locale.mjs";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as IconClose from "../../components/svgs/IconClose.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Pagination from "../../components/common/Pagination.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as ReactDialog from "@radix-ui/react-dialog";

var order = {
  paymentWithFees: 10000000000.0,
  payment: 10000000000.0,
  debt: 10000000.0,
  loanFees: 200000.0,
  lateFees: 4000.0,
  debtDueDate: "2019-08-24",
  createdAt: "2019-08-24",
  state: "상환 완료"
};

var orderShort = {
  paymentWithFees: 10000000000.0,
  payment: 10000.0,
  debt: 100.0,
  loanFees: 20.0,
  lateFees: 40.0,
  debtDueDate: "2019-08-24",
  createdAt: "2019-08-24",
  state: "상환 완료"
};

var data = [
  order,
  order,
  orderShort,
  order
];

var Mock = {
  order: order,
  orderShort: orderShort,
  data: data
};

function After_Pay_Orders_List$Th(Props) {
  var children = Props.children;
  return React.createElement("th", {
              className: "font-normal p-2 bg-gray-50"
            }, children);
}

var Th = {
  make: After_Pay_Orders_List$Th
};

var tdBorderBottom = "p-3 border-b border-gray-200 ";

function After_Pay_Orders_List$Td(Props) {
  var className = Props.className;
  var children = Props.children;
  var mergedClassName = Belt_Option.getWithDefault(className, "");
  return React.createElement("td", {
              className: tdBorderBottom + mergedClassName
            }, children);
}

var Td = {
  tdBorderBottom: tdBorderBottom,
  make: After_Pay_Orders_List$Td
};

function After_Pay_Orders_List$List(Props) {
  var data = Props.data;
  var makeDate = function (d) {
    return Belt_Option.getWithDefault(Belt_Array.get(d.split(" "), 0), "-");
  };
  return React.createElement("table", {
              className: "text-[0.8125rem] w-[35rem]"
            }, React.createElement("thead", undefined, React.createElement("tr", undefined, React.createElement(After_Pay_Orders_List$Th, {
                          children: "주문일"
                        }), React.createElement(After_Pay_Orders_List$Th, {
                          children: "나중결제 주문금액"
                        }), React.createElement(After_Pay_Orders_List$Th, {
                          children: "상환 필요 금액*"
                        }), React.createElement(After_Pay_Orders_List$Th, {
                          children: "만기일"
                        }), React.createElement(After_Pay_Orders_List$Th, {
                          children: "상환 상태"
                        }))), React.createElement("tbody", undefined, Belt_Array.mapWithIndex(data, (function (i, order) {
                        var match = order.state;
                        var stateColor = match !== 3 ? "" : " text-red-500";
                        return React.createElement("tr", {
                                    key: String(i)
                                  }, React.createElement(After_Pay_Orders_List$Td, {
                                        className: "text-center",
                                        children: makeDate(order.createdAt)
                                      }), React.createElement(After_Pay_Orders_List$Td, {
                                        className: "text-right",
                                        children: null
                                      }, Locale.Float.show(undefined, order.payment, 0), "원"), React.createElement(After_Pay_Orders_List$Td, {
                                        className: "text-right",
                                        children: null
                                      }, Locale.Float.show(undefined, order.paymentWithFees, 0), "원"), React.createElement(After_Pay_Orders_List$Td, {
                                        className: "text-center",
                                        children: makeDate(order.debtDueDate)
                                      }), React.createElement(After_Pay_Orders_List$Td, {
                                        className: "text-center" + stateColor,
                                        children: CustomHooks.AfterPayOrdersList.stateToString(order.state)
                                      }));
                      }))));
}

var List = {
  make: After_Pay_Orders_List$List
};

function After_Pay_Orders_List$Dialog(Props) {
  var open_ = Props.open_;
  var children = Props.children;
  return React.createElement(ReactDialog.Root, {
              children: null,
              open: open_
            }, React.createElement(ReactDialog.Overlay, {
                  className: "dialog-overlay"
                }), React.createElement(ReactDialog.Content, {
                  children: children,
                  className: "w-fit shadow-[0px_10px_40px_10px_rgba(0,0,0,0.3)] rounded-2xl p-5 dialog-content-nosize"
                }));
}

var Dialog = {
  make: After_Pay_Orders_List$Dialog
};

function useFetchWithPrevios(page) {
  var fetchedData = CustomHooks.AfterPayOrdersList.use(page);
  var previous = React.useRef(/* Loading */0);
  React.useEffect((function () {
          if (typeof fetchedData === "number") {
            
          } else {
            previous.current = fetchedData;
          }
        }), [fetchedData]);
  if (typeof fetchedData === "number") {
    return previous.current;
  } else {
    return fetchedData;
  }
}

function After_Pay_Orders_List$View(Props) {
  var setOpen = Props.setOpen;
  var match = React.useState(function () {
        return 1;
      });
  var setPage = match[1];
  var page = match[0];
  var data = useFetchWithPrevios(page);
  var handleClose = function (param) {
    setOpen(function (param) {
          return false;
        });
  };
  var handleOnChangePage = function (e) {
    e.preventDefault();
    e.stopPropagation();
    var value = e.currentTarget.value;
    setPage(function (param) {
          return Belt_Option.getWithDefault(Belt_Int.fromString(value), 1);
        });
  };
  var totalCount;
  totalCount = typeof data === "number" || data.TAG !== /* Loaded */0 ? 0 : data._0.totalCount;
  var tmp;
  if (typeof data === "number") {
    tmp = "loading";
  } else if (data.TAG === /* Loaded */0) {
    var list = data._0;
    tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement(After_Pay_Orders_List$List, {
                  data: list.data
                }), React.createElement("div", {
                  className: "ml-auto text-[0.8125rem] text-gray-500"
                }, "*상환 필요 금액 : 수수료, 연체료 포함")), React.createElement(Pagination.Template.make, {
              cur: page,
              pageDisplySize: 5,
              itemPerPage: list.size,
              total: list.totalCount,
              handleOnChangePage: handleOnChangePage
            }));
  } else {
    tmp = null;
  }
  return React.createElement("div", {
              className: "flex flex-col items-center gap-7"
            }, React.createElement("div", {
                  className: "w-full flex items-center"
                }, React.createElement("div", undefined, React.createElement("span", {
                          className: "text-xl font-bold"
                        }, "나중결제 이용 내역"), React.createElement("span", {
                          className: "text-green-500"
                        }, " " + String(totalCount) + "건")), React.createElement("div", {
                      className: "ml-auto"
                    }, React.createElement("button", {
                          onClick: handleClose
                        }, React.createElement(IconClose.make, {
                              height: "24",
                              width: "24",
                              fill: "#262626"
                            })))), tmp);
}

var View = {
  useFetchWithPrevios: useFetchWithPrevios,
  make: After_Pay_Orders_List$View
};

function After_Pay_Orders_List(Props) {
  var open_ = Props.open_;
  var setOpen = Props.setOpen;
  return React.createElement(After_Pay_Orders_List$Dialog, {
              open_: open_,
              children: React.createElement(After_Pay_Orders_List$View, {
                    setOpen: setOpen
                  })
            });
}

var make = After_Pay_Orders_List;

export {
  Mock ,
  Th ,
  Td ,
  List ,
  Dialog ,
  View ,
  make ,
}
/* react Not a pure module */
