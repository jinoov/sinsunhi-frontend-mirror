// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "@rescript/react/src/React.mjs";
import * as React$1 from "react";
import * as Global from "../../../components/Global.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../../utils/CustomHooks.mjs";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as Footer_Buyer from "../../../components/Footer_Buyer.mjs";
import * as Header_Buyer from "../../../components/Header_Buyer.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as PLP_SortSelect from "./PLP_SortSelect.mjs";
import * as PLP_FilterOption from "./PLP_FilterOption.mjs";
import * as PLP_Header_Buyer from "./PLP_Header_Buyer.mjs";
import * as ChannelTalkHelper from "../../../utils/ChannelTalkHelper.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as PLP_Scrollable_Header from "./PLP_Scrollable_Header.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as PLP_SectionCheckBoxGroup from "./PLP_SectionCheckBoxGroup.mjs";
import * as ShopProductListItem_Buyer from "../../../components/ShopProductListItem_Buyer.mjs";
import * as RescriptReactErrorBoundary from "@rescript/react/src/RescriptReactErrorBoundary.mjs";
import * as PLPDisplayCategoryBuyerQuery_graphql from "../../../__generated__/PLPDisplayCategoryBuyerQuery_graphql.mjs";
import * as PLPDisplayCategoryBuyerFragment_graphql from "../../../__generated__/PLPDisplayCategoryBuyerFragment_graphql.mjs";
import * as PLPDisplayCategoryBuyerRefetchQuery_graphql from "../../../__generated__/PLPDisplayCategoryBuyerRefetchQuery_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(PLPDisplayCategoryBuyerQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(PLPDisplayCategoryBuyerQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(PLPDisplayCategoryBuyerQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(PLPDisplayCategoryBuyerQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React$1.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, PLPDisplayCategoryBuyerQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, PLPDisplayCategoryBuyerQuery_graphql.node, PLPDisplayCategoryBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: PLPDisplayCategoryBuyerQuery_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, PLPDisplayCategoryBuyerQuery_graphql.node, PLPDisplayCategoryBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(PLPDisplayCategoryBuyerQuery_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(PLPDisplayCategoryBuyerQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PLPDisplayCategoryBuyerQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(PLPDisplayCategoryBuyerQuery_graphql.node, PLPDisplayCategoryBuyerQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_displayCategoryProductsSort_decode = PLPDisplayCategoryBuyerQuery_graphql.Utils.displayCategoryProductsSort_decode;

var Query_displayCategoryProductsSort_fromString = PLPDisplayCategoryBuyerQuery_graphql.Utils.displayCategoryProductsSort_fromString;

var Query_productType_decode = PLPDisplayCategoryBuyerQuery_graphql.Utils.productType_decode;

var Query_productType_fromString = PLPDisplayCategoryBuyerQuery_graphql.Utils.productType_fromString;

var Query = {
  displayCategoryProductsSort_decode: Query_displayCategoryProductsSort_decode,
  displayCategoryProductsSort_fromString: Query_displayCategoryProductsSort_fromString,
  productType_decode: Query_productType_decode,
  productType_fromString: Query_productType_fromString,
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function internal_makeRefetchableFnOpts(fetchPolicy, onComplete, param) {
  var tmp = {};
  var tmp$1 = RescriptRelay.mapFetchPolicy(fetchPolicy);
  if (tmp$1 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = RescriptRelay_Internal.internal_nullableToOptionalExnHandler(onComplete);
  if (tmp$2 !== undefined) {
    tmp.onComplete = Caml_option.valFromOption(tmp$2);
  }
  return tmp;
}

function useRefetchable(fRef) {
  var match = ReactRelay.useRefetchableFragment(PLPDisplayCategoryBuyerFragment_graphql.node, fRef);
  var refetchFn = match[1];
  var data = RescriptRelay_Internal.internal_useConvertedValue(PLPDisplayCategoryBuyerFragment_graphql.Internal.convertFragment, match[0]);
  return [
          data,
          React$1.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return Curry._2(refetchFn, RescriptRelay_Internal.internal_removeUndefinedAndConvertNullsRaw(PLPDisplayCategoryBuyerRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [refetchFn])
        ];
}

function use$1(fRef) {
  var data = ReactRelay.useFragment(PLPDisplayCategoryBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PLPDisplayCategoryBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(PLPDisplayCategoryBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PLPDisplayCategoryBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

function usePagination(fr) {
  var p = ReactRelay.usePaginationFragment(PLPDisplayCategoryBuyerFragment_graphql.node, fr);
  var data = RescriptRelay_Internal.internal_useConvertedValue(PLPDisplayCategoryBuyerFragment_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React$1.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React$1.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          isLoadingNext: p.isLoadingNext,
          isLoadingPrevious: p.isLoadingPrevious,
          refetch: React$1.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(PLPDisplayCategoryBuyerRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

function useBlockingPagination(fRef) {
  var p = ReactRelay.useBlockingPaginationFragment(PLPDisplayCategoryBuyerFragment_graphql.node, fRef);
  var data = RescriptRelay_Internal.internal_useConvertedValue(PLPDisplayCategoryBuyerFragment_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React$1.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React$1.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          refetch: React$1.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(PLPDisplayCategoryBuyerRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

var makeRefetchVariables = PLPDisplayCategoryBuyerRefetchQuery_graphql.Types.makeRefetchVariables;

var Fragment_getConnectionNodes = PLPDisplayCategoryBuyerFragment_graphql.Utils.getConnectionNodes;

var Fragment_displayCategoryType_decode = PLPDisplayCategoryBuyerFragment_graphql.Utils.displayCategoryType_decode;

var Fragment_displayCategoryType_fromString = PLPDisplayCategoryBuyerFragment_graphql.Utils.displayCategoryType_fromString;

var Fragment = {
  getConnectionNodes: Fragment_getConnectionNodes,
  displayCategoryType_decode: Fragment_displayCategoryType_decode,
  displayCategoryType_fromString: Fragment_displayCategoryType_fromString,
  Types: undefined,
  internal_makeRefetchableFnOpts: internal_makeRefetchableFnOpts,
  useRefetchable: useRefetchable,
  Operation: undefined,
  use: use$1,
  useOpt: useOpt,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination,
  makeRefetchVariables: makeRefetchVariables
};

function PLP_DisplayCategory_Buyer$PC(props) {
  var displayCategoryId = props.displayCategoryId;
  var router = Router.useRouter();
  var match = usePagination(props.query);
  var hasNext = match.hasNext;
  var loadNext = match.loadNext;
  var match$1 = match.data;
  var name = match$1.name;
  var loadMoreRef = React$1.useRef(null);
  var isIntersecting = CustomHooks.$$IntersectionObserver.use(undefined, loadMoreRef, 0.1, "50px", undefined);
  var isNoneSectionType = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(router.query, "section-type"), (function (sectionType) {
              return sectionType === "none";
            })), false);
  React$1.useEffect((function () {
          if (hasNext && isIntersecting) {
            Curry._3(loadNext, 20, undefined, undefined);
          }
          
        }), [
        hasNext,
        isIntersecting
      ]);
  React$1.useEffect((function () {
          Curry._3(Global.$$Window.ReactNativeWebView.PostMessage.airbridgeWithPayload, "VIEW_PRODUCT_LIST", {
                listID: displayCategoryId,
                action: name
              }, undefined);
        }), []);
  var match$2 = match$1.products.edges;
  var tmp;
  var exit = 0;
  if (isNoneSectionType || match$2.length === 0) {
    exit = 1;
  } else {
    tmp = React$1.createElement("div", {
          className: "w-[1280px] pt-20 px-5 pb-16 mx-auto min-h-full"
        }, React$1.createElement(PLP_Scrollable_Header.PC.make, {
              parentId: displayCategoryId
            }), React$1.createElement("div", {
              className: "mt-[64px]"
            }, match$1.type_ === "NORMAL" ? React$1.createElement("div", {
                    className: "mb-12 w-full flex items-center justify-between"
                  }, React$1.createElement(PLP_SectionCheckBoxGroup.PC.make, {}), React$1.createElement(PLP_SortSelect.PC.make, {})) : null, React$1.createElement("ol", {
                  className: "grid grid-cols-4 gap-x-10 gap-y-16"
                }, Belt_Array.map(match$2, (function (param) {
                        return React.createElementWithKey(ShopProductListItem_Buyer.PC.make, {
                                    query: param.node.fragmentRefs
                                  }, param.cursor);
                      }))), React$1.createElement("div", {
                  ref: loadMoreRef,
                  className: "h-20 w-full"
                })));
  }
  if (exit === 1) {
    tmp = React$1.createElement(React$1.Fragment, undefined, React$1.createElement("div", {
              className: "w-[1280px] pt-20 px-5 pb-16 mx-auto min-h-full"
            }, React$1.createElement(PLP_Scrollable_Header.PC.make, {
                  parentId: displayCategoryId
                }), React$1.createElement("div", {
                  className: "mt-[64px]"
                }, React$1.createElement("div", {
                      className: "mb-12 w-full flex items-center justify-between"
                    }, React$1.createElement(PLP_SectionCheckBoxGroup.PC.make, {}))), React$1.createElement("div", {
                  className: "pt-20 flex flex-col items-center justify-center text-gray-800"
                }, React$1.createElement("h1", {
                      className: "text-3xl"
                    }, "상품이 존재하지 않습니다"), React$1.createElement("span", {
                      className: "mt-7"
                    }, "해당 카테고리에 상품이 존재하지 않습니다."), React$1.createElement("span", undefined, "다른 카테고리를 선택해 주세요."))));
  }
  return React$1.createElement("div", {
              className: "w-full min-w-[1280px] min-h-screen"
            }, React.createElementWithKey(Header_Buyer.PC.make, {
                  gnbBanners: props.gnbBanners,
                  displayCategories: props.displayCategories
                }, router.asPath), tmp, React$1.createElement(Footer_Buyer.PC.make, {}));
}

var PC = {
  make: PLP_DisplayCategory_Buyer$PC
};

function PLP_DisplayCategory_Buyer$MO(props) {
  var displayCategoryId = props.displayCategoryId;
  var router = Router.useRouter();
  var match = usePagination(props.query);
  var hasNext = match.hasNext;
  var loadNext = match.loadNext;
  var match$1 = match.data;
  var name = match$1.name;
  var loadMoreRef = React$1.useRef(null);
  var isIntersecting = CustomHooks.$$IntersectionObserver.use(undefined, loadMoreRef, 0.1, "50px", undefined);
  var isNoneSectionType = Belt_Option.getWithDefault(Belt_Option.map(Js_dict.get(router.query, "section-type"), (function (sectionType) {
              return sectionType === "none";
            })), false);
  React$1.useEffect((function () {
          if (hasNext && isIntersecting) {
            Curry._3(loadNext, 20, undefined, undefined);
          }
          
        }), [
        hasNext,
        isIntersecting
      ]);
  React$1.useEffect((function () {
          Curry._3(Global.$$Window.ReactNativeWebView.PostMessage.airbridgeWithPayload, "VIEW_PRODUCT_LIST", {
                listID: displayCategoryId,
                action: name
              }, undefined);
        }), []);
  var match$2 = match$1.products.edges;
  var tmp;
  var exit = 0;
  if (isNoneSectionType || match$2.length === 0) {
    exit = 1;
  } else {
    tmp = React$1.createElement("div", {
          className: "w-full pt-[18px] px-5"
        }, match$1.type_ === "NORMAL" ? React$1.createElement("div", {
                className: "mb-4 w-full flex items-center justify-between"
              }, React$1.createElement(PLP_SectionCheckBoxGroup.MO.make, {}), React$1.createElement(PLP_SortSelect.MO.make, {})) : null, React$1.createElement("ol", {
              className: "grid grid-cols-2 gap-x-4 gap-y-8"
            }, Belt_Array.map(match$2, (function (param) {
                    return React.createElementWithKey(ShopProductListItem_Buyer.MO.make, {
                                query: param.node.fragmentRefs
                              }, param.cursor);
                  }))), React$1.createElement("div", {
              ref: loadMoreRef,
              className: "h-20 w-full"
            }));
  }
  if (exit === 1) {
    tmp = React$1.createElement("div", {
          className: "w-full pt-[18px] px-5"
        }, React$1.createElement("div", {
              className: "mb-4 w-full flex items-center justify-between"
            }, React$1.createElement(PLP_SectionCheckBoxGroup.MO.make, {})), React$1.createElement("div", {
              className: "py-[126px] flex flex-col items-center justify-center text-gray-800 px-5"
            }, React$1.createElement("h1", {
                  className: "text-xl"
                }, "상품이 존재하지 않습니다"), React$1.createElement("span", {
                  className: "mt-2 text-sm text-gray-600 text-center"
                }, "해당 카테고리에 상품이 존재하지 않습니다."), React$1.createElement("span", {
                  className: "mt-2 text-sm text-gray-600 text-center"
                }, "다른 카테고리를 선택해 주세요.")));
  }
  return React$1.createElement("div", {
              className: "w-full min-h-screen bg-white"
            }, React$1.createElement("div", {
                  className: "w-full max-w-3xl mx-auto bg-white min-h-screen"
                }, React.createElementWithKey(PLP_Header_Buyer.make, {}, router.asPath), React$1.createElement(PLP_Scrollable_Header.MO.make, {
                      parentId: displayCategoryId
                    }), tmp, React$1.createElement(Footer_Buyer.MO.make, {})));
}

var MO = {
  make: PLP_DisplayCategory_Buyer$MO
};

function PLP_DisplayCategory_Buyer$Placeholder(props) {
  var router = Router.useRouter();
  switch (props.deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React$1.createElement("div", {
                    className: "w-full min-w-[1280px] min-h-screen"
                  }, React.createElementWithKey(Header_Buyer.PC.make, {
                        gnbBanners: props.gnbBanners,
                        displayCategories: props.displayCategories
                      }, router.asPath), React$1.createElement("div", {
                        className: "w-[1280px] pt-[92px] px-5 pb-16 mx-auto"
                      }, React$1.createElement(PLP_Scrollable_Header.PC.Skeleton.make, {}), React$1.createElement("section", {
                            className: "w-full mt-[64px]"
                          }, React$1.createElement("ol", {
                                className: "grid grid-cols-4 gap-x-10 gap-y-16"
                              }, Belt_Array.map(Belt_Array.range(1, 300), (function (number) {
                                      return React.createElementWithKey(ShopProductListItem_Buyer.PC.Placeholder.make, {}, "box-" + String(number) + "");
                                    }))))), React$1.createElement(Footer_Buyer.PC.make, {}));
    case /* Mobile */2 :
        return React$1.createElement("div", {
                    className: "w-full min-h-screen bg-white"
                  }, React$1.createElement("div", {
                        className: "w-full max-w-3xl mx-auto bg-white min-h-screen"
                      }, React.createElementWithKey(Header_Buyer.Mobile.make, {}, router.asPath), React$1.createElement("div", {
                            className: "w-full py-4 px-5"
                          }, React$1.createElement("div", {
                                className: "mb-4 w-full flex items-center justify-end"
                              }, React$1.createElement("div", {
                                    className: "w-12 h-5 bg-gray-150 rounded-lg animate-pulse"
                                  })), React$1.createElement("ol", {
                                className: "grid grid-cols-2 gap-x-4 gap-y-8"
                              }, Belt_Array.map(Belt_Array.range(1, 300), (function (num) {
                                      return React.createElementWithKey(ShopProductListItem_Buyer.MO.Placeholder.make, {}, "list-item-skeleton-" + String(num) + "");
                                    })))), React$1.createElement(Footer_Buyer.MO.make, {})));
    
  }
}

var Placeholder = {
  make: PLP_DisplayCategory_Buyer$Placeholder
};

function PLP_DisplayCategory_Buyer$NotFound(props) {
  var router = Router.useRouter();
  switch (props.deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React$1.createElement("div", {
                    className: "w-full min-w-[1280px] min-h-screen"
                  }, React.createElementWithKey(Header_Buyer.PC.make, {
                        gnbBanners: props.gnbBanners,
                        displayCategories: props.displayCategories
                      }, router.asPath), React$1.createElement("div", {
                        className: "pt-20 flex flex-col items-center justify-center text-gray-800"
                      }, React$1.createElement("h1", {
                            className: "text-3xl"
                          }, "카테고리를 찾을 수 없습니다"), React$1.createElement("span", {
                            className: "mt-7"
                          }, "해당 카테고리를 찾을 수 없습니다."), React$1.createElement("span", undefined, "다른 카테고리를 선택해 주세요.")), React$1.createElement(Footer_Buyer.PC.make, {}));
    case /* Mobile */2 :
        return React$1.createElement("div", {
                    className: "w-full min-h-screen bg-white"
                  }, React$1.createElement("div", {
                        className: "w-full max-w-3xl mx-auto bg-white min-h-screen"
                      }, React.createElementWithKey(Header_Buyer.Mobile.make, {}, router.asPath), React$1.createElement("div", {
                            className: "pt-[126px] flex flex-col items-center justify-center text-gray-800 px-5"
                          }, React$1.createElement("h1", {
                                className: "text-xl"
                              }, "카테고리를 찾을 수 없습니다"), React$1.createElement("span", {
                                className: "mt-2 text-sm text-gray-600 text-center"
                              }, "해당 카테고리를 찾을 수 없습니다."), React$1.createElement("span", {
                                className: "mt-2 text-sm text-gray-600 text-center"
                              }, "다른 카테고리를 선택해 주세요.")), React$1.createElement(Footer_Buyer.MO.make, {})));
    
  }
}

var NotFound = {
  make: PLP_DisplayCategory_Buyer$NotFound
};

function PLP_DisplayCategory_Buyer$Presenter(props) {
  var displayCategoryId = props.displayCategoryId;
  var query = props.query;
  switch (props.deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React$1.createElement(PLP_DisplayCategory_Buyer$PC, {
                    query: query,
                    displayCategoryId: displayCategoryId,
                    gnbBanners: props.gnbBanners,
                    displayCategories: props.displayCategories
                  });
    case /* Mobile */2 :
        return React$1.createElement(PLP_DisplayCategory_Buyer$MO, {
                    query: query,
                    displayCategoryId: displayCategoryId
                  });
    
  }
}

var Presenter = {
  make: PLP_DisplayCategory_Buyer$Presenter
};

function PLP_DisplayCategory_Buyer$Container(props) {
  var displayCategories = props.displayCategories;
  var gnbBanners = props.gnbBanners;
  var displayCategoryId = props.displayCategoryId;
  var deviceType = props.deviceType;
  ChannelTalkHelper.Hook.use(undefined, undefined, undefined);
  var router = Router.useRouter();
  var productType = PLP_FilterOption.Section.toQueryParam(PLP_FilterOption.Section.make(Js_dict.get(router.query, "section-type")));
  var tmp = {
    count: 20,
    displayCategoryId: displayCategoryId,
    onlyBuyable: true,
    productType: productType
  };
  if (props.sort !== undefined) {
    tmp.sort = Caml_option.valFromOption(props.sort);
  }
  var variables = tmp;
  var match = use(variables, /* StoreOrNetwork */1, undefined, undefined, undefined);
  var node = match.node;
  if (node !== undefined) {
    return React$1.createElement(PLP_DisplayCategory_Buyer$Presenter, {
                deviceType: deviceType,
                query: node.fragmentRefs,
                displayCategoryId: displayCategoryId,
                gnbBanners: gnbBanners,
                displayCategories: displayCategories
              });
  } else {
    return React$1.createElement(PLP_DisplayCategory_Buyer$NotFound, {
                deviceType: deviceType,
                gnbBanners: gnbBanners,
                displayCategories: displayCategories
              });
  }
}

var Container = {
  make: PLP_DisplayCategory_Buyer$Container
};

function PLP_DisplayCategory_Buyer(props) {
  var displayCategories = props.displayCategories;
  var gnbBanners = props.gnbBanners;
  var deviceType = props.deviceType;
  var router = Router.useRouter();
  var sectionType = PLP_FilterOption.Section.make(Js_dict.get(router.query, "section-type"));
  var sort = Belt_Option.map(Js_dict.get(router.query, "sort"), (function (sort) {
          return PLP_FilterOption.Sort.decodeSort(sectionType, sort);
        }));
  return React$1.createElement(RescriptReactErrorBoundary.make, {
              children: React$1.createElement(React$1.Suspense, {
                    children: Caml_option.some(React$1.createElement(PLP_DisplayCategory_Buyer$Container, {
                              deviceType: deviceType,
                              displayCategoryId: props.displayCategoryId,
                              sort: sort,
                              gnbBanners: gnbBanners,
                              displayCategories: displayCategories
                            })),
                    fallback: Caml_option.some(React$1.createElement(PLP_DisplayCategory_Buyer$Placeholder, {
                              deviceType: deviceType,
                              gnbBanners: gnbBanners,
                              displayCategories: displayCategories
                            }))
                  }),
              fallback: (function (param) {
                  return React$1.createElement(PLP_DisplayCategory_Buyer$Placeholder, {
                              deviceType: deviceType,
                              gnbBanners: gnbBanners,
                              displayCategories: displayCategories
                            });
                })
            });
}

var make = PLP_DisplayCategory_Buyer;

export {
  Query ,
  Fragment ,
  PC ,
  MO ,
  Placeholder ,
  NotFound ,
  Presenter ,
  Container ,
  make ,
}
/* React Not a pure module */
