// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cn from "rescript-classnames/src/Cn.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactEvents from "../../../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as Product_FilterOption from "../Product_FilterOption.mjs";
import * as ReactDropdownMenu from "@radix-ui/react-dropdown-menu";
import ArrowGray800UpDownSvg from "../../../../public/assets/arrow-gray800-up-down.svg";

var arrowUpDownIcon = ArrowGray800UpDownSvg;

function PLP_SortSelect$SortSelectDropDownItem(Props) {
  var sortOption = Props.sortOption;
  var itemWidth = Props.itemWidth;
  var makeOnSelect = Props.makeOnSelect;
  return React.createElement(ReactDropdownMenu.Item, {
              children: Product_FilterOption.Sort.toSortLabel(sortOption),
              className: Cn.make([
                    itemWidth,
                    "p-2 focus:outline-none text-gray-800 hover:bg-gray-100 rounded-lg"
                  ]),
              onSelect: Curry._1(makeOnSelect, sortOption)
            });
}

var SortSelectDropDownItem = {
  make: PLP_SortSelect$SortSelectDropDownItem
};

function PLP_SortSelect$PC(Props) {
  var router = Router.useRouter();
  var sectionType = Product_FilterOption.Section.fromUrlParameter(Js_dict.get(router.query, "section"));
  var sort = Belt_Option.getWithDefault(Belt_Option.flatMap(sectionType, (function (sectionType$p) {
              return Product_FilterOption.Sort.make(sectionType$p, Js_dict.get(router.query, "sort"));
            })), Product_FilterOption.Sort.defaultValue);
  var label = Product_FilterOption.Sort.toSortLabel(sort);
  var itemWidth = sectionType === "MATCHING" ? "w-[140px]" : "w-[120px]";
  var match = React.useState(function () {
        return false;
      });
  var setOpen = match[1];
  var makeOnSelect = function (sort) {
    return function (param) {
      return ReactEvents.interceptingHandler((function (param) {
                    setOpen(function (param) {
                          return false;
                        });
                    var newQuery = router.query;
                    newQuery["sort"] = Product_FilterOption.Sort.toString(sort);
                    router.replace({
                          pathname: router.pathname,
                          query: Caml_option.some(newQuery)
                        });
                  }), param);
    };
  };
  return React.createElement("div", {
              className: "flex items-center"
            }, React.createElement("span", {
                  className: "text-gray-600 text-sm"
                }, "정렬기준: "), React.createElement(ReactDropdownMenu.Root, {
                  children: null,
                  open: match[0],
                  onOpenChange: (function (to_) {
                      setOpen(function (param) {
                            return to_;
                          });
                    })
                }, React.createElement(ReactDropdownMenu.Trigger, {
                      children: React.createElement("div", {
                            className: "ml-2 flex items-center justify-center"
                          }, React.createElement("span", {
                                className: "text-sm mr-1 text-gray-800"
                              }, label), React.createElement("img", {
                                className: "w-[11px] h-3",
                                alt: "상품의 정렬 순서를 변경합니다.",
                                src: arrowUpDownIcon
                              })),
                      className: "focus:outline-none"
                    }), React.createElement(ReactDropdownMenu.Content, {
                      children: null,
                      align: "start",
                      className: "dropdown-content bg-white shadow-lg p-1 border border-[#cccccc] rounded-lg cursor-pointer"
                    }, React.createElement(PLP_SortSelect$SortSelectDropDownItem, {
                          sortOption: "POPULARITY_DESC",
                          itemWidth: itemWidth,
                          makeOnSelect: makeOnSelect
                        }), React.createElement(PLP_SortSelect$SortSelectDropDownItem, {
                          sortOption: "UPDATED_DESC",
                          itemWidth: itemWidth,
                          makeOnSelect: makeOnSelect
                        }), React.createElement(PLP_SortSelect$SortSelectDropDownItem, {
                          sortOption: sectionType === "MATCHING" ? "PRICE_PER_KG_ASC" : "PRICE_ASC",
                          itemWidth: itemWidth,
                          makeOnSelect: makeOnSelect
                        }))));
}

var PC = {
  make: PLP_SortSelect$PC
};

function PLP_SortSelect$MO(Props) {
  var router = Router.useRouter();
  var sectionType = Product_FilterOption.Section.fromUrlParameter(Js_dict.get(router.query, "section"));
  var sort = Belt_Option.getWithDefault(Belt_Option.flatMap(sectionType, (function (sectionType$p) {
              return Product_FilterOption.Sort.make(sectionType$p, Js_dict.get(router.query, "sort"));
            })), Product_FilterOption.Sort.defaultValue);
  var label = Product_FilterOption.Sort.toSortLabel(sort);
  var itemWidth = sectionType === "MATCHING" ? "w-[140px]" : "w-[120px]";
  var match = React.useState(function () {
        return false;
      });
  var setOpen = match[1];
  var makeOnSelect = function (sort) {
    return function (param) {
      return ReactEvents.interceptingHandler((function (param) {
                    setOpen(function (param) {
                          return false;
                        });
                    var newQuery = router.query;
                    newQuery["sort"] = Product_FilterOption.Sort.toString(sort);
                    router.replace({
                          pathname: router.pathname,
                          query: Caml_option.some(newQuery)
                        });
                  }), param);
    };
  };
  return React.createElement("div", {
              className: "flex items-center"
            }, React.createElement(ReactDropdownMenu.Root, {
                  children: null,
                  open: match[0],
                  onOpenChange: (function (to_) {
                      setOpen(function (param) {
                            return to_;
                          });
                    })
                }, React.createElement(ReactDropdownMenu.Trigger, {
                      children: React.createElement("div", {
                            className: "ml-2 flex items-center justify-center"
                          }, React.createElement("span", {
                                className: "text-sm mr-1 text-gray-800"
                              }, label), React.createElement("img", {
                                src: arrowUpDownIcon
                              })),
                      className: "focus:outline-none"
                    }), React.createElement(ReactDropdownMenu.Content, {
                      children: null,
                      align: "start",
                      className: "dropdown-content bg-white shadow-lg p-1 border border-[#cccccc] rounded-lg cursor-pointer"
                    }, React.createElement(PLP_SortSelect$SortSelectDropDownItem, {
                          sortOption: Product_FilterOption.Sort.defaultValue,
                          itemWidth: itemWidth,
                          makeOnSelect: makeOnSelect
                        }), React.createElement(PLP_SortSelect$SortSelectDropDownItem, {
                          sortOption: "UPDATED_DESC",
                          itemWidth: itemWidth,
                          makeOnSelect: makeOnSelect
                        }), React.createElement(PLP_SortSelect$SortSelectDropDownItem, {
                          sortOption: sectionType === "MATCHING" ? "PRICE_PER_KG_ASC" : "PRICE_ASC",
                          itemWidth: itemWidth,
                          makeOnSelect: makeOnSelect
                        }))));
}

var MO = {
  make: PLP_SortSelect$MO
};

export {
  arrowUpDownIcon ,
  SortSelectDropDownItem ,
  PC ,
  MO ,
}
/* arrowUpDownIcon Not a pure module */
