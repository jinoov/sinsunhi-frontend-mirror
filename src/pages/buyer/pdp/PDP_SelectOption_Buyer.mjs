// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Skeleton from "../../../components/Skeleton.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../../utils/CustomHooks.mjs";
import * as ReactEvents from "../../../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as IconArrowSelect from "../../../components/svgs/IconArrowSelect.mjs";
import * as PDP_Parser_Buyer from "../../../utils/PDP_Parser_Buyer.mjs";
import * as ShopDialog_Buyer from "../ShopDialog_Buyer.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactScrollArea from "@radix-ui/react-scroll-area";
import * as ReactDropdownMenu from "@radix-ui/react-dropdown-menu";
import * as PDPSelectOptionBuyerFragment_graphql from "../../../__generated__/PDPSelectOptionBuyerFragment_graphql.mjs";
import * as PDPSelectOptionBuyerItemFragment_graphql from "../../../__generated__/PDPSelectOptionBuyerItemFragment_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(PDPSelectOptionBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPSelectOptionBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PDPSelectOptionBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPSelectOptionBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var List_productStatus_decode = PDPSelectOptionBuyerFragment_graphql.Utils.productStatus_decode;

var List_productStatus_fromString = PDPSelectOptionBuyerFragment_graphql.Utils.productStatus_fromString;

var List = {
  productStatus_decode: List_productStatus_decode,
  productStatus_fromString: List_productStatus_fromString,
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function use$1(fRef) {
  var data = Hooks.useFragment(PDPSelectOptionBuyerItemFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPSelectOptionBuyerItemFragment_graphql.Internal.convertFragment, data);
}

function useOpt$1(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PDPSelectOptionBuyerItemFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPSelectOptionBuyerItemFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Item_productOptionStatus_decode = PDPSelectOptionBuyerItemFragment_graphql.Utils.productOptionStatus_decode;

var Item_productOptionStatus_fromString = PDPSelectOptionBuyerItemFragment_graphql.Utils.productOptionStatus_fromString;

var Item = {
  productOptionStatus_decode: Item_productOptionStatus_decode,
  productOptionStatus_fromString: Item_productOptionStatus_fromString,
  Types: undefined,
  use: use$1,
  useOpt: useOpt$1
};

var Fragments = {
  List: List,
  Item: Item
};

function PDP_SelectOption_Buyer$Scroll(Props) {
  var children = Props.children;
  return React.createElement(ReactScrollArea.Root, {
              children: null,
              className: "max-h-[400px] flex flex-col overflow-hidden"
            }, React.createElement(ReactScrollArea.Viewport, {
                  children: children,
                  className: "w-full h-full"
                }), React.createElement(ReactScrollArea.Scrollbar, {
                  children: React.createElement(ReactScrollArea.Thumb, {})
                }));
}

var Scroll = {
  make: PDP_SelectOption_Buyer$Scroll
};

function PDP_SelectOption_Buyer$Item(Props) {
  var query = Props.query;
  var onSelect = Props.onSelect;
  var match = use$1(query);
  var stockSku = match.stockSku;
  var optionName = match.optionName;
  var id = match.id;
  var isSoldout = match.status === "SOLDOUT";
  var priceLabel = PDP_Parser_Buyer.ProductOption.makePriceLabel(match.price, match.productOptionCost.deliveryCost);
  if (isSoldout) {
    return React.createElement("div", {
                className: "w-full rounded-lg py-3 px-2 text-gray-400"
              }, React.createElement("span", undefined, optionName, "/"), React.createElement("span", undefined, React.createElement("span", {
                        className: "ml-1 font-bold"
                      }, priceLabel), React.createElement("span", {
                        className: "font-bold"
                      }, " - 품절")));
  }
  var onClick = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return Curry._1(onSelect, {
                              id: id,
                              stockSku: stockSku,
                              label: optionName,
                              priceLabel: priceLabel
                            });
                }), param);
  };
  return React.createElement(ReactDropdownMenu.Item, {
              children: React.createElement("div", {
                    className: "rounded-lg py-3 px-2 hover:bg-gray-100",
                    onClick: onClick
                  }, React.createElement("span", {
                        className: "text-gray-800"
                      }, React.createElement("span", undefined, optionName, "/"), React.createElement("span", undefined, React.createElement("span", {
                                className: "ml-1 font-bold"
                              }, priceLabel)))),
              className: "focus:outline-none"
            });
}

var Item$1 = {
  make: PDP_SelectOption_Buyer$Item
};

function PDP_SelectOption_Buyer$Unauthorized$PC(Props) {
  var show = Props.show;
  var setShow = Props.setShow;
  var router = Router.useRouter();
  var onConfirm = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  var redirectUrl = new URLSearchParams(Js_dict.fromArray([[
                                "redirect",
                                router.asPath
                              ]])).toString();
                  router.push("/buyer/signin?" + redirectUrl);
                  
                }), param);
  };
  var onCancel = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return setShow(function (param) {
                              return /* Hide */1;
                            });
                }), param);
  };
  return React.createElement(ShopDialog_Buyer.make, {
              isShow: show,
              confirmText: "로그인",
              cancelText: "취소",
              onConfirm: onConfirm,
              onCancel: onCancel,
              children: React.createElement("div", {
                    className: "h-18 mt-8 px-8 py-6 flex flex-col items-center justify-center text-lg text-text-L1"
                  }, React.createElement("span", undefined, "로그인 후에"), React.createElement("span", undefined, "단품을 선택하실 수 있습니다."))
            });
}

var PC = {
  make: PDP_SelectOption_Buyer$Unauthorized$PC
};

function PDP_SelectOption_Buyer$Unauthorized$MO(Props) {
  var show = Props.show;
  var setShow = Props.setShow;
  var router = Router.useRouter();
  var onConfirm = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  var redirectUrl = new URLSearchParams(Js_dict.fromArray([[
                                "redirect",
                                router.asPath
                              ]])).toString();
                  router.push("/buyer/signin?" + redirectUrl);
                  
                }), param);
  };
  var onCancel = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return setShow(function (param) {
                              return /* Hide */1;
                            });
                }), param);
  };
  return React.createElement(ShopDialog_Buyer.Mo.make, {
              isShow: show,
              confirmText: "로그인",
              cancelText: "취소",
              onConfirm: onConfirm,
              onCancel: onCancel,
              children: React.createElement("div", {
                    className: "h-18 mt-8 px-8 py-6 flex flex-col items-center justify-center text-lg text-text-L1"
                  }, React.createElement("span", undefined, "로그인 후에"), React.createElement("span", undefined, "단품을 선택하실 수 있습니다."))
            });
}

var MO = {
  make: PDP_SelectOption_Buyer$Unauthorized$MO
};

var Unauthorized = {
  PC: PC,
  MO: MO
};

function PDP_SelectOption_Buyer$PC(Props) {
  var query = Props.query;
  var onSelect = Props.onSelect;
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  var match = use(query);
  var isSoldout = match.status === "SOLDOUT";
  var match$1 = React.useState(function () {
        return false;
      });
  var setDropdownOpen = match$1[1];
  var match$2 = React.useState(function () {
        return /* Hide */1;
      });
  var setShow = match$2[1];
  var handleSelect = function (selected) {
    setDropdownOpen(function (param) {
          return false;
        });
    return Curry._1(onSelect, selected);
  };
  var tmp;
  if (typeof user === "number") {
    if (user !== 0) {
      var onClick = function (param) {
        return ReactEvents.interceptingHandler((function (param) {
                      return setShow(function (param) {
                                  return /* Show */0;
                                });
                    }), param);
      };
      tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
                className: "w-full h-13 p-3 flex items-center justify-between border rounded-xl",
                onClick: onClick
              }, React.createElement("span", {
                    className: "text-gray-600"
                  }, "선택해주세요"), React.createElement(IconArrowSelect.make, {
                    height: "20",
                    width: "20",
                    fill: "#121212"
                  })), React.createElement(PDP_SelectOption_Buyer$Unauthorized$PC, {
                show: match$2[0],
                setShow: setShow
              }));
    } else {
      tmp = React.createElement(Skeleton.Box.make, {});
    }
  } else {
    tmp = React.createElement("div", {
          className: "w-full"
        }, React.createElement(ReactDropdownMenu.Root, {
              children: null,
              open: match$1[0],
              onOpenChange: (function (to_) {
                  return setDropdownOpen(function (param) {
                              return to_;
                            });
                })
            }, isSoldout ? React.createElement("div", {
                    className: "h-13 p-3 flex items-center justify-between border border-gray-300 rounded-xl bg-gray-100"
                  }, React.createElement("span", {
                        className: "text-gray-400"
                      }, "선택해주세요"), React.createElement(IconArrowSelect.make, {
                        height: "20",
                        width: "20",
                        fill: "#B2B2B2"
                      })) : React.createElement(ReactDropdownMenu.Trigger, {
                    children: React.createElement("div", {
                          className: "w-full h-13 p-3 flex items-center justify-between border rounded-xl"
                        }, React.createElement("span", {
                              className: "text-gray-600"
                            }, "선택해주세요"), React.createElement(IconArrowSelect.make, {
                              height: "20",
                              width: "20",
                              fill: "#121212"
                            })),
                    className: "w-full focus:outline-none"
                  }), React.createElement(ReactDropdownMenu.Content, {
                  children: React.createElement(PDP_SelectOption_Buyer$Scroll, {
                        children: Belt_Array.map(match.productOptions.edges, (function (param) {
                                var match = param.node;
                                return React.createElement(PDP_SelectOption_Buyer$Item, {
                                            query: match.fragmentRefs,
                                            onSelect: handleSelect,
                                            key: "sku-" + match.stockSku
                                          });
                              }))
                      }),
                  align: "start",
                  className: "dropdown-content w-[446px] bg-white border rounded-lg shadow-md p-1",
                  sideOffset: 4
                })));
  }
  return React.createElement("div", {
              className: "w-full"
            }, React.createElement("h1", {
                  className: "text-base font-bold text-text-L1"
                }, "단품 선택"), React.createElement("div", {
                  className: "w-full mt-4"
                }, tmp));
}

var PC$1 = {
  make: PDP_SelectOption_Buyer$PC
};

function PDP_SelectOption_Buyer$MO(Props) {
  var query = Props.query;
  var onSelect = Props.onSelect;
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  var match = use(query);
  var isSoldout = match.status === "SOLDOUT";
  var match$1 = React.useState(function () {
        return false;
      });
  var setDropdownOpen = match$1[1];
  var match$2 = React.useState(function () {
        return /* Hide */1;
      });
  var setShow = match$2[1];
  var handleSelect = function (selected) {
    setDropdownOpen(function (param) {
          return false;
        });
    return Curry._1(onSelect, selected);
  };
  var tmp;
  if (typeof user === "number") {
    if (user !== 0) {
      var onClick = function (param) {
        return ReactEvents.interceptingHandler((function (param) {
                      return setShow(function (param) {
                                  return /* Show */0;
                                });
                    }), param);
      };
      tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
                className: "w-full h-13 p-3 flex items-center justify-between border rounded-xl",
                onClick: onClick
              }, React.createElement("span", {
                    className: "text-gray-600"
                  }, "단품을 선택해 주세요"), React.createElement(IconArrowSelect.make, {
                    height: "20",
                    width: "20",
                    fill: "#121212"
                  })), React.createElement(PDP_SelectOption_Buyer$Unauthorized$MO, {
                show: match$2[0],
                setShow: setShow
              }));
    } else {
      tmp = React.createElement(Skeleton.Box.make, {});
    }
  } else {
    tmp = React.createElement("div", {
          className: "flex flex-col"
        }, React.createElement(ReactDropdownMenu.Root, {
              children: null,
              open: match$1[0],
              onOpenChange: (function (to_) {
                  return setDropdownOpen(function (param) {
                              return to_;
                            });
                })
            }, isSoldout ? React.createElement("div", {
                    className: "h-13 p-3 flex items-center justify-between border border-gray-300 rounded-xl bg-gray-100"
                  }, React.createElement("span", {
                        className: "text-gray-400"
                      }, "단품을 선택해 주세요"), React.createElement(IconArrowSelect.make, {
                        height: "20",
                        width: "20",
                        fill: "#B2B2B2"
                      })) : React.createElement(ReactDropdownMenu.Trigger, {
                    children: React.createElement("div", {
                          className: "w-full h-13 p-3 flex items-center justify-between border rounded-xl"
                        }, React.createElement("span", {
                              className: "text-gray-600"
                            }, "단품을 선택해 주세요"), React.createElement(IconArrowSelect.make, {
                              height: "20",
                              width: "20",
                              fill: "#121212"
                            })),
                    className: "focus:outline-none"
                  }), React.createElement(ReactDropdownMenu.Content, {
                  children: React.createElement(PDP_SelectOption_Buyer$Scroll, {
                        children: Belt_Array.map(match.productOptions.edges, (function (param) {
                                var match = param.node;
                                return React.createElement(PDP_SelectOption_Buyer$Item, {
                                            query: match.fragmentRefs,
                                            onSelect: handleSelect,
                                            key: "sku-" + match.stockSku
                                          });
                              }))
                      }),
                  align: "start",
                  className: "dropdown-content w-[calc(100vw-40px)] max-w-[calc(768px-40px)] bg-white border rounded-lg shadow-md p-1",
                  sideOffset: 4
                })));
  }
  return React.createElement("div", {
              className: "w-full flex flex-col gap-4"
            }, React.createElement("h1", {
                  className: "text-base font-bold text-text-L1"
                }, "단품선택"), React.createElement("section", undefined, tmp));
}

var MO$1 = {
  make: PDP_SelectOption_Buyer$MO
};

export {
  Fragments ,
  Scroll ,
  Item$1 as Item,
  Unauthorized ,
  PC$1 as PC,
  MO$1 as MO,
  
}
/* react Not a pure module */
