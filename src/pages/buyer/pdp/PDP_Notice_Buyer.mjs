// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as $$Image from "../../../components/common/Image.mjs";
import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ChannelTalk from "../../../bindings/ChannelTalk.mjs";
import ReactNl2br from "react-nl2br";
import * as PDP_Parser_Buyer from "../../../utils/PDP_Parser_Buyer.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as PDPNoticeBuyerFragment_graphql from "../../../__generated__/PDPNoticeBuyerFragment_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(PDPNoticeBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPNoticeBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PDPNoticeBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPNoticeBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function PDP_Notice_Buyer$PC(Props) {
  var query = Props.query;
  var match = use(query);
  var notice = match.notice;
  var noticeDateLabel = Curry._2(PDP_Parser_Buyer.Product.Normal.makeNoticeDateLabel, match.noticeStartAt, match.noticeEndAt);
  if (notice !== undefined) {
    return React.createElement("div", {
                className: "mt-14 flex min-h-[204px]"
              }, React.createElement("div", {
                    className: "p-7 flex flex-col flex-1 bg-gray-50 rounded-xl mr-5"
                  }, React.createElement("span", {
                        className: "font-bold text-gray-800"
                      }, "공지사항"), React.createElement("p", {
                        className: "mt-2 text-gray-800 whitespace-pre-wrap"
                      }, ReactNl2br(notice)), React.createElement("span", {
                        className: "mt-2 text-gray-600"
                      }, noticeDateLabel)), React.createElement("button", {
                    className: "w-[314px] h-[204px]",
                    onClick: (function (param) {
                        return ChannelTalk.showMessenger(undefined);
                      })
                  }, React.createElement($$Image.make, {
                        src: "/images/qna-green-square@3x.png",
                        className: "w-full h-full object-cover",
                        alt: "detail-qna"
                      })));
  } else {
    return null;
  }
}

var PC = {
  make: PDP_Notice_Buyer$PC
};

function PDP_Notice_Buyer$MO(Props) {
  var query = Props.query;
  var match = use(query);
  var notice = match.notice;
  var noticeDateLabel = Curry._2(PDP_Parser_Buyer.Product.Normal.makeNoticeDateLabel, match.noticeStartAt, match.noticeEndAt);
  if (notice !== undefined) {
    return React.createElement("div", {
                className: "flex flex-col gap-2 bg-surface p-4 rounded-2xl"
              }, React.createElement("h4", {
                    className: "text-[15px] font-bold"
                  }, "공지사항"), React.createElement("p", {
                    className: "text-text-L1"
                  }, ReactNl2br(notice)), React.createElement("span", {
                    className: "text-text-L2 text-sm"
                  }, noticeDateLabel));
  } else {
    return null;
  }
}

var MO = {
  make: PDP_Notice_Buyer$MO
};

export {
  Fragment ,
  PC ,
  MO ,
  
}
/* Image Not a pure module */
