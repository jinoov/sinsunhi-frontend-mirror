// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Locale from "../../../../utils/Locale.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactRelay from "react-relay";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as ReactSlider from "@radix-ui/react-slider";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as PDPMatchingEstimatorBuyer_fragment_graphql from "../../../../__generated__/PDPMatchingEstimatorBuyer_fragment_graphql.mjs";

function use(fRef) {
  var data = ReactRelay.useFragment(PDPMatchingEstimatorBuyer_fragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPMatchingEstimatorBuyer_fragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(PDPMatchingEstimatorBuyer_fragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPMatchingEstimatorBuyer_fragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  use: use,
  useOpt: useOpt
};

function make(price, avgPrice) {
  if (price >= avgPrice) {
    return /* Green */0;
  } else if (price >= avgPrice * 0.9) {
    return /* Yellow */1;
  } else {
    return /* Red */2;
  }
}

var PriceVariation = {
  make: make
};

function makeExpectDuration(weight) {
  if (weight >= 500) {
    return /* OneAndHalfDay */0;
  } else if (weight >= 100) {
    return /* TwoDays */1;
  } else if (weight >= 90) {
    return /* ThreeDays */2;
  } else if (weight >= 80) {
    return /* FourDays */3;
  } else if (weight >= 70) {
    return /* FiveDays */4;
  } else if (weight >= 60) {
    return /* SixDays */5;
  } else {
    return /* SevenDaysOrLonger */6;
  }
}

function makeColor(weight) {
  if (weight >= 500) {
    return /* Green */0;
  } else if (weight >= 100) {
    return /* Yellow */1;
  } else {
    return /* Red */2;
  }
}

var WeightVariation = {
  makeExpectDuration: makeExpectDuration,
  makeColor: makeColor
};

function makePriceRange(dealingDate, higher, mean, lower, representativeWeight) {
  if (higher === undefined) {
    return ;
  }
  if (mean === undefined) {
    return ;
  }
  if (lower === undefined) {
    return ;
  }
  var multiply = function (f1, f2) {
    return Locale.Float.round0(f1 * f2);
  };
  return {
          dealingDate: dealingDate,
          min: multiply(mean * 0.7, representativeWeight),
          avg: multiply(mean, representativeWeight),
          max: multiply(higher, representativeWeight)
        };
}

function makeLastAvailablePriceRange(marketPrices) {
  return Belt_List.head(Belt_List.reverse(Belt_List.fromArray(Belt_Array.keepMap(marketPrices, (function (x) {
                            return x;
                          })))));
}

function getLastAvailablePriceRange(weeklyMarketPrices, selectedGroup, representativeWeight) {
  switch (selectedGroup) {
    case "high" :
        return makeLastAvailablePriceRange(Belt_Array.map(weeklyMarketPrices.high, (function (param) {
                          return makePriceRange(param.dealingDate, param.higher, param.mean, param.lower, representativeWeight);
                        })));
    case "low" :
        return makeLastAvailablePriceRange(Belt_Array.map(weeklyMarketPrices.low, (function (param) {
                          return makePriceRange(param.dealingDate, param.higher, param.mean, param.lower, representativeWeight);
                        })));
    case "medium" :
        return makeLastAvailablePriceRange(Belt_Array.map(weeklyMarketPrices.medium, (function (param) {
                          return makePriceRange(param.dealingDate, param.higher, param.mean, param.lower, representativeWeight);
                        })));
    default:
      return ;
  }
}

function PDP_Matching_Estimator_Buyer$PriceSlider(props) {
  var color = props.color;
  var setValue = props.setValue;
  return React.createElement("div", {
              className: "flex flex-1 flex-col"
            }, React.createElement("span", {
                  className: "text-sm text-gray-600"
                }, props.weightLabel), React.createElement("span", {
                  className: "mt-1 text-2xl font-bold"
                }, props.priceLabel), React.createElement("div", {
                  className: "mt-3"
                }, React.createElement(ReactSlider.Root, {
                      children: null,
                      value: [props.value],
                      onValueChange: (function (arr) {
                          if (arr.length !== 1) {
                            return ;
                          }
                          var v = arr[0];
                          setValue(function (param) {
                                return v;
                              });
                        }),
                      className: "relative w-full h-1 flex items-center rounded-full cursor-pointer",
                      min: 0,
                      max: 100,
                      orientation: "horizontal"
                    }, React.createElement(ReactSlider.Track, {
                          className: "relative flex-grow rounded-full h-1 bg-[#F0F2F5]",
                          children: Caml_option.some(React.createElement(ReactSlider.Range, {
                                    className: "absolute rounded-full h-full " + color
                                  }))
                        }), React.createElement(ReactSlider.Thumb, {
                          asChild: true,
                          className: "focus:outline-none",
                          children: Caml_option.some(React.createElement("div", {
                                    className: "w-4 h-8 flex items-center justify-center select-none touch-none "
                                  }, React.createElement("div", {
                                        className: "w-4 h-4 rounded-full bg-primary " + color
                                      })))
                        }))));
}

var PriceSlider = {
  make: PDP_Matching_Estimator_Buyer$PriceSlider
};

function PDP_Matching_Estimator_Buyer$WeightSlider(props) {
  var color = props.color;
  var setValue = props.setValue;
  var value = props.value;
  var displayWeight = value === 1000 ? "1T" : (
      value >= 100 && value < 200 ? "100Kg" : (
          value === 0 ? "10Kg" : "" + String(value) + "Kg"
        )
    );
  var step = value <= 100 ? 10 : 100;
  return React.createElement("div", {
              className: "flex flex-1 flex-col"
            }, React.createElement("span", {
                  className: "text-sm text-gray-600"
                }, "주문량"), React.createElement("span", {
                  className: "mt-1  text-2xl font-bold"
                }, "" + displayWeight + " 이상"), React.createElement("div", {
                  className: "mt-3"
                }, React.createElement(ReactSlider.Root, {
                      children: null,
                      value: [value],
                      onValueChange: (function (arr) {
                          if (arr.length !== 1) {
                            return ;
                          }
                          var v = arr[0];
                          if (v >= 100 && v < 200) {
                            return setValue(function (param) {
                                        return 100;
                                      });
                          } else if (v === 0) {
                            return setValue(function (param) {
                                        return 10;
                                      });
                          } else {
                            return setValue(function (param) {
                                        return v;
                                      });
                          }
                        }),
                      className: "relative w-full h-1 flex items-center rounded-full cursor-pointer",
                      min: 0,
                      max: 1000,
                      step: step,
                      orientation: "horizontal"
                    }, React.createElement(ReactSlider.Track, {
                          className: "relative flex-grow rounded-full h-1 bg-[#F0F2F5]",
                          children: Caml_option.some(React.createElement(ReactSlider.Range, {
                                    className: "absolute rounded-full h-full " + color
                                  }))
                        }), React.createElement(ReactSlider.Thumb, {
                          asChild: true,
                          className: "focus:outline-none",
                          children: Caml_option.some(React.createElement("div", {
                                    className: "w-4 h-8 flex items-center justify-center select-none touch-none "
                                  }, React.createElement("div", {
                                        className: "w-4 h-4 rounded-full bg-primary " + color
                                      })))
                        }))));
}

var WeightSlider = {
  make: PDP_Matching_Estimator_Buyer$WeightSlider
};

function PDP_Matching_Estimator_Buyer$Estimator(props) {
  var priceRange = props.priceRange;
  var match = React.useState(function () {
        return 100;
      });
  var pricePercent = match[0];
  var match$1 = React.useState(function () {
        return 1000;
      });
  var weight = match$1[0];
  var max = priceRange.max;
  var perStep = (max - priceRange.min) / 100;
  var displayPrice = max - (100 - pricePercent) * perStep;
  var priceVariation = make(displayPrice, priceRange.avg);
  var color;
  switch (priceVariation) {
    case /* Green */0 :
        color = "bg-primary";
        break;
    case /* Yellow */1 :
        color = "bg-yellow-600";
        break;
    case /* Red */2 :
        color = "bg-red-600";
        break;
    
  }
  var match$2 = makeColor(weight);
  var color$1;
  switch (match$2) {
    case /* Green */0 :
        color$1 = "bg-primary";
        break;
    case /* Yellow */1 :
        color$1 = "bg-yellow-600";
        break;
    case /* Red */2 :
        color$1 = "bg-red-600";
        break;
    
  }
  var tmp;
  switch (priceVariation) {
    case /* Green */0 :
        tmp = React.createElement("span", {
              className: "text-primary font-bold"
            }, "합리적인 수준");
        break;
    case /* Yellow */1 :
        tmp = React.createElement("span", {
              className: "text-yellow-600 font-bold"
            }, "낮은 수준");
        break;
    case /* Red */2 :
        tmp = React.createElement("span", {
              className: "text-red-600 font-bold"
            }, "매우 낮은 수준");
        break;
    
  }
  var match$3 = makeColor(weight);
  var textColor;
  switch (match$3) {
    case /* Green */0 :
        textColor = " text-primary";
        break;
    case /* Yellow */1 :
        textColor = " text-yellow-600";
        break;
    case /* Red */2 :
        textColor = " text-red-600";
        break;
    
  }
  var match$4 = makeExpectDuration(weight);
  var tmp$1;
  switch (match$4) {
    case /* OneAndHalfDay */0 :
        tmp$1 = React.createElement("span", undefined, "평균", React.createElement("span", {
                  className: "font-bold" + textColor
                }, " 1.5일 이내 "), "매칭될 확률이 높습니다.");
        break;
    case /* TwoDays */1 :
        tmp$1 = React.createElement("span", undefined, "평균", React.createElement("span", {
                  className: "font-bold" + textColor
                }, " 2일 이내 "), "매칭될 확률이 높습니다.");
        break;
    case /* ThreeDays */2 :
        tmp$1 = React.createElement("span", undefined, "평균", React.createElement("span", {
                  className: "font-bold" + textColor
                }, " 3일 이내 "), "매칭될 확률이 높습니다.");
        break;
    case /* FourDays */3 :
        tmp$1 = React.createElement("span", undefined, "평균", React.createElement("span", {
                  className: "font-bold" + textColor
                }, " 4일 이내 "), "매칭될 확률이 높습니다.");
        break;
    case /* FiveDays */4 :
        tmp$1 = React.createElement("span", undefined, "평균", React.createElement("span", {
                  className: "font-bold" + textColor
                }, " 5일 이내 "), "매칭될 확률이 높습니다.");
        break;
    case /* SixDays */5 :
        tmp$1 = React.createElement("span", undefined, "평균", React.createElement("span", {
                  className: "font-bold" + textColor
                }, " 6일 이내 "), "매칭될 확률이 높습니다.");
        break;
    case /* SevenDaysOrLonger */6 :
        tmp$1 = React.createElement("span", undefined, "적은 수량의 경우, 생산자를 찾는데 오래걸릴 수 있습니다.");
        break;
    
  }
  return React.createElement("div", {
              className: "w-full py-6"
            }, React.createElement("span", {
                  className: "text-black font-bold text-lg"
                }, "매칭 계산기"), React.createElement("div", {
                  className: "w-full mt-5 flex"
                }, React.createElement(PDP_Matching_Estimator_Buyer$PriceSlider, {
                      weightLabel: "" + String(props.representativeWeight) + "kg 당 가격",
                      priceLabel: "" + Locale.Float.show(undefined, displayPrice, 0) + "원",
                      value: pricePercent,
                      setValue: match[1],
                      color: color
                    }), React.createElement("div", {
                      className: "w-5"
                    }), React.createElement(PDP_Matching_Estimator_Buyer$WeightSlider, {
                      value: weight,
                      setValue: match$1[1],
                      color: color$1
                    })), React.createElement("div", {
                  className: "mt-5"
                }, React.createElement("div", {
                      className: "text-base text-gray-800 flex items-center"
                    }, React.createElement("div", {
                          className: "w-1 h-1 rounded-full bg-gray-600 mr-2"
                        }), React.createElement("span", undefined, "평균 매칭가격 대비 ", tmp, "입니다.")), React.createElement("div", {
                      className: "mt-2 text-base text-gray-800 flex items-center"
                    }, React.createElement("div", {
                          className: "w-1 h-1 rounded-full bg-gray-600 mr-2"
                        }), tmp$1)));
}

var Estimator = {
  make: PDP_Matching_Estimator_Buyer$Estimator
};

function PDP_Matching_Estimator_Buyer(props) {
  var selectedGroup = props.selectedGroup;
  var match = use(props.query);
  var representativeWeight = match.representativeWeight;
  var priceRange = Belt_Option.flatMap(match.weeklyMarketPrices, (function (param) {
          return getLastAvailablePriceRange(param, selectedGroup, representativeWeight);
        }));
  if (priceRange !== undefined) {
    return React.createElement(React.Fragment, undefined, React.createElement("section", {
                    className: "px-4"
                  }, React.createElement(PDP_Matching_Estimator_Buyer$Estimator, {
                        representativeWeight: representativeWeight,
                        priceRange: priceRange
                      })), React.createElement("div", {
                    className: "w-full h-3 bg-gray-100"
                  }));
  } else {
    return null;
  }
}

var make$1 = PDP_Matching_Estimator_Buyer;

export {
  Fragment ,
  PriceVariation ,
  WeightVariation ,
  makePriceRange ,
  makeLastAvailablePriceRange ,
  getLastAvailablePriceRange ,
  PriceSlider ,
  WeightSlider ,
  Estimator ,
  make$1 as make,
}
/* react Not a pure module */
