// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Echarts from "../../../../bindings/Echarts.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import Format from "date-fns/format";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import ParseISO from "date-fns/parseISO";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as PDPMatchingDemeterChartBuyer_fragment_graphql from "../../../../__generated__/PDPMatchingDemeterChartBuyer_fragment_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(PDPMatchingDemeterChartBuyer_fragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPMatchingDemeterChartBuyer_fragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PDPMatchingDemeterChartBuyer_fragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPMatchingDemeterChartBuyer_fragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function makeChartData(raw, representativeWeight) {
  var match = Belt_Array.reduce(raw, [
        /* [] */0,
        /* [] */0,
        /* [] */0,
        /* [] */0
      ], (function (prev, curr) {
          return [
                  {
                    hd: Format(ParseISO(curr.dealingDate), "M.dd"),
                    tl: prev[0]
                  },
                  {
                    hd: Belt_Option.map(curr.higher, (function (i) {
                            return i * representativeWeight;
                          })),
                    tl: prev[1]
                  },
                  {
                    hd: Belt_Option.map(curr.mean, (function (i) {
                            return i * representativeWeight;
                          })),
                    tl: prev[2]
                  },
                  {
                    hd: Belt_Option.map(curr.lower, (function (i) {
                            return i * representativeWeight;
                          })),
                    tl: prev[3]
                  }
                ];
        }));
  return {
          dates: Belt_List.toArray(Belt_List.reverse(match[0])),
          highers: Belt_List.toArray(Belt_List.reverse(match[1])),
          means: Belt_List.toArray(Belt_List.reverse(match[2])),
          lowers: Belt_List.toArray(Belt_List.reverse(match[3]))
        };
}

var ChartParser = {
  makeChartData: makeChartData
};

function PDP_Matching_DemeterChart_Buyer(Props) {
  var query = Props.query;
  var selectedGroup = Props.selectedGroup;
  var representativeWeight = Props.representativeWeight;
  var match = use(query);
  var chartId = "pdp-demeter-chart";
  var instance = Echarts.useInstance(chartId);
  var makeOption = function (data) {
    return {
            tooltip: {
              trigger: "axis",
              backgroundColor: "rgba(38,38,38,1)",
              textStyle: {
                color: "rgba(255, 255, 255, 1)"
              }
            },
            grid: {
              right: "16px",
              left: "50px"
            },
            xAxis: {
              boundaryGap: false,
              data: data.dates,
              axisTick: {
                show: false
              },
              axisPointer: {
                show: true
              }
            },
            yAxis: {
              type: "value"
            },
            series: [
              {
                type: "line",
                name: "",
                data: data.highers,
                connectNulls: true,
                itemStyle: {
                  color: "#ff5735"
                },
                lineStyle: {
                  color: "#ff5735"
                }
              },
              {
                type: "line",
                name: "",
                data: data.means,
                connectNulls: true,
                itemStyle: {
                  color: "#12b564"
                },
                lineStyle: {
                  color: "#12b564"
                }
              },
              {
                type: "line",
                name: "",
                data: data.lowers,
                connectNulls: true,
                itemStyle: {
                  color: "#2751c4"
                },
                lineStyle: {
                  color: "#2751c4"
                }
              }
            ]
          };
  };
  var highChartDataOption = makeOption(makeChartData(Belt_Array.map(match.high, (function (price) {
                  return {
                          dealingDate: price.dealingDate,
                          higher: price.higher,
                          mean: price.mean,
                          lower: price.lower
                        };
                })), representativeWeight));
  var lowChartDataOption = makeOption(makeChartData(Belt_Array.map(match.low, (function (price) {
                  return {
                          dealingDate: price.dealingDate,
                          higher: price.higher,
                          mean: price.mean,
                          lower: price.lower
                        };
                })), representativeWeight));
  var mediumChartDataOption = makeOption(makeChartData(Belt_Array.map(match.medium, (function (price) {
                  return {
                          dealingDate: price.dealingDate,
                          higher: price.higher,
                          mean: price.mean,
                          lower: price.lower
                        };
                })), representativeWeight));
  React.useEffect((function () {
          var newOption;
          switch (selectedGroup) {
            case "high" :
                newOption = highChartDataOption;
                break;
            case "low" :
                newOption = lowChartDataOption;
                break;
            case "medium" :
                newOption = mediumChartDataOption;
                break;
            default:
              newOption = highChartDataOption;
          }
          if (instance !== undefined) {
            Caml_option.valFromOption(instance).setOption(newOption, false, false);
          }
          
        }), [
        selectedGroup,
        instance,
        highChartDataOption,
        lowChartDataOption,
        mediumChartDataOption
      ]);
  return React.createElement(Echarts.make, {
              id: chartId,
              option: highChartDataOption,
              className: "w-full h-[400px] px-3"
            });
}

var make = PDP_Matching_DemeterChart_Buyer;

export {
  Fragment ,
  ChartParser ,
  make ,
  
}
/* react Not a pure module */
