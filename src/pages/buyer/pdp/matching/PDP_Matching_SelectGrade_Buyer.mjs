// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Locale from "../../../../utils/Locale.mjs";
import * as IconClose from "../../../../components/svgs/IconClose.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../../../utils/CustomHooks.mjs";
import * as DS_BottomDrawer from "../../../../components/common/container/DS_BottomDrawer.mjs";
import * as IconArrowSelect from "../../../../components/svgs/IconArrowSelect.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactRadioGroup from "@radix-ui/react-radio-group";
import * as PDPMatchingSelectGradeBuyer_fragment_graphql from "../../../../__generated__/PDPMatchingSelectGradeBuyer_fragment_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(PDPMatchingSelectGradeBuyer_fragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPMatchingSelectGradeBuyer_fragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PDPMatchingSelectGradeBuyer_fragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPMatchingSelectGradeBuyer_fragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function PDP_Matching_SelectGrade_Buyer$Item(Props) {
  var itemId = Props.itemId;
  var value = Props.value;
  var label = Props.label;
  var description = Props.description;
  var price = Props.price;
  var representativeWeight = Props.representativeWeight;
  var priceLabel = Belt_Option.mapWithDefault(price, "", (function (price$p) {
          return Locale.Float.show(undefined, price$p * representativeWeight, 0) + "원(" + String(representativeWeight) + "kg당)";
        }));
  return React.createElement("div", {
              className: "py-4 flex justify-between items-center"
            }, React.createElement("label", {
                  className: "w-full flex flex-col",
                  htmlFor: itemId
                }, React.createElement("span", {
                      className: "text-gray-800 font-bold"
                    }, label), React.createElement("span", {
                      className: "text-gray-600 text-sm"
                    }, description), React.createElement("span", {
                      className: "text-primary text-base"
                    }, priceLabel)), React.createElement(ReactRadioGroup.Item, {
                  children: React.createElement(ReactRadioGroup.Indicator, {
                        className: "radio-indicator"
                      }),
                  value: value,
                  className: "radio-item",
                  id: itemId
                }));
}

var Item = {
  make: PDP_Matching_SelectGrade_Buyer$Item
};

function PDP_Matching_SelectGrade_Buyer$RadioSelector(Props) {
  var query = Props.query;
  var selectedGroup = Props.selectedGroup;
  var setSelectedGroup = Props.setSelectedGroup;
  var match = use(query);
  var recentMarketPrice = match.recentMarketPrice;
  if (recentMarketPrice === undefined) {
    return null;
  }
  var qualityStandard = match.qualityStandard;
  var representativeWeight = match.representativeWeight;
  return React.createElement(ReactRadioGroup.Root, {
              children: null,
              value: selectedGroup,
              onValueChange: (function (value) {
                  return setSelectedGroup(function (param) {
                              return value;
                            });
                }),
              name: "grade-select",
              className: "flex flex-col"
            }, React.createElement(PDP_Matching_SelectGrade_Buyer$Item, {
                  itemId: "price-group-high",
                  value: "high",
                  label: "가격 상위 그룹",
                  description: qualityStandard.high.description,
                  price: recentMarketPrice.high.mean,
                  representativeWeight: representativeWeight
                }), React.createElement(PDP_Matching_SelectGrade_Buyer$Item, {
                  itemId: "price-group-medium",
                  value: "medium",
                  label: "가격 중위 그룹",
                  description: qualityStandard.medium.description,
                  price: recentMarketPrice.medium.mean,
                  representativeWeight: representativeWeight
                }), React.createElement(PDP_Matching_SelectGrade_Buyer$Item, {
                  itemId: "price-group-low",
                  value: "low",
                  label: "가격 하위 그룹",
                  description: qualityStandard.low.description,
                  price: recentMarketPrice.low.mean,
                  representativeWeight: representativeWeight
                }));
}

var RadioSelector = {
  make: PDP_Matching_SelectGrade_Buyer$RadioSelector
};

function PDP_Matching_SelectGrade_Buyer$BottomSheet(Props) {
  var show = Props.show;
  var onClose = Props.onClose;
  var setShowModal = Props.setShowModal;
  var query = Props.query;
  var selectedGroup = Props.selectedGroup;
  var setSelectedGroup = Props.setSelectedGroup;
  return React.createElement(DS_BottomDrawer.Root.make, {
              isShow: show,
              onClose: onClose,
              children: null
            }, React.createElement("section", {
                  className: "w-full h-16 px-3 flex items-center"
                }, React.createElement("button", {
                      className: "w-10 h-10 flex items-center justify-center",
                      onClick: (function (param) {
                          return setShowModal(function (param) {
                                      return /* Show */{
                                              _0: /* GradeGuide */0
                                            };
                                    });
                        })
                    }, React.createElement("img", {
                          className: "w-6 h-6 object-contain",
                          src: "/icons/question-gray-circle.svg"
                        })), React.createElement("div", {
                      className: "flex flex-1 items-center justify-center text-base text-black font-bold"
                    }, "가격대 선택"), React.createElement("button", {
                      className: "w-10 h-10 flex items-center justify-center",
                      onClick: (function (param) {
                          return Curry._1(onClose, undefined);
                        })
                    }, React.createElement(IconClose.make, {
                          height: "24",
                          width: "24",
                          fill: "#000"
                        }))), React.createElement(DS_BottomDrawer.Body.make, {
                  children: null
                }, React.createElement("section", {
                      className: "px-4"
                    }, React.createElement(PDP_Matching_SelectGrade_Buyer$RadioSelector, {
                          query: query,
                          selectedGroup: selectedGroup,
                          setSelectedGroup: setSelectedGroup
                        })), React.createElement("section", {
                      className: "px-4 py-5"
                    }, React.createElement("button", {
                          className: "w-full h-14 rounded-xl bg-primary text-white font-bold text-base",
                          onClick: (function (param) {
                              return Curry._1(onClose, undefined);
                            })
                        }, "선택"))));
}

var BottomSheet = {
  make: PDP_Matching_SelectGrade_Buyer$BottomSheet
};

function PDP_Matching_SelectGrade_Buyer(Props) {
  var setShowModal = Props.setShowModal;
  var query = Props.query;
  var selectedGroup = Props.selectedGroup;
  var setSelectedGroup = Props.setSelectedGroup;
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  var match = React.useState(function () {
        return false;
      });
  var setShowBottomSheet = match[1];
  var tmp;
  if (typeof user === "number") {
    tmp = user !== 0 ? React.createElement("button", {
            className: "w-full h-12 px-4 border border-gray-250 rounded-xl flex items-center justify-between text-base text-black",
            onClick: (function (param) {
                return setShowModal(function (param) {
                            return /* Show */{
                                    _0: /* Unauthorized */{
                                      _0: "로그인 후에\n견적을 받으실 수 있습니다."
                                    }
                                  };
                          });
              })
          }, "가격 상위 그룹", React.createElement(IconArrowSelect.make, {
                height: "24",
                width: "24",
                fill: "#262626"
              })) : React.createElement("button", {
            className: "w-full h-12 px-4 border border-gray-250 rounded-xl flex items-center justify-between text-base text-black",
            disabled: true
          }, "가격 상위 그룹", React.createElement(IconArrowSelect.make, {
                height: "24",
                width: "24",
                fill: "#262626"
              }));
  } else {
    var label;
    switch (selectedGroup) {
      case "high" :
          label = "가격 상위 그룹";
          break;
      case "low" :
          label = "가격 하위 그룹";
          break;
      case "medium" :
          label = "가격 중위 그룹";
          break;
      default:
        label = "";
    }
    tmp = React.createElement(React.Fragment, undefined, React.createElement("button", {
              className: "w-full h-12 px-4 border border-gray-250 rounded-xl flex items-center justify-between text-base text-black",
              onClick: (function (param) {
                  return setShowBottomSheet(function (param) {
                              return true;
                            });
                })
            }, label, React.createElement(IconArrowSelect.make, {
                  height: "24",
                  width: "24",
                  fill: "#262626"
                })), React.createElement(PDP_Matching_SelectGrade_Buyer$BottomSheet, {
              show: match[0],
              onClose: (function (param) {
                  return setShowBottomSheet(function (param) {
                              return false;
                            });
                }),
              setShowModal: setShowModal,
              query: query,
              selectedGroup: selectedGroup,
              setSelectedGroup: setSelectedGroup
            }));
  }
  return React.createElement(React.Fragment, undefined, tmp);
}

var make = PDP_Matching_SelectGrade_Buyer;

export {
  Fragment ,
  Item ,
  RadioSelector ,
  BottomSheet ,
  make ,
  
}
/* react Not a pure module */
