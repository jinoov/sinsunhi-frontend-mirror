// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PDP_Rfq_Button from "./PDP_Rfq_Button.mjs";
import * as PDP_Price_Buyer from "./PDP_Price_Buyer.mjs";
import * as PDP_Title_Buyer from "./PDP_Title_Buyer.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as PDP_DeliveryInfo_Buyer from "./PDP_DeliveryInfo_Buyer.mjs";
import * as PDP_SelectOption_Buyer from "./PDP_SelectOption_Buyer.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as PDP_Product_Normal_Info_Buyer from "./PDP_Product_Normal_Info_Buyer.mjs";
import * as PDP_Product_Normal_Submit_Buyer from "./PDP_Product_Normal_Submit_Buyer.mjs";
import * as PDP_Product_Normal_TotalPrice_Buyer from "./PDP_Product_Normal_TotalPrice_Buyer.mjs";
import * as PDPProductNormalBuyerFragment_graphql from "../../../__generated__/PDPProductNormalBuyerFragment_graphql.mjs";
import * as PDP_Product_Normal_QuantityInput_Buyer from "./PDP_Product_Normal_QuantityInput_Buyer.mjs";

function use(fRef) {
  var data = Hooks.useFragment(PDPProductNormalBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPProductNormalBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PDPProductNormalBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPProductNormalBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_productType_decode = PDPProductNormalBuyerFragment_graphql.Utils.productType_decode;

var Fragment_productType_fromString = PDPProductNormalBuyerFragment_graphql.Utils.productType_fromString;

var Fragment = {
  productType_decode: Fragment_productType_decode,
  productType_fromString: Fragment_productType_fromString,
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function PDP_Product_Normal_Buyer$PC(Props) {
  var query = Props.query;
  var match = use(query);
  var fragmentRefs = match.fragmentRefs;
  var match$1 = React.useState(function () {
        return 1;
      });
  var setQuantity = match$1[1];
  var quantity = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setSelected = match$2[1];
  var selected = match$2[0];
  return React.createElement("div", {
              className: "w-full"
            }, React.createElement(PDP_Title_Buyer.PC.make, {
                  query: fragmentRefs
                }), React.createElement(PDP_Price_Buyer.PC.make, {
                  query: fragmentRefs
                }), React.createElement("div", {
                  className: "w-full h-16 my-4 px-6 flex items-center rounded-xl bg-[#FFF1EE]"
                }, React.createElement("span", {
                      className: "text-orange-500"
                    }, "시세에 따라 가격이 변동될 수 있습니다")), React.createElement("section", {
                  className: "border border-gray-200 rounded-xl divide-y"
                }, React.createElement("div", {
                      className: "px-6 py-8 divide-y"
                    }, React.createElement(PDP_Product_Normal_Info_Buyer.PC.make, {
                          query: fragmentRefs
                        }), React.createElement("div", {
                          className: "flex flex-col gap-6 py-6"
                        }, React.createElement(PDP_DeliveryInfo_Buyer.PC.make, {}), React.createElement(PDP_SelectOption_Buyer.PC.make, {
                              query: fragmentRefs,
                              onSelect: (function (sku) {
                                  return setSelected(function (param) {
                                              return sku;
                                            });
                                })
                            })), React.createElement(PDP_Product_Normal_QuantityInput_Buyer.PC.make, {
                          query: fragmentRefs,
                          selectedItem: selected,
                          quantity: quantity,
                          setQuantity: setQuantity
                        })), React.createElement(PDP_Product_Normal_TotalPrice_Buyer.PC.make, {
                      query: fragmentRefs,
                      selectedItem: selected,
                      quantity: quantity
                    })), React.createElement("section", {
                  className: "w-full mt-4"
                }, React.createElement(PDP_Product_Normal_Submit_Buyer.PC.make, {
                      query: fragmentRefs,
                      selected: selected,
                      quantity: quantity,
                      setQuantity: setQuantity
                    })), match._type === "QUOTABLE" ? React.createElement("section", {
                    className: "w-full mt-4"
                  }, React.createElement(PDP_Rfq_Button.Quotable.PC.make, {})) : null);
}

var PC = {
  make: PDP_Product_Normal_Buyer$PC
};

function PDP_Product_Normal_Buyer$MO(Props) {
  var query = Props.query;
  var match = use(query);
  var fragmentRefs = match.fragmentRefs;
  var match$1 = React.useState(function () {
        return 1;
      });
  var setQuantity = match$1[1];
  var quantity = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setSelected = match$2[1];
  var selected = match$2[0];
  return React.createElement("div", {
              className: "w-full divide-y"
            }, React.createElement("section", {
                  className: "pt-5 pb-8"
                }, React.createElement(PDP_Title_Buyer.MO.make, {
                      query: fragmentRefs
                    }), React.createElement("div", {
                      className: "w-full mt-2"
                    }, React.createElement(PDP_Price_Buyer.MO.make, {
                          query: fragmentRefs
                        })), React.createElement("div", {
                      className: "my-4 w-full rounded-[10px] bg-[#FFF1EE] py-[10px] text-center"
                    }, React.createElement("span", {
                          className: "text-orange-500"
                        }, "시세에 따라 변동 될 수 있습니다.")), React.createElement("div", {
                      className: "pt-4"
                    }, React.createElement(PDP_SelectOption_Buyer.MO.make, {
                          query: fragmentRefs,
                          onSelect: (function (sku) {
                              return setSelected(function (param) {
                                          return sku;
                                        });
                            })
                        }))), React.createElement(PDP_Product_Normal_QuantityInput_Buyer.MO.make, {
                  query: fragmentRefs,
                  selectedItem: selected,
                  quantity: quantity,
                  setQuantity: setQuantity
                }), React.createElement("section", {
                  className: "py-8 flex flex-col gap-6"
                }, React.createElement(PDP_Product_Normal_TotalPrice_Buyer.MO.make, {
                      query: fragmentRefs,
                      selectedItem: selected,
                      quantity: quantity
                    }), React.createElement(PDP_Product_Normal_Submit_Buyer.MO.make, {
                      query: fragmentRefs,
                      selected: selected,
                      quantity: quantity,
                      setQuantity: setQuantity
                    })), React.createElement("section", {
                  className: "py-8"
                }, React.createElement(PDP_Product_Normal_Info_Buyer.MO.make, {
                      query: fragmentRefs
                    })), React.createElement("section", {
                  className: "py-8"
                }, React.createElement(PDP_DeliveryInfo_Buyer.MO.make, {})));
}

var MO = {
  make: PDP_Product_Normal_Buyer$MO
};

export {
  Fragment ,
  PC ,
  MO ,
  
}
/* react Not a pure module */
