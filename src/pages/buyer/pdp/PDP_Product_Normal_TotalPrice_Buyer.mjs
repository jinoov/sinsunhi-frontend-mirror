// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Helper from "../../../utils/Helper.mjs";
import * as Locale from "../../../utils/Locale.mjs";
import * as Skeleton from "../../../components/Skeleton.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../../utils/CustomHooks.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as PDPProductNormalTotalPriceBuyerFragment_graphql from "../../../__generated__/PDPProductNormalTotalPriceBuyerFragment_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(PDPProductNormalTotalPriceBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPProductNormalTotalPriceBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PDPProductNormalTotalPriceBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPProductNormalTotalPriceBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_productStatus_decode = PDPProductNormalTotalPriceBuyerFragment_graphql.Utils.productStatus_decode;

var Fragment_productStatus_fromString = PDPProductNormalTotalPriceBuyerFragment_graphql.Utils.productStatus_fromString;

var Fragment = {
  productStatus_decode: Fragment_productStatus_decode,
  productStatus_fromString: Fragment_productStatus_fromString,
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function PDP_Product_Normal_TotalPrice_Buyer$PC(Props) {
  var query = Props.query;
  var selectedItem = Props.selectedItem;
  var quantity = Props.quantity;
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  var match = use(query);
  var productOptions = match.productOptions;
  var isSoldout = match.status === "SOLDOUT";
  var selectedSku = Belt_Option.flatMap(selectedItem, (function (selectedItem$p) {
          return Belt_Array.getBy(productOptions.edges, (function (param) {
                        return param.node.stockSku === selectedItem$p.stockSku;
                      }));
        }));
  var totalProductPrice = Belt_Option.flatMap(selectedSku, (function (selectedSku$p) {
          return Belt_Option.map(selectedSku$p.node.price, (function (price) {
                        var deliveryCost = selectedSku$p.node.productOptionCost.deliveryCost;
                        return Math.imul(price - deliveryCost | 0, quantity);
                      }));
        }));
  var totalDeliveryCost = Belt_Option.map(selectedSku, (function (selectedSku$p) {
          return Math.imul(selectedSku$p.node.productOptionCost.deliveryCost, quantity);
        }));
  var totalPrice = Helper.$$Option.map2(totalProductPrice, totalDeliveryCost, (function (a, b) {
          return a + b | 0;
        }));
  return React.createElement("div", {
              className: "py-7 px-6 flex items-center justify-between"
            }, React.createElement("span", {
                  className: "text-lg font-bold text-gray-800"
                }, "총 결제 금액"), React.createElement("div", {
                  className: "flex items-center"
                }, typeof user === "number" ? (
                    user !== 0 ? React.createElement("span", {
                            className: "ml-2 text-green-500 text-sm"
                          }, "로그인을 하시면 총 결제 금액을 보실 수 있습니다") : React.createElement(Skeleton.Box.make, {})
                  ) : (
                    selectedSku !== undefined ? React.createElement(React.Fragment, undefined, React.createElement("span", {
                                className: "text-gray-600"
                              }, Belt_Option.mapWithDefault(totalDeliveryCost, "", (function (totalDeliveryCost$p) {
                                      return "배송비 " + Locale.Float.show(undefined, totalDeliveryCost$p, 0) + "원 포함";
                                    }))), React.createElement("span", {
                                className: "ml-2 text-green-500 font-bold text-2xl"
                              }, Belt_Option.mapWithDefault(totalPrice, "", (function (totalPrice$p) {
                                      return Locale.Float.show(undefined, totalPrice$p, 0) + "원";
                                    })))) : (
                        isSoldout ? React.createElement("span", {
                                className: "ml-2 text-gray-500 text-sm"
                              }, "품절된 상품으로 총 결제 금액을 보실 수 없습니다") : React.createElement("span", {
                                className: "ml-2 text-green-500 text-sm"
                              }, "단품을 선택하시면 총 결제 금액을 보실 수 있습니다")
                      )
                  )));
}

var PC = {
  make: PDP_Product_Normal_TotalPrice_Buyer$PC
};

function PDP_Product_Normal_TotalPrice_Buyer$MO(Props) {
  var query = Props.query;
  var selectedItem = Props.selectedItem;
  var quantity = Props.quantity;
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  var match = use(query);
  var productOptions = match.productOptions;
  var isSoldout = match.status === "SOLDOUT";
  var selectedSku = Belt_Option.flatMap(selectedItem, (function (selectedItem$p) {
          return Belt_Array.getBy(productOptions.edges, (function (param) {
                        return param.node.stockSku === selectedItem$p.stockSku;
                      }));
        }));
  var totalProductPrice = Belt_Option.flatMap(selectedSku, (function (selectedSku$p) {
          return Belt_Option.map(selectedSku$p.node.price, (function (price) {
                        var deliveryCost = selectedSku$p.node.productOptionCost.deliveryCost;
                        return Math.imul(price - deliveryCost | 0, quantity);
                      }));
        }));
  var totalDeliveryCost = Belt_Option.map(selectedSku, (function (selectedSku$p) {
          return Math.imul(selectedSku$p.node.productOptionCost.deliveryCost, quantity);
        }));
  var totalPrice = Helper.$$Option.map2(totalProductPrice, totalDeliveryCost, (function (a, b) {
          return a + b | 0;
        }));
  return React.createElement("div", undefined, React.createElement("h1", {
                  className: "text-lg font-bold text-text-L1"
                }, "총 결제 금액"), React.createElement("div", {
                  className: "mt-2 flex items-center"
                }, typeof user === "number" ? (
                    user !== 0 ? React.createElement("span", {
                            className: "text-green-500 text-sm"
                          }, "로그인을 하시면 총 결제 금액을 보실 수 있습니다") : React.createElement(Skeleton.Box.make, {})
                  ) : (
                    selectedSku !== undefined ? React.createElement("div", {
                            className: "w-full flex items-center justify-between"
                          }, React.createElement("span", {
                                className: "text-gray-600"
                              }, Belt_Option.mapWithDefault(totalDeliveryCost, "", (function (totalDeliveryCost$p) {
                                      return "배송비 " + Locale.Float.show(undefined, totalDeliveryCost$p, 0) + "원 포함";
                                    }))), React.createElement("span", {
                                className: "ml-2 text-green-500 font-bold text-2xl"
                              }, Belt_Option.mapWithDefault(totalPrice, "", (function (totalPrice$p) {
                                      return Locale.Float.show(undefined, totalPrice$p, 0) + "원";
                                    })))) : (
                        isSoldout ? React.createElement("span", {
                                className: "text-gray-500 text-sm"
                              }, "품절된 상품으로 총 결제 금액을 보실 수 없습니다") : React.createElement("span", {
                                className: "text-green-500 text-sm"
                              }, "단품을 선택하시면 총 결제 금액을 보실 수 있습니다")
                      )
                  )));
}

var MO = {
  make: PDP_Product_Normal_TotalPrice_Buyer$MO
};

export {
  Fragment ,
  PC ,
  MO ,
  
}
/* react Not a pure module */
