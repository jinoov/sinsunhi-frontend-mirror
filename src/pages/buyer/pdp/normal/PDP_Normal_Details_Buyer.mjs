// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PDP_Parser_Buyer from "../../../../utils/PDP_Parser_Buyer.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as PDPNormalDetailsBuyerFragment_graphql from "../../../../__generated__/PDPNormalDetailsBuyerFragment_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(PDPNormalDetailsBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPNormalDetailsBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PDPNormalDetailsBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPNormalDetailsBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_weightUnit_decode = PDPNormalDetailsBuyerFragment_graphql.Utils.weightUnit_decode;

var Fragment_weightUnit_fromString = PDPNormalDetailsBuyerFragment_graphql.Utils.weightUnit_fromString;

var Fragment = {
  weightUnit_decode: Fragment_weightUnit_decode,
  weightUnit_fromString: Fragment_weightUnit_fromString,
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function PDP_Normal_Details_Buyer$PC$Column(Props) {
  var className = Props.className;
  var label = Props.label;
  var value = Props.value;
  return React.createElement("div", {
              className: "flex items-start justify-between " + className
            }, React.createElement("h1", {
                  className: "min-w-[100px] w-[100px] text-gray-500 mr-7"
                }, label), React.createElement("span", {
                  className: "text-gray-800 break-all text-right"
                }, value));
}

var Column = {
  make: PDP_Normal_Details_Buyer$PC$Column
};

function PDP_Normal_Details_Buyer$PC(Props) {
  var query = Props.query;
  var match = use(query);
  var productOptions = match.productOptions;
  var category = match.category;
  var categoryLabel = Curry._2(PDP_Parser_Buyer.Product.Normal.makeCategoryLabel, category.item, category.kind);
  var weightLabel = productOptions !== undefined ? Curry._1(PDP_Parser_Buyer.Product.Normal.makeWeightLabel, Belt_Array.map(productOptions.edges, (function (param) {
                var match = param.node;
                return [
                        match.weight,
                        match.weightUnit
                      ];
              }))) : "-";
  var gradeLabel = Belt_Option.flatMap(Belt_Option.map(Belt_Option.map(productOptions, (function (po) {
                  return po.edges;
                })), (function (edges) {
              return Belt_Array.keepMap(edges, (function (param) {
                            return param.node.grade;
                          }));
            })), PDP_Parser_Buyer.Product.Normal.makeGradeLabel);
  return React.createElement("div", {
              className: "pb-5"
            }, React.createElement("h2", {
                  className: "font-bold text-lg text-gray-800"
                }, "상품 정보"), React.createElement(PDP_Normal_Details_Buyer$PC$Column, {
                  className: "mt-5",
                  label: "작물/품종",
                  value: categoryLabel
                }), React.createElement(PDP_Normal_Details_Buyer$PC$Column, {
                  className: "mt-2",
                  label: "중량단위",
                  value: weightLabel
                }), Belt_Option.mapWithDefault(gradeLabel, null, (function (gradeLabel$p) {
                    return React.createElement(PDP_Normal_Details_Buyer$PC$Column, {
                                className: "mt-5",
                                label: "등급/용도명",
                                value: gradeLabel$p
                              });
                  })), Belt_Option.mapWithDefault(match.origin, null, (function (origin$p) {
                    return React.createElement(PDP_Normal_Details_Buyer$PC$Column, {
                                className: "mt-5",
                                label: "산지",
                                value: origin$p
                              });
                  })));
}

var PC = {
  Column: Column,
  make: PDP_Normal_Details_Buyer$PC
};

function PDP_Normal_Details_Buyer$MO$Column(Props) {
  var className = Props.className;
  var label = Props.label;
  var value = Props.value;
  return React.createElement("div", {
              className: "flex items-start justify-between " + className
            }, React.createElement("span", {
                  className: "min-w-[100px] w-[100px] mr-7 text-text-L2"
                }, label), React.createElement("span", {
                  className: "text-text-L1 break-all text-right"
                }, value));
}

var Column$1 = {
  make: PDP_Normal_Details_Buyer$MO$Column
};

function PDP_Normal_Details_Buyer$MO(Props) {
  var query = Props.query;
  var match = use(query);
  var productOptions = match.productOptions;
  var category = match.category;
  var categoryLabel = Curry._2(PDP_Parser_Buyer.Product.Normal.makeCategoryLabel, category.item, category.kind);
  var weightLabel = productOptions !== undefined ? Curry._1(PDP_Parser_Buyer.Product.Normal.makeWeightLabel, Belt_Array.map(productOptions.edges, (function (param) {
                var match = param.node;
                return [
                        match.weight,
                        match.weightUnit
                      ];
              }))) : "-";
  var gradeLabel = Belt_Option.flatMap(Belt_Option.map(Belt_Option.map(productOptions, (function (po) {
                  return po.edges;
                })), (function (edges) {
              return Belt_Array.keepMap(edges, (function (param) {
                            return param.node.grade;
                          }));
            })), PDP_Parser_Buyer.Product.Normal.makeGradeLabel);
  return React.createElement("div", undefined, React.createElement("h2", {
                  className: "font-bold text-lg text-text-L1"
                }, "상품 정보"), React.createElement(PDP_Normal_Details_Buyer$MO$Column, {
                  className: "mt-5",
                  label: "작물/품종",
                  value: categoryLabel
                }), React.createElement(PDP_Normal_Details_Buyer$MO$Column, {
                  className: "mt-2",
                  label: "중량단위",
                  value: weightLabel
                }), Belt_Option.mapWithDefault(gradeLabel, null, (function (gradeLabel$p) {
                    return React.createElement(PDP_Normal_Details_Buyer$MO$Column, {
                                className: "mt-2",
                                label: "등급/용도명",
                                value: gradeLabel$p
                              });
                  })), Belt_Option.mapWithDefault(match.origin, null, (function (origin$p) {
                    return React.createElement(PDP_Normal_Details_Buyer$MO$Column, {
                                className: "mt-2",
                                label: "산지",
                                value: origin$p
                              });
                  })));
}

var MO = {
  Column: Column$1,
  make: PDP_Normal_Details_Buyer$MO
};

export {
  Fragment ,
  PC ,
  MO ,
  
}
/* react Not a pure module */
