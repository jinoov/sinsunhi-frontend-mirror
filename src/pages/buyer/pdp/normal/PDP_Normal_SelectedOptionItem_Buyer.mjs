// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Locale from "../../../../utils/Locale.mjs";
import * as Spinbox from "../../../../components/common/Spinbox.mjs";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactRelay from "react-relay";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as PDP_Parser_Buyer from "../../../../utils/PDP_Parser_Buyer.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as PDPNormalSelectedOptionItemBuyerQuery_graphql from "../../../../__generated__/PDPNormalSelectedOptionItemBuyerQuery_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(PDPNormalSelectedOptionItemBuyerQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(PDPNormalSelectedOptionItemBuyerQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(PDPNormalSelectedOptionItemBuyerQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(PDPNormalSelectedOptionItemBuyerQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, PDPNormalSelectedOptionItemBuyerQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, PDPNormalSelectedOptionItemBuyerQuery_graphql.node, PDPNormalSelectedOptionItemBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: PDPNormalSelectedOptionItemBuyerQuery_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, PDPNormalSelectedOptionItemBuyerQuery_graphql.node, PDPNormalSelectedOptionItemBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(PDPNormalSelectedOptionItemBuyerQuery_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(PDPNormalSelectedOptionItemBuyerQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPNormalSelectedOptionItemBuyerQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(PDPNormalSelectedOptionItemBuyerQuery_graphql.node, PDPNormalSelectedOptionItemBuyerQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query = {
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function PDP_Normal_SelectedOptionItem_Buyer$PC(Props) {
  var id = Props.id;
  var quantity = Props.quantity;
  var onChange = Props.onChange;
  var onRemove = Props.onRemove;
  var withCaption = Props.withCaption;
  var match = use({
        id: id
      }, undefined, undefined, undefined, undefined);
  var node = match.node;
  if (node === undefined) {
    return null;
  }
  var stockSku = node.stockSku;
  var productId = node.product.productId;
  var totalOptionPrice = Belt_Option.map(PDP_Parser_Buyer.ProductOption.makeOptionPrice(node.price, node.productOptionCost.deliveryCost, node.isFreeShipping), (function (optionPrice$p) {
          return Math.imul(optionPrice$p, quantity);
        }));
  return React.createElement("div", {
              className: "pt-6 flex items-center justify-between"
            }, React.createElement(Spinbox.make, {
                  value: quantity,
                  onChange: (function (value) {
                      Curry._2(onChange, id, value);
                    })
                }), React.createElement("div", {
                  className: "flex flex-col items-end"
                }, React.createElement("span", {
                      className: "mt-1 text-gray-800 text-right text-[15px]"
                    }, React.createElement("span", undefined, node.optionName)), Belt_Option.mapWithDefault(Belt_Option.keep(withCaption, (function (bool$p) {
                            return bool$p === true;
                          })), null, (function (param) {
                        return React.createElement("span", {
                                    className: "text-gray-600 text-[14px]"
                                  }, "상품번호 : " + String(productId) + " 단품번호 : " + stockSku + "");
                      })), React.createElement("div", {
                      className: "mt-1 flex items-center"
                    }, React.createElement("span", {
                          className: "text-gray-800 font-bold text-base text-right"
                        }, Belt_Option.mapWithDefault(totalOptionPrice, "", (function (totalOptionPrice$p) {
                                return "" + Locale.Float.show(undefined, totalOptionPrice$p, 0) + "원";
                              }))), React.createElement("button", {
                          className: "ml-1",
                          onClick: (function (param) {
                              Curry._1(onRemove, id);
                            })
                        }, React.createElement("img", {
                              className: "w-5 h-5 object-contain",
                              src: "/icons/reset-input-gray-circle@3x.png"
                            })))));
}

var PC = {
  make: PDP_Normal_SelectedOptionItem_Buyer$PC
};

function PDP_Normal_SelectedOptionItem_Buyer$MO(Props) {
  var id = Props.id;
  var quantity = Props.quantity;
  var onChange = Props.onChange;
  var onRemove = Props.onRemove;
  var withCaption = Props.withCaption;
  var match = use({
        id: id
      }, undefined, undefined, undefined, undefined);
  var node = match.node;
  if (node === undefined) {
    return null;
  }
  var stockSku = node.stockSku;
  var productId = node.product.productId;
  var totalOptionPrice = Belt_Option.map(PDP_Parser_Buyer.ProductOption.makeOptionPrice(node.price, node.productOptionCost.deliveryCost, node.isFreeShipping), (function (optionPrice$p) {
          return Math.imul(optionPrice$p, quantity);
        }));
  return React.createElement("section", {
              className: "pt-5 flex items-start justify-between"
            }, React.createElement(Spinbox.make, {
                  value: quantity,
                  onChange: (function (value) {
                      Curry._2(onChange, id, value);
                    })
                }), React.createElement("div", {
                  className: "flex flex-col items-end"
                }, React.createElement("span", {
                      className: "mt-1 text-gray-800 text-right text-[15px]"
                    }, React.createElement("span", undefined, node.optionName)), Belt_Option.mapWithDefault(Belt_Option.keep(withCaption, (function (bool$p) {
                            return bool$p === true;
                          })), null, (function (param) {
                        return React.createElement("span", {
                                    className: "text-gray-600 text-[14px]"
                                  }, "상품번호 : " + String(productId) + " 단품번호 : " + stockSku + "");
                      })), React.createElement("div", {
                      className: "mt-1 flex items-center"
                    }, React.createElement("span", {
                          className: "text-gray-800 font-bold text-base text-right"
                        }, Belt_Option.mapWithDefault(totalOptionPrice, "", (function (totalOptionPrice$p) {
                                return "" + Locale.Float.show(undefined, totalOptionPrice$p, 0) + "원";
                              }))), React.createElement("button", {
                          className: "ml-1",
                          onClick: (function (param) {
                              Curry._1(onRemove, id);
                            })
                        }, React.createElement("img", {
                              className: "w-5 h-5 object-contain",
                              src: "/icons/reset-input-gray-circle@3x.png"
                            })))));
}

var MO = {
  make: PDP_Normal_SelectedOptionItem_Buyer$MO
};

export {
  Query ,
  PC ,
  MO ,
}
/* react Not a pure module */
