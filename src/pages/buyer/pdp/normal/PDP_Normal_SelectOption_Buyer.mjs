// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Locale from "../../../../utils/Locale.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../../../utils/CustomHooks.mjs";
import * as IconArrowSelect from "../../../../components/svgs/IconArrowSelect.mjs";
import * as PDP_Parser_Buyer from "../../../../utils/PDP_Parser_Buyer.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactScrollArea from "@radix-ui/react-scroll-area";
import * as ReactDropdownMenu from "@radix-ui/react-dropdown-menu";
import * as PDPNormalSelectOptionBuyerFragment_graphql from "../../../../__generated__/PDPNormalSelectOptionBuyerFragment_graphql.mjs";
import * as PDPNormalSelectOptionBuyerItemFragment_graphql from "../../../../__generated__/PDPNormalSelectOptionBuyerItemFragment_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(PDPNormalSelectOptionBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPNormalSelectOptionBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PDPNormalSelectOptionBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPNormalSelectOptionBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var List_productStatus_decode = PDPNormalSelectOptionBuyerFragment_graphql.Utils.productStatus_decode;

var List_productStatus_fromString = PDPNormalSelectOptionBuyerFragment_graphql.Utils.productStatus_fromString;

var List = {
  productStatus_decode: List_productStatus_decode,
  productStatus_fromString: List_productStatus_fromString,
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function use$1(fRef) {
  var data = Hooks.useFragment(PDPNormalSelectOptionBuyerItemFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPNormalSelectOptionBuyerItemFragment_graphql.Internal.convertFragment, data);
}

function useOpt$1(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PDPNormalSelectOptionBuyerItemFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPNormalSelectOptionBuyerItemFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Item_productOptionStatus_decode = PDPNormalSelectOptionBuyerItemFragment_graphql.Utils.productOptionStatus_decode;

var Item_productOptionStatus_fromString = PDPNormalSelectOptionBuyerItemFragment_graphql.Utils.productOptionStatus_fromString;

var Item = {
  productOptionStatus_decode: Item_productOptionStatus_decode,
  productOptionStatus_fromString: Item_productOptionStatus_fromString,
  Types: undefined,
  use: use$1,
  useOpt: useOpt$1
};

var Fragments = {
  List: List,
  Item: Item
};

function PDP_Normal_SelectOption_Buyer$Scroll(Props) {
  var children = Props.children;
  return React.createElement(ReactScrollArea.Root, {
              children: null,
              className: "max-h-[400px] flex flex-col overflow-hidden"
            }, React.createElement(ReactScrollArea.Viewport, {
                  children: children,
                  className: "w-full h-full"
                }), React.createElement(ReactScrollArea.Scrollbar, {
                  children: React.createElement(ReactScrollArea.Thumb, {})
                }));
}

var Scroll = {
  make: PDP_Normal_SelectOption_Buyer$Scroll
};

function PDP_Normal_SelectOption_Buyer$Item(Props) {
  var query = Props.query;
  var onSelect = Props.onSelect;
  var match = use$1(query);
  var match$1 = match.productOptionCost;
  var optionName = match.optionName;
  var id = match.id;
  var optionPrice = PDP_Parser_Buyer.ProductOption.makeOptionPrice(match.price, match$1.deliveryCost, match$1.isFreeShipping);
  var optionPriceLabel = Belt_Option.mapWithDefault(optionPrice, "", (function (optionPrice$p) {
          return Locale.Float.show(undefined, optionPrice$p, 0) + "원";
        }));
  if (match.status === "SOLDOUT") {
    return React.createElement("div", {
                className: "w-full rounded-lg py-3 px-2 text-gray-400"
              }, React.createElement("span", undefined, optionName, "/"), React.createElement("span", undefined, React.createElement("span", {
                        className: "ml-1 font-bold"
                      }, optionPriceLabel), React.createElement("span", {
                        className: "font-bold"
                      }, " - 품절")));
  } else {
    return React.createElement(ReactDropdownMenu.Item, {
                children: React.createElement("div", {
                      className: "rounded-lg py-3 px-2 hover:bg-gray-100",
                      onClick: (function (param) {
                          return onSelect(function (param) {
                                      return id;
                                    });
                        })
                    }, React.createElement("span", {
                          className: "text-gray-800"
                        }, React.createElement("span", undefined, optionName, "/"), React.createElement("span", {
                              className: "ml-1 font-bold"
                            }, optionPriceLabel))),
                className: "focus:outline-none"
              });
  }
}

var Item$1 = {
  make: PDP_Normal_SelectOption_Buyer$Item
};

function PDP_Normal_SelectOption_Buyer$PC(Props) {
  var query = Props.query;
  var onSelect = Props.onSelect;
  var setShowModal = Props.setShowModal;
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  var match = use(query);
  var productOptions = match.productOptions;
  return React.createElement("div", {
              className: "w-full"
            }, React.createElement("h1", {
                  className: "text-base font-bold text-text-L1"
                }, "단품 선택"), React.createElement("div", {
                  className: "w-full mt-4"
                }, typeof user === "number" ? (
                    user !== 0 ? React.createElement(React.Fragment, undefined, React.createElement("div", {
                                className: "w-full h-13 p-3 flex items-center justify-between border rounded-xl",
                                onClick: (function (param) {
                                    return setShowModal(function (param) {
                                                return /* Show */{
                                                        _0: /* Unauthorized */{
                                                          _0: "로그인 후에\n단품을 선택하실 수 있습니다."
                                                        }
                                                      };
                                              });
                                  })
                              }, React.createElement("span", {
                                    className: "text-gray-600"
                                  }, "선택해주세요"), React.createElement(IconArrowSelect.make, {
                                    height: "20",
                                    width: "20",
                                    fill: "#121212"
                                  }))) : React.createElement("div", {
                            className: "w-full h-13 p-3 flex items-center justify-between border rounded-xl"
                          }, React.createElement("span", {
                                className: "text-gray-600"
                              }, "선택해주세요"), React.createElement(IconArrowSelect.make, {
                                height: "20",
                                width: "20",
                                fill: "#121212"
                              }))
                  ) : React.createElement("div", {
                        className: "w-full"
                      }, React.createElement(ReactDropdownMenu.Root, {
                            children: null
                          }, match.status === "SOLDOUT" ? React.createElement("div", {
                                  className: "h-13 p-3 flex items-center justify-between border border-gray-300 rounded-xl bg-gray-100"
                                }, React.createElement("span", {
                                      className: "text-gray-400"
                                    }, "선택해주세요"), React.createElement(IconArrowSelect.make, {
                                      height: "20",
                                      width: "20",
                                      fill: "#B2B2B2"
                                    })) : React.createElement(ReactDropdownMenu.Trigger, {
                                  children: React.createElement("div", {
                                        className: "w-full h-13 p-3 flex items-center justify-between border rounded-xl"
                                      }, React.createElement("span", {
                                            className: "text-gray-600"
                                          }, "선택해주세요"), React.createElement(IconArrowSelect.make, {
                                            height: "20",
                                            width: "20",
                                            fill: "#121212"
                                          })),
                                  className: "w-full focus:outline-none"
                                }), React.createElement(ReactDropdownMenu.Content, {
                                children: React.createElement(PDP_Normal_SelectOption_Buyer$Scroll, {
                                      children: productOptions !== undefined ? Belt_Array.map(productOptions.edges, (function (param) {
                                                var match = param.node;
                                                return React.createElement(PDP_Normal_SelectOption_Buyer$Item, {
                                                            query: match.fragmentRefs,
                                                            onSelect: onSelect,
                                                            key: "sku-" + match.stockSku
                                                          });
                                              })) : []
                                    }),
                                align: "start",
                                className: "dropdown-content w-[446px] bg-white border rounded-lg shadow-md p-1",
                                sideOffset: 4
                              })))));
}

var PC = {
  make: PDP_Normal_SelectOption_Buyer$PC
};

function PDP_Normal_SelectOption_Buyer$MO(Props) {
  var query = Props.query;
  var onSelect = Props.onSelect;
  var setShowModal = Props.setShowModal;
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  var match = use(query);
  var productOptions = match.productOptions;
  return React.createElement("div", {
              className: "w-full flex flex-col gap-4"
            }, React.createElement("h1", {
                  className: "text-base font-bold text-text-L1"
                }, "단품선택"), React.createElement("section", undefined, typeof user === "number" ? (
                    user !== 0 ? React.createElement("div", {
                            className: "w-full h-13 p-3 flex items-center justify-between border rounded-xl",
                            onClick: (function (param) {
                                return setShowModal(function (param) {
                                            return /* Show */{
                                                    _0: /* Unauthorized */{
                                                      _0: "로그인 후에\n단품을 선택하실 수 있습니다."
                                                    }
                                                  };
                                          });
                              })
                          }, React.createElement("span", {
                                className: "text-gray-600"
                              }, "단품을 선택해 주세요"), React.createElement(IconArrowSelect.make, {
                                height: "20",
                                width: "20",
                                fill: "#121212"
                              })) : React.createElement("div", {
                            className: "w-full h-13 p-3 flex items-center justify-between border rounded-xl"
                          }, React.createElement("span", {
                                className: "text-gray-600"
                              }, "단품을 선택해 주세요"), React.createElement(IconArrowSelect.make, {
                                height: "20",
                                width: "20",
                                fill: "#121212"
                              }))
                  ) : React.createElement("div", {
                        className: "flex flex-col"
                      }, React.createElement(ReactDropdownMenu.Root, {
                            children: null
                          }, match.status === "SOLDOUT" ? React.createElement("div", {
                                  className: "h-13 p-3 flex items-center justify-between border border-gray-300 rounded-xl bg-gray-100"
                                }, React.createElement("span", {
                                      className: "text-gray-400"
                                    }, "단품을 선택해 주세요"), React.createElement(IconArrowSelect.make, {
                                      height: "20",
                                      width: "20",
                                      fill: "#B2B2B2"
                                    })) : React.createElement(ReactDropdownMenu.Trigger, {
                                  children: React.createElement("div", {
                                        className: "w-full h-13 p-3 flex items-center justify-between border rounded-xl"
                                      }, React.createElement("span", {
                                            className: "text-gray-600"
                                          }, "단품을 선택해 주세요"), React.createElement(IconArrowSelect.make, {
                                            height: "20",
                                            width: "20",
                                            fill: "#121212"
                                          })),
                                  className: "focus:outline-none"
                                }), React.createElement(ReactDropdownMenu.Content, {
                                children: React.createElement(PDP_Normal_SelectOption_Buyer$Scroll, {
                                      children: productOptions !== undefined ? Belt_Array.map(productOptions.edges, (function (param) {
                                                var match = param.node;
                                                return React.createElement(PDP_Normal_SelectOption_Buyer$Item, {
                                                            query: match.fragmentRefs,
                                                            onSelect: onSelect,
                                                            key: "sku-" + match.stockSku
                                                          });
                                              })) : []
                                    }),
                                align: "start",
                                className: "dropdown-content w-[calc(100vw-40px)] max-w-[calc(768px-40px)] bg-white border rounded-lg shadow-md p-1",
                                sideOffset: 4
                              })))));
}

var MO = {
  make: PDP_Normal_SelectOption_Buyer$MO
};

export {
  Fragments ,
  Scroll ,
  Item$1 as Item,
  PC ,
  MO ,
  
}
/* react Not a pure module */
