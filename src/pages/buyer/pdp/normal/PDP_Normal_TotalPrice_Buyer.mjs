// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Locale from "../../../../utils/Locale.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../../../utils/CustomHooks.mjs";
import * as PDP_Parser_Buyer from "../../../../utils/PDP_Parser_Buyer.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as PDPNormalTotalPriceBuyerFragment_graphql from "../../../../__generated__/PDPNormalTotalPriceBuyerFragment_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(PDPNormalTotalPriceBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPNormalTotalPriceBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PDPNormalTotalPriceBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPNormalTotalPriceBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_productStatus_decode = PDPNormalTotalPriceBuyerFragment_graphql.Utils.productStatus_decode;

var Fragment_productStatus_fromString = PDPNormalTotalPriceBuyerFragment_graphql.Utils.productStatus_fromString;

var Fragment = {
  productStatus_decode: Fragment_productStatus_decode,
  productStatus_fromString: Fragment_productStatus_fromString,
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function PDP_Normal_TotalPrice_Buyer$PC(Props) {
  var query = Props.query;
  var selectedOptionId = Props.selectedOptionId;
  var quantity = Props.quantity;
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  var match = use(query);
  var productOptions = match.productOptions;
  var makeSelectedSku = function (selectedId) {
    return Belt_Option.flatMap(selectedId, (function (selectedId$p) {
                  return Belt_Option.flatMap(productOptions, (function (param) {
                                return Belt_Array.getBy(param.edges, (function (param) {
                                              return param.node.id === selectedId$p;
                                            }));
                              }));
                }));
  };
  var tmp;
  if (typeof user === "number") {
    tmp = user !== 0 ? React.createElement("span", {
            className: "ml-2 text-green-500 text-sm"
          }, "로그인을 하시면 총 결제 금액을 보실 수 있습니다") : null;
  } else if (match.status === "SOLDOUT") {
    tmp = React.createElement("span", {
          className: "ml-2 text-gray-500 text-sm"
        }, "품절된 상품으로 총 결제 금액을 보실 수 없습니다");
  } else {
    var match$1 = makeSelectedSku(selectedOptionId);
    if (match$1 !== undefined) {
      var match$2 = match$1.node;
      var productOptionCost = match$2.productOptionCost;
      var optionPrice = PDP_Parser_Buyer.ProductOption.makeOptionPrice(match$2.price, productOptionCost.deliveryCost, productOptionCost.isFreeShipping);
      var totalProductPrice = Belt_Option.map(optionPrice, (function (optionPrice$p) {
              return Math.imul(optionPrice$p, quantity);
            }));
      var totalDeliveryCost = Math.imul(PDP_Parser_Buyer.ProductOption.makeOptionDeliveryCost(productOptionCost.deliveryCost, productOptionCost.isFreeShipping), quantity);
      var totalPrice = Belt_Option.map(totalProductPrice, (function (totalProductPrice$p) {
              return totalProductPrice$p + totalDeliveryCost | 0;
            }));
      tmp = React.createElement(React.Fragment, undefined, React.createElement("span", {
                className: "text-gray-600"
              }, totalDeliveryCost !== 0 ? "배송비 " + Locale.Float.show(undefined, totalDeliveryCost, 0) + "원 포함" : "배송비 무료"), React.createElement("span", {
                className: "ml-2 text-green-500 font-bold text-2xl"
              }, Belt_Option.mapWithDefault(totalPrice, "", (function (totalPrice$p) {
                      return Locale.Float.show(undefined, totalPrice$p, 0) + "원";
                    }))));
    } else {
      tmp = React.createElement("span", {
            className: "ml-2 text-green-500 text-sm"
          }, "단품을 선택하시면 총 결제 금액을 보실 수 있습니다");
    }
  }
  return React.createElement("div", {
              className: "py-7 px-6 flex items-center justify-between"
            }, React.createElement("span", {
                  className: "text-lg font-bold text-gray-800"
                }, "총 결제 금액"), React.createElement("div", {
                  className: "flex items-center"
                }, tmp));
}

var PC = {
  make: PDP_Normal_TotalPrice_Buyer$PC
};

function PDP_Normal_TotalPrice_Buyer$MO(Props) {
  var query = Props.query;
  var selectedOptionId = Props.selectedOptionId;
  var quantity = Props.quantity;
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  var match = use(query);
  var productOptions = match.productOptions;
  var makeSelectedSku = function (selectedId) {
    return Belt_Option.flatMap(selectedId, (function (selectedId$p) {
                  return Belt_Option.flatMap(productOptions, (function (param) {
                                return Belt_Array.getBy(param.edges, (function (param) {
                                              return param.node.id === selectedId$p;
                                            }));
                              }));
                }));
  };
  var tmp;
  if (typeof user === "number") {
    tmp = user !== 0 ? React.createElement("span", {
            className: "text-green-500 text-sm"
          }, "로그인을 하시면 총 결제 금액을 보실 수 있습니다") : null;
  } else if (match.status === "SOLDOUT") {
    tmp = React.createElement("span", {
          className: "text-gray-500 text-sm"
        }, "품절된 상품으로 총 결제 금액을 보실 수 없습니다");
  } else {
    var match$1 = makeSelectedSku(selectedOptionId);
    if (match$1 !== undefined) {
      var match$2 = match$1.node;
      var productOptionCost = match$2.productOptionCost;
      var optionPrice = PDP_Parser_Buyer.ProductOption.makeOptionPrice(match$2.price, productOptionCost.deliveryCost, productOptionCost.isFreeShipping);
      var totalProductPrice = Belt_Option.map(optionPrice, (function (optionPrice$p) {
              return Math.imul(optionPrice$p, quantity);
            }));
      var totalDeliveryCost = Math.imul(PDP_Parser_Buyer.ProductOption.makeOptionDeliveryCost(productOptionCost.deliveryCost, productOptionCost.isFreeShipping), quantity);
      var totalPrice = Belt_Option.map(totalProductPrice, (function (totalProductPrice$p) {
              return totalProductPrice$p + totalDeliveryCost | 0;
            }));
      tmp = React.createElement("div", {
            className: "w-full flex items-center justify-between"
          }, React.createElement("span", {
                className: "text-gray-600"
              }, totalDeliveryCost !== 0 ? "배송비 " + Locale.Float.show(undefined, totalDeliveryCost, 0) + "원 포함" : "배송비 무료"), React.createElement("span", {
                className: "ml-2 text-green-500 font-bold text-2xl"
              }, Belt_Option.mapWithDefault(totalPrice, "", (function (totalPrice$p) {
                      return Locale.Float.show(undefined, totalPrice$p, 0) + "원";
                    }))));
    } else {
      tmp = React.createElement("span", {
            className: "text-green-500 text-sm"
          }, "단품을 선택하시면 총 결제 금액을 보실 수 있습니다");
    }
  }
  return React.createElement("div", undefined, React.createElement("h1", {
                  className: "text-lg font-bold text-text-L1"
                }, "총 결제 금액"), React.createElement("div", {
                  className: "mt-2 flex items-center"
                }, tmp));
}

var MO = {
  make: PDP_Normal_TotalPrice_Buyer$MO
};

export {
  Fragment ,
  PC ,
  MO ,
  
}
/* react Not a pure module */
