// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Locale from "../../../utils/Locale.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Spinbox from "../../../components/common/Spinbox.mjs";
import * as IconArrow from "../../../components/svgs/IconArrow.mjs";
import Link from "next/link";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactEvents from "../../../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Hooks from "react-relay/hooks";
import * as ReactTabs from "@radix-ui/react-tabs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as PDPProductNormalOrderSpecificationBuyerQuery_graphql from "../../../__generated__/PDPProductNormalOrderSpecificationBuyerQuery_graphql.mjs";

var makeVariables = PDPProductNormalOrderSpecificationBuyerQuery_graphql.Utils.makeVariables;

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(PDPProductNormalOrderSpecificationBuyerQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(PDPProductNormalOrderSpecificationBuyerQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(PDPProductNormalOrderSpecificationBuyerQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(PDPProductNormalOrderSpecificationBuyerQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, PDPProductNormalOrderSpecificationBuyerQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, PDPProductNormalOrderSpecificationBuyerQuery_graphql.node, PDPProductNormalOrderSpecificationBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: PDPProductNormalOrderSpecificationBuyerQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, PDPProductNormalOrderSpecificationBuyerQuery_graphql.node, PDPProductNormalOrderSpecificationBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(PDPProductNormalOrderSpecificationBuyerQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(PDPProductNormalOrderSpecificationBuyerQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPProductNormalOrderSpecificationBuyerQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(PDPProductNormalOrderSpecificationBuyerQuery_graphql.node, PDPProductNormalOrderSpecificationBuyerQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query = {
  makeVariables: makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function PDP_Product_Normal_OrderSpecification_Buyer$Placeholder(Props) {
  return React.createElement("div", {
              className: "w-full h-[497px]"
            });
}

var Placeholder = {
  make: PDP_Product_Normal_OrderSpecification_Buyer$Placeholder
};

function PDP_Product_Normal_OrderSpecification_Buyer$Tab(Props) {
  var label = Props.label;
  var value = Props.value;
  var isSelected = Props.isSelected;
  var btnStyle = isSelected ? "bg-green-50 text-green-500 border-green-500" : "text-gray-800 border-gray-250";
  return React.createElement(ReactTabs.Trigger, {
              children: React.createElement("span", undefined, label),
              value: value,
              className: "flex flex-1 items-center justify-center border " + btnStyle
            });
}

var Tab = {
  make: PDP_Product_Normal_OrderSpecification_Buyer$Tab
};

function PDP_Product_Normal_OrderSpecification_Buyer(Props) {
  var selectedSkuId = Props.selectedSkuId;
  var quantity = Props.quantity;
  var setQuantity = Props.setQuantity;
  var router = Router.useRouter();
  var match = use(Curry._1(makeVariables, selectedSkuId), /* StoreOrNetwork */1, undefined, undefined, undefined);
  var node = match.node;
  var match$1 = React.useState(function () {
        return "dropShipping";
      });
  var setSelectedMethod = match$1[1];
  var selectedMethod = match$1[0];
  var tmp;
  if (node !== undefined) {
    var deliveryCost = node.productOptionCost.deliveryCost;
    var match$2 = node.product;
    var productNodeId = match$2.id;
    var productOptionNodeId = node.id;
    var productNoLabel = String(match$2.productId);
    var priceLabel = Belt_Option.mapWithDefault(Belt_Option.map(node.price, (function (price) {
                return Math.imul(price - deliveryCost | 0, quantity);
              })), "-원", (function (price$p) {
            return Locale.Float.show(undefined, price$p, 0) + "원";
          }));
    var deliveryCostLabel = Locale.Float.show(undefined, Math.imul(deliveryCost, quantity), 0) + "원";
    var quantityLabel = String(quantity);
    tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
              className: "my-4 w-full flex items-center justify-between"
            }, React.createElement("span", {
                  className: "w-full text-lg"
                }, node.optionName), React.createElement(Spinbox.make, {
                  value: quantity,
                  setValue: setQuantity
                })), React.createElement(ReactTabs.Content, {
              children: null,
              value: "dropShipping"
            }, React.createElement("div", {
                  className: "w-full h-[273px]"
                }, React.createElement("section", {
                      className: "w-full bg-gray-50 p-4 text-text-L1 flex flex-col"
                    }, React.createElement("span", {
                          className: "font-bold"
                        }, "상품번호 : " + productNoLabel), React.createElement("span", {
                          className: "mt-2"
                        }, "단품번호 : " + node.stockSku), React.createElement("span", {
                          className: "mt-2"
                        }, "수량 : " + quantityLabel), React.createElement("span", {
                          className: "mt-2"
                        }, "상품가 : " + priceLabel), React.createElement("span", {
                          className: "mt-2"
                        }, "배송비 : " + deliveryCostLabel)), React.createElement("section", {
                      className: "mt-2 flex flex-col"
                    }, React.createElement("span", {
                          className: "text-sm text-gray-600"
                        }, "해당 상품의 가격과 배송비를 확인하시고 주문해주세요."), React.createElement(Link, {
                          href: "https://drive.google.com/file/d/1hz3Y2U9JlGR4fgiqNdrNFEdKAiL74BOw/view",
                          children: React.createElement("a", {
                                className: "flex items-center mt-4",
                                rel: "noopener noreferer",
                                target: "_blank"
                              }, React.createElement("span", {
                                    className: "text-primary text-[17px] font-bold mr-1"
                                  }, "위탁 배송 주문 방법 안내"), React.createElement(IconArrow.make, {
                                    height: "20",
                                    width: "20",
                                    fill: "#12B564"
                                  }))
                        }))), React.createElement("section", {
                  className: "w-full py-5"
                }, React.createElement("button", {
                      className: "w-full h-16 bg-primary text-white font-bold flex items-center justify-center rounded-xl",
                      onClick: (function (param) {
                          return ReactEvents.interceptingHandler((function (param) {
                                        router.push("/buyer/upload");
                                        
                                      }), param);
                        })
                    }, "주문서 업로드하기"))), React.createElement(ReactTabs.Content, {
              children: null,
              value: "deliverying"
            }, React.createElement("div", {
                  className: "w-full h-[273px]"
                }, React.createElement("section", {
                      className: "w-full bg-gray-50 p-4 text-text-L1 flex flex-col"
                    }, React.createElement("span", undefined, "수량 : " + quantityLabel), React.createElement("span", {
                          className: "mt-2"
                        }, "상품가 : " + priceLabel), React.createElement("span", {
                          className: "mt-2"
                        }, "배송비 : 배송타입 선택 후 확인 가능"))), React.createElement("section", {
                  className: "w-full py-5"
                }, React.createElement("button", {
                      className: "w-full h-16 bg-primary text-white font-bold flex items-center justify-center rounded-xl",
                      onClick: (function (param) {
                          return ReactEvents.interceptingHandler((function (param) {
                                        var prim1_pathname = "/buyer/web-order/" + productNodeId + "/" + productOptionNodeId;
                                        var prim1_query = Js_dict.fromArray([[
                                                "quantity",
                                                String(quantity)
                                              ]]);
                                        var prim1 = {
                                          pathname: prim1_pathname,
                                          query: prim1_query
                                        };
                                        router.push(prim1);
                                        
                                      }), param);
                        })
                    }, "바로 구매하기"))));
  } else {
    tmp = null;
  }
  return React.createElement(ReactTabs.Root, {
              children: null,
              defaultValue: "dropShipping",
              onValueChange: (function (selected) {
                  return setSelectedMethod(function (param) {
                              return selected;
                            });
                })
            }, React.createElement(ReactTabs.List, {
                  children: null,
                  className: "w-full h-12 flex"
                }, React.createElement(PDP_Product_Normal_OrderSpecification_Buyer$Tab, {
                      label: "2개 이상 배송지",
                      value: "dropShipping",
                      isSelected: selectedMethod === "dropShipping"
                    }), React.createElement(PDP_Product_Normal_OrderSpecification_Buyer$Tab, {
                      label: "1개 배송지",
                      value: "deliverying",
                      isSelected: selectedMethod === "deliverying"
                    })), tmp);
}

var make = PDP_Product_Normal_OrderSpecification_Buyer;

export {
  Query ,
  Placeholder ,
  Tab ,
  make ,
  
}
/* react Not a pure module */
