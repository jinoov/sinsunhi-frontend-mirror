// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ChannelTalk from "../../../bindings/ChannelTalk.mjs";
import * as CustomHooks from "../../../utils/CustomHooks.mjs";
import * as ReactEvents from "../../../utils/ReactEvents.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as RfqCreateRequestButton from "../../../components/RfqCreateRequestButton.mjs";
import * as PDP_Product_Normal_Modals_Buyer from "./PDP_Product_Normal_Modals_Buyer.mjs";
import * as PDP_Product_Quoted_Modals_Buyer from "./PDP_Product_Quoted_Modals_Buyer.mjs";
import * as PDPProductNormalSubmitBuyerFragment_graphql from "../../../__generated__/PDPProductNormalSubmitBuyerFragment_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(PDPProductNormalSubmitBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PDPProductNormalSubmitBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PDPProductNormalSubmitBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PDPProductNormalSubmitBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_productOptionStatus_decode = PDPProductNormalSubmitBuyerFragment_graphql.Utils.productOptionStatus_decode;

var Fragment_productOptionStatus_fromString = PDPProductNormalSubmitBuyerFragment_graphql.Utils.productOptionStatus_fromString;

var Fragment_productStatus_decode = PDPProductNormalSubmitBuyerFragment_graphql.Utils.productStatus_decode;

var Fragment_productStatus_fromString = PDPProductNormalSubmitBuyerFragment_graphql.Utils.productStatus_fromString;

var Fragment_productType_decode = PDPProductNormalSubmitBuyerFragment_graphql.Utils.productType_decode;

var Fragment_productType_fromString = PDPProductNormalSubmitBuyerFragment_graphql.Utils.productType_fromString;

var Fragment = {
  productOptionStatus_decode: Fragment_productOptionStatus_decode,
  productOptionStatus_fromString: Fragment_productOptionStatus_fromString,
  productStatus_decode: Fragment_productStatus_decode,
  productStatus_fromString: Fragment_productStatus_fromString,
  productType_decode: Fragment_productType_decode,
  productType_fromString: Fragment_productType_fromString,
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function PDP_Product_Normal_Submit_Buyer$PC(Props) {
  var query = Props.query;
  var selected = Props.selected;
  var quantity = Props.quantity;
  var setQuantity = Props.setQuantity;
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  var match = use(query);
  var match$1 = React.useState(function () {
        return /* Hide */0;
      });
  var setShowModal = match$1[1];
  if (match.status === "SOLDOUT") {
    return React.createElement("button", {
                className: "w-full h-16 rounded-xl flex items-center justify-center bg-gray-300 text-white font-bold text-xl",
                disabled: true
              }, React.createElement("span", undefined, "품절"));
  }
  var btnStyle = "w-full h-16 rounded-xl flex items-center justify-center bg-primary hover:bg-primary-variant text-lg font-bold text-white";
  var tmp;
  if (typeof user === "number") {
    if (user !== 0) {
      var onClick = function (param) {
        return ReactEvents.interceptingHandler((function (param) {
                      return setShowModal(function (param) {
                                  return /* Show */{
                                          _0: /* Unauthorized */0
                                        };
                                });
                    }), param);
      };
      tmp = React.createElement("button", {
            className: btnStyle,
            onClick: onClick
          }, React.createElement("span", undefined, "구매하기"));
    } else {
      tmp = React.createElement("button", {
            className: btnStyle
          }, React.createElement("span", undefined, "구매하기"));
    }
  } else {
    var onClick$1 = function (param) {
      return ReactEvents.interceptingHandler((function (param) {
                    if (selected !== undefined) {
                      return setShowModal(function (param) {
                                  return /* Show */{
                                          _0: /* Confirm */1
                                        };
                                });
                    } else {
                      return setShowModal(function (param) {
                                  return /* Show */{
                                          _0: /* NoOption */3
                                        };
                                });
                    }
                  }), param);
    };
    tmp = React.createElement("button", {
          className: btnStyle,
          onClick: onClick$1
        }, React.createElement("span", undefined, "구매하기"));
  }
  return React.createElement(React.Fragment, undefined, tmp, React.createElement(PDP_Product_Normal_Modals_Buyer.PC.make, {
                  show: match$1[0],
                  setShow: setShowModal,
                  selected: selected,
                  quantity: quantity,
                  setQuantity: setQuantity
                }));
}

var PC = {
  make: PDP_Product_Normal_Submit_Buyer$PC
};

function PDP_Product_Normal_Submit_Buyer$MO$CTAContainer(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: "fixed w-full bottom-0 left-0"
            }, React.createElement("div", {
                  className: "w-full max-w-[768px] p-3 mx-auto border-t border-t-gray-100 bg-white"
                }, React.createElement("div", {
                      className: "w-full h-14 flex"
                    }, React.createElement("button", {
                          onClick: (function (param) {
                              return ReactEvents.interceptingHandler((function (param) {
                                            return ChannelTalk.showMessenger(undefined);
                                          }), param);
                            })
                        }, React.createElement("img", {
                              className: "w-14 h-14 mr-2",
                              alt: "cta-cs-btn-mobile",
                              src: "/icons/cs-gray-square.png"
                            })), Belt_Option.getWithDefault(children, null))));
}

var CTAContainer = {
  make: PDP_Product_Normal_Submit_Buyer$MO$CTAContainer
};

function PDP_Product_Normal_Submit_Buyer$MO$OrderBtn(Props) {
  var status = Props.status;
  var selected = Props.selected;
  var setShowModal = Props.setShowModal;
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  var btnStyle = "flex flex-1 rounded-xl items-center justify-center bg-primary font-bold text-white";
  var disabledStyle = "flex flex-1 rounded-xl items-center justify-center bg-gray-300 text-white font-bold";
  if (status === "SOLDOUT") {
    return React.createElement("button", {
                className: disabledStyle,
                disabled: true
              }, "품절");
  } else if (typeof user === "number") {
    if (user !== 0) {
      return React.createElement(React.Fragment, undefined, React.createElement("button", {
                      className: btnStyle,
                      onClick: (function (param) {
                          return ReactEvents.interceptingHandler((function (param) {
                                        return setShowModal(function (param) {
                                                    return /* Show */{
                                                            _0: /* Unauthorized */0
                                                          };
                                                  });
                                      }), param);
                        })
                    }, "구매하기"));
    } else {
      return React.createElement("button", {
                  className: disabledStyle,
                  disabled: true
                }, "구매하기");
    }
  } else {
    return React.createElement("button", {
                className: btnStyle,
                onClick: (function (param) {
                    return ReactEvents.interceptingHandler((function (param) {
                                  if (selected !== undefined) {
                                    return setShowModal(function (param) {
                                                return /* Show */{
                                                        _0: /* Confirm */1
                                                      };
                                              });
                                  } else {
                                    return setShowModal(function (param) {
                                                return /* Show */{
                                                        _0: /* NoOption */3
                                                      };
                                              });
                                  }
                                }), param);
                  })
              }, "구매하기");
  }
}

var OrderBtn = {
  make: PDP_Product_Normal_Submit_Buyer$MO$OrderBtn
};

function PDP_Product_Normal_Submit_Buyer$MO$RfqBtn(Props) {
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  var btnStyle = "flex flex-1 items-center justify-center rounded-xl bg-white border border-primary text-primary text-lg font-bold";
  var disabledStyle = "flex flex-1 items-center justify-center rounded-xl bg-disabled-L2";
  var match = React.useState(function () {
        return /* Hide */0;
      });
  var setShowModal = match[1];
  if (typeof user === "number") {
    if (user !== 0) {
      return React.createElement(React.Fragment, undefined, React.createElement("button", {
                      className: btnStyle,
                      onClick: (function (param) {
                          return ReactEvents.interceptingHandler((function (param) {
                                        return setShowModal(function (param) {
                                                    return /* Show */{
                                                            _0: /* Unauthorized */0
                                                          };
                                                  });
                                      }), param);
                        })
                    }, "최저가 견적문의"), React.createElement(PDP_Product_Quoted_Modals_Buyer.MO.make, {
                      show: match[0],
                      setShow: setShowModal
                    }));
    } else {
      return React.createElement("button", {
                  className: disabledStyle
                }, "최저가 견적문의");
    }
  } else if (user._0.role !== 1) {
    return React.createElement("button", {
                className: disabledStyle
              }, "최저가 견적문의");
  } else {
    return React.createElement(RfqCreateRequestButton.make, {
                className: btnStyle,
                buttonText: "최저가 견적문의"
              });
  }
}

var RfqBtn = {
  make: PDP_Product_Normal_Submit_Buyer$MO$RfqBtn
};

function PDP_Product_Normal_Submit_Buyer$MO(Props) {
  var query = Props.query;
  var selected = Props.selected;
  var quantity = Props.quantity;
  var setQuantity = Props.setQuantity;
  var match = use(query);
  var status = match.status;
  var match$1 = React.useState(function () {
        return /* Hide */0;
      });
  var setShowModal = match$1[1];
  var showModal = match$1[0];
  if (match.type_ !== "QUOTABLE") {
    return React.createElement(React.Fragment, undefined, React.createElement("div", {
                    className: "w-full h-14 flex"
                  }, React.createElement(PDP_Product_Normal_Submit_Buyer$MO$OrderBtn, {
                        status: status,
                        selected: selected,
                        setShowModal: setShowModal
                      })), React.createElement(PDP_Product_Normal_Submit_Buyer$MO$CTAContainer, {
                    children: React.createElement(PDP_Product_Normal_Submit_Buyer$MO$OrderBtn, {
                          status: status,
                          selected: selected,
                          setShowModal: setShowModal
                        })
                  }), React.createElement(PDP_Product_Normal_Modals_Buyer.MO.make, {
                    show: showModal,
                    setShow: setShowModal,
                    selected: selected,
                    quantity: quantity,
                    setQuantity: setQuantity
                  }));
  }
  var gap = "w-2";
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "w-full h-14 flex"
                }, React.createElement(PDP_Product_Normal_Submit_Buyer$MO$RfqBtn, {}), React.createElement("div", {
                      className: gap
                    }), React.createElement(PDP_Product_Normal_Submit_Buyer$MO$OrderBtn, {
                      status: status,
                      selected: selected,
                      setShowModal: setShowModal
                    })), React.createElement(PDP_Product_Normal_Submit_Buyer$MO$CTAContainer, {
                  children: null
                }, React.createElement(PDP_Product_Normal_Submit_Buyer$MO$RfqBtn, {}), React.createElement("div", {
                      className: gap
                    }), React.createElement(PDP_Product_Normal_Submit_Buyer$MO$OrderBtn, {
                      status: status,
                      selected: selected,
                      setShowModal: setShowModal
                    })), React.createElement(PDP_Product_Normal_Modals_Buyer.MO.make, {
                  show: showModal,
                  setShow: setShowModal,
                  selected: selected,
                  quantity: quantity,
                  setQuantity: setQuantity
                }));
}

var MO = {
  CTAContainer: CTAContainer,
  OrderBtn: OrderBtn,
  RfqBtn: RfqBtn,
  make: PDP_Product_Normal_Submit_Buyer$MO
};

export {
  Fragment ,
  PC ,
  MO ,
  
}
/* react Not a pure module */
