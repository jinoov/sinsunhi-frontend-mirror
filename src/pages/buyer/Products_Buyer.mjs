// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Constants from "../../constants/Constants.mjs";
import * as ErrorPanel from "../../components/common/ErrorPanel.mjs";
import * as Pagination from "../../components/common/Pagination.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Authorization from "../../utils/Authorization.mjs";
import * as EmptyProducts from "../../components/EmptyProducts.mjs";
import * as Product_Buyer from "../../components/Product_Buyer.mjs";
import * as Select_CountPerPage from "../../components/Select_CountPerPage.mjs";
import * as Search_Product_Buyer from "../../components/Search_Product_Buyer.mjs";
import * as Excel_Download_Request_Button from "../../components/Excel_Download_Request_Button.mjs";

function Products_Buyer$List(Props) {
  var status = Props.status;
  if (typeof status === "number") {
    return React.createElement("div", undefined, "로딩 중..");
  }
  if (status.TAG !== /* Loaded */0) {
    return React.createElement(ErrorPanel.make, {
                error: status._0
              });
  }
  var products$p = CustomHooks.Products.products_decode(status._0);
  var tmp;
  if (products$p.TAG === /* Ok */0) {
    var products$p$1 = products$p._0;
    tmp = React.createElement("ol", {
          className: "divide-y divide-gray-300 lg:divide-gray-100 lg:list-height-buyer lg:overflow-y-scroll"
        }, products$p$1.data.length !== 0 ? Garter_Array.map(products$p$1.data, (function (product) {
                  return React.createElement(Product_Buyer.make, {
                              product: product,
                              key: product.productSku
                            });
                })) : React.createElement(EmptyProducts.make, {}));
  } else {
    tmp = React.createElement(EmptyProducts.make, {});
  }
  var tmp$1;
  if (typeof status === "number" || status.TAG !== /* Loaded */0) {
    tmp$1 = null;
  } else {
    var products$p$2 = CustomHooks.Products.products_decode(status._0);
    if (products$p$2.TAG === /* Ok */0) {
      var products$p$3 = products$p$2._0;
      tmp$1 = React.createElement("div", {
            className: "flex justify-center py-5"
          }, React.createElement(Pagination.make, {
                pageDisplySize: Constants.pageDisplySize,
                itemPerPage: products$p$3.limit,
                total: products$p$3.count
              }));
    } else {
      tmp$1 = null;
    }
  }
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "w-full overflow-x-scroll"
                }, React.createElement("div", {
                      className: "text-sm lg:min-w-max"
                    }, React.createElement("div", {
                          className: "hidden lg:grid lg:grid-cols-7-buyer-product bg-gray-100 text-gray-500 h-12"
                        }, React.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap"
                            }, "판매상태"), React.createElement("div", {
                              className: "h-full px-4 flex items-center text-center whitespace-nowrap"
                            }, "상품번호·단품번호"), React.createElement("div", {
                              className: "h-full px-4 flex items-center text-center whitespace-nowrap"
                            }, "상품명·단품명"), React.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap"
                            }, "현재 판매가"), React.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap"
                            }, "출고기준시간"), React.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap text-center"
                            }, "메모")), tmp)), tmp$1);
}

var List = {
  make: Products_Buyer$List
};

function data_encode(v) {
  return Js_dict.fromArray([
              [
                "total-count",
                Spice.intToJson(v.totalCount)
              ],
              [
                "update-count",
                Spice.intToJson(v.updateCount)
              ]
            ]);
}

function data_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var totalCount = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-count"), null));
  if (totalCount.TAG === /* Ok */0) {
    var updateCount = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "update-count"), null));
    if (updateCount.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                totalCount: totalCount._0,
                updateCount: updateCount._0
              }
            };
    }
    var e = updateCount._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".update-count" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = totalCount._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".total-count" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function response_encode(v) {
  return Js_dict.fromArray([
              [
                "data",
                data_encode(v.data)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ]
            ]);
}

function response_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = data_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
    if (message.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                data: data._0,
                message: message._0
              }
            };
    }
    var e = message._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".message" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function Products_Buyer$Products(Props) {
  var router = Router.useRouter();
  var status = CustomHooks.Products.use(new URLSearchParams(router.query).toString());
  var count;
  if (typeof status === "number" || status.TAG !== /* Loaded */0) {
    count = "-";
  } else {
    var products$p = CustomHooks.Products.products_decode(status._0);
    count = products$p.TAG === /* Ok */0 ? String(products$p._0.count) : "-";
  }
  return React.createElement("div", {
              className: "sm:px-10 md:px-20"
            }, React.createElement(Search_Product_Buyer.make, {}), React.createElement("div", {
                  className: "lg:px-7 mt-4 shadow-gl"
                }, React.createElement("div", {
                      className: "md:flex md:justify-between pb-4 text-base"
                    }, React.createElement("div", {
                          className: "pt-10 px-5 flex flex-col lg:flex-row sm:flex-auto sm:justify-between"
                        }, React.createElement("h3", {
                              className: "font-bold"
                            }, "내역", React.createElement("span", {
                                  className: "ml-1 text-green-gl font-normal"
                                }, "" + count + "건")), React.createElement("div", {
                              className: "flex flex-col lg:flex-row mt-4 lg:mt-0"
                            }, React.createElement("div", {
                                  className: "flex items-center"
                                }, React.createElement(Select_CountPerPage.make, {
                                      className: "mr-2"
                                    })), React.createElement("div", {
                                  className: "flex mt-2 lg:mt-0"
                                }, React.createElement(Excel_Download_Request_Button.make, {
                                      userType: /* Buyer */1,
                                      requestUrl: "/product/request-excel"
                                    }))))), React.createElement(Products_Buyer$List, {
                      status: status
                    })));
}

var Products = {
  make: Products_Buyer$Products
};

function Products_Buyer(Props) {
  return React.createElement(Authorization.Buyer.make, {
              children: React.createElement(Products_Buyer$Products, {}),
              title: "상품"
            });
}

var make = Products_Buyer;

export {
  List ,
  data_encode ,
  data_decode ,
  response_encode ,
  response_decode ,
  Products ,
  make ,
}
/* react Not a pure module */
