// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Skeleton from "../../components/Skeleton.mjs";
import Head from "next/head";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as Router from "next/router";
import * as Layout_Buyer from "../../layouts/Layout_Buyer.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as ChannelTalkHelper from "../../utils/ChannelTalkHelper.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ShopProductListItem_Buyer from "../../components/ShopProductListItem_Buyer.mjs";
import * as RescriptReactErrorBoundary from "@rescript/react/src/RescriptReactErrorBoundary.mjs";
import * as ShopProductsSortSelect_Buyer from "../../components/ShopProductsSortSelect_Buyer.mjs";
import * as ShopSearchBuyerQuery_graphql from "../../__generated__/ShopSearchBuyerQuery_graphql.mjs";
import * as ShopSearchBuyerRefetchQuery_graphql from "../../__generated__/ShopSearchBuyerRefetchQuery_graphql.mjs";
import * as ShopSearchBuyerSearchResultsFragment_graphql from "../../__generated__/ShopSearchBuyerSearchResultsFragment_graphql.mjs";

var makeVariables = ShopSearchBuyerQuery_graphql.Utils.makeVariables;

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(ShopSearchBuyerQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(ShopSearchBuyerQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(ShopSearchBuyerQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(ShopSearchBuyerQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, ShopSearchBuyerQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, ShopSearchBuyerQuery_graphql.node, ShopSearchBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: ShopSearchBuyerQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, ShopSearchBuyerQuery_graphql.node, ShopSearchBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(ShopSearchBuyerQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(ShopSearchBuyerQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(ShopSearchBuyerQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(ShopSearchBuyerQuery_graphql.node, ShopSearchBuyerQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_productsQueryInputSort_decode = ShopSearchBuyerQuery_graphql.Utils.productsQueryInputSort_decode;

var Query_productsQueryInputSort_fromString = ShopSearchBuyerQuery_graphql.Utils.productsQueryInputSort_fromString;

var Query = {
  productsQueryInputSort_decode: Query_productsQueryInputSort_decode,
  productsQueryInputSort_fromString: Query_productsQueryInputSort_fromString,
  makeVariables: makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function internal_makeRefetchableFnOpts(fetchPolicy, onComplete, param) {
  var tmp = {};
  var tmp$1 = RescriptRelay.mapFetchPolicy(fetchPolicy);
  if (tmp$1 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = RescriptRelay_Internal.internal_nullableToOptionalExnHandler(onComplete);
  if (tmp$2 !== undefined) {
    tmp.onComplete = Caml_option.valFromOption(tmp$2);
  }
  return tmp;
}

function useRefetchable(fRef) {
  var match = Hooks.useRefetchableFragment(ShopSearchBuyerSearchResultsFragment_graphql.node, fRef);
  var refetchFn = match[1];
  var data = RescriptRelay_Internal.internal_useConvertedValue(ShopSearchBuyerSearchResultsFragment_graphql.Internal.convertFragment, match[0]);
  return [
          data,
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return Curry._2(refetchFn, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(ShopSearchBuyerRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [refetchFn])
        ];
}

function use$1(fRef) {
  var data = Hooks.useFragment(ShopSearchBuyerSearchResultsFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(ShopSearchBuyerSearchResultsFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(ShopSearchBuyerSearchResultsFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return ShopSearchBuyerSearchResultsFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

function usePagination(fr) {
  var p = Hooks.usePaginationFragment(ShopSearchBuyerSearchResultsFragment_graphql.node, fr);
  var data = RescriptRelay_Internal.internal_useConvertedValue(ShopSearchBuyerSearchResultsFragment_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          isLoadingNext: p.isLoadingNext,
          isLoadingPrevious: p.isLoadingPrevious,
          refetch: React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(ShopSearchBuyerRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

function useBlockingPagination(fRef) {
  var p = Hooks.useBlockingPaginationFragment(ShopSearchBuyerSearchResultsFragment_graphql.node, fRef);
  var data = RescriptRelay_Internal.internal_useConvertedValue(ShopSearchBuyerSearchResultsFragment_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          refetch: React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(ShopSearchBuyerRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

var makeRefetchVariables = ShopSearchBuyerRefetchQuery_graphql.Types.makeRefetchVariables;

var Fragment_getConnectionNodes = ShopSearchBuyerSearchResultsFragment_graphql.Utils.getConnectionNodes;

var Fragment = {
  getConnectionNodes: Fragment_getConnectionNodes,
  Types: undefined,
  internal_makeRefetchableFnOpts: internal_makeRefetchableFnOpts,
  useRefetchable: useRefetchable,
  use: use$1,
  useOpt: useOpt,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination,
  makeRefetchVariables: makeRefetchVariables
};

function ShopSearch_Buyer$Placeholder(Props) {
  return React.createElement(Layout_Buyer.Responsive.make, {
              pc: React.createElement("div", {
                    className: "w-[1280px] pt-20 mx-auto"
                  }, React.createElement("section", {
                        className: "w-full flex items-center justify-center"
                      }, React.createElement(Skeleton.Box.make, {
                            className: "w-[400px] h-[48px]"
                          })), React.createElement("section", {
                        className: "mt-20 w-full flex items-center justify-end"
                      }, React.createElement(Skeleton.Box.make, {
                            className: "w-32 h-5"
                          })), React.createElement("section", {
                        className: "w-full mt-12"
                      }, React.createElement("ol", {
                            className: "grid grid-cols-4 gap-x-10 gap-y-16"
                          }, Belt_Array.map(Belt_Array.range(1, 300), (function (number) {
                                  return React.createElement(ShopProductListItem_Buyer.PC.Placeholder.make, {
                                              key: "box-" + String(number)
                                            });
                                }))))),
              mobile: React.createElement("div", {
                    className: "w-full pb-8 px-5"
                  }, React.createElement("div", {
                        className: "w-full py-4  flex items-center justify-end"
                      }, React.createElement("div", {
                            className: "w-12 h-5 rounded-lg animate-pulse bg-gray-150"
                          })), React.createElement("div", undefined, React.createElement("ol", {
                            className: "grid grid-cols-2 gap-x-4 gap-y-8"
                          }, Belt_Array.map(Belt_Array.range(1, 300), (function (idx) {
                                  return React.createElement(ShopProductListItem_Buyer.MO.Placeholder.make, {
                                              key: "search-result-skeleton-" + String(idx)
                                            });
                                })))))
            });
}

var Placeholder = {
  make: ShopSearch_Buyer$Placeholder
};

function ShopSearch_Buyer$PC$Empty(Props) {
  var keyword = Props.keyword;
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "w-full flex items-center justify-center mt-40"
                }, React.createElement("span", {
                      className: "text-3xl text-gray-800"
                    }, React.createElement("span", {
                          className: "font-bold"
                        }, keyword), "에 대한 검색결과")), React.createElement("div", {
                  className: "mt-7 w-full flex flex-col items-center justify-center"
                }, React.createElement("span", {
                      className: "text-gray-800"
                    }, React.createElement("span", {
                          className: "text-green-500 font-bold"
                        }, keyword), "의 검색결과가 없습니다."), React.createElement("span", {
                      className: "text-gray-800"
                    }, "다른 검색어를 입력하시거나 철자와 띄어쓰기를 확인해 보세요.")));
}

var Empty = {
  make: ShopSearch_Buyer$PC$Empty
};

function ShopSearch_Buyer$PC(Props) {
  var keyword = Props.keyword;
  var query = Props.query;
  var match = usePagination(query);
  var hasNext = match.hasNext;
  var loadNext = match.loadNext;
  var products = match.data.products;
  var loadMoreRef = React.useRef(null);
  var isIntersecting = CustomHooks.$$IntersectionObserver.use(undefined, loadMoreRef, 0.1, "50px", undefined);
  React.useEffect((function () {
          if (hasNext && isIntersecting) {
            Curry._3(loadNext, 20, undefined, undefined);
          }
          
        }), [
        hasNext,
        isIntersecting
      ]);
  if (products.edges.length === 0) {
    return React.createElement(ShopSearch_Buyer$PC$Empty, {
                keyword: keyword
              });
  } else {
    return React.createElement("div", {
                className: "w-[1280px] mx-auto min-h-full"
              }, React.createElement("div", {
                    className: "w-full flex items-center justify-center pt-20"
                  }, React.createElement("span", {
                        className: "text-3xl text-gray-800"
                      }, React.createElement("span", {
                            className: "font-bold"
                          }, keyword), "에 대한 검색결과")), React.createElement("div", {
                    className: "mt-20 w-full flex items-center justify-end"
                  }, React.createElement(ShopProductsSortSelect_Buyer.make, {})), React.createElement("div", undefined, React.createElement("ol", {
                        className: "mt-12 grid grid-cols-4 gap-x-10 gap-y-16"
                      }, Belt_Array.map(products.edges, (function (param) {
                              return React.createElement(ShopProductListItem_Buyer.PC.make, {
                                          query: param.node.fragmentRefs,
                                          key: param.cursor
                                        });
                            }))), React.createElement("div", {
                        ref: loadMoreRef,
                        className: "h-20 w-full"
                      })));
  }
}

var PC = {
  Empty: Empty,
  make: ShopSearch_Buyer$PC
};

function ShopSearch_Buyer$MO$Empty(Props) {
  var keyword = Props.keyword;
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "w-full flex items-center justify-center pt-[134px] px-5"
                }, React.createElement("span", {
                      className: "text-gray-800 text-xl text-center"
                    }, React.createElement("span", {
                          className: "font-bold"
                        }, keyword), "에 대한 검색결과")), React.createElement("div", {
                  className: "mt-2 w-full flex flex-col items-center justify-center text-center text-base text-gray-600"
                }, React.createElement("span", undefined, React.createElement("span", {
                          className: "text-green-500 font-bold"
                        }, keyword), "의 검색결과가 없습니다."), React.createElement("span", undefined, "다른 검색어를 입력하시거나"), React.createElement("span", undefined, "철자와 띄어쓰기를 확인해 보세요.")));
}

var Empty$1 = {
  make: ShopSearch_Buyer$MO$Empty
};

function ShopSearch_Buyer$MO(Props) {
  var keyword = Props.keyword;
  var query = Props.query;
  var match = usePagination(query);
  var hasNext = match.hasNext;
  var loadNext = match.loadNext;
  var products = match.data.products;
  var loadMoreRef = React.useRef(null);
  var isIntersecting = CustomHooks.$$IntersectionObserver.use(undefined, loadMoreRef, 0.1, "50px", undefined);
  React.useEffect((function () {
          if (hasNext && isIntersecting) {
            Curry._3(loadNext, 20, undefined, undefined);
          }
          
        }), [
        hasNext,
        isIntersecting
      ]);
  if (products.edges.length === 0) {
    return React.createElement(ShopSearch_Buyer$MO$Empty, {
                keyword: keyword
              });
  } else {
    return React.createElement("div", {
                className: "w-full px-5"
              }, React.createElement("div", {
                    className: "py-4 w-full flex items-center justify-end"
                  }, React.createElement(ShopProductsSortSelect_Buyer.MO.make, {})), React.createElement("div", undefined, React.createElement("ol", {
                        className: "grid grid-cols-2 gap-x-4 gap-y-8"
                      }, Belt_Array.map(products.edges, (function (param) {
                              return React.createElement(ShopProductListItem_Buyer.MO.make, {
                                          query: param.node.fragmentRefs,
                                          key: param.cursor
                                        });
                            }))), React.createElement("div", {
                        ref: loadMoreRef,
                        className: "h-20 w-full"
                      })));
  }
}

var MO = {
  Empty: Empty$1,
  make: ShopSearch_Buyer$MO
};

function ShopSearch_Buyer$Container(Props) {
  var keyword = Props.keyword;
  var sort = Props.sort;
  ChannelTalkHelper.Hook.use(undefined, undefined, undefined);
  var match = use(Curry._6(makeVariables, 20, undefined, keyword, sort, true, undefined), /* StoreOrNetwork */1, undefined, undefined, undefined);
  var fragmentRefs = match.fragmentRefs;
  return React.createElement(Layout_Buyer.Responsive.make, {
              pc: React.createElement(ShopSearch_Buyer$PC, {
                    keyword: keyword,
                    query: fragmentRefs
                  }),
              mobile: React.createElement(ShopSearch_Buyer$MO, {
                    keyword: keyword,
                    query: fragmentRefs
                  })
            });
}

var Container = {
  make: ShopSearch_Buyer$Container
};

function ShopSearch_Buyer(Props) {
  var router = Router.useRouter();
  var keyword = Belt_Option.map(Js_dict.get(router.query, "keyword"), (function (prim) {
          return decodeURIComponent(prim);
        }));
  var sort = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(router.query, "sort"), ShopProductsSortSelect_Buyer.decodeSort), "UPDATED_DESC");
  return React.createElement(React.Fragment, undefined, React.createElement(Head, {
                  children: React.createElement("title", undefined, "신선하이")
                }), React.createElement(RescriptReactErrorBoundary.make, {
                  children: React.createElement(React.Suspense, {
                        children: keyword !== undefined ? React.createElement(ShopSearch_Buyer$Container, {
                                keyword: keyword,
                                sort: sort
                              }) : React.createElement(ShopSearch_Buyer$Placeholder, {}),
                        fallback: React.createElement(ShopSearch_Buyer$Placeholder, {})
                      }),
                  fallback: (function (param) {
                      return React.createElement("div", undefined, "에러");
                    })
                }));
}

var make = ShopSearch_Buyer;

export {
  Query ,
  Fragment ,
  Placeholder ,
  PC ,
  MO ,
  Container ,
  make ,
  
}
/* react Not a pure module */
