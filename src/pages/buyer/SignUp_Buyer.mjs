// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "../../components/common/Input.mjs";
import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as Checkbox from "../../components/common/Checkbox.mjs";
import * as IconArrow from "../../components/svgs/IconArrow.mjs";
import * as IconCheck from "../../components/svgs/IconCheck.mjs";
import Head from "next/head";
import Link from "next/link";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as FetchHelper from "../../utils/FetchHelper.mjs";
import * as ReactEvents from "../../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as Belt_SetString from "rescript/lib/es6/belt_SetString.js";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import * as ChannelTalkHelper from "../../utils/ChannelTalkHelper.mjs";
import * as LocalStorageHooks from "../../utils/LocalStorageHooks.mjs";
import * as SignUp_Buyer_Form from "../../components/SignUp_Buyer_Form.mjs";
import * as VerifyEmailAddress from "../../components/VerifyEmailAddress.mjs";
import * as VerifyBusinessNumber from "../../components/VerifyBusinessNumber.mjs";
import * as VerifyBuyerPhoneNumber from "../../components/VerifyBuyerPhoneNumber.mjs";
import * as ReactToastNotifications from "react-toast-notifications";

function makeOnChange(fn, e) {
  var v = e.target.value;
  return fn(function (param) {
              return v;
            });
}

function makeOnCheckedChange(fn, e) {
  var v = e.target.checked;
  return fn(function (param) {
              return v;
            });
}

function makeTermUrl(termId) {
  return "https://sinsun-policy.oopy.io/" + termId;
}

function SignUp_Buyer(Props) {
  var router = Router.useRouter();
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var match$1 = React.useState(function () {
        return false;
      });
  var setShowPwd = match$1[1];
  var showPwd = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setEmailExisted = match$2[1];
  var emailExisted = match$2[0];
  var match$3 = React.useState(function () {
        return /* BeforeSendVerificationCode */0;
      });
  var setPhoneNumberStatus = match$3[1];
  var phoneNumberStatus = match$3[0];
  var match$4 = React.useState(function () {
        
      });
  var setPhoneNumberExistedStatus = match$4[1];
  var phoneNumberExistedStatus = match$4[0];
  var match$5 = React.useState(function () {
        return /* Unverified */1;
      });
  var setBusinessNumberStatus = match$5[1];
  var businessNumberStatus = match$5[0];
  var match$6 = React.useState(function () {
        return Belt_SetString.fromArray([]);
      });
  var setAgreedTerms = match$6[1];
  var agreedTerms = match$6[0];
  var isAllAgreed = Belt_Array.every([
        "basic",
        "privacy",
        "marketing"
      ], (function (term) {
          return Belt_SetString.has(agreedTerms, term);
        }));
  var isRequiredTermsAgreed = Belt_Array.every([
        "basic",
        "privacy"
      ], (function (term) {
          return Belt_SetString.has(agreedTerms, term);
        }));
  var match$7 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowErr = match$7[1];
  var toggleCheck = function (e) {
    var name = e.target.name;
    if (Belt_SetString.has(agreedTerms, name)) {
      return setAgreedTerms(function (param) {
                  return Belt_SetString.remove(agreedTerms, name);
                });
    } else {
      return setAgreedTerms(function (param) {
                  return Belt_SetString.add(agreedTerms, name);
                });
    }
  };
  var toggleAllCheck = function (param) {
    if (isAllAgreed) {
      return setAgreedTerms(function (param) {
                  return Belt_SetString.fromArray([]);
                });
    } else {
      return setAgreedTerms(function (param) {
                  return Belt_SetString.fromArray([
                              "basic",
                              "privacy",
                              "marketing"
                            ]);
                });
    }
  };
  var handleSubmit = function (formApi) {
    if (emailExisted !== undefined && emailExisted && phoneNumberStatus === 2 && phoneNumberExistedStatus !== undefined && phoneNumberExistedStatus && !businessNumberStatus && isRequiredTermsAgreed) {
      var init = formApi.state.values;
      var payload_email = init.email;
      var payload_password = init.password;
      var payload_name = init.name;
      var payload_manager = init.manager;
      var payload_phone = init.phone;
      var payload_business$registration$number = init["business-registration-number"];
      var payload_terms = Belt_SetString.has(agreedTerms, "marketing") ? ["marketing"] : [];
      var payload = {
        email: payload_email,
        password: payload_password,
        name: payload_name,
        manager: payload_manager,
        phone: payload_phone,
        "business-registration-number": payload_business$registration$number,
        terms: payload_terms
      };
      Belt_Option.map(JSON.stringify(payload), (function (body) {
              return FetchHelper.post(Env.restApiUrl + "/user/register/new-buyer", body, (function (param) {
                            addToast(React.createElement("div", {
                                      className: "flex items-center"
                                    }, React.createElement(IconCheck.make, {
                                          height: "24",
                                          width: "24",
                                          fill: "#12B564",
                                          className: "mr-2"
                                        }), "회원가입이 완료되었습니다."), {
                                  appearance: "success"
                                });
                            var state = formApi.state;
                            var email = SignUp_Buyer_Form.FormFields.get(state.values, /* Email */0);
                            var password = SignUp_Buyer_Form.FormFields.get(state.values, /* Password */1);
                            var urlSearchParams = new URLSearchParams([
                                    [
                                      "grant-type",
                                      "password"
                                    ],
                                    [
                                      "username",
                                      email
                                    ],
                                    [
                                      "password",
                                      password
                                    ]
                                  ]).toString();
                            FetchHelper.postWithURLSearchParams(Env.restApiUrl + "/user/token", urlSearchParams, (function (res) {
                                    var res$p = FetchHelper.responseToken_decode(res);
                                    if (res$p.TAG === /* Ok */0) {
                                      var res$p$1 = res$p._0;
                                      Curry._1(LocalStorageHooks.AccessToken.set, res$p$1.token);
                                      Curry._1(LocalStorageHooks.RefreshToken.set, res$p$1.refreshToken);
                                      ChannelTalkHelper.bootWithProfile(undefined);
                                      var prim1 = "/buyer?welcome";
                                      var prim2 = "/buyer";
                                      router.push(prim1, prim2);
                                      return ;
                                    }
                                    router.push("/buyer/signin");
                                    
                                  }), (function (param) {
                                    router.push("/buyer/signin");
                                    
                                  }));
                            
                          }), (function (param) {
                            return setShowErr(function (param) {
                                        return /* Show */0;
                                      });
                          }));
            }));
    }
    
  };
  var form = Curry._7(SignUp_Buyer_Form.Form.use, SignUp_Buyer_Form.initialState, /* Schema */{
        _0: Belt_Array.concatMany([
              Curry._3(SignUp_Buyer_Form.Form.ReSchema.Validation.email, "올바른 이메일 주소를 입력해주세요.", undefined, /* Email */0),
              Curry._4(SignUp_Buyer_Form.Form.ReSchema.Validation.regExp, "영문, 숫자 조합 6~15자로 입력해 주세요.", "^(?=.*\\d)(?=.*[a-zA-Z]).{6,15}$", undefined, /* Password */1),
              Curry._3(SignUp_Buyer_Form.Form.ReSchema.Validation.nonEmpty, "회사명을 입력해주세요.", undefined, /* Name */2),
              Curry._3(SignUp_Buyer_Form.Form.ReSchema.Validation.nonEmpty, "담당자명을 입력해주세요.", undefined, /* Manager */3),
              Curry._3(SignUp_Buyer_Form.Form.ReSchema.Validation.nonEmpty, "휴대전화번호를 입력해주세요.", undefined, /* Phone */4),
              Curry._3(SignUp_Buyer_Form.Form.ReSchema.Validation.nonEmpty, "사업자 등록번호를 입력해주세요.", undefined, /* BusinessRegistrationNumber */5)
            ])
      }, handleSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleEmailChange = function (email, existed) {
    if (email !== undefined) {
      setEmailExisted(function (param) {
            return existed;
          });
      return Curry._4(form.setFieldValue, /* Email */0, email, true, undefined);
    } else {
      setEmailExisted(function (param) {
            return existed;
          });
      return Curry._4(form.setFieldValue, /* Email */0, "", true, undefined);
    }
  };
  var onPhoneVerified = function (phoneNumber, isVerifed, isExisted) {
    setPhoneNumberStatus(function (param) {
          return isVerifed;
        });
    setPhoneNumberExistedStatus(function (param) {
          return isExisted;
        });
    return Curry._4(form.setFieldValue, /* Phone */4, phoneNumber, true, undefined);
  };
  var onBusinessNumberChange = function (businessNumber) {
    if (businessNumber !== undefined) {
      setBusinessNumberStatus(function (param) {
            return /* Verified */0;
          });
      return Curry._4(form.setFieldValue, /* BusinessRegistrationNumber */5, businessNumber, true, undefined);
    } else {
      setBusinessNumberStatus(function (param) {
            return /* Unverified */1;
          });
      return Curry._4(form.setFieldValue, /* BusinessRegistrationNumber */5, "", true, undefined);
    }
  };
  var match$8 = form.isSubmitting;
  var isSubmitDisabled = emailExisted !== undefined && emailExisted && !(phoneNumberStatus !== 2 || !(phoneNumberExistedStatus !== undefined && phoneNumberExistedStatus && !(businessNumberStatus || !(isRequiredTermsAgreed && !match$8)))) ? false : true;
  var onSubmit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return Curry._1(form.submit, undefined);
                }), param);
  };
  var partial_arg = Curry._1(form.handleChange, /* Password */1);
  var partial_arg$1 = Curry._1(form.handleChange, /* Name */2);
  var partial_arg$2 = Curry._1(form.handleChange, /* Manager */3);
  return React.createElement(React.Fragment, undefined, React.createElement(Head, {
                  children: React.createElement("title", undefined, "회원가입 - 신선하이")
                }), React.createElement("div", {
                  className: "container mx-auto max-w-lg min-h-screen flex flex-col justify-center items-center pb-24 relative"
                }, React.createElement("main", {
                      className: "w-full px-5 lg:mt-10"
                    }, React.createElement("h2", {
                          className: "hidden xl:block text-text-L1 text-[26px] font-bold text-center"
                        }, "회원가입"), React.createElement("form", {
                          className: "mt-10 divide-y",
                          onSubmit: onSubmit
                        }, React.createElement("div", undefined, React.createElement(VerifyEmailAddress.make, {
                                  emailExisted: emailExisted,
                                  onEmailChange: handleEmailChange
                                }), React.createElement("div", {
                                  className: "mt-5"
                                }, React.createElement("span", {
                                      className: "text-base font-bold mb-2"
                                    }, "비밀번호", React.createElement("span", {
                                          className: "ml-0.5 text-notice"
                                        }, "*")), React.createElement(Input.make, {
                                      type_: showPwd ? "text" : "password",
                                      name: "password",
                                      placeholder: "비밀번호 입력 (영문, 숫자 조합 6~15자)",
                                      className: "mt-2",
                                      onChange: (function (param) {
                                          return ReForm__Helpers.handleChange(partial_arg, param);
                                        }),
                                      size: /* Large */0,
                                      error: Curry._1(form.getFieldError, /* Field */{
                                            _0: /* Password */1
                                          })
                                    }), React.createElement("div", {
                                      className: "flex items-center mt-2"
                                    }, React.createElement(Checkbox.make, {
                                          id: "show-pwd",
                                          name: "show-pwd",
                                          checked: showPwd,
                                          onChange: (function (param) {
                                              return makeOnCheckedChange(setShowPwd, param);
                                            })
                                        }), React.createElement("span", {
                                          className: "ml-2",
                                          onClick: (function (param) {
                                              return setShowPwd(function (prev) {
                                                          return !prev;
                                                        });
                                            })
                                        }, "비밀번호 표시")))), React.createElement("div", {
                              className: "mt-7"
                            }, React.createElement("div", {
                                  className: "mt-10"
                                }, React.createElement("span", {
                                      className: "text-base font-bold"
                                    }, "회사명", React.createElement("span", {
                                          className: "ml-0.5 text-notice"
                                        }, "*")), React.createElement(Input.make, {
                                      type_: "text",
                                      name: "company-name",
                                      placeholder: "회사명 입력",
                                      className: "mt-2",
                                      onChange: (function (param) {
                                          return ReForm__Helpers.handleChange(partial_arg$1, param);
                                        }),
                                      size: /* Large */0,
                                      error: Curry._1(form.getFieldError, /* Field */{
                                            _0: /* Name */2
                                          })
                                    })), React.createElement("div", {
                                  className: "mt-5"
                                }, React.createElement("span", {
                                      className: "text-base font-bold mb-2"
                                    }, "담당자명", React.createElement("span", {
                                          className: "ml-0.5 text-notice"
                                        }, "*")), React.createElement(Input.make, {
                                      type_: "text",
                                      name: "manager-name",
                                      placeholder: "담당자명 입력",
                                      className: "mt-2",
                                      onChange: (function (param) {
                                          return ReForm__Helpers.handleChange(partial_arg$2, param);
                                        }),
                                      size: /* Large */0,
                                      error: Curry._1(form.getFieldError, /* Field */{
                                            _0: /* Manager */3
                                          })
                                    })), React.createElement("div", {
                                  className: "mt-5"
                                }, React.createElement("span", {
                                      className: "text-base font-bold"
                                    }, "휴대전화번호", React.createElement("span", {
                                          className: "ml-0.5 text-notice"
                                        }, "*")), React.createElement(VerifyBuyerPhoneNumber.make, {
                                      onVerified: onPhoneVerified
                                    }))), React.createElement("div", {
                              className: "mt-7"
                            }, React.createElement("div", {
                                  className: "mt-10"
                                }, React.createElement("span", {
                                      className: "text-base font-bold mb-2"
                                    }, "사업자 등록번호", React.createElement("span", {
                                          className: "ml-0.5 text-notice"
                                        }, "*")), React.createElement("div", {
                                      className: "mt-2"
                                    }, React.createElement(VerifyBusinessNumber.make, {
                                          onChange: onBusinessNumberChange
                                        })))), React.createElement("div", {
                              className: "mt-7"
                            }, React.createElement("div", {
                                  className: "flex items-center mt-7"
                                }, React.createElement(Checkbox.make, {
                                      id: "agree-all",
                                      name: "agree-all",
                                      checked: isAllAgreed,
                                      onChange: toggleAllCheck
                                    }), React.createElement("span", {
                                      className: "ml-2 font-bold text-base"
                                    }, "전체 내용에 동의합니다")), React.createElement("div", {
                                  className: "flex items-center justify-between mt-5"
                                }, React.createElement("div", {
                                      className: "flex items-center"
                                    }, React.createElement(Checkbox.make, {
                                          id: "basic",
                                          name: "basic",
                                          checked: Belt_SetString.has(agreedTerms, "basic"),
                                          onChange: toggleCheck
                                        }), React.createElement("span", {
                                          className: "ml-2 text-base"
                                        }, "신선하이 이용약관 (필수)", React.createElement("span", {
                                              className: "ml-0.5 text-notice"
                                            }, "*"))), React.createElement(Link, {
                                      href: "https://sinsun-policy.oopy.io/" + "a9f5ca47-9dda-4a34-929c-60e1ce1dfbe5",
                                      children: React.createElement("a", {
                                            target: "_blank"
                                          }, React.createElement(IconArrow.make, {
                                                height: "20",
                                                width: "20",
                                                fill: "#DDDDDD"
                                              }))
                                    })), React.createElement("div", {
                                  className: "flex items-center justify-between mt-4"
                                }, React.createElement("div", {
                                      className: "flex items-center"
                                    }, React.createElement(Checkbox.make, {
                                          id: "privacy",
                                          name: "privacy",
                                          checked: Belt_SetString.has(agreedTerms, "privacy"),
                                          onChange: toggleCheck
                                        }), React.createElement("span", {
                                          className: "ml-2 text-base"
                                        }, "개인정보 수집이용 동의 (필수)", React.createElement("span", {
                                              className: "ml-0.5 text-notice"
                                            }, "*"))), React.createElement(Link, {
                                      href: "https://sinsun-policy.oopy.io/" + "7d920089-18ba-4ca6-a806-f83ec8f6c335",
                                      children: React.createElement("a", {
                                            target: "_blank"
                                          }, React.createElement(IconArrow.make, {
                                                height: "20",
                                                width: "20",
                                                fill: "#DDDDDD"
                                              }))
                                    })), React.createElement("div", {
                                  className: "flex items-center justify-between mt-4"
                                }, React.createElement("div", {
                                      className: "flex items-center"
                                    }, React.createElement(Checkbox.make, {
                                          id: "marketing",
                                          name: "marketing",
                                          checked: Belt_SetString.has(agreedTerms, "marketing"),
                                          onChange: toggleCheck
                                        }), React.createElement("span", {
                                          className: "ml-2 text-base"
                                        }, "맞춤 소싱 제안 등 마케팅 정보 수신 (선택)")), React.createElement(Link, {
                                      href: "https://sinsun-policy.oopy.io/" + "4f08bfe5-9ba7-4d1d-ba34-04281414ee00",
                                      children: React.createElement("a", {
                                            target: "_blank"
                                          }, React.createElement(IconArrow.make, {
                                                height: "20",
                                                width: "20",
                                                fill: "#DDDDDD"
                                              }))
                                    })), React.createElement("span", {
                                  className: "flex h-13 mt-10"
                                }, React.createElement("button", {
                                      className: isSubmitDisabled ? "btn-level1-disabled" : "btn-level1",
                                      disabled: isSubmitDisabled,
                                      type: "submit"
                                    }, "회원가입")))), React.createElement("div", {
                          className: "text-text-L2 mt-9 text-center"
                        }, "이미 가입하셨나요? ", React.createElement(Link, {
                              href: "/buyer/signin",
                              children: React.createElement("a", {
                                    className: "underline"
                                  }, "로그인하기")
                            })))), React.createElement(Dialog.make, {
                  isShow: match$7[0],
                  children: React.createElement("p", {
                        className: "text-text-L1 text-center whitespace-pre-wrap"
                      }, "입력한 정보를 확인해주세요.\n\n이미 가입하신 경우\n비밀번호 찾기를 통해 로그인하실 수 있으며\n관련 문의사항은 채널톡으로 문의해주세요."),
                  onCancel: (function (param) {
                      return setShowErr(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  textOnCancel: "닫기",
                  boxStyle: "rounded-xl"
                }));
}

var make = SignUp_Buyer;

export {
  makeOnChange ,
  makeOnCheckedChange ,
  makeTermUrl ,
  make ,
  
}
/* Env Not a pure module */
