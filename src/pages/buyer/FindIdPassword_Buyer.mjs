// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "../../components/common/Input.mjs";
import * as React from "react";
import * as Dialog from "../../components/common/Dialog.mjs";
import * as ReForm from "@rescriptbr/reform/src/ReForm.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as ReactUtil from "../../utils/ReactUtil.mjs";
import Head from "next/head";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as CustomHooks from "../../utils/CustomHooks.mjs";
import * as FetchHelper from "../../utils/FetchHelper.mjs";
import * as ReactEvents from "../../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import * as ResetPassword_Style from "../../components/ResetPassword_Style.mjs";
import * as ReactSeparator from "@radix-ui/react-separator";
import * as FindId_Buyer_VerifyPhoneNumber from "../../components/FindId_Buyer_VerifyPhoneNumber.mjs";

function FindIdPassword_Buyer$FindId(Props) {
  var phoneNumber = Props.phoneNumber;
  var router = Router.useRouter();
  var match = React.useState(function () {
        return /* VerifyPhoneNumber */0;
      });
  var setMode = match[1];
  var match$1 = React.useState(function () {
        
      });
  var setUid = match$1[1];
  var uids = match$1[0];
  var onVerified = function (phoneNumber, uids, existed) {
    console.log(phoneNumber);
    if (existed !== undefined) {
      if (existed) {
        return setMode(function (param) {
                    return /* NotFound */2;
                  });
      } else {
        setMode(function (param) {
              return /* Found */1;
            });
        return setUid(function (param) {
                    return uids;
                  });
      }
    } else {
      return setMode(function (param) {
                  return /* VerifyPhoneNumber */0;
                });
    }
  };
  var phoneNumberInputRef = React.useRef(null);
  React.useEffect((function () {
          ReactUtil.focusElementByRef(phoneNumberInputRef);
        }), []);
  var tmp;
  switch (match[0]) {
    case /* VerifyPhoneNumber */0 :
        tmp = React.createElement(React.Fragment, undefined, React.createElement("h2", {
                  className: "text-2xl font-bold relative xs:whitespace-pre-line"
                }, "가입시 등록하신 휴대전화번호로\n아이디를 찾을 수 있습니다."), React.createElement("div", {
                  className: "py-4 mt-12"
                }, React.createElement(FindId_Buyer_VerifyPhoneNumber.make, {
                      phoneNumberInputRef: phoneNumberInputRef,
                      phoneNumber: phoneNumber,
                      onVerified: onVerified
                    })));
        break;
    case /* Found */1 :
        tmp = React.createElement(React.Fragment, undefined, React.createElement("h2", {
                  className: "text-2xl font-bold relative xs:whitespace-pre-line"
                }, "회원님의 휴대전화번호로 가입된\n아이디가 있습니다."), React.createElement("div", {
                  className: "border border-border-default-L2 rounded-2xl p-4 mt-5"
                }, uids !== undefined ? Belt_Array.map(uids, (function (uid) {
                          return React.createElement("p", undefined, uid);
                        })) : "email을 찾을 수 없습니다."), React.createElement("span", {
                  className: "flex h-13 mt-24"
                }, React.createElement("button", {
                      className: "btn-level1",
                      onClick: (function (param) {
                          router.push("/buyer/signin?uid=" + Belt_Option.getWithDefault(Belt_Option.flatMap(uids, Garter_Array.first), "") + "");
                        })
                    }, "로그인")));
        break;
    case /* NotFound */2 :
        tmp = React.createElement(React.Fragment, undefined, React.createElement("h2", {
                  className: "text-2xl font-bold relative xs:whitespace-pre-line"
                }, "회원님의 휴대전화번호로 가입된\n아이디가 없습니다."), React.createElement("div", {
                  className: "flex h-13 mt-24"
                }, React.createElement("button", {
                      className: "btn-level1",
                      onClick: (function (param) {
                          router.push("/buyer/signup");
                        })
                    }, "회원가입")), React.createElement("div", {
                  className: "flex h-13 mt-4"
                }, React.createElement("button", {
                      className: "w-full text-enabled-L1 bg-surface rounded-xl whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-1",
                      onClick: (function (param) {
                          router.push("/buyer");
                        })
                    }, "메인으로")));
        break;
    
  }
  return React.createElement(React.Fragment, undefined, tmp, React.createElement(ReactSeparator.Root, {
                  orientation: "horizontal",
                  className: "bg-div-border-L1 h-px"
                }), React.createElement("div", undefined, React.createElement("p", {
                      className: "mt-9 text-text-L2 md:text-center"
                    }, "*본인의 휴대전화번호로 가입하지 않으셨을 경우 고객센터로 문의바랍니다.")));
}

var FindId = {
  make: FindIdPassword_Buyer$FindId
};

function get(values, field) {
  return values.email;
}

function set(values, field, value) {
  return {
          email: value
        };
}

var FormFields = {
  get: get,
  set: set
};

var Form = ReForm.Make({
      set: set,
      get: get
    });

function FindIdPassword_Buyer$ResetPassword(Props) {
  var uid = Props.uid;
  var initialState = {
    email: Belt_Option.getWithDefault(uid, "")
  };
  var router = Router.useRouter();
  var match = React.useState(function () {
        return /* Hide */1;
      });
  var setShowResetSuccess = match[1];
  var match$1 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowResetError = match$1[1];
  var onSubmit = function (param) {
    var email = param.state.values.email;
    Belt_Option.map(JSON.stringify({
              uid: email
            }), (function (body) {
            return FetchHelper.post("" + Env.restApiUrl + "/user/password-reset", body, (function (param) {
                          setShowResetSuccess(function (param) {
                                return /* Show */0;
                              });
                        }), (function (param) {
                          setShowResetError(function (param) {
                                return /* Show */0;
                              });
                        }));
          }));
  };
  var form = Curry._7(Form.use, initialState, /* Schema */{
        _0: Belt_Array.concatMany([Curry._3(Form.ReSchema.Validation.email, "이메일을 입력해주세요.", undefined, /* Email */0)])
      }, onSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleOnSubmit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  Curry._1(form.submit, undefined);
                }), param);
  };
  var match$2 = form.values.email !== "";
  var match$3 = form.isSubmitting;
  var isDisabledSubmitResetPasswordButton = match$2 && !match$3 ? false : true;
  var emailInputRef = React.useRef(null);
  React.useEffect((function () {
          ReactUtil.focusElementByRef(emailInputRef);
        }), []);
  var partial_arg = Curry._1(form.handleChange, /* Email */0);
  return React.createElement(React.Fragment, undefined, React.createElement("h2", {
                  className: "text-2xl font-bold relative whitespace-pre-line"
                }, "신선하이에 가입한 계정으로\n비밀번호 재설정 이메일을 보내드립니다."), React.createElement("div", {
                  className: "py-4 mt-12"
                }, React.createElement("span", {
                      className: "text-[17px] font-bold inline-block mb-2"
                    }, "이메일"), React.createElement("div", {
                      className: "flex"
                    }, React.createElement(Input.make, {
                          type_: "email",
                          name: "email",
                          placeholder: "신선하이 계정 (이메일) 입력",
                          value: form.values.email,
                          onChange: (function (param) {
                              return ReForm__Helpers.handleChange(partial_arg, param);
                            }),
                          size: /* Large */0,
                          error: Curry._1(form.getFieldError, /* Field */{
                                _0: /* Email */0
                              }),
                          inputRef: emailInputRef
                        })), React.createElement("div", {
                      className: "mt-5 pb-96 sm:pb-0"
                    }, React.createElement("button", {
                          className: isDisabledSubmitResetPasswordButton ? ResetPassword_Style.disabledButton : ResetPassword_Style.enabledButton,
                          disabled: isDisabledSubmitResetPasswordButton,
                          onClick: handleOnSubmit
                        }, "재설정 메일 발송"))), React.createElement(Dialog.make, {
                  isShow: match[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, React.createElement("span", {
                            className: "font-bold"
                          }, form.values.email), "로 \n비밀번호 재설정 메일을 전송했습니다.\n메일함을 확인해주세요.\n\n*신선하이에 가입한 회원이 아닐 경우 \n이메일이 전송되지 않습니다."),
                  onConfirm: (function (param) {
                      router.replace("/buyer/signin");
                    }),
                  textOnConfirm: "확인"
                }), React.createElement(Dialog.make, {
                  isShow: match$1[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "비밀번호 재설정 요청을 실패하였습니다.\n다시 시도해주세요."),
                  onConfirm: (function (param) {
                      setShowResetError(function (param) {
                            return /* Hide */1;
                          });
                    }),
                  textOnConfirm: "확인"
                }));
}

var ResetPassword = {
  Styles: undefined,
  FormFields: FormFields,
  Form: Form,
  make: FindIdPassword_Buyer$ResetPassword
};

function FindIdPassword_Buyer$Tab(Props) {
  var mode = Props.mode;
  var router = Router.useRouter();
  var style = function (self, mode) {
    if (Caml_obj.equal(self, mode)) {
      return "text-center text-lg py-4 font-bold border-b border-b-enabled-L1";
    } else {
      return "text-center text-lg py-4 border-b border-b-enabled-L5";
    }
  };
  var handleOnClick = function (self) {
    var query = Js_dict.fromArray(Js_dict.entries(router.query));
    query["mode"] = self ? "reset-password" : "find-id";
    router.push("" + router.pathname + "?" + new URLSearchParams(query).toString() + "");
  };
  return React.createElement("ul", {
              className: "w-full grid grid-cols-2"
            }, React.createElement("li", {
                  className: style(/* FindId */0, mode),
                  onClick: (function (param) {
                      handleOnClick(/* FindId */0);
                    })
                }, "아이디 찾기"), React.createElement("li", {
                  className: style(/* ResetPassword */1, mode),
                  onClick: (function (param) {
                      handleOnClick(/* ResetPassword */1);
                    })
                }, "비밀번호 찾기"));
}

var Tab = {
  make: FindIdPassword_Buyer$Tab
};

function $$default(props) {
  var mode = Belt_Option.mapWithDefault(Js_dict.get(props.query, "mode"), /* FindId */0, (function (mode) {
          if (mode === "find-id" || mode !== "reset-password") {
            return /* FindId */0;
          } else {
            return /* ResetPassword */1;
          }
        }));
  var phoneNumber = Js_dict.get(props.query, "phone-number");
  var uid = Js_dict.get(props.query, "uid");
  var router = Router.useRouter();
  var user = CustomHooks.Auth.use(undefined);
  React.useEffect((function () {
          if (typeof user !== "number") {
            var match = user._0.role;
            switch (match) {
              case /* Seller */0 :
                  router.push("/seller");
                  break;
              case /* Buyer */1 :
                  router.push("/");
                  break;
              case /* Admin */2 :
                  router.push("/admin");
                  break;
              
            }
          }
          
        }), [user]);
  return React.createElement(React.Fragment, undefined, React.createElement(Head, {
                  children: React.createElement("title", undefined, "바이어 아이디 찾기 비밀번호 찾기 - 신선하이")
                }), React.createElement("div", {
                  className: "container mx-auto max-w-lg min-h-buyer relative flex flex-col xl:justify-center items-center"
                }, React.createElement("div", {
                      className: "flex-auto flex flex-col sm:justify-center items-center w-full lg:w-[496px] px-5"
                    }, React.createElement(FindIdPassword_Buyer$Tab, {
                          mode: mode
                        }), React.createElement("div", {
                          className: "w-full py-16"
                        }, mode ? React.createElement(FindIdPassword_Buyer$ResetPassword, {
                                uid: uid
                              }) : React.createElement(FindIdPassword_Buyer$FindId, {
                                phoneNumber: phoneNumber
                              })))));
}

function getServerSideProps(param) {
  return Promise.resolve({
              props: {
                query: param.query
              }
            });
}

export {
  FindId ,
  ResetPassword ,
  Tab ,
  $$default ,
  $$default as default,
  getServerSideProps ,
}
/* Form Not a pure module */
