// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as $$Image from "./common/Image.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as IconSearch from "./svgs/IconSearch.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as LocalStorageHooks from "../utils/LocalStorageHooks.mjs";
import * as FeatureFlagWrapper from "../pages/buyer/pc/FeatureFlagWrapper.mjs";
import * as Product_FilterOption from "../pages/buyer/Product_FilterOption.mjs";
import CompareDesc from "date-fns/compareDesc";
import * as ReactToastNotifications from "react-toast-notifications";
import NoticeRedSvg from "../../public/assets/notice-red.svg";
import CloseInputGraySvg from "/public/assets/close-input-gray.svg";
import SearchBnbDisabledSvg from "/public/assets/search-bnb-disabled.svg";

function ShopSearchInput_Buyer(Props) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        return "";
      });
  var setKeyword = match[1];
  var keyword = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setEditing = match$1[1];
  var $$default = "w-full h-full border-2 border-green-500 rounded-full px-4 remove-spin-button focus:outline-none focus:border-green-500 focus:ring-opacity-100 text-base";
  var inputStyle = match$1[0] ? Cx.cx([
          $$default,
          "text-green-500"
        ]) : $$default;
  var onChangeKeyword = function (e) {
    setKeyword(function (param) {
          return e.target.value;
        });
  };
  var submit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  var prim1_query = Caml_option.some(Js_dict.fromArray([
                            [
                              "keyword",
                              encodeURIComponent(keyword)
                            ],
                            [
                              "section",
                              Product_FilterOption.Section.toUrlParameter("ALL")
                            ],
                            [
                              "sort",
                              Product_FilterOption.Sort.toString(Product_FilterOption.Sort.searchDefaultValue)
                            ]
                          ]));
                  var prim1 = {
                    pathname: "/search",
                    query: prim1_query
                  };
                  router.push(prim1);
                }), param);
  };
  React.useEffect((function () {
          if (router.pathname === "/search") {
            Belt_Option.map(Belt_Option.map(Js_dict.get(router.query, "keyword"), (function (prim) {
                        return decodeURIComponent(prim);
                      })), (function (keyword$p) {
                    setKeyword(function (param) {
                          return keyword$p;
                        });
                  }));
          } else {
            setKeyword(function (param) {
                  return "";
                });
          }
        }), [
        router.pathname,
        router.query
      ]);
  return React.createElement("form", {
              onSubmit: submit
            }, React.createElement("div", {
                  className: "flex min-w-[658px] h-13 justify-center relative"
                }, React.createElement("input", {
                      className: inputStyle,
                      name: "shop-search",
                      placeholder: "찾고있는 작물을 검색해보세요",
                      type: "text",
                      value: keyword,
                      onFocus: (function (param) {
                          setEditing(function (param) {
                                return true;
                              });
                        }),
                      onBlur: (function (param) {
                          setEditing(function (param) {
                                return false;
                              });
                        }),
                      onChange: onChangeKeyword
                    }), React.createElement("button", {
                      className: "absolute right-0 h-[52px] bg-green-500 rounded-full focus:outline-none flex items-center justify-center px-6",
                      type: "submit"
                    }, React.createElement(IconSearch.make, {
                          width: "24",
                          height: "24",
                          fill: "#fff"
                        }), React.createElement("span", {
                          className: "text-white font-bold"
                        }, "검색"))));
}

var noticeRedIcon = NoticeRedSvg;

function ShopSearchInput_Buyer$MO(Props) {
  var inputRef = React.useRef(null);
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var replaceObj = function (prim0, prim1) {
    prim0.replace(prim1);
  };
  var pushObj = function (prim0, prim1) {
    prim0.push(prim1);
  };
  var router = Router.useRouter();
  var match$1 = Curry._1(LocalStorageHooks.RecentSearchKeyword.useLocalStorage, undefined);
  var setRecentSearchList = match$1[1];
  var recentSearchList = match$1[0];
  var match$2 = React.useState(function () {
        return "";
      });
  var setKeyword = match$2[1];
  var keyword = match$2[0];
  var match$3 = React.useState(function () {
        return false;
      });
  var setEditing = match$3[1];
  var $$default = "w-full h-10 border border-green-500 rounded-full px-4 remove-spin-button focus:outline-none focus:border-green-500 focus:ring-opacity-100 text-[15px]";
  var inputStyle = match$3[0] ? Cx.cx([
          $$default,
          "text-green-500"
        ]) : $$default;
  var onChangeKeyword = function (e) {
    setKeyword(function (param) {
          return e.target.value;
        });
  };
  var addToRecentSearchList = function (keyword) {
    var keyword$p = keyword.trim();
    if (keyword$p === "") {
      return ;
    }
    var newSearchHistory = Belt_Option.getWithDefault(recentSearchList, {});
    newSearchHistory[keyword$p] = new Date(Date.now()).toString();
    Curry._1(setRecentSearchList, Object.keys(newSearchHistory).length > 15 ? Belt_Option.getWithDefault(Belt_Option.map(Belt_List.take(Belt_List.sort(Belt_List.fromArray(Js_dict.entries(newSearchHistory)), (function (param, param$1) {
                              return CompareDesc(new Date(param[1]), new Date(param$1[1]));
                            })), 15), Js_dict.fromList), {}) : newSearchHistory);
  };
  var submit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  addToRecentSearchList(keyword);
                  if (keyword === "") {
                    return addToast(React.createElement("div", {
                                    className: "flex items-center"
                                  }, React.createElement($$Image.make, {
                                        src: noticeRedIcon,
                                        loading: /* Lazy */1,
                                        className: "h-6 w-6 mr-2"
                                      }), "검색어를 입력해주세요"), {
                                appearance: "error"
                              });
                  }
                  var searchInitialWithKeywordQuery_query = Caml_option.some(Js_dict.fromArray([
                            [
                              "keyword",
                              encodeURIComponent(keyword)
                            ],
                            [
                              "section",
                              Product_FilterOption.Section.toUrlParameter("ALL")
                            ],
                            [
                              "sort",
                              Product_FilterOption.Sort.toString(Product_FilterOption.Sort.searchDefaultValue)
                            ]
                          ]));
                  var searchInitialWithKeywordQuery = {
                    pathname: "/search",
                    query: searchInitialWithKeywordQuery_query
                  };
                  var match = router.pathname;
                  var routeFn = match === "/" ? pushObj : replaceObj;
                  Curry._2(routeFn, router, searchInitialWithKeywordQuery);
                }), param);
  };
  var onClickClear = function (param) {
    setKeyword(function (param) {
          return "";
        });
    router.replace({
          pathname: router.pathname,
          query: {}
        });
  };
  React.useEffect((function () {
          if (router.pathname === "/search") {
            Belt_Option.map(Belt_Option.map(Js_dict.get(router.query, "keyword"), (function (prim) {
                        return decodeURIComponent(prim);
                      })), (function (keyword$p) {
                    setKeyword(function (param) {
                          return keyword$p;
                        });
                  }));
          } else {
            setKeyword(function (param) {
                  return "";
                });
          }
        }), [
        router.pathname,
        router.query
      ]);
  React.useEffect((function () {
          var match = router.pathname;
          var match$1 = Js_dict.get(router.query, "keyword");
          if (match === "/search") {
            if (match$1 !== undefined) {
              
            } else {
              Belt_Option.map(Caml_option.nullable_to_opt(inputRef.current), (function (input) {
                      input.focus();
                    }));
            }
          }
          
        }), [
        inputRef.current,
        router.pathname,
        router.query
      ]);
  var tmp = keyword === "" ? null : React.createElement("img", {
          className: "absolute w-6 h-6 right-10 top-1/2 translate-y-[-50%]",
          alt: "검색어 지우기",
          src: "/icons/reset-input-gray-circle@3x.png",
          onClick: (function (param) {
              return ReactEvents.interceptingHandler(onClickClear, param);
            })
        });
  var oldUI = React.createElement("form", {
        className: "w-full flex-1",
        onSubmit: submit
      }, React.createElement("div", {
            className: "relative w-full"
          }, React.createElement("input", {
                ref: inputRef,
                className: inputStyle,
                name: "shop-search",
                placeholder: "찾고있는 작물을 검색해보세요",
                type: "text",
                value: keyword,
                onFocus: (function (param) {
                    setEditing(function (param) {
                          return true;
                        });
                  }),
                onBlur: (function (param) {
                    setEditing(function (param) {
                          return false;
                        });
                  }),
                onChange: onChangeKeyword
              }), tmp, React.createElement("button", {
                "aria-label": "검색",
                className: "absolute right-3 top-1/2 translate-y-[-50%]",
                type: "submit"
              }, React.createElement(IconSearch.make, {
                    width: "24",
                    height: "24",
                    fill: "#12B564"
                  }))));
  var tmp$1 = keyword === "" ? null : React.createElement("button", {
          className: "absolute right-0 top-0",
          type: "button",
          onClick: (function (param) {
              return ReactEvents.interceptingHandler(onClickClear, param);
            })
        }, React.createElement("img", {
              className: "w-6 h-6",
              alt: "검색어 초기화",
              src: CloseInputGraySvg
            }));
  return React.createElement(FeatureFlagWrapper.make, {
              children: React.createElement("form", {
                    className: "w-full flex-1",
                    onSubmit: submit
                  }, React.createElement("div", {
                        className: "bg-[#F0F2F5] p-3 rounded-[10px]"
                      }, React.createElement("div", {
                            className: "relative"
                          }, React.createElement("img", {
                                className: "flex absolute inset-y-0 left-0 items-center pointer-events-none",
                                alt: "",
                                src: SearchBnbDisabledSvg
                              }), React.createElement("input", {
                                ref: inputRef,
                                className: "w-full bg-[#F0F2F5] pl-7 pr-6 focus:outline-none focus:ring-opacity-100 caret-[#0BB25F] text-gray-800",
                                name: "shop-search",
                                placeholder: "찾고있는 작물을 검색해보세요",
                                type: "text",
                                value: keyword,
                                onFocus: (function (param) {
                                    setEditing(function (param) {
                                          return true;
                                        });
                                  }),
                                onBlur: (function (param) {
                                    setEditing(function (param) {
                                          return false;
                                        });
                                  }),
                                onChange: onChangeKeyword
                              }), tmp$1))),
              fallback: oldUI,
              featureFlag: "HOME_UI_UX"
            });
}

var MO = {
  make: ShopSearchInput_Buyer$MO
};

var make = ShopSearchInput_Buyer;

export {
  make ,
  noticeRedIcon ,
  MO ,
}
/* noticeRedIcon Not a pure module */
