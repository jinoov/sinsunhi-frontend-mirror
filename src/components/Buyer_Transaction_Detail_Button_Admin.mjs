// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Locale from "../utils/Locale.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Skeleton from "./Skeleton.mjs";
import * as Constants from "../constants/Constants.mjs";
import * as IconClose from "./svgs/IconClose.mjs";
import * as ErrorPanel from "./common/ErrorPanel.mjs";
import * as Pagination from "./common/Pagination.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as EmptyOrders from "./common/EmptyOrders.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Transaction_Admin from "./Transaction_Admin.mjs";
import * as ReactDialog from "@radix-ui/react-dialog";

function formatDate(d) {
  return Locale.DateTime.formatFromUTC(new Date(d), "yyyy/MM/dd HH:mm");
}

function Buyer_Transaction_Detail_Button_Admin$Summary$Amount(Props) {
  var buyerId = Props.buyerId;
  var kind = Props.kind;
  var className = Props.className;
  var status = CustomHooks.TransactionSummary.use(new URLSearchParams(Js_dict.fromArray([[
                    "buyer-id",
                    String(buyerId)
                  ]])).toString());
  if (typeof status === "number") {
    return React.createElement(Skeleton.Box.make, {
                className: "w-20"
              });
  }
  if (status.TAG === /* Loaded */0) {
    var response$p = CustomHooks.TransactionSummary.response_decode(status._0);
    if (response$p.TAG === /* Ok */0) {
      var response$p$1 = response$p._0;
      var tmp = {};
      if (className !== undefined) {
        tmp.className = Caml_option.valFromOption(className);
      }
      var tmp$1;
      switch (kind) {
        case /* OrderComplete */0 :
            tmp$1 = "" + Locale.Float.show(undefined, response$p$1.data.orderComplete, 0) + "원";
            break;
        case /* CashRefund */1 :
            tmp$1 = "" + Locale.Float.show(undefined, response$p$1.data.cashRefund, 0) + "원";
            break;
        case /* ImwebPay */2 :
            tmp$1 = "" + Locale.Float.show(undefined, response$p$1.data.imwebPay, 0) + "원";
            break;
        case /* ImwebCancel */3 :
            tmp$1 = "" + Locale.Float.show(undefined, response$p$1.data.imwebCancel, 0) + "원";
            break;
        case /* OrderCancel */4 :
            tmp$1 = "" + Locale.Float.show(undefined, response$p$1.data.orderCancel, 0) + "원";
            break;
        case /* OrderRefund */5 :
            tmp$1 = "" + Locale.Float.show(undefined, response$p$1.data.orderRefund, 0) + "원";
            break;
        case /* Deposit */6 :
            tmp$1 = "" + Locale.Float.show(undefined, response$p$1.data.deposit, 0) + "원";
            break;
        case /* SinsunCash */7 :
            tmp$1 = "" + Locale.Float.show(undefined, response$p$1.data.sinsunCash, 0) + "원";
            break;
        
      }
      return React.createElement("span", tmp, tmp$1);
    }
    console.log(response$p._0);
    return React.createElement(Skeleton.Box.make, {
                className: "w-20"
              });
  }
  console.log(status._0);
  return React.createElement(Skeleton.Box.make, {
              className: "w-20"
            });
}

var Amount = {
  make: Buyer_Transaction_Detail_Button_Admin$Summary$Amount
};

function Buyer_Transaction_Detail_Button_Admin$Summary(Props) {
  var buyerId = Props.buyerId;
  return React.createElement("div", {
              className: "p-5"
            }, React.createElement("span", {
                  className: "flex"
                }, React.createElement("h2", {
                      className: "font-bold mr-2"
                    }, "주문가능잔액"), React.createElement(Buyer_Transaction_Detail_Button_Admin$Summary$Amount, {
                      buyerId: buyerId,
                      kind: /* Deposit */6,
                      className: "font-bold text-primary"
                    })), React.createElement("ol", {
                  className: "grid grid-cols-2 bg-div-border-L2 gap-x-px mt-5"
                }, React.createElement("li", {
                      className: "flex justify-between items-center py-1.5 bg-white pr-5 text-sm"
                    }, React.createElement("span", undefined, "신선캐시 충전"), React.createElement(Buyer_Transaction_Detail_Button_Admin$Summary$Amount, {
                          buyerId: buyerId,
                          kind: /* SinsunCash */7,
                          className: "font-bold"
                        })), React.createElement("li", {
                      className: "flex justify-between items-center py-1.5 bg-white pl-5 text-sm"
                    }, React.createElement("span", undefined, "상품결제"), React.createElement(Buyer_Transaction_Detail_Button_Admin$Summary$Amount, {
                          buyerId: buyerId,
                          kind: /* ImwebPay */2,
                          className: "font-bold"
                        })), React.createElement("li", {
                      className: "flex justify-between items-center py-1.5 bg-white pr-5 text-sm"
                    }, React.createElement("span", undefined, "상품발주"), React.createElement(Buyer_Transaction_Detail_Button_Admin$Summary$Amount, {
                          buyerId: buyerId,
                          kind: /* OrderComplete */0,
                          className: "font-bold"
                        })), React.createElement("li", {
                      className: "flex justify-between items-center py-1.5 bg-white pl-5 text-sm"
                    }, React.createElement("span", undefined, "주문취소"), React.createElement(Buyer_Transaction_Detail_Button_Admin$Summary$Amount, {
                          buyerId: buyerId,
                          kind: /* OrderCancel */4,
                          className: "font-bold"
                        })), React.createElement("li", {
                      className: "flex justify-between items-center py-1.5 bg-white pr-5 text-sm"
                    }, React.createElement("span", undefined, "상품결제취소"), React.createElement(Buyer_Transaction_Detail_Button_Admin$Summary$Amount, {
                          buyerId: buyerId,
                          kind: /* ImwebCancel */3,
                          className: "font-bold"
                        })), React.createElement("li", {
                      className: "flex justify-between items-center py-1.5 bg-white pl-5 text-sm"
                    }, React.createElement("span", undefined, "환불금액"), React.createElement(Buyer_Transaction_Detail_Button_Admin$Summary$Amount, {
                          buyerId: buyerId,
                          kind: /* OrderRefund */5,
                          className: "font-bold"
                        })), React.createElement("li", {
                      className: "flex justify-between items-center py-1.5 bg-white pr-5 text-sm"
                    }, React.createElement("span", undefined, "잔액환불"), React.createElement(Buyer_Transaction_Detail_Button_Admin$Summary$Amount, {
                          buyerId: buyerId,
                          kind: /* CashRefund */1,
                          className: "font-bold"
                        })), React.createElement("li", {
                      className: "flex justify-between items-center py-1.5 bg-white pl-5 text-sm"
                    })));
}

var Summary = {
  Amount: Amount,
  make: Buyer_Transaction_Detail_Button_Admin$Summary
};

function Buyer_Transaction_Detail_Button_Admin$List(Props) {
  var buyerId = Props.buyerId;
  var match = React.useState(function () {
        return "";
      });
  var setPaginationQueryString = match[1];
  var status = CustomHooks.Transaction.use(new URLSearchParams(Js_dict.fromArray([[
                    "buyer-id",
                    String(buyerId)
                  ]])).toString() + "&" + match[0]);
  if (typeof status === "number") {
    return React.createElement(Transaction_Admin.Item.Table.Loading.make, {});
  }
  if (status.TAG === /* Loaded */0) {
    var transactions$p = CustomHooks.Transaction.response_decode(status._0);
    if (transactions$p.TAG === /* Ok */0) {
      var transactions$p$1 = transactions$p._0;
      return React.createElement(React.Fragment, undefined, React.createElement("ol", {
                      className: "divide-y divide-gray-100 overflow-y-scroll",
                      style: {
                        maxHeight: "50vh"
                      }
                    }, transactions$p$1.data.length !== 0 ? Garter_Array.map(transactions$p$1.data, (function (transaction) {
                              return React.createElement(Transaction_Admin.make, {
                                          transaction: transaction,
                                          key: String(transaction.id)
                                        });
                            })) : React.createElement(EmptyOrders.make, {})), React.createElement("div", {
                      className: "flex justify-center my-5"
                    }, React.createElement(Pagination.make, {
                          pageDisplySize: Constants.pageDisplySize,
                          itemPerPage: transactions$p$1.limit,
                          total: transactions$p$1.count,
                          onChangePage: (function (qs) {
                              console.log("!!");
                              setPaginationQueryString(function (param) {
                                    return qs;
                                  });
                            })
                        })));
    }
    console.log(transactions$p._0);
    return null;
  }
  var error = status._0;
  console.log(error);
  return React.createElement(ErrorPanel.make, {
              error: error,
              renderOnRetry: React.createElement(Transaction_Admin.Item.Table.Loading.make, {})
            });
}

var List = {
  make: Buyer_Transaction_Detail_Button_Admin$List
};

function Buyer_Transaction_Detail_Button_Admin(Props) {
  var buyerId = Props.buyerId;
  var buyerName = Props.buyerName;
  return React.createElement(ReactDialog.Root, {
              children: null
            }, React.createElement(ReactDialog.Overlay, {
                  className: "dialog-overlay"
                }), React.createElement(ReactDialog.Trigger, {
                  children: "조회하기",
                  className: "text-base focus:outline-none bg-primary-light rounded-lg text-primary py-1 px-5"
                }), React.createElement(ReactDialog.Content, {
                  children: null,
                  className: "dialog-content-detail overflow-y-auto"
                }, React.createElement("div", {
                      className: "flex p-5"
                    }, React.createElement("h3", {
                          className: "text-lg font-bold"
                        }, "" + buyerName + " 거래내역"), React.createElement(ReactDialog.Close, {
                          children: React.createElement(IconClose.make, {
                                height: "24",
                                width: "24",
                                fill: "#262626"
                              }),
                          className: "focus:outline-none ml-auto"
                        })), React.createElement(Buyer_Transaction_Detail_Button_Admin$Summary, {
                      buyerId: buyerId
                    }), React.createElement(Buyer_Transaction_Detail_Button_Admin$List, {
                      buyerId: buyerId
                    })));
}

var make = Buyer_Transaction_Detail_Button_Admin;

export {
  formatDate ,
  Summary ,
  List ,
  make ,
}
/* react Not a pure module */
