// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Dialog from "./common/Dialog.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as IconArrow from "./svgs/IconArrow.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as ReactHookForm from "../bindings/ReactHookForm/ReactHookForm.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Select_Delivery from "./Select_Delivery.mjs";
import * as ReactHookForm$1 from "react-hook-form";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import EndOfDay from "date-fns/endOfDay";
import * as Hooks from "react-relay/hooks";
import * as Select_Product_Type from "./Select_Product_Type.mjs";
import StartOfDay from "date-fns/startOfDay";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as Select_Product_Category from "./Select_Product_Category.mjs";
import * as Select_Display_Categories from "./Select_Display_Categories.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as Product_Detail_Basic_Admin from "./Product_Detail_Basic_Admin.mjs";
import * as Update_Normal_Product_Form_Admin from "./Update_Normal_Product_Form_Admin.mjs";
import * as Update_Quoted_Product_Form_Admin from "./Update_Quoted_Product_Form_Admin.mjs";
import * as UpdateProductDetailAdminFragment_graphql from "../__generated__/UpdateProductDetailAdminFragment_graphql.mjs";
import * as UpdateProductDetailAdminNormalMutation_graphql from "../__generated__/UpdateProductDetailAdminNormalMutation_graphql.mjs";
import * as UpdateProductDetailAdminQuotedMutation_graphql from "../__generated__/UpdateProductDetailAdminQuotedMutation_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(UpdateProductDetailAdminFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(UpdateProductDetailAdminFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(UpdateProductDetailAdminFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return UpdateProductDetailAdminFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_displayCategoryType_decode = UpdateProductDetailAdminFragment_graphql.Utils.displayCategoryType_decode;

var Fragment_displayCategoryType_fromString = UpdateProductDetailAdminFragment_graphql.Utils.displayCategoryType_fromString;

var Fragment_productStatus_decode = UpdateProductDetailAdminFragment_graphql.Utils.productStatus_decode;

var Fragment_productStatus_fromString = UpdateProductDetailAdminFragment_graphql.Utils.productStatus_fromString;

var Fragment_productType_decode = UpdateProductDetailAdminFragment_graphql.Utils.productType_decode;

var Fragment_productType_fromString = UpdateProductDetailAdminFragment_graphql.Utils.productType_fromString;

var Fragment = {
  displayCategoryType_decode: Fragment_displayCategoryType_decode,
  displayCategoryType_fromString: Fragment_displayCategoryType_fromString,
  productStatus_decode: Fragment_productStatus_decode,
  productStatus_fromString: Fragment_productStatus_fromString,
  productType_decode: Fragment_productType_decode,
  productType_fromString: Fragment_productType_fromString,
  Types: undefined,
  use: use,
  useOpt: useOpt
};

var makeVariables = UpdateProductDetailAdminNormalMutation_graphql.Utils.makeVariables;

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: UpdateProductDetailAdminNormalMutation_graphql.node,
              variables: UpdateProductDetailAdminNormalMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, UpdateProductDetailAdminNormalMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? UpdateProductDetailAdminNormalMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, UpdateProductDetailAdminNormalMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$1(param) {
  var match = Hooks.useMutation(UpdateProductDetailAdminNormalMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, UpdateProductDetailAdminNormalMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? UpdateProductDetailAdminNormalMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, UpdateProductDetailAdminNormalMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: UpdateProductDetailAdminNormalMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var NormalMutation_normalProductType_decode = UpdateProductDetailAdminNormalMutation_graphql.Utils.normalProductType_decode;

var NormalMutation_normalProductType_fromString = UpdateProductDetailAdminNormalMutation_graphql.Utils.normalProductType_fromString;

var NormalMutation_productStatus_decode = UpdateProductDetailAdminNormalMutation_graphql.Utils.productStatus_decode;

var NormalMutation_productStatus_fromString = UpdateProductDetailAdminNormalMutation_graphql.Utils.productStatus_fromString;

var NormalMutation_make_imageInput = UpdateProductDetailAdminNormalMutation_graphql.Utils.make_imageInput;

var NormalMutation = {
  normalProductType_decode: NormalMutation_normalProductType_decode,
  normalProductType_fromString: NormalMutation_normalProductType_fromString,
  productStatus_decode: NormalMutation_productStatus_decode,
  productStatus_fromString: NormalMutation_productStatus_fromString,
  make_imageInput: NormalMutation_make_imageInput,
  makeVariables: makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$1
};

var makeVariables$1 = UpdateProductDetailAdminQuotedMutation_graphql.Utils.makeVariables;

function commitMutation$1(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: UpdateProductDetailAdminQuotedMutation_graphql.node,
              variables: UpdateProductDetailAdminQuotedMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, UpdateProductDetailAdminQuotedMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? UpdateProductDetailAdminQuotedMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, UpdateProductDetailAdminQuotedMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$2(param) {
  var match = Hooks.useMutation(UpdateProductDetailAdminQuotedMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, UpdateProductDetailAdminQuotedMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? UpdateProductDetailAdminQuotedMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, UpdateProductDetailAdminQuotedMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: UpdateProductDetailAdminQuotedMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var QuotedMutation_productStatus_decode = UpdateProductDetailAdminQuotedMutation_graphql.Utils.productStatus_decode;

var QuotedMutation_productStatus_fromString = UpdateProductDetailAdminQuotedMutation_graphql.Utils.productStatus_fromString;

var QuotedMutation_make_imageInput = UpdateProductDetailAdminQuotedMutation_graphql.Utils.make_imageInput;

var QuotedMutation = {
  productStatus_decode: QuotedMutation_productStatus_decode,
  productStatus_fromString: QuotedMutation_productStatus_fromString,
  make_imageInput: QuotedMutation_make_imageInput,
  makeVariables: makeVariables$1,
  Types: undefined,
  commitMutation: commitMutation$1,
  use: use$2
};

function makeDisplayCategoryIds(displayCategories) {
  return Belt_Array.keepMap(displayCategories, (function (param) {
                return Garter_Array.last(Belt_Array.keepMap([
                                param.c1,
                                param.c2,
                                param.c3,
                                param.c4,
                                param.c5
                              ], (function (select) {
                                  if (select) {
                                    return select.value;
                                  }
                                  
                                })));
              }));
}

function makeNoticeDate(dateStr, setTimeFn) {
  return Belt_Option.map(Belt_Option.keep(dateStr, (function (str) {
                    return str !== "";
                  })), (function (dateStr$p) {
                return Curry._1(setTimeFn, new Date(dateStr$p)).toISOString();
              }));
}

function encodeStatus(status) {
  switch (status) {
    case /* SALE */0 :
        return "SALE";
    case /* SOLDOUT */1 :
        return "SOLDOUT";
    case /* NOSALE */2 :
        return "NOSALE";
    case /* RETIRE */3 :
        return "RETIRE";
    case /* HIDDEN_SALE */4 :
        return "HIDDEN_SALE";
    
  }
}

function makeNormalProductVariables(productId, form) {
  return Curry.app(makeVariables, [
              productId,
              form.editor,
              makeDisplayCategoryIds(form.displayCategories),
              form.buyerProductName,
              {
                original: form.thumbnail.original,
                thumb100x100: form.thumbnail.thumb100x100,
                thumb400x400: form.thumbnail.thumb400x400,
                thumb800x800: form.thumbnail.thumb800x800,
                thumb1000x1000: form.thumbnail.thumb1000x1000,
                thumb1920x1920: form.thumbnail.thumb1920x1920
              },
              Select_Delivery.toBool(form.delivery),
              form.producerProductName,
              Belt_Option.keep(form.notice, (function (str) {
                      return str !== "";
                    })),
              makeNoticeDate(form.noticeEndAt, (function (prim) {
                      return EndOfDay(prim);
                    })),
              makeNoticeDate(form.noticeStartAt, (function (prim) {
                      return StartOfDay(prim);
                    })),
              form.origin,
              form.basePrice,
              Belt_Option.keep(form.documentURL, (function (str) {
                      return str !== "";
                    })),
              encodeStatus(form.operationStatus),
              form.quotable ? "QUOTABLE" : "NORMAL",
              undefined
            ]);
}

function makeQuotedProductVariables(productId, form) {
  return Curry.app(makeVariables$1, [
              productId,
              form.editor,
              makeDisplayCategoryIds(form.displayCategories),
              form.buyerProductName,
              {
                original: form.thumbnail.original,
                thumb100x100: form.thumbnail.thumb100x100,
                thumb400x400: form.thumbnail.thumb400x400,
                thumb800x800: form.thumbnail.thumb800x800,
                thumb1000x1000: form.thumbnail.thumb1000x1000,
                thumb1920x1920: form.thumbnail.thumb1920x1920
              },
              form.producerProductName,
              Belt_Option.keep(form.notice, (function (str) {
                      return str !== "";
                    })),
              makeNoticeDate(form.noticeEndAt, (function (prim) {
                      return EndOfDay(prim);
                    })),
              makeNoticeDate(form.noticeStartAt, (function (prim) {
                      return StartOfDay(prim);
                    })),
              form.origin,
              Belt_Option.keep(form.documentURL, (function (str) {
                      return str !== "";
                    })),
              encodeStatus(form.operationStatus),
              form.grade,
              undefined
            ]);
}

function UpdateProduct_Detail_Admin(Props) {
  var query = Props.query;
  var product = use(query);
  var router = Router.useRouter();
  var match = use$1(undefined);
  var isNormalMutating = match[1];
  var normalMutate = match[0];
  var match$1 = use$2(undefined);
  var isQuotedlMutating = match$1[1];
  var quotedlMutate = match$1[0];
  var match$2 = ReactToastNotifications.useToasts();
  var addToast = match$2.addToast;
  var match$3 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowUpdateSuccess = match$3[1];
  var match$4 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowInitialize = match$4[1];
  var match$5 = product.type_;
  var productType = match$5 === "QUOTABLE" || match$5 === "NORMAL" || match$5 !== "QUOTED" ? /* NORMAL */0 : /* QUOTED */1;
  var methods = ReactHookForm$1.useForm({
        mode: "onChange",
        defaultValues: Js_dict.fromArray([
              [
                Product_Detail_Basic_Admin.Form.formName.displayCategories,
                Belt_Array.map(Belt_Array.map(Belt_Array.map(product.displayCategories, (function (d) {
                                return d.fullyQualifiedName;
                              })), Select_Display_Categories.encodeQualifiedNameValue), Select_Display_Categories.Form.submit_encode)
              ],
              [
                Product_Detail_Basic_Admin.Form.formName.productCategory,
                Select_Product_Category.Form.submit_encode(Select_Product_Category.encodeQualifiedNameValue(product.category.fullyQualifiedName))
              ]
            ])
      }, undefined);
  var onSubmit = function (data, param) {
    var result = productType ? Belt_Result.map(Update_Quoted_Product_Form_Admin.Form.submit_decode(data), (function (data$p) {
              Curry.app(quotedlMutate, [
                    undefined,
                    (function (param, param$1) {
                        return setShowUpdateSuccess(function (param) {
                                    return /* Show */0;
                                  });
                      }),
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    makeQuotedProductVariables(product.id, data$p),
                    undefined,
                    undefined
                  ]);
              
            })) : Belt_Result.map(Update_Normal_Product_Form_Admin.Form.submit_decode(data), (function (data$p) {
              Curry.app(normalMutate, [
                    undefined,
                    (function (param, param$1) {
                        return setShowUpdateSuccess(function (param) {
                                    return /* Show */0;
                                  });
                      }),
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    makeNormalProductVariables(product.id, data$p),
                    undefined,
                    undefined
                  ]);
              
            }));
    if (result.TAG === /* Ok */0) {
      return ;
    }
    console.log(result._0);
    return addToast(React.createElement("div", {
                    className: "flex items-center"
                  }, React.createElement(IconError.make, {
                        width: "24",
                        height: "24",
                        className: "mr-2"
                      }), "오류가 발생하였습니다. 수정내용을 확인하세요."), {
                appearance: "error"
              });
  };
  var handleReset = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return setShowInitialize(function (param) {
                              return /* Show */0;
                            });
                }), param);
  };
  var match$6 = product.status;
  return React.createElement(ReactHookForm.Provider.make, {
              children: null,
              methods: methods
            }, React.createElement("form", {
                  onSubmit: methods.handleSubmit(onSubmit)
                }, React.createElement("div", {
                      className: "max-w-gnb-panel overflow-auto bg-div-shape-L1 min-h-screen mb-16"
                    }, React.createElement("header", {
                          className: "flex flex-col items-baseline p-7 pb-0 gap-1"
                        }, React.createElement("div", {
                              className: "flex justify-center items-center gap-2 text-sm"
                            }, React.createElement("span", {
                                  className: "font-bold"
                                }, "상품 조회·수정"), React.createElement(IconArrow.make, {
                                  height: "16",
                                  width: "16",
                                  fill: "#262626"
                                }), React.createElement("span", undefined, "상품 수정")), React.createElement("h1", {
                              className: "text-text-L1 text-xl font-bold"
                            }, product.name + " 수정")), React.createElement("div", undefined, React.createElement("div", {
                              className: "px-7 pt-7 mt-4 mx-4 bg-white rounded-t-md shadow-gl"
                            }, React.createElement("h2", {
                                  className: "text-text-L1 text-lg font-bold"
                                }, "상품유형"), React.createElement("div", {
                                  className: "py-6 w-80"
                                }, React.createElement(Select_Product_Type.make, {
                                      status: productType,
                                      onChange: (function (param) {
                                          
                                        })
                                    }))), productType ? React.createElement(Update_Quoted_Product_Form_Admin.make, {
                                query: product.fragmentRefs
                              }) : React.createElement(Update_Normal_Product_Form_Admin.make, {
                                query: product.fragmentRefs
                              }))), React.createElement("div", {
                      className: "fixed bottom-0 h-16 max-w-gnb-panel bg-white flex items-center gap-2 justify-end pr-10 w-full z-50"
                    }, match$6 === "RETIRE" ? React.createElement("button", {
                            className: "px-3 py-2 bg-disabled-L2 text-white rounded-lg focus:outline-none",
                            disabled: true,
                            type: "submit"
                          }, "상품을 수정할 수 없습니다.") : React.createElement(React.Fragment, undefined, React.createElement("button", {
                                className: "px-3 py-2 bg-div-shape-L1 rounded-lg focus:outline-none",
                                disabled: isNormalMutating || isQuotedlMutating,
                                type: "reset",
                                onClick: handleReset
                              }, "수정내용 초기화"), React.createElement("button", {
                                className: "px-3 py-2 bg-green-gl text-white rounded-lg hover:bg-green-gl-dark focus:outline-none",
                                disabled: isNormalMutating || isQuotedlMutating,
                                type: "submit"
                              }, "상품 수정")))), React.createElement(Dialog.make, {
                  isShow: match$4[0],
                  children: React.createElement("p", undefined, "수정한 모든 내용을 초기화 하시겠어요?"),
                  onCancel: (function (param) {
                      return setShowInitialize(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  onConfirm: (function (param) {
                      router.reload(router.pathname);
                      return setShowInitialize(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  textOnCancel: "닫기",
                  textOnConfirm: "초기화",
                  kindOfConfirm: /* Negative */1,
                  boxStyle: "text-center rounded-2xl"
                }), React.createElement(Dialog.make, {
                  isShow: match$3[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "상품정보가 수정되었습니다."),
                  onCancel: (function (param) {
                      setShowUpdateSuccess(function (param) {
                            return /* Hide */1;
                          });
                      router.reload(router.pathname);
                      
                    }),
                  textOnCancel: "확인",
                  boxStyle: "text-center rounded-2xl"
                }));
}

var Normal;

var Quoted;

var make = UpdateProduct_Detail_Admin;

export {
  Fragment ,
  NormalMutation ,
  QuotedMutation ,
  Normal ,
  Quoted ,
  makeDisplayCategoryIds ,
  makeNoticeDate ,
  encodeStatus ,
  makeNormalProductVariables ,
  makeQuotedProductVariables ,
  make ,
  
}
/* react Not a pure module */
