// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Locale from "../utils/Locale.mjs";
import * as DS_Icon from "./svgs/DS_Icon.mjs";
import * as DataGtm from "../utils/DataGtm.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as DS_Toast from "./common/container/DS_Toast.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as DatePicker from "./DatePicker.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as IconNotFound from "./svgs/IconNotFound.mjs";
import * as DS_InputField from "./common/container/DS_InputField.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as DS_BottomDrawer from "./common/container/DS_BottomDrawer.mjs";
import Format from "date-fns/format";
import AddDays from "date-fns/addDays";
import * as RfqShipping_Buyer from "../pages/buyer/rfq/RfqShipping_Buyer.mjs";
import * as Hooks from "react-relay/hooks";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as RescriptReactErrorBoundary from "@rescript/react/src/RescriptReactErrorBoundary.mjs";
import * as ReactRadioGroup from "@radix-ui/react-radio-group";
import * as TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql from "../__generated__/TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.mjs";
import * as TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql from "../__generated__/TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.mjs";
import * as TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql from "../__generated__/TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.node, TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.node, TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.node, TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var TradematchDeliveryPolicy_makeVariables = TradematchAskToBuyApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Utils.makeVariables;

var TradematchDeliveryPolicy = {
  makeVariables: TradematchDeliveryPolicy_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

var Query = {
  TradematchDeliveryPolicy: TradematchDeliveryPolicy,
  TradematchTerms: undefined
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.node,
              variables: TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$1(param) {
  var match = Hooks.useMutation(TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var CreateTradematchDemand_errorCode_decode = TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.errorCode_decode;

var CreateTradematchDemand_errorCode_fromString = TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.errorCode_fromString;

var CreateTradematchDemand_tradematchDemandStatus_decode = TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.tradematchDemandStatus_decode;

var CreateTradematchDemand_tradematchDemandStatus_fromString = TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.tradematchDemandStatus_fromString;

var CreateTradematchDemand_tradematchPackageQuantityUnit_decode = TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.tradematchPackageQuantityUnit_decode;

var CreateTradematchDemand_tradematchPackageQuantityUnit_fromString = TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.tradematchPackageQuantityUnit_fromString;

var CreateTradematchDemand_make_tradematchDemandCreateInput = TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.make_tradematchDemandCreateInput;

var CreateTradematchDemand_makeVariables = TradematchAskToBuyApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.makeVariables;

var CreateTradematchDemand = {
  errorCode_decode: CreateTradematchDemand_errorCode_decode,
  errorCode_fromString: CreateTradematchDemand_errorCode_fromString,
  tradematchDemandStatus_decode: CreateTradematchDemand_tradematchDemandStatus_decode,
  tradematchDemandStatus_fromString: CreateTradematchDemand_tradematchDemandStatus_fromString,
  tradematchPackageQuantityUnit_decode: CreateTradematchDemand_tradematchPackageQuantityUnit_decode,
  tradematchPackageQuantityUnit_fromString: CreateTradematchDemand_tradematchPackageQuantityUnit_fromString,
  make_tradematchDemandCreateInput: CreateTradematchDemand_make_tradematchDemandCreateInput,
  makeVariables: CreateTradematchDemand_makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$1
};

var makeVariables = TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.makeVariables;

function commitMutation$1(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.node,
              variables: TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$2(param) {
  var match = Hooks.useMutation(TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var PartialUpdateTradematchDemand_errorCode_decode = TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.errorCode_decode;

var PartialUpdateTradematchDemand_errorCode_fromString = TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.errorCode_fromString;

var PartialUpdateTradematchDemand_tradematchDemandStatus_decode = TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.tradematchDemandStatus_decode;

var PartialUpdateTradematchDemand_tradematchDemandStatus_fromString = TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.tradematchDemandStatus_fromString;

var PartialUpdateTradematchDemand_tradematchPackageQuantityUnit_decode = TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.tradematchPackageQuantityUnit_decode;

var PartialUpdateTradematchDemand_tradematchPackageQuantityUnit_fromString = TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.tradematchPackageQuantityUnit_fromString;

var PartialUpdateTradematchDemand_make_tradematchDemandPartialUpdateInput = TradematchAskToBuyApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.make_tradematchDemandPartialUpdateInput;

var PartialUpdateTradematchDemand = {
  errorCode_decode: PartialUpdateTradematchDemand_errorCode_decode,
  errorCode_fromString: PartialUpdateTradematchDemand_errorCode_fromString,
  tradematchDemandStatus_decode: PartialUpdateTradematchDemand_tradematchDemandStatus_decode,
  tradematchDemandStatus_fromString: PartialUpdateTradematchDemand_tradematchDemandStatus_fromString,
  tradematchPackageQuantityUnit_decode: PartialUpdateTradematchDemand_tradematchPackageQuantityUnit_decode,
  tradematchPackageQuantityUnit_fromString: PartialUpdateTradematchDemand_tradematchPackageQuantityUnit_fromString,
  make_tradematchDemandPartialUpdateInput: PartialUpdateTradematchDemand_make_tradematchDemandPartialUpdateInput,
  makeVariables: makeVariables,
  Types: undefined,
  commitMutation: commitMutation$1,
  use: use$2
};

var Mutation = {
  CreateTradematchDemand: CreateTradematchDemand,
  PartialUpdateTradematchDemand: PartialUpdateTradematchDemand,
  UpdateTermAgreement: undefined
};

function convertNumberInputValue(value) {
  return value.replace(/[^0-9]/g, "").replace(/^[0]/g, "");
}

function stringToNumber(s) {
  return Belt_Option.mapWithDefault(Belt_Float.fromString(Garter_Array.firstExn(s.split("."))), "", (function (x) {
                return Locale.Float.show(undefined, x, 0);
              }));
}

function getUpdateMutateVariables(id, deliveryAddress1Opt, deliveryAddress2Opt, deliveryDateOpt, deliveryRegionOpt, deliveryZipCodeOpt, numberOfPackagesPerTradeOpt, packageQuantityUnitOpt, priceGroupOpt, productCategoryCodeOpt, productIdOpt, productProcessOpt, productRequirementsOpt, productSizeOpt, quantityPerPackageOpt, statusOpt, tradeCycleOpt, wantedPricePerPackageOpt, param) {
  var deliveryAddress1 = deliveryAddress1Opt !== undefined ? Caml_option.valFromOption(deliveryAddress1Opt) : undefined;
  var deliveryAddress2 = deliveryAddress2Opt !== undefined ? Caml_option.valFromOption(deliveryAddress2Opt) : undefined;
  var deliveryDate = deliveryDateOpt !== undefined ? Caml_option.valFromOption(deliveryDateOpt) : undefined;
  var deliveryRegion = deliveryRegionOpt !== undefined ? Caml_option.valFromOption(deliveryRegionOpt) : undefined;
  var deliveryZipCode = deliveryZipCodeOpt !== undefined ? Caml_option.valFromOption(deliveryZipCodeOpt) : undefined;
  var numberOfPackagesPerTrade = numberOfPackagesPerTradeOpt !== undefined ? Caml_option.valFromOption(numberOfPackagesPerTradeOpt) : undefined;
  var packageQuantityUnit = packageQuantityUnitOpt !== undefined ? Caml_option.valFromOption(packageQuantityUnitOpt) : undefined;
  var priceGroup = priceGroupOpt !== undefined ? Caml_option.valFromOption(priceGroupOpt) : undefined;
  var productCategoryCode = productCategoryCodeOpt !== undefined ? Caml_option.valFromOption(productCategoryCodeOpt) : undefined;
  var productId = productIdOpt !== undefined ? Caml_option.valFromOption(productIdOpt) : undefined;
  var productProcess = productProcessOpt !== undefined ? Caml_option.valFromOption(productProcessOpt) : undefined;
  var productRequirements = productRequirementsOpt !== undefined ? Caml_option.valFromOption(productRequirementsOpt) : undefined;
  var productSize = productSizeOpt !== undefined ? Caml_option.valFromOption(productSizeOpt) : undefined;
  var quantityPerPackage = quantityPerPackageOpt !== undefined ? Caml_option.valFromOption(quantityPerPackageOpt) : undefined;
  var status = statusOpt !== undefined ? Caml_option.valFromOption(statusOpt) : undefined;
  var tradeCycle = tradeCycleOpt !== undefined ? Caml_option.valFromOption(tradeCycleOpt) : undefined;
  var wantedPricePerPackage = wantedPricePerPackageOpt !== undefined ? Caml_option.valFromOption(wantedPricePerPackageOpt) : undefined;
  return Curry._2(makeVariables, id, {
              deliveryAddress1: deliveryAddress1,
              deliveryAddress2: deliveryAddress2,
              deliveryDate: deliveryDate,
              deliveryRegion: deliveryRegion,
              deliveryZipCode: deliveryZipCode,
              numberOfPackagesPerTrade: numberOfPackagesPerTrade,
              packageQuantityUnit: packageQuantityUnit,
              priceGroup: priceGroup,
              productCategoryCode: productCategoryCode,
              productId: productId,
              productProcess: productProcess,
              productRequirements: productRequirements,
              productSize: productSize,
              quantityPerPackage: quantityPerPackage,
              status: status,
              tradeCycle: tradeCycle,
              wantedPricePerPackage: wantedPricePerPackage
            });
}

function Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$Layout(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: "relative container max-w-3xl mx-auto min-h-screen"
            }, children);
}

var Layout = {
  make: Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$Layout
};

function Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$Title(Props) {
  var text = Props.text;
  var subText = Props.subText;
  var label = Props.label;
  return React.createElement("div", {
              className: "px-5 py-9"
            }, Belt_Option.mapWithDefault(label, null, (function (x) {
                    return x;
                  })), React.createElement("h2", {
                  className: "text-2xl font-bold whitespace-pre-line"
                }, text), subText !== undefined ? React.createElement("h3", {
                    className: "text-gray-600 whitespace-pre-line text-sm mt-3"
                  }, subText) : null);
}

var Title = {
  make: Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$Title
};

function Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$FloatingButton(Props) {
  var handleClickButton = Props.handleClickButton;
  var disabledOpt = Props.disabled;
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var match = CustomHooks.Tradematch.usePageSteps(undefined);
  var buttonText = match.isLast ? "견적 신청 완료" : "다음";
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "fixed bottom-0 max-w-3xl w-full gradient-cta-t tab-highlight-color"
                }, React.createElement("div", {
                      className: "w-full max-w-[768px] px-4 py-5 mx-auto"
                    }, React.createElement("button", {
                          className: Cx.cx([
                                "h-14 w-full rounded-xl bg-primary text-white text-lg font-bold",
                                "disabled:bg-disabled-L2 disabled:text-inverted disabled:text-opacity-50"
                              ]),
                          disabled: disabled,
                          onClick: handleClickButton
                        }, buttonText))), React.createElement("div", {
                  className: "h-24"
                }));
}

var FloatingButton = {
  make: Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$FloatingButton
};

var Common = {
  Layout: Layout,
  Title: Title,
  FloatingButton: FloatingButton
};

function Tradematch_Ask_To_Buy_Apply_Steps_Buyer$CalendarListitem(Props) {
  var leftText = Props.leftText;
  var currentDate = Props.currentDate;
  var handleChangeDate = Props.handleChangeDate;
  var minDate = Props.minDate;
  var maxDate = Props.maxDate;
  var tmp = {
    id: "date",
    onChange: (function (e) {
        var newDate = e.detail.valueAsDate;
        return handleChangeDate(function (param) {
                    return newDate;
                  });
      }),
    maxDate: Format(maxDate, "yyyy-MM-dd"),
    minDate: Format(minDate, "yyyy-MM-dd"),
    firstDayOfWeek: 0,
    isDateDisabled: (function (e) {
        if (e.getDay() === 0) {
          return true;
        } else {
          return e.getDay() === 6;
        }
      }),
    onFocus: (function (param) {
        return Belt_Option.forEach(Belt_Option.flatMap(Caml_option.nullable_to_opt(document.getElementById("date")), Webapi__Dom__Element.asHtmlElement), (function (inputEl$p) {
                      inputEl$p.blur();
                      
                    }));
      })
  };
  if (currentDate !== undefined) {
    tmp.date = Caml_option.valFromOption(currentDate);
  }
  return React.createElement("li", {
              className: "flex items-center min-h-[56px] mx-5 cursor-pointer border-b-2 border-b-border-disabled"
            }, React.createElement("div", {
                  className: "flex flex-col justify-between truncate"
                }, React.createElement("span", {
                      className: "block text-base truncate"
                    }, leftText)), React.createElement("div", {
                  className: "ml-auto pl-2"
                }, React.createElement(DatePicker.make, tmp)));
}

var CalendarListitem = {
  make: Tradematch_Ask_To_Buy_Apply_Steps_Buyer$CalendarListitem
};

function Tradematch_Ask_To_Buy_Apply_Steps_Buyer$SearchAddress(Props) {
  var onComplete = Props.onComplete;
  var isShow = Props.isShow;
  React.useLayoutEffect((function () {
          if (isShow) {
            var iframeWrapper = document.getElementById("iframe-embed-addr");
            if (!(iframeWrapper == null)) {
              var w = iframeWrapper.clientWidth;
              var h = window.innerHeight - 56 | 0;
              var option = {
                oncomplete: onComplete,
                width: w,
                height: h
              };
              var daumPostCode = new (daum.Postcode)(option);
              var openOption = {
                q: "",
                autoClose: true
              };
              daumPostCode.embed(iframeWrapper, openOption);
              iframeWrapper.setAttribute("style", "display: block;");
            }
            
          }
          
        }), [isShow]);
  return React.createElement("div", {
              id: "iframe-embed-addr"
            });
}

var SearchAddress = {
  make: Tradematch_Ask_To_Buy_Apply_Steps_Buyer$SearchAddress
};

function Tradematch_Ask_To_Buy_Apply_Steps_Buyer$AddressDrawer(Props) {
  var onComplete = Props.onComplete;
  var closeDrawer = Props.closeDrawer;
  var isShow = Props.isShow;
  return React.createElement(DS_BottomDrawer.Root.make, {
              isShow: isShow,
              onClose: (function (param) {
                  return Curry._1(closeDrawer, undefined);
                }),
              children: null,
              full: true
            }, React.createElement(DS_BottomDrawer.Header.make, {}), React.createElement(DS_BottomDrawer.Body.make, {
                  children: React.createElement(RescriptReactErrorBoundary.make, {
                        children: React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$SearchAddress, {
                              onComplete: onComplete,
                              isShow: isShow
                            }),
                        fallback: (function (param) {
                            return React.createElement("div", {
                                        className: "flex items-center justify-center"
                                      }, React.createElement("contents", {
                                            className: "flex flex-col items-center justify-center"
                                          }, React.createElement(IconNotFound.make, {
                                                width: "160",
                                                height: "160"
                                              }), React.createElement("h1", {
                                                className: "mt-7 text-2xl text-gray-800 font-bold"
                                              }, "처리중 오류가 발생하였습니다."), React.createElement("span", {
                                                className: "mt-4 text-gray-800"
                                              }, "페이지를 불러오는 중에 문제가 발생하였습니다."), React.createElement("span", {
                                                className: "text-gray-800"
                                              }, "잠시 후 재시도해 주세요.")));
                          })
                      })
                }));
}

var AddressDrawer = {
  make: Tradematch_Ask_To_Buy_Apply_Steps_Buyer$AddressDrawer
};

function Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Grade(Props) {
  var pid = Props.pid;
  var currentDemand = Props.currentDemand;
  var product = Props.product;
  var connectionId = Props.connectionId;
  var router = Router.useRouter();
  var match = CustomHooks.Tradematch.useNavigateStep(undefined);
  var navigateToNextStep = match.navigateToNextStep;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = use$1(undefined);
  var createMutate = match$2[0];
  var match$3 = use$2(undefined);
  var productCategoryCodeId = product.category.productCategoryCodeId;
  var recentMarketPrice = product.recentMarketPrice;
  var match$4 = product.qualityStandard;
  var representativeWeight = product.representativeWeight;
  var updateMutate = match$3[0];
  var match$5 = Js_dict.get(router.query, "grade");
  var defaultSelectedGrade;
  if (currentDemand !== undefined) {
    defaultSelectedGrade = currentDemand.priceGroup;
  } else if (match$5 !== undefined) {
    switch (match$5) {
      case "high" :
          defaultSelectedGrade = "HIGH";
          break;
      case "low" :
          defaultSelectedGrade = "LOW";
          break;
      case "medium" :
          defaultSelectedGrade = "MEDIUM";
          break;
      default:
        defaultSelectedGrade = undefined;
    }
  } else {
    defaultSelectedGrade = undefined;
  }
  var match$6 = React.useState(function () {
        return defaultSelectedGrade;
      });
  var setSelectedGrade = match$6[1];
  var selectedGrade = match$6[0];
  var isSelected = Belt_Option.isSome(selectedGrade);
  var trackData = function (param) {
    var match;
    if (selectedGrade !== undefined) {
      switch (selectedGrade) {
        case "HIGH" :
            if (recentMarketPrice !== undefined) {
              var match$1 = recentMarketPrice.highRecentMarketPrice;
              match = [
                match$1.higher,
                match$1.mean,
                match$1.lower
              ];
            } else {
              match = [
                undefined,
                undefined,
                undefined
              ];
            }
            break;
        case "LOW" :
            if (recentMarketPrice !== undefined) {
              var match$2 = recentMarketPrice.lowRecentMarketPrice;
              match = [
                match$2.higher,
                match$2.mean,
                match$2.lower
              ];
            } else {
              match = [
                undefined,
                undefined,
                undefined
              ];
            }
            break;
        case "MEDIUM" :
            if (recentMarketPrice !== undefined) {
              var match$3 = recentMarketPrice.mediumRecentMarketPrice;
              match = [
                match$3.higher,
                match$3.mean,
                match$3.lower
              ];
            } else {
              match = [
                undefined,
                undefined,
                undefined
              ];
            }
            break;
        default:
          match = [
            undefined,
            undefined,
            undefined
          ];
      }
    } else {
      match = [
        undefined,
        undefined,
        undefined
      ];
    }
    return DataGtm.push({
                event: "click_intention_grade",
                product_id: pid,
                category_id: productCategoryCodeId,
                grade_avg_price: match[1],
                grade_min_price: match[2],
                grade_max_price: match[0]
              });
  };
  var handleClickButton = function (param) {
    trackData(undefined);
    if (currentDemand !== undefined) {
      var partial_arg = currentDemand.id;
      var func = function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15, param$16, param$17) {
        return getUpdateMutateVariables(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15, param$16, param$17);
      };
      var arg = Caml_option.some(selectedGrade);
      var arg$1 = Caml_option.some(productCategoryCodeId);
      var arg$2 = Caml_option.some(pid);
      Curry.app(updateMutate, [
            (function (err) {
                return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                            appearance: "error"
                          });
              }),
            (function (param, param$1) {
                var variant = param.partialUpdateTradematchDemand.NAME;
                if (variant === "UnselectedUnionMember" || variant === "Error") {
                  addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                        appearance: "error"
                      });
                } else {
                  Curry._1(navigateToNextStep, undefined);
                }
                
              }),
            undefined,
            undefined,
            undefined,
            undefined,
            Curry._8((function (param, param$1, param$2, param$3, param$4, param$5, param$6) {
                      return Curry.app(func, [
                                  param,
                                  param$1,
                                  param$2,
                                  param$3,
                                  param$4,
                                  param$5,
                                  param$6,
                                  arg,
                                  arg$1,
                                  arg$2
                                ]);
                    })(undefined, undefined, undefined, undefined, undefined, undefined, undefined), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined),
            undefined,
            undefined
          ]);
      return ;
    }
    Curry.app(createMutate, [
          (function (err) {
              return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                          appearance: "error"
                        });
            }),
          (function (param, param$1) {
              var variant = param.createTradematchDemand.NAME;
              if (variant === "UnselectedUnionMember" || variant === "Error") {
                addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                      appearance: "error"
                    });
              } else {
                Curry._1(navigateToNextStep, undefined);
              }
              
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          {
            connections: [connectionId],
            input: {
              deliveryAddress1: undefined,
              deliveryAddress2: undefined,
              deliveryDate: undefined,
              deliveryRegion: undefined,
              deliveryZipCode: undefined,
              numberOfPackagesPerTrade: undefined,
              packageQuantityUnit: undefined,
              priceGroup: selectedGrade,
              productCategoryCode: productCategoryCodeId,
              productId: pid,
              productProcess: undefined,
              productRequirements: undefined,
              productSize: undefined,
              quantityPerPackage: undefined,
              tradeCycle: undefined,
              wantedPricePerPackage: undefined
            }
          },
          undefined,
          undefined
        ]);
    
  };
  var tmp;
  if (recentMarketPrice !== undefined) {
    var match$7 = recentMarketPrice.highRecentMarketPrice;
    var mean = match$7.mean;
    var match$8 = recentMarketPrice.mediumRecentMarketPrice;
    var mean$1 = match$8.mean;
    var match$9 = recentMarketPrice.lowRecentMarketPrice;
    var mean$2 = match$9.mean;
    tmp = React.createElement(React.Fragment, undefined, React.createElement("li", {
              className: "w-full items-center list-none"
            }, React.createElement("label", {
                  className: "flex w-full justify-between cursor-pointer px-5"
                }, React.createElement("div", undefined, React.createElement("div", {
                          className: "text-lg font-bold text-text-L1"
                        }, "상위 가격 그룹"), React.createElement("div", {
                          className: "text-sm text-gray-600"
                        }, match$4.highQualityStandard.description), mean !== undefined ? React.createElement("div", {
                            className: "text-sm text-primary"
                          }, "평균 " + stringToNumber(String(mean * representativeWeight)) + "원(" + String(representativeWeight) + "kg당)") : null), React.createElement("div", {
                      className: "flex items-center"
                    }, React.createElement(ReactRadioGroup.Item, {
                          children: React.createElement(ReactRadioGroup.Indicator, {
                                className: Cx.cx([
                                      "relative flex items-center justify-center h-full w-full ",
                                      "after:block after:content-[''] after:rounded-full after:border-green-500 after:border-[7px] after:bg-transparent after:min-w-[22px] after:h-[22px]"
                                    ])
                              }),
                          value: "HIGH",
                          className: Cx.cx([
                                "relative flex items-center justify-center ml-[25px] min-w-[22px] min-h-[22px] max-w-[22px] max-h-[22px] border-[1.5px] rounded-full border-enabled-L4 ",
                                "after:content-[''] after:w-[7px] after:h-[7px] after:bg-enabled-L4 after:bg-opacity-30 after:rounded-full after:absolute "
                              ]),
                          id: "HIGH"
                        })))), React.createElement("li", {
              className: "w-full items-center list-none"
            }, React.createElement("label", {
                  className: "flex w-full justify-between cursor-pointer px-5"
                }, React.createElement("div", undefined, React.createElement("div", {
                          className: "text-lg font-bold text-text-L1"
                        }, "중위 가격 그룹"), React.createElement("div", {
                          className: "text-sm text-gray-600"
                        }, match$4.mediumQualityStandard.description), mean$1 !== undefined ? React.createElement("div", {
                            className: "text-sm text-primary"
                          }, "평균 " + stringToNumber(String(mean$1 * representativeWeight)) + "원(" + String(representativeWeight) + "kg당)") : null), React.createElement("div", {
                      className: "flex items-center"
                    }, React.createElement(ReactRadioGroup.Item, {
                          children: React.createElement(ReactRadioGroup.Indicator, {
                                className: Cx.cx([
                                      "relative flex items-center justify-center h-full w-full ",
                                      "after:block after:content-[''] after:rounded-full after:border-green-500 after:border-[7px] after:bg-transparent after:min-w-[22px] after:h-[22px]"
                                    ])
                              }),
                          value: "MEDIUM",
                          className: Cx.cx([
                                "relative flex items-center justify-center ml-[25px] min-w-[22px] min-h-[22px] max-w-[22px] max-h-[22px] border-[1.5px] rounded-full border-enabled-L4 ",
                                "after:content-[''] after:w-[7px] after:h-[7px] after:bg-enabled-L4 after:bg-opacity-30 after:rounded-full after:absolute "
                              ]),
                          id: "MEDIUM"
                        })))), React.createElement("li", {
              className: "w-full items-center list-none"
            }, React.createElement("label", {
                  className: "flex w-full justify-between cursor-pointer px-5"
                }, React.createElement("div", undefined, React.createElement("div", {
                          className: "text-lg font-bold text-text-L1"
                        }, "하위 가격 그룹"), React.createElement("div", {
                          className: "text-sm text-gray-600"
                        }, match$4.lowQualityStandard.description), mean$2 !== undefined ? React.createElement("div", {
                            className: "text-sm text-primary"
                          }, "평균 " + stringToNumber(String(mean$2 * representativeWeight)) + "원(" + String(representativeWeight) + "kg당)") : null), React.createElement("div", {
                      className: "flex items-center"
                    }, React.createElement(ReactRadioGroup.Item, {
                          children: React.createElement(ReactRadioGroup.Indicator, {
                                className: Cx.cx([
                                      "relative flex items-center justify-center h-full w-full ",
                                      "after:block after:content-[''] after:rounded-full after:border-green-500 after:border-[7px] after:bg-transparent after:min-w-[22px] after:h-[22px]"
                                    ])
                              }),
                          value: "LOW",
                          className: Cx.cx([
                                "relative flex items-center justify-center ml-[25px] min-w-[22px] min-h-[22px] max-w-[22px] max-h-[22px] border-[1.5px] rounded-full border-enabled-L4 ",
                                "after:content-[''] after:w-[7px] after:h-[7px] after:bg-enabled-L4 after:bg-opacity-30 after:rounded-full after:absolute "
                              ]),
                          id: "LOW"
                        })))));
  } else {
    tmp = null;
  }
  return React.createElement("div", undefined, React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$Title, {
                  text: "찾으시는 상품의\n가격 그룹을 선택해주세요"
                }), React.createElement("form", undefined, React.createElement(ReactRadioGroup.Root, {
                      children: tmp,
                      value: Belt_Option.mapWithDefault(selectedGrade, "", (function (x) {
                              return x;
                            })),
                      onValueChange: (function (v) {
                          return setSelectedGrade(function (param) {
                                      return v;
                                    });
                        }),
                      name: "tradematch-grade",
                      className: "flex flex-col gap-8"
                    })), React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$FloatingButton, {
                  handleClickButton: handleClickButton,
                  disabled: match$2[1] || match$3[1] || !isSelected
                }));
}

var Grade = {
  make: Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Grade
};

function Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Count(Props) {
  var product = Props.product;
  var currentDemand = Props.currentDemand;
  var match = CustomHooks.Tradematch.useNavigateStep(undefined);
  var navigateToNextStep = match.navigateToNextStep;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var productWeight = product.representativeWeight;
  var match$2 = React.useState(function () {
        return Belt_Option.mapWithDefault(Belt_Option.flatMap(currentDemand, (function (x) {
                          return x.numberOfPackagesPerTrade;
                        })), 1, (function (x) {
                      return x;
                    }));
      });
  var setcount = match$2[1];
  var count = match$2[0];
  var match$3 = use$2(undefined);
  var updateMutate = match$3[0];
  var trackData = function (param) {
    var demandId = currentDemand !== undefined ? currentDemand.id : "";
    return DataGtm.push({
                event: "click_intention_quantity",
                tradematch_demand_id: demandId,
                quantity_per_trade: count
              });
  };
  var handleClickButton = function (param) {
    trackData(undefined);
    if (currentDemand === undefined) {
      return ;
    }
    var partial_arg = currentDemand.id;
    var func = function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15, param$16, param$17) {
      return getUpdateMutateVariables(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15, param$16, param$17);
    };
    var arg = Caml_option.some(count);
    var arg$1 = Caml_option.some(product.representativeWeight);
    Curry.app(updateMutate, [
          (function (err) {
              return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                          appearance: "error"
                        });
            }),
          (function (param, param$1) {
              var variant = param.partialUpdateTradematchDemand.NAME;
              if (variant === "UnselectedUnionMember" || variant === "Error") {
                addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                      appearance: "error"
                    });
              } else {
                Curry._1(navigateToNextStep, undefined);
              }
              
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          Curry._4((function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10) {
                    return Curry.app(func, [
                                param,
                                param$1,
                                param$2,
                                param$3,
                                param$4,
                                arg,
                                "KG",
                                param$5,
                                param$6,
                                param$7,
                                param$8,
                                param$9,
                                param$10,
                                arg$1
                              ]);
                  })(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined), undefined, undefined, undefined, undefined),
          undefined,
          undefined
        ]);
    
  };
  return React.createElement("div", undefined, React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$Title, {
                  text: "납품 1회당 구매량을\n작성해주세요"
                }), React.createElement("div", {
                  className: "mx-5"
                }, React.createElement("div", {
                      className: "flex justify-between items-center border-border-default-L2 px-4 h-[88px] border-[1px] border-solid rounded-lg mb-3"
                    }, React.createElement("div", {
                          className: "font-bold"
                        }, React.createElement("span", {
                              className: "break-all"
                            }, String(productWeight)), React.createElement("span", {
                              className: "word-keep-all"
                            }, "Kg")), React.createElement("div", {
                          className: "flex justify-between items-center"
                        }, React.createElement("button", {
                              className: "w-10 h-10 rounded-full bg-div-shape-L2 font-bold text-lg select-none",
                              onClick: (function (param) {
                                  return setcount(function (prev) {
                                              if (prev === 1) {
                                                return prev;
                                              } else {
                                                return prev - 1 | 0;
                                              }
                                            });
                                })
                            }, "-"), React.createElement("div", {
                              className: "mx-3 text-center w-[60px]"
                            }, React.createElement("span", {
                                  className: "break-all"
                                }, String(count)), React.createElement("span", {
                                  className: "word-keep-all\n              "
                                }, " 박스"), React.createElement("span", undefined)), React.createElement("button", {
                              className: "w-10 h-10 rounded-full bg-div-shape-L2 font-bold text-lg select-none",
                              onClick: (function (param) {
                                  return setcount(function (prev) {
                                              return prev + 1 | 0;
                                            });
                                })
                            }, "+"))), React.createElement("div", undefined, React.createElement("span", {
                          className: "text-gray-500 text-sm"
                        }, "총 " + String(productWeight * count) + "kg"))), React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$FloatingButton, {
                  handleClickButton: handleClickButton,
                  disabled: match$3[1]
                }));
}

var Count = {
  make: Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Count
};

function Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Price(Props) {
  var product = Props.product;
  var currentDemand = Props.currentDemand;
  var match = CustomHooks.Tradematch.useNavigateStep(undefined);
  var navigateToNextStep = match.navigateToNextStep;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var currentDemandPriceGroup = Belt_Option.mapWithDefault(currentDemand !== undefined ? currentDemand.priceGroup : undefined, "", (function (x) {
          return x;
        }));
  var recentMarketPrice = product.recentMarketPrice;
  var representativeWeight = product.representativeWeight;
  var titleText;
  switch (currentDemandPriceGroup) {
    case "HIGH" :
        titleText = "상위 가격 그룹, " + String(representativeWeight) + "kg당\n구매 희망가를 적어주세요";
        break;
    case "LOW" :
        titleText = "하위 가격 그룹, " + String(representativeWeight) + "kg당\n구매 희망가를 적어주세요";
        break;
    case "MEDIUM" :
        titleText = "중위 가격 그룹, " + String(representativeWeight) + "kg당\n구매 희망가를 적어주세요";
        break;
    default:
      titleText = "구매 희망가를 적어주세요";
  }
  var numberOfPackagesPerTrade = Belt_Option.flatMap(currentDemand, (function (x) {
          return x.numberOfPackagesPerTrade;
        }));
  var totalWeightText;
  if (numberOfPackagesPerTrade !== undefined) {
    var totalWeight = Locale.Float.show(undefined, representativeWeight * numberOfPackagesPerTrade, 0);
    totalWeightText = "총 " + totalWeight + "kg";
  } else {
    totalWeightText = "정보 없음";
  }
  var currentRecentMarketPrice;
  switch (currentDemandPriceGroup) {
    case "HIGH" :
        if (recentMarketPrice !== undefined) {
          var match$2 = recentMarketPrice.highRecentMarketPrice;
          currentRecentMarketPrice = [
            match$2.higher,
            match$2.mean,
            match$2.lower
          ];
        } else {
          currentRecentMarketPrice = [
            undefined,
            undefined,
            undefined
          ];
        }
        break;
    case "LOW" :
        if (recentMarketPrice !== undefined) {
          var match$3 = recentMarketPrice.lowRecentMarketPrice;
          currentRecentMarketPrice = [
            match$3.higher,
            match$3.mean,
            match$3.lower
          ];
        } else {
          currentRecentMarketPrice = [
            undefined,
            undefined,
            undefined
          ];
        }
        break;
    case "MEDIUM" :
        if (recentMarketPrice !== undefined) {
          var match$4 = recentMarketPrice.mediumRecentMarketPrice;
          currentRecentMarketPrice = [
            match$4.higher,
            match$4.mean,
            match$4.lower
          ];
        } else {
          currentRecentMarketPrice = [
            undefined,
            undefined,
            undefined
          ];
        }
        break;
    default:
      currentRecentMarketPrice = [
        undefined,
        undefined,
        undefined
      ];
  }
  var getPackagePriceText = function (n) {
    return stringToNumber(String(n * representativeWeight | 0));
  };
  var higher$p = currentRecentMarketPrice[0];
  var averagePriceText;
  if (higher$p !== undefined) {
    var mean$p = currentRecentMarketPrice[1];
    if (mean$p !== undefined) {
      var lower$p = currentRecentMarketPrice[2];
      averagePriceText = lower$p !== undefined ? "평균 " + getPackagePriceText(mean$p) + "원(최저" + getPackagePriceText(lower$p) + "원~최고" + getPackagePriceText(higher$p) + "원)" : "";
    } else {
      averagePriceText = "";
    }
  } else {
    averagePriceText = "";
  }
  var mean$p$1 = currentRecentMarketPrice[1];
  var estimatedTotalPrice = mean$p$1 !== undefined ? mean$p$1 * representativeWeight | 0 : 0;
  var wantedPricePerPackage = Belt_Option.flatMap(currentDemand, (function (x) {
          return x.wantedPricePerPackage;
        }));
  var defaultPriceInputValue = wantedPricePerPackage !== undefined ? wantedPricePerPackage : estimatedTotalPrice;
  var match$5 = React.useState(function () {
        return defaultPriceInputValue;
      });
  var setPrice = match$5[1];
  var price = match$5[0];
  var match$6 = use$2(undefined);
  var updateMutate = match$6[0];
  var trackData = function (param) {
    var demandId = currentDemand !== undefined ? currentDemand.id : "";
    return DataGtm.push({
                event: "click_intention_price",
                tradematch_demand_id: demandId,
                price_per_trade: price
              });
  };
  var handleClickButton = function (param) {
    trackData(undefined);
    if (currentDemand === undefined) {
      return ;
    }
    var partial_arg = currentDemand.id;
    var func = function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15, param$16, param$17) {
      return getUpdateMutateVariables(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15, param$16, param$17);
    };
    var arg = Caml_option.some(price);
    Curry.app(updateMutate, [
          (function (err) {
              return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                          appearance: "error"
                        });
            }),
          (function (param, param$1) {
              var variant = param.partialUpdateTradematchDemand.NAME;
              if (variant === "UnselectedUnionMember" || variant === "Error") {
                addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                      appearance: "error"
                    });
              } else {
                Curry._1(navigateToNextStep, undefined);
              }
              
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          Curry._1((function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15) {
                    return Curry.app(func, [
                                param,
                                param$1,
                                param$2,
                                param$3,
                                param$4,
                                param$5,
                                param$6,
                                param$7,
                                param$8,
                                param$9,
                                param$10,
                                param$11,
                                param$12,
                                param$13,
                                param$14,
                                param$15,
                                arg
                              ]);
                  })(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined), undefined),
          undefined,
          undefined
        ]);
    
  };
  var estimatedTotalPriceText = price !== undefined ? (
      numberOfPackagesPerTrade !== undefined ? "예상 " + Locale.Float.show(undefined, price * numberOfPackagesPerTrade, 0) + "원" : ""
    ) : "";
  return React.createElement("div", undefined, React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$Title, {
                  text: titleText,
                  subText: "시장 평균가 이하면 생산자와\n매칭 확률이 낮아질 수 있습니다"
                }), React.createElement(DS_InputField.Line1.Root.make, {
                  children: React.createElement(DS_InputField.Line1.Input.make, {
                        type_: "text",
                        placeholder: "구매 희망 입찰가",
                        value: price !== undefined ? Locale.Float.show(undefined, price, 0) : "",
                        onChange: (function (e) {
                            var value = e.target.value;
                            return setPrice(function (param) {
                                        return Belt_Int.fromString(convertNumberInputValue(value));
                                      });
                          }),
                        autoFocus: true,
                        inputMode: "decimal",
                        isClear: true,
                        fnClear: (function (param) {
                            return setPrice(function (param) {
                                        
                                      });
                          }),
                        unit: "원",
                        underLabel: averagePriceText,
                        maxLength: 11
                      }),
                  className: "mt-4"
                }), React.createElement("div", {
                  className: "mt-9 mx-5"
                }, React.createElement("div", {
                      className: "relative flex justify-between items-center border-border-default-L2 px-4 h-[72px] border-[1px] border-solid rounded-lg mb-3"
                    }, React.createElement("div", {
                          className: "w-[26%] mr-[30px]"
                        }, React.createElement("span", {
                              className: "break-all font-bold"
                            }, totalWeightText)), React.createElement("div", {
                          className: "w-[46%] flex justify-end"
                        }, React.createElement("span", {
                              className: "break-all font-bold"
                            }, estimatedTotalPriceText))), React.createElement("div", undefined, React.createElement("span", {
                          className: "text-gray-400 text-sm whitespace-pre-line"
                        }, "배송비는 별도입니다\n추가 옵션 및 시기에 따라 가격이 변동 될 수 있습니다"))), React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$FloatingButton, {
                  handleClickButton: handleClickButton,
                  disabled: Belt_Option.isNone(price) || match$6[1]
                }));
}

var Price = {
  make: Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Price
};

function Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Cycle(Props) {
  var currentDemand = Props.currentDemand;
  var match = CustomHooks.Tradematch.useNavigateStep(undefined);
  var navigateToNextStep = match.navigateToNextStep;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = React.useState(function () {
        return Belt_Option.flatMap(currentDemand, (function (x) {
                      return x.tradeCycle;
                    }));
      });
  var setSelectedCycle = match$2[1];
  var selectedCycle = match$2[0];
  var cycles = [
    "매일",
    "주 3~5회",
    "주 1~2회",
    "월 1~2회",
    "일회성 주문"
  ];
  var isSelectedCycle = selectedCycle !== undefined ? Belt_Option.isNone(Belt_Array.getBy(cycles, (function (x) {
                return x === selectedCycle;
              }))) : false;
  var match$3 = use$2(undefined);
  var updateMutate = match$3[0];
  var trackData = function (param) {
    var demandId = currentDemand !== undefined ? currentDemand.id : "";
    return DataGtm.push({
                event: "click_intention_cycle",
                tradematch_demand_id: demandId,
                trade_cycle: selectedCycle
              });
  };
  var handleClickButton = function (param) {
    trackData(undefined);
    if (currentDemand === undefined) {
      return ;
    }
    var partial_arg = currentDemand.id;
    var func = function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15, param$16, param$17) {
      return getUpdateMutateVariables(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15, param$16, param$17);
    };
    var arg = Caml_option.some(selectedCycle);
    Curry.app(updateMutate, [
          (function (err) {
              return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                          appearance: "error"
                        });
            }),
          (function (param, param$1) {
              var variant = param.partialUpdateTradematchDemand.NAME;
              if (variant === "UnselectedUnionMember" || variant === "Error") {
                addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                      appearance: "error"
                    });
              } else {
                Curry._1(navigateToNextStep, undefined);
              }
              
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          Curry._2((function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14) {
                    return Curry.app(func, [
                                param,
                                param$1,
                                param$2,
                                param$3,
                                param$4,
                                param$5,
                                param$6,
                                param$7,
                                param$8,
                                param$9,
                                param$10,
                                param$11,
                                param$12,
                                param$13,
                                param$14,
                                arg
                              ]);
                  })(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined), undefined, undefined),
          undefined,
          undefined
        ]);
    
  };
  return React.createElement("div", undefined, React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$Title, {
                  text: "원하시는 납품주기를\n선택해주세요"
                }), React.createElement("form", undefined, React.createElement(ReactRadioGroup.Root, {
                      children: Belt_Array.mapWithIndex(cycles, (function (index, value) {
                              return React.createElement("li", {
                                          key: String(index),
                                          className: "flex w-full items-center h-[60px]"
                                        }, React.createElement("label", {
                                              className: "flex items-center justify-between w-full h-full px-5 cursor-pointer"
                                            }, React.createElement("div", {
                                                  className: "text-text-L1"
                                                }, value), React.createElement(ReactRadioGroup.Item, {
                                                  children: React.createElement(ReactRadioGroup.Indicator, {
                                                        className: Cx.cx([
                                                              "relative flex items-center justify-center h-full w-full ",
                                                              "after:block after:content-[''] after:rounded-full after:border-green-500 after:border-[7px] after:bg-transparent after:min-w-[22px] after:h-[22px]"
                                                            ])
                                                      }),
                                                  value: value,
                                                  className: Cx.cx([
                                                        "relative flex items-center justify-center ml-[25px] min-w-[22px] min-h-[22px] max-w-[22px] max-h-[22px] border-[1.5px] rounded-full border-enabled-L4 ",
                                                        "after:content-[''] after:w-[7px] after:h-[7px] after:bg-enabled-L4 after:bg-opacity-30 after:rounded-full after:absolute "
                                                      ]),
                                                  id: value
                                                })));
                            })),
                      value: Belt_Option.mapWithDefault(selectedCycle, "", (function (x) {
                              return x;
                            })),
                      onValueChange: (function (v) {
                          return setSelectedCycle(function (param) {
                                      return v;
                                    });
                        }),
                      name: "tradematch-cycle"
                    })), React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$FloatingButton, {
                  handleClickButton: handleClickButton,
                  disabled: isSelectedCycle || match$3[1]
                }));
}

var Cycle = {
  make: Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Cycle
};

function Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Requirement(Props) {
  var currentDemand = Props.currentDemand;
  var match = CustomHooks.Tradematch.useNavigateStep(undefined);
  var navigateToNextStep = match.navigateToNextStep;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = React.useState(function () {
        return Belt_Option.mapWithDefault(currentDemand, "", (function (x) {
                      return x.productSize;
                    }));
      });
  var setSize = match$2[1];
  var size = match$2[0];
  var match$3 = React.useState(function () {
        return Belt_Option.mapWithDefault(currentDemand, "", (function (x) {
                      return x.productProcess;
                    }));
      });
  var setProcess = match$3[1];
  var $$process = match$3[0];
  var match$4 = React.useState(function () {
        return Belt_Option.mapWithDefault(currentDemand, "", (function (x) {
                      return x.productRequirements;
                    }));
      });
  var setRequirement = match$4[1];
  var requirement = match$4[0];
  var match$5 = use$2(undefined);
  var updateMutate = match$5[0];
  var trackData = function (param) {
    var demandId = currentDemand !== undefined ? currentDemand.id : "";
    return DataGtm.push({
                event: "click_intention_requirements",
                tradematch_demand_id: demandId,
                product_size: size,
                product_process: $$process,
                product_requirements: requirement
              });
  };
  var handleClickButton = function (param) {
    trackData(undefined);
    if (currentDemand === undefined) {
      return ;
    }
    var partial_arg = currentDemand.id;
    var func = function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15, param$16, param$17) {
      return getUpdateMutateVariables(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15, param$16, param$17);
    };
    var arg = Caml_option.some($$process);
    var arg$1 = Caml_option.some(requirement);
    var arg$2 = Caml_option.some(size);
    Curry.app(updateMutate, [
          (function (err) {
              return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                          appearance: "error"
                        });
            }),
          (function (param, param$1) {
              var variant = param.partialUpdateTradematchDemand.NAME;
              if (variant === "UnselectedUnionMember" || variant === "Error") {
                addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                      appearance: "error"
                    });
              } else {
                Curry._1(navigateToNextStep, undefined);
              }
              
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          Curry._5((function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9) {
                    return Curry.app(func, [
                                param,
                                param$1,
                                param$2,
                                param$3,
                                param$4,
                                param$5,
                                param$6,
                                param$7,
                                param$8,
                                param$9,
                                arg,
                                arg$1,
                                arg$2
                              ]);
                  })(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined), undefined, undefined, undefined, undefined, undefined),
          undefined,
          undefined
        ]);
    
  };
  return React.createElement("div", undefined, React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$Title, {
                  text: "기타 요청사항을\n남겨주세요"
                }), React.createElement("div", undefined, React.createElement(DS_InputField.Line1.Root.make, {
                      children: null,
                      className: "mt-4"
                    }, React.createElement("div", {
                          className: "mb-2 text-sm"
                        }, "사이즈"), React.createElement(DS_InputField.Line1.Input.make, {
                          type_: "text",
                          placeholder: "개당 200g ~250g 내외",
                          value: size,
                          onChange: (function (e) {
                              var value = e.target.value;
                              return setSize(function (param) {
                                          return value;
                                        });
                            }),
                          maxLength: 10000
                        })), React.createElement(DS_InputField.Line1.Root.make, {
                      children: null,
                      className: "mt-4"
                    }, React.createElement("div", {
                          className: "mb-2 text-sm"
                        }, "상품 가공"), React.createElement(DS_InputField.Line1.Input.make, {
                          type_: "text",
                          placeholder: "껍질제거, 세척, 절단, 건조 등",
                          value: $$process,
                          onChange: (function (e) {
                              var value = e.target.value;
                              return setProcess(function (param) {
                                          return value;
                                        });
                            }),
                          maxLength: 10000
                        })), React.createElement(DS_InputField.Line1.Root.make, {
                      children: null,
                      className: "mt-4"
                    }, React.createElement("div", {
                          className: "mb-2 text-sm"
                        }, "기타"), React.createElement(DS_InputField.Line1.Input.make, {
                          type_: "text",
                          placeholder: "선별수준, 원산지, 평균 당도 등",
                          value: requirement,
                          onChange: (function (e) {
                              var value = e.target.value;
                              return setRequirement(function (param) {
                                          return value;
                                        });
                            }),
                          maxLength: 10000
                        }))), React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$FloatingButton, {
                  handleClickButton: handleClickButton,
                  disabled: match$5[1]
                }));
}

var Requirement = {
  make: Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Requirement
};

function Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Shipping(Props) {
  var currentDemand = Props.currentDemand;
  var match = use(undefined, undefined, undefined, undefined, undefined);
  var tradematchDeliveryPolicy = match.tradematchDeliveryPolicy;
  var match$1 = Curry._5(RfqShipping_Buyer.Query.RfqTerms.use, undefined, undefined, undefined, undefined, undefined);
  var match$2 = use$2(undefined);
  var updateMutate = match$2[0];
  var match$3 = Curry._1(RfqShipping_Buyer.Mutation.UpdateTermAgreement.use, undefined);
  var updateTermAgreement = match$3[0];
  var match$4 = CustomHooks.Tradematch.useNavigateStep(undefined);
  var navigateToNextStep = match$4.navigateToNextStep;
  var match$5 = ReactToastNotifications.useToasts();
  var addToast = match$5.addToast;
  var isTermAgree = Belt_Array.keep(Belt_Array.map(match$1.terms.edges, (function (x) {
              return x.node.agreement;
            })), (function (x) {
          return x === "rfq";
        })).length !== 0;
  var match$6 = React.useState(function () {
        return isTermAgree;
      });
  var setIsAgreedPrivacyPolicy = match$6[1];
  var isAgreedPrivacyPolicy = match$6[0];
  var match$7 = React.useState(function () {
        
      });
  var selectedDeliveryDate = match$7[0];
  var minDateString = tradematchDeliveryPolicy !== undefined ? tradematchDeliveryPolicy.acceptableDeliveryDate : Format(AddDays(new Date(), 7), "yyyy-MM-dd");
  var minDate = new Date(minDateString);
  var maxDate = AddDays(minDate, 30);
  var deliveryAddressDetailInput = React.useRef(null);
  var match$8 = React.useState(function () {
        return false;
      });
  var setIsAddressDrawerShow = match$8[1];
  var match$9 = React.useState(function () {
        return "";
      });
  var setDeliveryRegion = match$9[1];
  var deliveryRegion = match$9[0];
  var match$10 = React.useState(function () {
        return "";
      });
  var setDeliveryAddress = match$10[1];
  var deliveryAddress = match$10[0];
  var match$11 = React.useState(function () {
        return "";
      });
  var setDeliveryAddressDetail = match$11[1];
  var deliveryAddressDetail = match$11[0];
  var match$12 = React.useState(function () {
        return "";
      });
  var setDeliveryAddressZipcode = match$12[1];
  var deliveryAddressZipcode = match$12[0];
  React.useEffect((function () {
          setDeliveryAddressDetail(function (param) {
                return "";
              });
          Belt_Option.forEach(Caml_option.nullable_to_opt(deliveryAddressDetailInput.current), (function (input) {
                  input.focus();
                  
                }));
          
        }), [deliveryAddress]);
  var toggleDrawer = function (param) {
    return setIsAddressDrawerShow(function (prev) {
                return !prev;
              });
  };
  var onCompleteAddressDrawer = function (data) {
    var zonecode = data.zonecode;
    var deliveryAddress = data.addressType === "R" ? data.address : data.autoRoadAddress;
    var deliveryRegion = (data.sido + " " + data.sigungu + " " + data.bname).replace(/[ ]{2,}/, " ").trim();
    setDeliveryRegion(function (param) {
          return deliveryRegion;
        });
    setDeliveryAddress(function (param) {
          return deliveryAddress;
        });
    setDeliveryAddressZipcode(function (param) {
          return zonecode;
        });
    return setIsAddressDrawerShow(function (prev) {
                return !prev;
              });
  };
  var updateDemand = function (param) {
    if (currentDemand === undefined) {
      return ;
    }
    var deliveryDate = Belt_Option.mapWithDefault(selectedDeliveryDate, undefined, (function (date) {
            return date.toISOString();
          }));
    var partial_arg = Caml_option.some(deliveryAddressZipcode);
    var partial_arg$1 = Caml_option.some(deliveryRegion);
    var partial_arg$2 = Caml_option.some(deliveryDate);
    var partial_arg$3 = Caml_option.some(deliveryAddressDetail.trim());
    var partial_arg$4 = Caml_option.some(deliveryAddress);
    var partial_arg$5 = currentDemand.id;
    var func = function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12) {
      return getUpdateMutateVariables(partial_arg$5, partial_arg$4, partial_arg$3, partial_arg$2, partial_arg$1, partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12);
    };
    Curry.app(updateMutate, [
          (function (err) {
              return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                          appearance: "error"
                        });
            }),
          (function (param, param$1) {
              var variant = param.partialUpdateTradematchDemand.NAME;
              if (variant === "UnselectedUnionMember" || variant === "Error") {
                addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                      appearance: "error"
                    });
              } else {
                Curry._1(navigateToNextStep, undefined);
              }
              
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          Curry.app(func, [
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                "REQUESTED",
                undefined,
                undefined,
                undefined
              ]),
          undefined,
          undefined
        ]);
    
  };
  var trackData = function (param) {
    var demandId = currentDemand !== undefined ? currentDemand.id : "";
    return DataGtm.push({
                event: "click_intention_address",
                tradematch_demand_id: demandId
              });
  };
  var handleClickButton = function (param) {
    trackData(undefined);
    if (isTermAgree) {
      return updateDemand(undefined);
    } else {
      Curry.app(updateTermAgreement, [
            (function (param) {
                return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                            appearance: "error"
                          });
              }),
            (function (param, param$1) {
                var variant = param.createTerm.NAME;
                if (variant === "UnselectedUnionMember" || variant === "Error") {
                  return addToast(DS_Toast.getToastComponent("요청 중 요류가 발생했습니다. 잠시 후 다시 시도해주세요.", "error"), {
                              appearance: "error"
                            });
                } else {
                  return updateDemand(undefined);
                }
              }),
            undefined,
            undefined,
            undefined,
            undefined,
            {
              agreement: "rfq"
            },
            undefined,
            undefined
          ]);
      return ;
    }
  };
  var match$13 = deliveryRegion !== "";
  var match$14 = deliveryAddress !== "";
  var match$15 = deliveryAddressZipcode !== "";
  var isValidItems = selectedDeliveryDate !== undefined && match$13 && match$14 && match$15 && isAgreedPrivacyPolicy ? true : false;
  return React.createElement(React.Fragment, undefined, React.createElement("div", undefined, React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$Title, {
                      text: "마지막으로\n배송정보를 알려주세요"
                    }), React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$CalendarListitem, {
                      leftText: "배송 희망일",
                      currentDate: selectedDeliveryDate,
                      handleChangeDate: match$7[1],
                      minDate: minDate,
                      maxDate: maxDate
                    }), React.createElement("div", {
                      className: "mx-5 mb-[30px]"
                    }, React.createElement("div", {
                          className: "my-4"
                        }, "배송지"), React.createElement("div", {
                          className: "flex mb-[13px]"
                        }, React.createElement("input", {
                              className: Cx.cx([
                                    "w-full px-[14px] py-[13px] rounded-[10px] border-border-default-L1 border-[1px]",
                                    "disabled:bg-disabled-L3"
                                  ]),
                              disabled: true,
                              placeholder: "우편번호",
                              value: deliveryAddressZipcode
                            }), React.createElement("button", {
                              className: "ml-2 min-w-[92px] bg-blue-gray-700 px-[14px] py-[13px] rounded-[10px] text-inverted font-bold",
                              onClick: toggleDrawer
                            }, "주소 검색")), React.createElement("div", {
                          className: "mb-[13px]"
                        }, React.createElement("input", {
                              className: Cx.cx([
                                    "w-full px-[14px] py-[13px] rounded-[10px] border-border-default-L1 border-[1px]",
                                    "disabled:bg-disabled-L3"
                                  ]),
                              disabled: true,
                              placeholder: "주소",
                              value: deliveryAddress
                            })), React.createElement("div", undefined, React.createElement("input", {
                              ref: deliveryAddressDetailInput,
                              className: Cx.cx([
                                    "w-full px-[14px] py-[13px] rounded-[10px] border-border-default-L1 border-[1px]",
                                    "disabled:bg-disabled-L3 disabled:text-inverted disabled:text-opacity-50"
                                  ]),
                              disabled: deliveryAddress.length === 0,
                              placeholder: "상세주소를 입력해주세요.",
                              value: deliveryAddressDetail,
                              onChange: (function (e) {
                                  var value = e.target.value;
                                  return setDeliveryAddressDetail(function (param) {
                                              return value;
                                            });
                                })
                            }))), isTermAgree ? null : React.createElement(React.Fragment, undefined, React.createElement("div", {
                            className: "h-3 bg-border-default-L2"
                          }), React.createElement("div", {
                            className: "my-7 mx-5"
                          }, React.createElement("button", {
                                onClick: (function (param) {
                                    return setIsAgreedPrivacyPolicy(function (prev) {
                                                return !prev;
                                              });
                                  })
                              }, React.createElement("div", undefined, React.createElement("div", {
                                        className: "flex items-center space-x-2 mb-3"
                                      }, isAgreedPrivacyPolicy ? React.createElement(DS_Icon.Common.CheckedLarge1.make, {
                                              height: "24",
                                              width: "24",
                                              fill: "#12B564"
                                            }) : React.createElement(DS_Icon.Common.UncheckedLarge1.make, {
                                              height: "24",
                                              width: "24"
                                            }), React.createElement("span", {
                                            className: "font-bold leading-7 tracking-tight text-enabled-L1"
                                          }, "개인정보 제공에 동의해주세요")), React.createElement("div", {
                                        className: "pl-8 text-left"
                                      }, React.createElement("p", {
                                            className: "text-[13px] text-enabled-L2 leading-5 tracking-tight"
                                          }, React.createElement("div", undefined, "(주)그린랩스는 다음과 같은 목적으로 개인정보를 수집합니다."), React.createElement("div", undefined, "1. 개인정보 수집 항목 : 주소"), React.createElement("div", undefined, "2. 개인정보 수집 목적 : 견적 매칭 서비스 및 구매상품 배송"), React.createElement("div", undefined, "3. 개인정보의 보유 및 이용 기간 : ", React.createElement("span", {
                                                    className: "font-bold"
                                                  }, "회원탈퇴 시 즉시 파기"), " 이용자는 개인정보 수집 및 이용 동의를 거부할 권리가 있습니다. 다만, 이에 동의하지 않을 경우 신선매칭 서비스 이용이 어려울 수 있습니다.")))))))), React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Common$FloatingButton, {
                  handleClickButton: handleClickButton,
                  disabled: !isValidItems || match$2[1]
                }), React.createElement(Tradematch_Ask_To_Buy_Apply_Steps_Buyer$AddressDrawer, {
                  onComplete: onCompleteAddressDrawer,
                  closeDrawer: toggleDrawer,
                  isShow: match$8[0]
                }));
}

var Shipping = {
  make: Tradematch_Ask_To_Buy_Apply_Steps_Buyer$Shipping
};

export {
  Query ,
  Mutation ,
  convertNumberInputValue ,
  stringToNumber ,
  getUpdateMutateVariables ,
  Common ,
  CalendarListitem ,
  SearchAddress ,
  AddressDrawer ,
  Grade ,
  Count ,
  Price ,
  Cycle ,
  Requirement ,
  Shipping ,
  
}
/* react Not a pure module */
