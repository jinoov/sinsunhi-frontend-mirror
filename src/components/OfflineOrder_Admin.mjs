// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as React from "react";
import * as Locale from "../utils/Locale.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Checkbox from "./common/Checkbox.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as ReactHookForm from "../bindings/ReactHookForm/ReactHookForm.mjs";
import * as ReactHookForm$1 from "react-hook-form";
import IsAfter from "date-fns/isAfter";
import IsBefore from "date-fns/isBefore";

function formatDate(d, format) {
  return Locale.DateTime.formatFromUTC(new Date(d), format);
}

function cutOffFloatDigits(str, digit) {
  var d = str.search(/\./);
  return (
            d !== -1 ? str.substring(0, (d + digit | 0) + 1 | 0) : str
          ).replace(/,/g, "");
}

function mode_encode(mode) {
  return mode === 1;
}

function boolToMode(b) {
  if (b) {
    return /* Edit */1;
  } else {
    return /* Display */0;
  }
}

function OfflineOrder_Admin$Item$Table(Props) {
  var order = Props.order;
  var match = React.useState(function () {
        return /* Display */0;
      });
  var setMode = match[1];
  var mode = match[0];
  var match$1 = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var setValue = match$1.setValue;
  var checked = ReactHookForm$1.useWatch({
        name: String(order.id) + ".checkbox"
      });
  var watchQuantitiesAndPrice = ReactHookForm$1.useWatch({
        name: [
          String(order.id) + ".order-quantity",
          String(order.id) + ".order-quantity-complete",
          String(order.id) + ".buyer-sell-price"
        ]
      });
  var watchNewReleaseDueDate = ReactHookForm$1.useWatch({
        name: String(order.id) + ".release-due-date"
      });
  var watchNewOrderQuantity = ReactHookForm$1.useWatch({
        name: String(order.id) + ".order-quantity"
      });
  var partial_arg = [
    order.orderQuantity,
    Belt_Option.getWithDefault(order.confirmedOrderQuantity, 0),
    order.price
  ];
  var partial_arg$1 = Belt_Array.map(Belt_Option.getWithDefault(watchQuantitiesAndPrice, []), (function (i) {
          return Belt_Option.flatMap(i, Belt_Float.fromString);
        }));
  var zip = function (param) {
    return Belt_Array.zipBy(partial_arg$1, partial_arg, param);
  };
  var quantitiesAndPrice = Curry._1(zip, Belt_Option.getWithDefault);
  var match$2;
  if (quantitiesAndPrice.length !== 3) {
    match$2 = [
      0,
      0
    ];
  } else {
    var oQ = quantitiesAndPrice[0];
    var cQ = quantitiesAndPrice[1];
    var price = quantitiesAndPrice[2];
    match$2 = [
      oQ * price,
      cQ * price
    ];
  }
  var newReleaseDueDate = Belt_Option.getWithDefault(watchNewReleaseDueDate, order.releaseDueDate);
  var newOrderQuantity = Belt_Option.getWithDefault(Belt_Option.flatMap(watchNewOrderQuantity, Belt_Float.fromString), order.orderQuantity);
  var handleInputFloatChange = function (fn, e) {
    var value = e.target.value;
    setValue(String(order.id) + ".checkbox", true);
    return Curry._1(fn, Curry._1(ReactHookForm.Controller.OnChangeArg.value, cutOffFloatDigits(value, 2)));
  };
  var handleInputDateChange = function (fn, e) {
    setValue(String(order.id) + ".checkbox", true);
    return Curry._1(fn, Curry._1(ReactHookForm.Controller.OnChangeArg.$$event, e));
  };
  var handleInputClick = function (param) {
    if (mode !== 0) {
      return ;
    } else {
      return setMode(function (param) {
                  return /* Pending */2;
                });
    }
  };
  var isShowInput = mode !== /* Display */0;
  var localeFloat = function (str, digits) {
    var number = Belt_Option.mapWithDefault(Belt_Float.fromString(str), "0", (function (x) {
            return Locale.Float.show(undefined, x, digits);
          }));
    var point = /\.$/.test(str) ? "." : "";
    return number + point;
  };
  var validateOnlyEditMode = mode === /* Pending */2;
  React.useEffect((function () {
          var mode = Caml_obj.caml_equal(checked, true) ? /* Edit */1 : /* Display */0;
          setMode(function (param) {
                return mode;
              });
          
        }), [checked]);
  var editStyle = mode === /* Edit */1 ? "bg-primary-light" : "";
  var unit = Belt_Option.getWithDefault(Js_json.decodeString(CustomHooks.Products.weightUnit_encode(order.weightUnit)), "g");
  return React.createElement(React.Fragment, undefined, React.createElement("li", {
                  className: Cx.cx([
                        "grid grid-cols-12-gl-admin-offline text-text-L1",
                        editStyle
                      ])
                }, React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement(ReactHookForm$1.Controller, {
                          name: String(order.id) + ".checkbox",
                          render: (function (param) {
                              var match = param.field;
                              var onChange = match.onChange;
                              var name = match.name;
                              return React.createElement(Checkbox.make, {
                                          id: name,
                                          name: name,
                                          checked: Belt_Option.getWithDefault(Js_json.decodeBoolean(match.value), false),
                                          onChange: (function (e) {
                                              return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.$$event, e));
                                            })
                                        });
                            }),
                          defaultValue: false,
                          shouldUnregister: true
                        })), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("div", undefined, order.orderProductId), React.createElement("div", {
                          className: "text-text-L3"
                        }, order.orderNo)), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("div", {
                          className: "w-full relative"
                        }, React.createElement("div", {
                              className: "w-full border border-border-default-L1 rounded-lg py-2 px-3 text-sm h-8 flex items-center",
                              onClick: handleInputClick
                            }, formatDate(order.releaseDueDate, "yyyy. MM. dd. ")), isShowInput ? React.createElement(ReactHookForm$1.Controller, {
                                name: String(order.id) + ".release-due-date",
                                render: (function (param) {
                                    var match = param.field;
                                    var onChange = match.onChange;
                                    return React.createElement("span", {
                                                className: "w-full absolute top-0 text-sm"
                                              }, React.createElement(Input.InputWithRef.make, {
                                                    type_: "date",
                                                    name: match.name,
                                                    className: "h-8",
                                                    value: Belt_Option.getWithDefault(Js_json.decodeString(match.value), ""),
                                                    onChange: (function (param) {
                                                        return handleInputDateChange(onChange, param);
                                                      }),
                                                    error: Belt_Option.map(param.fieldState.error, (function (err) {
                                                            var match = err.type;
                                                            switch (match) {
                                                              case "required" :
                                                                  return "값을 입력해주세요.";
                                                              case "validDate" :
                                                                  return "발주일 이전으로 수정이 불가능합니다.";
                                                              default:
                                                                return "수정가능 조건을 확인하세요.";
                                                            }
                                                          })),
                                                    min: "2021-01-01",
                                                    inputRef: match.ref
                                                  }));
                                  }),
                                defaultValue: formatDate(order.releaseDueDate, "yyyy-MM-dd"),
                                rules: ReactHookForm.Rules.make(undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Js_dict.fromArray([
                                              [
                                                "required",
                                                ReactHookForm.Validation.sync(function (value) {
                                                      if (validateOnlyEditMode) {
                                                        return true;
                                                      } else {
                                                        return value !== "";
                                                      }
                                                    })
                                              ],
                                              [
                                                "validDate",
                                                ReactHookForm.Validation.sync(function (value) {
                                                      if (validateOnlyEditMode) {
                                                        return true;
                                                      } else {
                                                        return IsAfter(new Date(value), new Date(order.createdAt));
                                                      }
                                                    })
                                              ]
                                            ])), undefined, undefined, undefined),
                                shouldUnregister: true
                              }) : null), React.createElement("div", {
                          className: "w-full relative"
                        }, React.createElement("div", {
                              className: "w-full border mt-1 border-border-default-L1 rounded-lg py-2 px-3 text-sm h-8 flex items-center",
                              onClick: handleInputClick
                            }, Belt_Option.mapWithDefault(order.releaseDate, "연도. 월. 일. ", (function (d) {
                                    return formatDate(d, "yyyy. MM. dd. ");
                                  }))), isShowInput ? React.createElement(ReactHookForm$1.Controller, {
                                name: String(order.id) + ".release-date",
                                render: (function (param) {
                                    var match = param.field;
                                    var onChange = match.onChange;
                                    return React.createElement("span", {
                                                className: "w-full absolute top-1 text-sm"
                                              }, React.createElement(Input.InputWithRef.make, {
                                                    type_: "date",
                                                    name: match.name,
                                                    className: "h-8",
                                                    value: Belt_Option.getWithDefault(Js_json.decodeString(match.value), ""),
                                                    onChange: (function (param) {
                                                        return handleInputDateChange(onChange, param);
                                                      }),
                                                    error: Belt_Option.map(param.fieldState.error, (function (err) {
                                                            var match = err.type;
                                                            switch (match) {
                                                              case "isNotBeforeDueDate" :
                                                                  return "출고예정일보다 이전으로 수정이 불가능합니다. ";
                                                              case "required" :
                                                                  return "값을 입력해주세요.";
                                                              case "validDate" :
                                                                  return "발주일 이전으로 수정이 불가능합니다.";
                                                              default:
                                                                return "수정가능 조건을 확인하세요.";
                                                            }
                                                          })),
                                                    min: "2021-01-01",
                                                    inputRef: match.ref
                                                  }));
                                  }),
                                defaultValue: Belt_Option.getWithDefault(Belt_Option.map(order.releaseDate, (function (d) {
                                            return formatDate(d, "yyyy-MM-dd");
                                          })), ""),
                                rules: ReactHookForm.Rules.make(undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Js_dict.fromArray([
                                              [
                                                "required",
                                                ReactHookForm.Validation.sync(function (value) {
                                                      if (validateOnlyEditMode) {
                                                        return true;
                                                      } else {
                                                        return value !== "";
                                                      }
                                                    })
                                              ],
                                              [
                                                "validDate",
                                                ReactHookForm.Validation.sync(function (value) {
                                                      if (validateOnlyEditMode) {
                                                        return true;
                                                      } else {
                                                        return IsAfter(new Date(value), new Date(order.createdAt));
                                                      }
                                                    })
                                              ],
                                              [
                                                "isNotBeforeDueDate",
                                                ReactHookForm.Validation.sync(function (value) {
                                                      if (validateOnlyEditMode) {
                                                        return true;
                                                      } else {
                                                        return !IsBefore(new Date(value), new Date(newReleaseDueDate));
                                                      }
                                                    })
                                              ]
                                            ])), undefined, undefined, undefined),
                                shouldUnregister: true
                              }) : null)), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("div", undefined, order.buyerName), React.createElement("div", {
                          className: "text-text-L3"
                        }, String(order.buyerId))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("div", undefined, order.producerName), React.createElement("div", {
                          className: "text-text-L3"
                        }, String(order.producerId))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("div", undefined, order.crop), React.createElement("div", {
                          className: "text-text-L3"
                        }, order.cultivar)), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, order.sku), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 ml-2"
                    }, React.createElement("div", undefined, Belt_Option.mapWithDefault(order.weight, "", (function (w) {
                                return String(w) + unit;
                              }))), React.createElement("div", undefined, Belt_Option.mapWithDefault(order.packageType, "", (function (p) {
                                return "/" + p;
                              })))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 ml-3"
                    }, Belt_Option.getWithDefault(order.grade, "")), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 ml-3"
                    }, React.createElement("div", {
                          className: "w-full relative"
                        }, React.createElement("div", {
                              className: "w-full border border-border-default-L1 rounded-lg py-2 px-3 text-sm h-8 flex items-center",
                              onClick: handleInputClick
                            }, Locale.Float.show(undefined, order.orderQuantity, 2)), isShowInput ? React.createElement(ReactHookForm$1.Controller, {
                                name: String(order.id) + ".order-quantity",
                                render: (function (param) {
                                    var match = param.field;
                                    var onChange = match.onChange;
                                    var value$p = Belt_Option.getWithDefault(Js_json.decodeString(match.value), "");
                                    return React.createElement("span", {
                                                className: "w-full absolute top-0 text-sm mb-2"
                                              }, React.createElement(Input.InputWithRef.make, {
                                                    type_: "text",
                                                    name: match.name,
                                                    className: "h-8",
                                                    value: localeFloat(value$p, 2),
                                                    onChange: (function (param) {
                                                        return handleInputFloatChange(onChange, param);
                                                      }),
                                                    error: Belt_Option.map(param.fieldState.error, (function (err) {
                                                            var match = err.type;
                                                            if (match === "required") {
                                                              return "값을 입력해주세요.";
                                                            } else {
                                                              return "수정가능 조건을 확인하세요.";
                                                            }
                                                          })),
                                                    inputRef: match.ref
                                                  }));
                                  }),
                                defaultValue: String(order.orderQuantity),
                                rules: ReactHookForm.Rules.make(undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Js_dict.fromArray([[
                                                "required",
                                                ReactHookForm.Validation.sync(function (value) {
                                                      if (validateOnlyEditMode) {
                                                        return true;
                                                      } else {
                                                        return value !== "";
                                                      }
                                                    })
                                              ]])), undefined, undefined, undefined),
                                shouldUnregister: true
                              }) : null), React.createElement("div", {
                          className: "mt-1 w-full bg-disabled-L3 border border-border-default-L1 rounded-lg py-2 px-3 text-sm h-8 flex items-center"
                        }, Locale.Float.show(undefined, match$2[0], 2))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("div", {
                          className: "w-full relative"
                        }, React.createElement("div", {
                              className: "w-full border border-border-default-L1 rounded-lg py-2 px-3 text-sm h-8 flex items-center",
                              onClick: handleInputClick
                            }, Locale.Float.show(undefined, Belt_Option.getWithDefault(order.confirmedOrderQuantity, 0), 2)), isShowInput ? React.createElement(ReactHookForm$1.Controller, {
                                name: String(order.id) + ".order-quantity-complete",
                                render: (function (param) {
                                    var match = param.field;
                                    var onChange = match.onChange;
                                    var value$p = Belt_Option.getWithDefault(Js_json.decodeString(match.value), "");
                                    return React.createElement("span", {
                                                className: "w-full absolute top-0 text-sm"
                                              }, React.createElement(Input.InputWithRef.make, {
                                                    type_: "text",
                                                    name: match.name,
                                                    className: "h-8",
                                                    value: localeFloat(value$p, 2),
                                                    onChange: (function (param) {
                                                        return handleInputFloatChange(onChange, param);
                                                      }),
                                                    error: Belt_Option.map(param.fieldState.error, (function (err) {
                                                            var match = err.type;
                                                            switch (match) {
                                                              case "isNotOverOrderQuantity" :
                                                                  return "주문수량을 초과할 수 없습니다.";
                                                              case "required" :
                                                                  return "값을 입력해주세요.";
                                                              default:
                                                                return "수정가능 조건을 확인하세요.";
                                                            }
                                                          })),
                                                    inputRef: match.ref
                                                  }));
                                  }),
                                defaultValue: String(Belt_Option.getWithDefault(order.confirmedOrderQuantity, 0)),
                                rules: ReactHookForm.Rules.make(undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Js_dict.fromArray([
                                              [
                                                "required",
                                                ReactHookForm.Validation.sync(function (value) {
                                                      if (validateOnlyEditMode) {
                                                        return true;
                                                      } else {
                                                        return value !== "";
                                                      }
                                                    })
                                              ],
                                              [
                                                "isNotOverOrderQuantity",
                                                ReactHookForm.Validation.sync(function (value) {
                                                      if (validateOnlyEditMode) {
                                                        return true;
                                                      } else {
                                                        return Belt_Option.getWithDefault(Belt_Option.map(Belt_Float.fromString(value), (function (value$p) {
                                                                          return value$p <= newOrderQuantity;
                                                                        })), true);
                                                      }
                                                    })
                                              ]
                                            ])), undefined, undefined, undefined),
                                shouldUnregister: true
                              }) : null), React.createElement("div", {
                          className: "mt-1 w-full bg-disabled-L3 border border-border-default-L1 rounded-lg py-2 px-3 text-sm h-8 flex items-center"
                        }, Locale.Float.show(undefined, match$2[1], 2))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("div", {
                          className: "w-full relative"
                        }, React.createElement("div", {
                              className: "w-full border border-border-default-L1 rounded-lg py-2 px-3 text-sm h-8 flex items-center",
                              onClick: handleInputClick
                            }, Locale.Float.show(undefined, order.cost, 0)), isShowInput ? React.createElement(ReactHookForm$1.Controller, {
                                name: String(order.id) + ".producer-product-cost",
                                render: (function (param) {
                                    var match = param.field;
                                    var onChange = match.onChange;
                                    return React.createElement("span", {
                                                className: "w-full absolute top-0 text-sm"
                                              }, React.createElement(Input.InputWithRef.make, {
                                                    type_: "text",
                                                    name: match.name,
                                                    className: "h-8",
                                                    value: Belt_Option.mapWithDefault(Js_json.decodeString(match.value), "", (function (s) {
                                                            return localeFloat(s, 0);
                                                          })),
                                                    onChange: (function (param) {
                                                        return handleInputFloatChange(onChange, param);
                                                      }),
                                                    error: Belt_Option.map(param.fieldState.error, (function (err) {
                                                            var match = err.type;
                                                            if (match === "required") {
                                                              return "값을 입력해주세요.";
                                                            } else {
                                                              return "수정가능 조건을 확인하세요.";
                                                            }
                                                          })),
                                                    inputRef: match.ref
                                                  }));
                                  }),
                                defaultValue: String(order.cost),
                                rules: ReactHookForm.Rules.make(undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Js_dict.fromArray([[
                                                "required",
                                                ReactHookForm.Validation.sync(function (value) {
                                                      if (validateOnlyEditMode) {
                                                        return true;
                                                      } else {
                                                        return value !== "";
                                                      }
                                                    })
                                              ]])), undefined, undefined, undefined),
                                shouldUnregister: true
                              }) : null), React.createElement("div", {
                          className: "w-full relative"
                        }, React.createElement("div", {
                              className: "w-full mt-1 border border-border-default-L1 rounded-lg py-2 px-3 text-sm h-8 flex items-center",
                              onClick: handleInputClick
                            }, Locale.Float.show(undefined, order.price, 0)), isShowInput ? React.createElement(ReactHookForm$1.Controller, {
                                name: String(order.id) + ".buyer-sell-price",
                                render: (function (param) {
                                    var match = param.field;
                                    var onChange = match.onChange;
                                    return React.createElement("span", {
                                                className: "w-full absolute top-1 text-sm"
                                              }, React.createElement(Input.InputWithRef.make, {
                                                    type_: "text",
                                                    name: match.name,
                                                    className: "h-8",
                                                    value: Belt_Option.mapWithDefault(Js_json.decodeString(match.value), "", (function (s) {
                                                            return localeFloat(s, 0);
                                                          })),
                                                    onChange: (function (param) {
                                                        return handleInputFloatChange(onChange, param);
                                                      }),
                                                    error: Belt_Option.map(param.fieldState.error, (function (err) {
                                                            var match = err.type;
                                                            if (match === "required") {
                                                              return "값을 입력해주세요.";
                                                            } else {
                                                              return "수정가능 조건을 확인하세요.";
                                                            }
                                                          })),
                                                    inputRef: match.ref
                                                  }));
                                  }),
                                defaultValue: String(order.price),
                                rules: ReactHookForm.Rules.make(undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Js_dict.fromArray([[
                                                "required",
                                                ReactHookForm.Validation.sync(function (value) {
                                                      if (validateOnlyEditMode) {
                                                        return true;
                                                      } else {
                                                        return value !== "";
                                                      }
                                                    })
                                              ]])), undefined, undefined, undefined),
                                shouldUnregister: true
                              }) : null))));
}

var Table = {
  make: OfflineOrder_Admin$Item$Table
};

var Item = {
  mode_encode: mode_encode,
  boolToMode: boolToMode,
  Table: Table
};

function OfflineOrder_Admin(Props) {
  var order = Props.order;
  return React.createElement(OfflineOrder_Admin$Item$Table, {
              order: order
            });
}

var floatFixedNum = 2;

var make = OfflineOrder_Admin;

export {
  floatFixedNum ,
  formatDate ,
  cutOffFloatDigits ,
  Item ,
  make ,
  
}
/* Input Not a pure module */
