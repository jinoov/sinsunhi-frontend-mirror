// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as RelayRuntime from "relay-runtime";
import * as Cart_Buyer_Form from "./Cart_Buyer_Form.mjs";
import * as Cart_Buyer_Util from "./Cart_Buyer_Util.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as CreateTempOrderButtonBuyerMutation_graphql from "../__generated__/CreateTempOrderButtonBuyerMutation_graphql.mjs";

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: CreateTempOrderButtonBuyerMutation_graphql.node,
              variables: CreateTempOrderButtonBuyerMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, CreateTempOrderButtonBuyerMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? CreateTempOrderButtonBuyerMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    Curry._2(updater, store, CreateTempOrderButtonBuyerMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use(param) {
  var match = ReactRelay.useMutation(CreateTempOrderButtonBuyerMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      Curry._2(param$1, CreateTempOrderButtonBuyerMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? CreateTempOrderButtonBuyerMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      Curry._2(param$5, store, CreateTempOrderButtonBuyerMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: CreateTempOrderButtonBuyerMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Mutation = {
  Operation: undefined,
  Types: undefined,
  commitMutation: commitMutation,
  use: use
};

function Create_Temp_Order_Button_Buyer(Props) {
  var classNameOpt = Props.className;
  var buttonTextOpt = Props.buttonText;
  var cartItems = Props.cartItems;
  var cartIds = Props.cartIds;
  var className = classNameOpt !== undefined ? classNameOpt : "w-20 h-10 border border-primary text-primary rounded-[10px]";
  var buttonText = buttonTextOpt !== undefined ? buttonTextOpt : "바로구매";
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var router = Router.useRouter();
  var match$1 = use(undefined);
  var mutate = match$1[0];
  var match$2 = React.useState(function () {
        return false;
      });
  var setShowNoSelect = match$2[1];
  var handleError = function (message, param) {
    addToast(React.createElement("div", {
              className: "flex items-center"
            }, React.createElement(IconError.make, {
                  width: "24",
                  height: "24",
                  className: "mr-2"
                }), "주문에 실패하였습니다. " + Belt_Option.getWithDefault(message, "") + ""), {
          appearance: "error"
        });
  };
  return React.createElement(React.Fragment, undefined, React.createElement(Cart_Buyer_Util.SubmitDialog.make, {
                  open: match$2[0],
                  setOpen: setShowNoSelect
                }), React.createElement("button", {
                  className: className,
                  onClick: (function (param) {
                      return ReactEvents.interceptingHandler((function (param) {
                                    if (cartIds.length !== 0) {
                                      Curry.app(mutate, [
                                            (function (err) {
                                                handleError(err.message, undefined);
                                              }),
                                            (function (param, param$1) {
                                                var createTempWosOrder = param.createTempWosOrder;
                                                if (createTempWosOrder !== undefined) {
                                                  if (typeof createTempWosOrder !== "object") {
                                                    return handleError(undefined, undefined);
                                                  }
                                                  var variant = createTempWosOrder.NAME;
                                                  if (variant === "CartError") {
                                                    return handleError(Belt_Option.getWithDefault(createTempWosOrder.VAL.message, ""), undefined);
                                                  }
                                                  if (variant !== "TempWosOrder") {
                                                    if (variant === "Error") {
                                                      return handleError(Belt_Option.getWithDefault(createTempWosOrder.VAL.message, ""), undefined);
                                                    } else {
                                                      return handleError(undefined, undefined);
                                                    }
                                                  }
                                                  Cart_Buyer_Form.cartGtmPush(cartItems, cartIds, "begin_checkout");
                                                  var prim1 = "/buyer/web-order/" + String(createTempWosOrder.VAL.tempOrderId) + "";
                                                  router.push(prim1);
                                                  return ;
                                                }
                                                console.log("fail to mutation");
                                              }),
                                            undefined,
                                            undefined,
                                            undefined,
                                            undefined,
                                            {
                                              cartItems: cartIds
                                            },
                                            undefined,
                                            undefined
                                          ]);
                                      return ;
                                    } else {
                                      return setShowNoSelect(function (param) {
                                                  return true;
                                                });
                                    }
                                  }), param);
                    })
                }, buttonText));
}

var Util;

var make = Create_Temp_Order_Button_Buyer;

export {
  Mutation ,
  Util ,
  make ,
}
/* react Not a pure module */
