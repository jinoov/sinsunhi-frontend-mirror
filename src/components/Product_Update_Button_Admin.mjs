// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Swr from "swr";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as React from "react";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Js_null from "rescript/lib/es6/js_null.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as IconEdit from "./svgs/IconEdit.mjs";
import * as Textarea from "./common/Textarea.mjs";
import * as IconCheck from "./svgs/IconCheck.mjs";
import * as IconClose from "./svgs/IconClose.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as FetchHelper from "../utils/FetchHelper.mjs";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import * as IconCheckBoxChecked from "./svgs/IconCheckBoxChecked.mjs";
import * as Search_Crop_Cultivar from "./Search_Crop_Cultivar.mjs";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.mjs";
import * as IconCheckBoxUnChecked from "./svgs/IconCheckBoxUnChecked.mjs";
import * as ReactDialog from "@radix-ui/react-dialog";
import * as ReactToastNotifications from "react-toast-notifications";
import * as Select_Product_Update_Admin from "./Select_Product_Update_Admin.mjs";
import * as Query_Product_Detail_Form_Admin from "./Query_Product_Detail_Form_Admin.mjs";

function Product_Update_Button_Admin$CutOffAndMemo(Props) {
  var product = Props.product;
  var router = Router.useRouter();
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = React.useState(function () {
        return product.cutOffTime;
      });
  var setCutOffTime = match$2[1];
  var cutOffTime = match$2[0];
  var match$3 = React.useState(function () {
        return product.memo;
      });
  var setMemo = match$3[1];
  var memo = match$3[0];
  var match$4 = React.useState(function () {
        return false;
      });
  var setIsUpdateByProductId = match$4[1];
  var isUpdateByProductId = match$4[0];
  var handleOnChange = function (setFn, e) {
    var newValue = e.target.value;
    return setFn(function (param) {
                return newValue;
              });
  };
  var close = function (param) {
    var buttonClose = document.getElementById("btn-close");
    Belt_Option.forEach(Belt_Option.flatMap((buttonClose == null) ? undefined : Caml_option.some(buttonClose), Webapi__Dom__Element.asHtmlElement), (function (buttonClose$p) {
            buttonClose$p.click();
            
          }));
    
  };
  var prefill = function (isOpen) {
    if (isOpen) {
      setCutOffTime(function (param) {
            return product.cutOffTime;
          });
      setMemo(function (param) {
            return product.memo;
          });
      return setIsUpdateByProductId(function (param) {
                  return false;
                });
    }
    
  };
  var save = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  Belt_Option.map(JSON.stringify({
                            memo: memo,
                            "cut-off-time": cutOffTime,
                            "update-by-product-id": isUpdateByProductId
                          }), (function (body) {
                          return FetchHelper.requestWithRetry(FetchHelper.putWithToken, Env.restApiUrl + "/product/" + String(product.productId) + "/sku/" + product.productSku, body, 3, (function (param) {
                                        close(undefined);
                                        addToast(React.createElement("div", {
                                                  className: "flex items-center"
                                                }, React.createElement(IconCheck.make, {
                                                      height: "24",
                                                      width: "24",
                                                      fill: "#12B564",
                                                      className: "mr-2"
                                                    }), "저장되었습니다."), {
                                              appearance: "success"
                                            });
                                        return mutate(Env.restApiUrl + "/product?" + new URLSearchParams(router.query).toString(), undefined, true);
                                      }), (function (param) {
                                        return addToast(React.createElement("div", {
                                                        className: "flex items-center"
                                                      }, React.createElement(IconError.make, {
                                                            width: "24",
                                                            height: "24",
                                                            className: "mr-2"
                                                          }), "오류가 발생하였습니다."), {
                                                    appearance: "error"
                                                  });
                                      }));
                        }));
                  
                }), param);
  };
  return React.createElement(ReactDialog.Root, {
              children: null,
              onOpenChange: prefill
            }, React.createElement(ReactDialog.Overlay, {
                  className: "dialog-overlay"
                }), React.createElement(ReactDialog.Trigger, {
                  children: React.createElement(IconEdit.make, {
                        width: "20",
                        height: "20"
                      }),
                  className: "block text-left mb-1 underline focus:outline-none"
                }), React.createElement(ReactDialog.Content, {
                  children: React.createElement("div", {
                        className: "p-5"
                      }, React.createElement("section", {
                            className: "flex"
                          }, React.createElement("h2", {
                                className: "text-xl font-bold"
                              }, "출고기준시간 및 메모 작성"), React.createElement(ReactDialog.Close, {
                                children: React.createElement(IconClose.make, {
                                      height: "24",
                                      width: "24",
                                      fill: "#262626"
                                    }),
                                className: "inline-block p-1 focus:outline-none ml-auto"
                              })), React.createElement("section", {
                            className: "mt-7"
                          }, React.createElement("h3", undefined, "출고기준시간"), React.createElement("div", {
                                className: "mt-2"
                              }, React.createElement(Input.make, {
                                    type_: "text",
                                    name: "cut-off-time",
                                    placeholder: "출고기준시간 입력(ex. 09시 발주까지 당일 출고)",
                                    value: Belt_Option.getWithDefault(cutOffTime, ""),
                                    onChange: (function (param) {
                                        return handleOnChange(setCutOffTime, param);
                                      }),
                                    error: undefined
                                  }))), React.createElement("section", {
                            className: "mt-5"
                          }, React.createElement("h3", undefined, "메모"), React.createElement("div", {
                                className: "mt-2"
                              }, React.createElement(Textarea.make, {
                                    type_: "text",
                                    name: "cut-off-time",
                                    placeholder: "상품에 대한 메모를 작성할 수 있습니다 (최대 200자)\n*바이어 센터에서는 최대 2줄까지 노출되며 그 이상은 말줄임 처리되어 엑셀 다운로드시 모든 내용을 확인할 수 있습니다.",
                                    value: Belt_Option.getWithDefault(memo, ""),
                                    onChange: (function (param) {
                                        return handleOnChange(setMemo, param);
                                      }),
                                    error: undefined,
                                    rows: 4,
                                    maxLength: 200
                                  }))), React.createElement("section", {
                            className: "mt-5"
                          }, React.createElement("div", {
                                className: "flex items-center cursor-pointer w-fit",
                                onClick: (function (param) {
                                    return setIsUpdateByProductId(function (prev) {
                                                return !prev;
                                              });
                                  })
                              }, isUpdateByProductId ? React.createElement(IconCheckBoxChecked.make, {}) : React.createElement(IconCheckBoxUnChecked.make, {}), React.createElement("p", {
                                    className: "ml-2"
                                  }, "[" + product.productName + "] 상품에 동일하게 적용하기"))), React.createElement("section", {
                            className: "flex justify-center items-center mt-5"
                          }, React.createElement(ReactDialog.Close, {
                                children: React.createElement("span", {
                                      className: "btn-level6 py-3 px-5",
                                      id: "btn-close"
                                    }, "닫기"),
                                className: "flex mr-2"
                              }), React.createElement("span", {
                                className: "flex mr-2"
                              }, React.createElement("button", {
                                    className: "btn-level1 py-3 px-5",
                                    onClick: save
                                  }, "저장")))),
                  className: "dialog-content overflow-y-auto"
                }));
}

var CutOffAndMemo = {
  make: Product_Update_Button_Admin$CutOffAndMemo
};

function Product_Update_Button_Admin$Crop(Props) {
  var product = Props.product;
  var router = Router.useRouter();
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = React.useState(function () {
        return /* NotSelected */0;
      });
  var setSelectedCrop = match$2[1];
  var selectedCrop = match$2[0];
  var close = function (param) {
    var buttonClose = document.getElementById("btn-close");
    Belt_Option.forEach(Belt_Option.flatMap((buttonClose == null) ? undefined : Caml_option.some(buttonClose), Webapi__Dom__Element.asHtmlElement), (function (buttonClose$p) {
            buttonClose$p.click();
            
          }));
    
  };
  var save = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  if (selectedCrop) {
                    Belt_Option.map(Belt_Int.fromString(selectedCrop.value), (function (value$p) {
                            return Belt_Option.map(JSON.stringify({
                                            "category-id": value$p
                                          }), (function (body) {
                                          return FetchHelper.requestWithRetry(FetchHelper.putWithToken, Env.restApiUrl + "/product/" + String(product.productId) + "/category-id", body, 3, (function (param) {
                                                        close(undefined);
                                                        addToast(React.createElement("div", {
                                                                  className: "flex items-center"
                                                                }, React.createElement(IconCheck.make, {
                                                                      height: "24",
                                                                      width: "24",
                                                                      fill: "#12B564",
                                                                      className: "mr-2"
                                                                    }), "저장되었습니다."), {
                                                              appearance: "success"
                                                            });
                                                        return mutate(Env.restApiUrl + "/product?" + new URLSearchParams(router.query).toString(), undefined, true);
                                                      }), (function (param) {
                                                        return addToast(React.createElement("div", {
                                                                        className: "flex items-center"
                                                                      }, React.createElement(IconError.make, {
                                                                            width: "24",
                                                                            height: "24",
                                                                            className: "mr-2"
                                                                          }), "오류가 발생하였습니다."), {
                                                                    appearance: "error"
                                                                  });
                                                      }));
                                        }));
                          }));
                    return ;
                  } else {
                    return close(undefined);
                  }
                }), param);
  };
  var handleChangeCrop = function (selection) {
    return setSelectedCrop(function (param) {
                return selection;
              });
  };
  var init = function (isOpen) {
    if (isOpen) {
      return setSelectedCrop(function (param) {
                  return /* NotSelected */0;
                });
    }
    
  };
  return React.createElement(ReactDialog.Root, {
              children: null,
              onOpenChange: init
            }, React.createElement(ReactDialog.Overlay, {
                  className: "dialog-overlay"
                }), React.createElement(ReactDialog.Trigger, {
                  children: React.createElement(IconEdit.make, {
                        width: "20",
                        height: "20"
                      }),
                  className: "block text-left mb-1 underline focus:outline-none"
                }), React.createElement(ReactDialog.Content, {
                  children: React.createElement("div", {
                        className: "p-5"
                      }, React.createElement("section", {
                            className: "flex"
                          }, React.createElement("h2", {
                                className: "text-xl font-bold"
                              }, "상품 작물 수정"), React.createElement(ReactDialog.Close, {
                                children: React.createElement(IconClose.make, {
                                      height: "24",
                                      width: "24",
                                      fill: "#262626"
                                    }),
                                className: "inline-block p-1 focus:outline-none ml-auto"
                              })), React.createElement("section", {
                            className: "mt-7"
                          }, React.createElement("h3", undefined, "작물"), React.createElement("div", {
                                className: "mt-2"
                              }, React.createElement(Search_Crop_Cultivar.make, {
                                    type_: "All",
                                    value: selectedCrop,
                                    onChange: handleChangeCrop
                                  }))), React.createElement("section", {
                            className: "flex justify-center items-center mt-5"
                          }, React.createElement(ReactDialog.Close, {
                                children: React.createElement("span", {
                                      className: "btn-level6 py-3 px-5",
                                      id: "btn-close"
                                    }, "닫기"),
                                className: "flex mr-2"
                              }), React.createElement("span", {
                                className: "flex mr-2"
                              }, React.createElement("button", {
                                    className: "btn-level1 py-3 px-5",
                                    onClick: save
                                  }, "저장")))),
                  className: "dialog-content overflow-y-auto text-sm"
                }));
}

var Crop = {
  make: Product_Update_Button_Admin$Crop
};

function Product_Update_Button_Admin$Detail(Props) {
  var product = Props.product;
  var router = Router.useRouter();
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var close = function (param) {
    var buttonClose = document.getElementById("btn-close");
    Belt_Option.forEach(Belt_Option.flatMap((buttonClose == null) ? undefined : Caml_option.some(buttonClose), Webapi__Dom__Element.asHtmlElement), (function (buttonClose$p) {
            buttonClose$p.click();
            
          }));
    
  };
  var onSubmit = function (param) {
    var state = param.state;
    var weight = Query_Product_Detail_Form_Admin.FormFields.get(state.values, /* Weight */0);
    var weightUnit = Query_Product_Detail_Form_Admin.FormFields.get(state.values, /* WeightUnit */1);
    var unitWieghtMin = Query_Product_Detail_Form_Admin.FormFields.get(state.values, /* UnitWeightMin */2);
    var unitWeightMax = Query_Product_Detail_Form_Admin.FormFields.get(state.values, /* UnitWeightMax */3);
    var unitWeightUnit = Query_Product_Detail_Form_Admin.FormFields.get(state.values, /* UnitWeightUnit */4);
    var unitSizeMin = Query_Product_Detail_Form_Admin.FormFields.get(state.values, /* UnitSizeMin */5);
    var unitSizeMax = Query_Product_Detail_Form_Admin.FormFields.get(state.values, /* UnitSizeMax */6);
    var unitSizeUnit = Query_Product_Detail_Form_Admin.FormFields.get(state.values, /* UnitSizeUnit */7);
    var cntPerPackage = Query_Product_Detail_Form_Admin.FormFields.get(state.values, /* CntPerPackage */8);
    var grade = Query_Product_Detail_Form_Admin.FormFields.get(state.values, /* Grade */9);
    var packageType = Query_Product_Detail_Form_Admin.FormFields.get(state.values, /* PackageType */10);
    Belt_Option.map(JSON.stringify({
              weight: Js_null.fromOption(Belt_Float.fromString(weight)),
              "weight-unit": weightUnit,
              "count-per-package": cntPerPackage,
              grade: grade,
              "per-weight-max": Js_null.fromOption(Belt_Float.fromString(unitWeightMax)),
              "per-weight-min": Js_null.fromOption(Belt_Float.fromString(unitWieghtMin)),
              "per-weight-unit": unitWeightUnit,
              "per-size-max": Js_null.fromOption(Belt_Float.fromString(unitSizeMax)),
              "per-size-min": Js_null.fromOption(Belt_Float.fromString(unitSizeMin)),
              "per-size-unit": unitSizeUnit,
              "package-type": packageType
            }), (function (body) {
            return FetchHelper.requestWithRetry(FetchHelper.putWithToken, Env.restApiUrl + "/product/" + String(product.productId) + "/sku/" + product.productSku + "/detail", body, 3, (function (param) {
                          close(undefined);
                          addToast(React.createElement("div", {
                                    className: "flex items-center"
                                  }, React.createElement(IconCheck.make, {
                                        height: "24",
                                        width: "24",
                                        fill: "#12B564",
                                        className: "mr-2"
                                      }), "저장되었습니다."), {
                                appearance: "success"
                              });
                          return mutate(Env.restApiUrl + "/product?" + new URLSearchParams(router.query).toString(), undefined, true);
                        }), (function (param) {
                          return addToast(React.createElement("div", {
                                          className: "flex items-center"
                                        }, React.createElement(IconError.make, {
                                              width: "24",
                                              height: "24",
                                              className: "mr-2"
                                            }), "오류가 발생하였습니다."), {
                                      appearance: "error"
                                    });
                        }));
          }));
    
  };
  var form = Curry._7(Query_Product_Detail_Form_Admin.Form.use, Query_Product_Detail_Form_Admin.initialState, /* Schema */{
        _0: Belt_Array.concatMany([])
      }, onSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleOnSubmit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return Curry._1(form.submit, undefined);
                }), param);
  };
  var prefill = function (isOpen) {
    if (isOpen) {
      Curry._4(form.setFieldValue, /* Weight */0, Belt_Option.mapWithDefault(product.weight, "", (function (prim) {
                  return String(prim);
                })), false, undefined);
      Curry._4(form.setFieldValue, /* WeightUnit */1, Belt_Option.getWithDefault(Js_json.decodeString(CustomHooks.Products.weightUnit_encode(product.weightUnit)), "g"), false, undefined);
      Curry._4(form.setFieldValue, /* UnitWeightMin */2, Belt_Option.mapWithDefault(product.unitWeightMin, "", (function (prim) {
                  return String(prim);
                })), false, undefined);
      Curry._4(form.setFieldValue, /* UnitWeightMax */3, Belt_Option.mapWithDefault(product.unitWeightMax, "", (function (prim) {
                  return String(prim);
                })), false, undefined);
      Curry._4(form.setFieldValue, /* UnitWeightUnit */4, Belt_Option.getWithDefault(Js_json.decodeString(CustomHooks.Products.weightUnit_encode(product.unitWieghtUnit)), "g"), false, undefined);
      Curry._4(form.setFieldValue, /* UnitSizeMin */5, Belt_Option.mapWithDefault(product.unitSizeMin, "", (function (prim) {
                  return String(prim);
                })), false, undefined);
      Curry._4(form.setFieldValue, /* UnitSizeMax */6, Belt_Option.mapWithDefault(product.unitSizeMax, "", (function (prim) {
                  return String(prim);
                })), false, undefined);
      Curry._4(form.setFieldValue, /* UnitSizeUnit */7, Belt_Option.getWithDefault(Js_json.decodeString(CustomHooks.Products.sizeUnit_encode(product.unitSizeUnit)), "cm"), false, undefined);
      Curry._4(form.setFieldValue, /* CntPerPackage */8, Belt_Option.getWithDefault(product.cntPerPackage, ""), false, undefined);
      Curry._4(form.setFieldValue, /* Grade */9, Belt_Option.getWithDefault(product.grade, ""), false, undefined);
      return Curry._4(form.setFieldValue, /* PackageType */10, Belt_Option.getWithDefault(product.packageType, ""), false, undefined);
    }
    
  };
  var partial_arg = Curry._1(form.handleChange, /* Weight */0);
  var partial_arg$1 = Curry._1(form.handleChange, /* WeightUnit */1);
  var partial_arg$2 = Curry._1(form.handleChange, /* CntPerPackage */8);
  var partial_arg$3 = Curry._1(form.handleChange, /* UnitWeightMin */2);
  var partial_arg$4 = Curry._1(form.handleChange, /* UnitWeightMax */3);
  var partial_arg$5 = Curry._1(form.handleChange, /* UnitWeightUnit */4);
  var partial_arg$6 = Curry._1(form.handleChange, /* UnitSizeMin */5);
  var partial_arg$7 = Curry._1(form.handleChange, /* UnitSizeMax */6);
  var partial_arg$8 = Curry._1(form.handleChange, /* UnitSizeUnit */7);
  var partial_arg$9 = Curry._1(form.handleChange, /* Grade */9);
  var partial_arg$10 = Curry._1(form.handleChange, /* PackageType */10);
  return React.createElement(ReactDialog.Root, {
              children: null,
              onOpenChange: prefill
            }, React.createElement(ReactDialog.Overlay, {
                  className: "dialog-overlay"
                }), React.createElement(ReactDialog.Trigger, {
                  children: React.createElement(IconEdit.make, {
                        width: "20",
                        height: "20"
                      }),
                  className: "block text-left mb-1 underline focus:outline-none"
                }), React.createElement(ReactDialog.Content, {
                  children: React.createElement("div", {
                        className: "p-5"
                      }, React.createElement("section", {
                            className: "flex"
                          }, React.createElement("h2", {
                                className: "text-xl font-bold"
                              }, "단품 세부 정보 수정"), React.createElement(ReactDialog.Close, {
                                children: React.createElement(IconClose.make, {
                                      height: "24",
                                      width: "24",
                                      fill: "#262626"
                                    }),
                                className: "inline-block p-1 focus:outline-none ml-auto"
                              })), React.createElement("div", {
                            className: "flex-col mt-7"
                          }, React.createElement("form", {
                                onSubmit: handleOnSubmit
                              }, React.createElement("div", {
                                    className: "mt-7"
                                  }, React.createElement("label", {
                                        htmlFor: "weight"
                                      }, "중량"), React.createElement("div", {
                                        className: "mt-2 flex items-center"
                                      }, React.createElement("span", {
                                            className: "w-full"
                                          }, React.createElement(Input.make, {
                                                type_: "number",
                                                name: "weight",
                                                placeholder: "중량을 입력해주세요",
                                                value: Query_Product_Detail_Form_Admin.FormFields.get(form.values, /* Weight */0),
                                                onChange: (function (param) {
                                                    return ReForm__Helpers.handleChange(partial_arg, param);
                                                  }),
                                                error: Curry._1(form.getFieldError, /* Field */{
                                                      _0: /* Weight */0
                                                    }),
                                                step: 0.1
                                              })), React.createElement("span", {
                                            className: "ml-2"
                                          }, React.createElement(Select_Product_Update_Admin.Weight.make, {
                                                unit: Belt_Option.getWithDefault(Select_Product_Update_Admin.decodeWeightUnit(Query_Product_Detail_Form_Admin.FormFields.get(form.values, /* WeightUnit */1)), /* Kg */1),
                                                onChange: (function (param) {
                                                    return ReForm__Helpers.handleChange(partial_arg$1, param);
                                                  })
                                              })))), React.createElement("div", {
                                    className: "mt-7"
                                  }, React.createElement("label", {
                                        htmlFor: "box-unit-num"
                                      }, "1박스당입수"), React.createElement("div", {
                                        className: "mt-2"
                                      }, React.createElement(Input.make, {
                                            type_: "text",
                                            name: "box-unit-num",
                                            placeholder: "1박스 당 입수를 입력해주세요  (ex. 4,10)",
                                            value: Query_Product_Detail_Form_Admin.FormFields.get(form.values, /* CntPerPackage */8),
                                            onChange: (function (param) {
                                                return ReForm__Helpers.handleChange(partial_arg$2, param);
                                              }),
                                            error: Curry._1(form.getFieldError, /* Field */{
                                                  _0: /* CntPerPackage */8
                                                })
                                          }))), React.createElement("div", {
                                    className: "mt-7"
                                  }, React.createElement("label", {
                                        htmlFor: "unit-weight-min"
                                      }, "개당 무게"), React.createElement("div", {
                                        className: "mt-2 flex items-center"
                                      }, React.createElement(Input.make, {
                                            type_: "number",
                                            name: "unit-weight-min",
                                            placeholder: "최소",
                                            value: Query_Product_Detail_Form_Admin.FormFields.get(form.values, /* UnitWeightMin */2),
                                            onChange: (function (param) {
                                                return ReForm__Helpers.handleChange(partial_arg$3, param);
                                              }),
                                            error: Curry._1(form.getFieldError, /* Field */{
                                                  _0: /* UnitWeightMin */2
                                                })
                                          }), React.createElement("span", {
                                            className: "mx-2"
                                          }, "~"), React.createElement(Input.make, {
                                            type_: "number",
                                            name: "unit-weight-max",
                                            placeholder: "최대",
                                            value: Query_Product_Detail_Form_Admin.FormFields.get(form.values, /* UnitWeightMax */3),
                                            onChange: (function (param) {
                                                return ReForm__Helpers.handleChange(partial_arg$4, param);
                                              }),
                                            error: Curry._1(form.getFieldError, /* Field */{
                                                  _0: /* UnitWeightMax */3
                                                }),
                                            step: 0.1
                                          }), React.createElement("span", {
                                            className: "ml-2"
                                          }, React.createElement(Select_Product_Update_Admin.Weight.make, {
                                                unit: Belt_Option.getWithDefault(Select_Product_Update_Admin.decodeWeightUnit(Query_Product_Detail_Form_Admin.FormFields.get(form.values, /* UnitWeightUnit */4)), /* G */0),
                                                onChange: (function (param) {
                                                    return ReForm__Helpers.handleChange(partial_arg$5, param);
                                                  })
                                              })))), React.createElement("div", {
                                    className: "mt-7"
                                  }, React.createElement("label", {
                                        htmlFor: "unit-size-min"
                                      }, "개당 크기"), React.createElement("div", {
                                        className: "mt-2 flex items-center"
                                      }, React.createElement(Input.make, {
                                            type_: "number",
                                            name: "unit-size-min",
                                            placeholder: "최소",
                                            value: Query_Product_Detail_Form_Admin.FormFields.get(form.values, /* UnitSizeMin */5),
                                            onChange: (function (param) {
                                                return ReForm__Helpers.handleChange(partial_arg$6, param);
                                              }),
                                            error: Curry._1(form.getFieldError, /* Field */{
                                                  _0: /* UnitSizeMin */5
                                                }),
                                            step: 0.1
                                          }), React.createElement("span", {
                                            className: "mx-2"
                                          }, "~"), React.createElement(Input.make, {
                                            type_: "number",
                                            name: "unit-size-max",
                                            placeholder: "최대",
                                            value: Query_Product_Detail_Form_Admin.FormFields.get(form.values, /* UnitSizeMax */6),
                                            onChange: (function (param) {
                                                return ReForm__Helpers.handleChange(partial_arg$7, param);
                                              }),
                                            error: Curry._1(form.getFieldError, /* Field */{
                                                  _0: /* UnitSizeMax */6
                                                }),
                                            step: 0.1
                                          }), React.createElement("span", {
                                            className: "ml-2"
                                          }, React.createElement(Select_Product_Update_Admin.Size.make, {
                                                unit: Belt_Option.getWithDefault(Select_Product_Update_Admin.decodeSizeUnit(Query_Product_Detail_Form_Admin.FormFields.get(form.values, /* UnitSizeUnit */7)), /* Cm */1),
                                                onChange: (function (param) {
                                                    return ReForm__Helpers.handleChange(partial_arg$8, param);
                                                  })
                                              })))), React.createElement("div", {
                                    className: "flex mt-7 gap-2"
                                  }, React.createElement("div", {
                                        className: "flex-1 min-w-0"
                                      }, React.createElement("label", {
                                            htmlFor: "grade"
                                          }, "등급"), React.createElement("div", {
                                            className: "mt-2"
                                          }, React.createElement(Input.make, {
                                                type_: "text",
                                                name: "grade",
                                                placeholder: "(ex. 특, 상)",
                                                value: Query_Product_Detail_Form_Admin.FormFields.get(form.values, /* Grade */9),
                                                onChange: (function (param) {
                                                    return ReForm__Helpers.handleChange(partial_arg$9, param);
                                                  }),
                                                error: Curry._1(form.getFieldError, /* Field */{
                                                      _0: /* Grade */9
                                                    })
                                              }))), React.createElement("div", {
                                        className: "flex-1 min-w-0"
                                      }, React.createElement("label", {
                                            htmlFor: "packageType"
                                          }, "포장규격"), React.createElement("div", {
                                            className: "mt-2"
                                          }, React.createElement(Input.make, {
                                                type_: "text",
                                                name: "packageType",
                                                placeholder: "(ex. 플라스틱 등)",
                                                value: Query_Product_Detail_Form_Admin.FormFields.get(form.values, /* PackageType */10),
                                                onChange: (function (param) {
                                                    return ReForm__Helpers.handleChange(partial_arg$10, param);
                                                  }),
                                                error: Curry._1(form.getFieldError, /* Field */{
                                                      _0: /* PackageType */10
                                                    })
                                              })))), React.createElement("div", {
                                    className: "flex justify-center items-center mt-5"
                                  }, React.createElement(ReactDialog.Close, {
                                        children: React.createElement("span", {
                                              className: "btn-level6 py-3 px-5",
                                              id: "btn-close"
                                            }, "닫기"),
                                        className: "flex mr-2"
                                      }), React.createElement("span", {
                                        className: "flex mr-2"
                                      }, React.createElement("button", {
                                            className: "btn-level1 py-3 px-5",
                                            type: "submit"
                                          }, "저장")))))),
                  className: "dialog-content overflow-y-auto text-sm"
                }));
}

var Detail = {
  FormFields: undefined,
  Form: undefined,
  make: Product_Update_Button_Admin$Detail
};

var Select;

export {
  Select ,
  CutOffAndMemo ,
  Crop ,
  Detail ,
  
}
/* Env Not a pure module */
