// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Helper from "../utils/Helper.mjs";
import * as Locale from "../utils/Locale.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";

function formatDate(d) {
  return Locale.DateTime.formatFromUTC(new Date(d), "yyyy/MM/dd HH:mm");
}

function styleStatus(s) {
  switch (s) {
    case /* WAITING */0 :
        return "text-gray-500";
    case /* PROCESSING */1 :
        return "text-gray-700";
    case /* SUCCESS */2 :
        return "text-green-gl";
    case /* FAIL */3 :
        return "text-red-500";
    
  }
}

function displayStatus(status, successCount, failCount) {
  switch (status) {
    case /* WAITING */0 :
        return "대기중..";
    case /* PROCESSING */1 :
        return "처리중..";
    case /* SUCCESS */2 :
        return Belt_Option.getWithDefault(Helper.$$Option.map2(successCount, failCount, (function (successCount$p, failCount$p) {
                          if (failCount$p > 0) {
                            return "일부성공(" + String(successCount$p) + "/" + String(successCount$p + failCount$p | 0) + ")";
                          } else {
                            return "성공(" + String(successCount$p) + "/" + String(successCount$p) + ")";
                          }
                        })), "성공");
    case /* FAIL */3 :
        return "실패";
    
  }
}

function UploadStatus_Admin_Seller(Props) {
  var kind = Props.kind;
  var onChangeLatestUpload = Props.onChangeLatestUpload;
  var prevUploadedDateTime = React.useRef(undefined);
  var status = CustomHooks.UploadStatus.use(kind, /* Invoice */1);
  React.useEffect((function () {
          if (typeof status !== "number" && status.TAG === /* Loaded */0) {
            var data$p = CustomHooks.UploadStatus.response_decode(status._0);
            if (data$p.TAG === /* Ok */0) {
              var latestUpload = Garter_Array.first(data$p._0.data);
              var match = prevUploadedDateTime.current;
              if (match !== undefined) {
                if (latestUpload !== undefined && latestUpload.status === /* SUCCESS */2 && match !== latestUpload.createdAt) {
                  Curry._1(onChangeLatestUpload, undefined);
                  prevUploadedDateTime.current = latestUpload.createdAt;
                }
                
              } else if (latestUpload !== undefined) {
                prevUploadedDateTime.current = latestUpload.createdAt;
              }
              
            }
            
          }
          
        }), [status]);
  var tmp;
  if (typeof status === "number") {
    tmp = React.createElement("div", undefined, "로딩 중..");
  } else if (status.TAG === /* Loaded */0) {
    var data$p = CustomHooks.UploadStatus.response_decode(status._0);
    if (data$p.TAG === /* Ok */0) {
      var data$p$1 = data$p._0;
      tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
                className: "table-row w-full font-bold"
              }, React.createElement("span", {
                    className: "table-cell w-40 py-2 pr-2"
                  }, "요청일시"), React.createElement("span", {
                    className: "table-cell w-80 py-2 px-2"
                  }, "파일명"), React.createElement("span", {
                    className: "table-cell w-36 py-2 px-2"
                  }, "상태")), Garter_Array.isEmpty(data$p$1.data) ? React.createElement("div", undefined, "업로드 한 내역이 없습니다.") : Garter_Array.map(data$p$1.data, (function (d) {
                    return React.createElement("div", {
                                key: d.orderNo,
                                className: "table-row w-full"
                              }, React.createElement("span", {
                                    className: "table-cell w-40 py-2 pr-2"
                                  }, formatDate(d.createdAt)), React.createElement("span", {
                                    className: "table-cell w-80 py-2 pr-2"
                                  }, React.createElement("span", {
                                        className: "block truncate"
                                      }, d.filename)), React.createElement("span", {
                                    className: "table-cell w-36 py-2 px-2"
                                  }, React.createElement("span", {
                                        className: styleStatus(d.status)
                                      }, displayStatus(d.status, d.successCount, d.failCount))));
                  })));
    } else {
      tmp = null;
    }
  } else {
    tmp = React.createElement("div", undefined, "에러가 발생하였습니다.");
  }
  return React.createElement("section", {
              className: "flex"
            }, React.createElement("div", {
                  className: "table table-fixed w-1/2 pt-5"
                }, tmp), React.createElement("div", {
                  className: "text-gray-gl"
                }, React.createElement("span", {
                      className: "block pt-7 font-bold"
                    }, "*주의사항"), React.createElement("ol", {
                      className: "list-decimal list-inside mt-2 text-sm"
                    }, React.createElement("li", undefined, "형식에 맞는 주문서를 업로드 해야만 업로드에 성공합니다."), React.createElement("li", undefined, "택배사명이 형식에 맞아야 업로드에 성공합니다.(우체국x,우체국 택배o)"), React.createElement("li", undefined, "가송장 입력을 지양해주세요. 가송장 입력 경우 “미출고\"로 계속 노출."), React.createElement("li", undefined, "일부 성공했을 경우, [미출고 건 다운로드]를 클릭해 확인 부탁드립니다.")), React.createElement("span", {
                      className: "block mt-6 text-sm"
                    }, "*가장 최근 요청한 3가지 등록건만 노출됩니다.")));
}

var make = UploadStatus_Admin_Seller;

export {
  formatDate ,
  styleStatus ,
  displayStatus ,
  make ,
}
/* react Not a pure module */
