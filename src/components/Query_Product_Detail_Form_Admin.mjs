// Generated by ReScript, PLEASE EDIT WITH CARE

import * as ReForm from "@rescriptbr/reform/src/ReForm.mjs";

function get(values, field) {
  switch (field) {
    case /* Weight */0 :
        return values.weight;
    case /* WeightUnit */1 :
        return values.weightUnit;
    case /* UnitWeightMin */2 :
        return values.unitWeightMin;
    case /* UnitWeightMax */3 :
        return values.unitWeightMax;
    case /* UnitWeightUnit */4 :
        return values.unitWeightUnit;
    case /* UnitSizeMin */5 :
        return values.unitSizeMin;
    case /* UnitSizeMax */6 :
        return values.unitSizeMax;
    case /* UnitSizeUnit */7 :
        return values.unitSizeUnit;
    case /* CntPerPackage */8 :
        return values.cntPerPackage;
    case /* Grade */9 :
        return values.grade;
    case /* PackageType */10 :
        return values.packageType;
    
  }
}

function set(values, field, value) {
  switch (field) {
    case /* Weight */0 :
        return {
                weight: value,
                weightUnit: values.weightUnit,
                unitWeightMin: values.unitWeightMin,
                unitWeightMax: values.unitWeightMax,
                unitWeightUnit: values.unitWeightUnit,
                unitSizeMin: values.unitSizeMin,
                unitSizeMax: values.unitSizeMax,
                unitSizeUnit: values.unitSizeUnit,
                cntPerPackage: values.cntPerPackage,
                grade: values.grade,
                packageType: values.packageType
              };
    case /* WeightUnit */1 :
        return {
                weight: values.weight,
                weightUnit: value,
                unitWeightMin: values.unitWeightMin,
                unitWeightMax: values.unitWeightMax,
                unitWeightUnit: values.unitWeightUnit,
                unitSizeMin: values.unitSizeMin,
                unitSizeMax: values.unitSizeMax,
                unitSizeUnit: values.unitSizeUnit,
                cntPerPackage: values.cntPerPackage,
                grade: values.grade,
                packageType: values.packageType
              };
    case /* UnitWeightMin */2 :
        return {
                weight: values.weight,
                weightUnit: values.weightUnit,
                unitWeightMin: value,
                unitWeightMax: values.unitWeightMax,
                unitWeightUnit: values.unitWeightUnit,
                unitSizeMin: values.unitSizeMin,
                unitSizeMax: values.unitSizeMax,
                unitSizeUnit: values.unitSizeUnit,
                cntPerPackage: values.cntPerPackage,
                grade: values.grade,
                packageType: values.packageType
              };
    case /* UnitWeightMax */3 :
        return {
                weight: values.weight,
                weightUnit: values.weightUnit,
                unitWeightMin: values.unitWeightMin,
                unitWeightMax: value,
                unitWeightUnit: values.unitWeightUnit,
                unitSizeMin: values.unitSizeMin,
                unitSizeMax: values.unitSizeMax,
                unitSizeUnit: values.unitSizeUnit,
                cntPerPackage: values.cntPerPackage,
                grade: values.grade,
                packageType: values.packageType
              };
    case /* UnitWeightUnit */4 :
        return {
                weight: values.weight,
                weightUnit: values.weightUnit,
                unitWeightMin: values.unitWeightMin,
                unitWeightMax: values.unitWeightMax,
                unitWeightUnit: value,
                unitSizeMin: values.unitSizeMin,
                unitSizeMax: values.unitSizeMax,
                unitSizeUnit: values.unitSizeUnit,
                cntPerPackage: values.cntPerPackage,
                grade: values.grade,
                packageType: values.packageType
              };
    case /* UnitSizeMin */5 :
        return {
                weight: values.weight,
                weightUnit: values.weightUnit,
                unitWeightMin: values.unitWeightMin,
                unitWeightMax: values.unitWeightMax,
                unitWeightUnit: values.unitWeightUnit,
                unitSizeMin: value,
                unitSizeMax: values.unitSizeMax,
                unitSizeUnit: values.unitSizeUnit,
                cntPerPackage: values.cntPerPackage,
                grade: values.grade,
                packageType: values.packageType
              };
    case /* UnitSizeMax */6 :
        return {
                weight: values.weight,
                weightUnit: values.weightUnit,
                unitWeightMin: values.unitWeightMin,
                unitWeightMax: values.unitWeightMax,
                unitWeightUnit: values.unitWeightUnit,
                unitSizeMin: values.unitSizeMin,
                unitSizeMax: value,
                unitSizeUnit: values.unitSizeUnit,
                cntPerPackage: values.cntPerPackage,
                grade: values.grade,
                packageType: values.packageType
              };
    case /* UnitSizeUnit */7 :
        return {
                weight: values.weight,
                weightUnit: values.weightUnit,
                unitWeightMin: values.unitWeightMin,
                unitWeightMax: values.unitWeightMax,
                unitWeightUnit: values.unitWeightUnit,
                unitSizeMin: values.unitSizeMin,
                unitSizeMax: values.unitSizeMax,
                unitSizeUnit: value,
                cntPerPackage: values.cntPerPackage,
                grade: values.grade,
                packageType: values.packageType
              };
    case /* CntPerPackage */8 :
        return {
                weight: values.weight,
                weightUnit: values.weightUnit,
                unitWeightMin: values.unitWeightMin,
                unitWeightMax: values.unitWeightMax,
                unitWeightUnit: values.unitWeightUnit,
                unitSizeMin: values.unitSizeMin,
                unitSizeMax: values.unitSizeMax,
                unitSizeUnit: values.unitSizeUnit,
                cntPerPackage: value,
                grade: values.grade,
                packageType: values.packageType
              };
    case /* Grade */9 :
        return {
                weight: values.weight,
                weightUnit: values.weightUnit,
                unitWeightMin: values.unitWeightMin,
                unitWeightMax: values.unitWeightMax,
                unitWeightUnit: values.unitWeightUnit,
                unitSizeMin: values.unitSizeMin,
                unitSizeMax: values.unitSizeMax,
                unitSizeUnit: values.unitSizeUnit,
                cntPerPackage: values.cntPerPackage,
                grade: value,
                packageType: values.packageType
              };
    case /* PackageType */10 :
        return {
                weight: values.weight,
                weightUnit: values.weightUnit,
                unitWeightMin: values.unitWeightMin,
                unitWeightMax: values.unitWeightMax,
                unitWeightUnit: values.unitWeightUnit,
                unitSizeMin: values.unitSizeMin,
                unitSizeMax: values.unitSizeMax,
                unitSizeUnit: values.unitSizeUnit,
                cntPerPackage: values.cntPerPackage,
                grade: values.grade,
                packageType: value
              };
    
  }
}

var FormFields = {
  get: get,
  set: set
};

var Form = ReForm.Make({
      set: set,
      get: get
    });

var initialState = {
  weight: "",
  weightUnit: "",
  unitWeightMin: "",
  unitWeightMax: "",
  unitWeightUnit: "",
  unitSizeMin: "",
  unitSizeMax: "",
  unitSizeUnit: "",
  cntPerPackage: "",
  grade: "",
  packageType: ""
};

export {
  FormFields ,
  Form ,
  initialState ,
}
/* Form Not a pure module */
