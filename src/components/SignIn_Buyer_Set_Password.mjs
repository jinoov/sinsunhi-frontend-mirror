// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as FetchHelper from "../utils/FetchHelper.mjs";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import * as SignIn_Buyer_Form_SetPassword from "./SignIn_Buyer_Form_SetPassword.mjs";

function SignIn_Buyer_Set_Password(Props) {
  var onSuccess = Props.onSuccess;
  var onError = Props.onError;
  var router = Router.useRouter();
  var match = React.useState(function () {
        return "";
      });
  var setPasswordConfirm = match[1];
  var passwordConfirm = match[0];
  var onSubmit = function (param) {
    var state = param.state;
    Belt_Option.map(Belt_Option.flatMap(Js_dict.get(router.query, "token"), (function (redirectToken$p) {
                var init = state.values;
                return JSON.stringify({
                            "redirect-token": redirectToken$p,
                            password: init.password
                          });
              })), (function (payload$p) {
            return FetchHelper.put(Env.restApiUrl + "/user/password/buyer", payload$p, (function (param) {
                          return onSuccess(function (param) {
                                      return /* Hide */1;
                                    });
                        }), (function (param) {
                          return onError(function (param) {
                                      return /* Show */0;
                                    });
                        }));
          }));
    
  };
  var form = Curry._7(SignIn_Buyer_Form_SetPassword.Form.use, SignIn_Buyer_Form_SetPassword.initialState, /* Schema */{
        _0: Belt_Array.concatMany([Curry._4(SignIn_Buyer_Form_SetPassword.Form.ReSchema.Validation.regExp, "비밀번호가 형식에 맞지 않습니다.", "^(?=.*\\d)(?=.*[a-zA-Z]).{6,15}$", undefined, /* Password */1)])
      }, onSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleOnSubmitPasswordReset = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return Curry._1(form.submit, undefined);
                }), param);
  };
  var handleOnChangePasswordConfirm = function (e) {
    var value = e.target.value;
    return setPasswordConfirm(function (param) {
                return value;
              });
  };
  var isPasswordConfirmed = function (param) {
    var password1 = SignIn_Buyer_Form_SetPassword.FormFields.get(form.values, /* Password */1);
    if (password1 === "" || passwordConfirm === "") {
      return /* Waiting */0;
    } else if (password1 === passwordConfirm) {
      return /* Confirmed */1;
    } else {
      return /* NotConfirmed */2;
    }
  };
  var partial_arg = Curry._1(form.handleChange, /* Password */1);
  var match$1 = isPasswordConfirmed(undefined);
  var match$2 = isPasswordConfirmed(undefined);
  var match$3 = isPasswordConfirmed(undefined);
  return React.createElement("div", {
              className: "transform transition-all"
            }, React.createElement("h3", {
                  className: "text-2xl font-bold text-center"
                }, "비밀번호 설정이 필요합니다"), React.createElement("p", {
                  className: "text-gray-500 mt-3 max-w-xs sm:px-8"
                }, "신선하이에서 사용할 비밀번호를 영문·숫자 조합 6~15자로 입력해주세요."), React.createElement("form", {
                  className: "mt-8",
                  onSubmit: handleOnSubmitPasswordReset
                }, React.createElement("label", {
                      className: "block mt-3",
                      htmlFor: "new-password1"
                    }), React.createElement(Input.make, {
                      type_: "password",
                      name: "new-password1",
                      placeholder: "비밀번호(영문·숫자 조합 6~15자)",
                      className: "mt-3",
                      onChange: (function (param) {
                          return ReForm__Helpers.handleChange(partial_arg, param);
                        }),
                      size: /* Large */0,
                      error: Curry._1(form.getFieldError, /* Field */{
                            _0: /* Password */1
                          })
                    }), React.createElement("label", {
                      className: "block mt-3",
                      htmlFor: "new-password2"
                    }), React.createElement("input", {
                      className: "w-full border rounded-xl py-3 px-3",
                      name: "new-password2",
                      placeholder: "비밀번호 확인",
                      type: "password",
                      value: passwordConfirm,
                      onChange: handleOnChangePasswordConfirm
                    }), match$1 >= 2 ? React.createElement("span", {
                        className: "flex mt-1"
                      }, React.createElement(IconError.make, {
                            width: "20",
                            height: "20"
                          }), React.createElement("span", {
                            className: "text-sm text-red-500 ml-1"
                          }, "비밀번호가 일치하지 않습니다.")) : null, React.createElement("button", {
                      className: match$2 !== 1 || form.isSubmitting ? "w-full mt-8 py-3 bg-gray-300 rounded-xl text-white font-bold" : "w-full mt-8 py-3 bg-green-gl rounded-xl text-white font-bold",
                      disabled: match$3 !== 1 ? true : form.isSubmitting,
                      type: "submit"
                    }, "확인")));
}

var FormFields;

var Form;

var make = SignIn_Buyer_Set_Password;

export {
  FormFields ,
  Form ,
  make ,
  
}
/* Env Not a pure module */
