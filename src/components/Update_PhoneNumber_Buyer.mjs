// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as Timer from "./common/Timer.mjs";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as IconCheck from "./svgs/IconCheck.mjs";
import * as IconClose from "./svgs/IconClose.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as ReactUtil from "../utils/ReactUtil.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as FetchHelper from "../utils/FetchHelper.mjs";
import * as ReactRelay from "react-relay";
import * as RelayRuntime from "relay-runtime";
import * as ValidatedState from "../utils/ValidatedState.mjs";
import * as ReactDialog from "@radix-ui/react-dialog";
import * as ReactToastNotifications from "react-toast-notifications";
import * as UpdatePhoneNumberBuyer_Mutation_graphql from "../__generated__/UpdatePhoneNumberBuyer_Mutation_graphql.mjs";

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: UpdatePhoneNumberBuyer_Mutation_graphql.node,
              variables: UpdatePhoneNumberBuyer_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, UpdatePhoneNumberBuyer_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? UpdatePhoneNumberBuyer_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    Curry._2(updater, store, UpdatePhoneNumberBuyer_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use(param) {
  var match = ReactRelay.useMutation(UpdatePhoneNumberBuyer_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      Curry._2(param$1, UpdatePhoneNumberBuyer_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? UpdatePhoneNumberBuyer_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      Curry._2(param$5, store, UpdatePhoneNumberBuyer_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: UpdatePhoneNumberBuyer_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Mutation = {
  Operation: undefined,
  Types: undefined,
  commitMutation: commitMutation,
  use: use
};

function formatValidator(phoneNumber) {
  var exp = new RegExp("^\\d{3}-\\d{3,4}-\\d{4}$");
  if (exp.test(phoneNumber)) {
    return {
            TAG: /* Ok */0,
            _0: phoneNumber
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: {
              type_: "format",
              message: "휴대전화번호를 다시 확인해 주세요."
            }
          };
  }
}

function Update_PhoneNumber_Buyer(Props) {
  var isOpen = Props.isOpen;
  var onClose = Props.onClose;
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var match$1 = ValidatedState.use(/* String */0, "", [formatValidator]);
  var state = match$1[2];
  var setPhoneNumber = match$1[1];
  var phoneNumber = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setVerificationCode = match$2[1];
  var verificationCode = match$2[0];
  var match$3 = React.useState(function () {
        
      });
  var setVerificationCodeError = match$3[1];
  var match$4 = use(undefined);
  var mutate = match$4[0];
  var match$5 = React.useState(function () {
        
      });
  var setSmsStatus = match$5[1];
  var smsStatus = match$5[0];
  var inputVerificationCodeRef = React.useRef(null);
  var handleOnChangePhoneNumber = function (e) {
    var newValue = e.currentTarget.value.replace(/[^0-9]/g, "").replace(/(^1[0-9]{3}|^0[0-9]{2})([0-9]+)?([0-9]{4})$/, "$1-$2-$3").replace("--", "-");
    Curry._3(setPhoneNumber, newValue, true, undefined);
    setVerificationCode(function (param) {
          
        });
    setVerificationCodeError(function (param) {
          
        });
    setSmsStatus(function (param) {
          
        });
  };
  var handleOnClickSendSMS = function (param) {
    setSmsStatus(function (param) {
          return /* Sending */0;
        });
    var recipientNo = phoneNumber.replace(new RegExp("\-", "g"), "");
    Belt_Option.map(JSON.stringify({
              "recipient-no": recipientNo
            }), (function (body) {
            return FetchHelper.post("" + Env.restApiUrl + "/user/sms", body, (function (param) {
                          setSmsStatus(function (param) {
                                return /* Sent */1;
                              });
                          ReactUtil.focusElementByRef(inputVerificationCodeRef);
                        }), (function (err) {
                          setSmsStatus(function (param) {
                                
                              });
                          addToast(React.createElement("div", {
                                    className: "flex items-center"
                                  }, React.createElement(IconError.make, {
                                        width: "24",
                                        height: "24",
                                        className: "mr-2"
                                      }), "잠시후 다시 시도해주세요."), {
                                appearance: "error"
                              });
                        }));
          }));
  };
  var handleOnChangeVerficiationCode = function (e) {
    var target = e.currentTarget.value;
    setVerificationCode(function (param) {
          return target;
        });
  };
  var reset = function (param) {
    Curry._3(setPhoneNumber, "", undefined, undefined);
    setVerificationCode(function (param) {
          
        });
    setVerificationCodeError(function (param) {
          
        });
    setSmsStatus(function (param) {
          
        });
  };
  var handleOnClickVerify = function (param) {
    setSmsStatus(function (param) {
          return /* Verifying */2;
        });
    var recipientNo = phoneNumber.replace(new RegExp("\-", "g"), "");
    Belt_Option.map(JSON.stringify({
              "recipient-no": recipientNo,
              "confirmed-no": verificationCode,
              role: "buyer"
            }), (function (body) {
            return FetchHelper.post("" + Env.restApiUrl + "/user/sms/check", body, (function (param) {
                          Curry.app(mutate, [
                                (function (err) {
                                    addToast(React.createElement("div", {
                                              className: "flex items-center"
                                            }, React.createElement(IconError.make, {
                                                  width: "24",
                                                  height: "24",
                                                  className: "mr-2"
                                                }), "오류가 발생하였습니다. 휴대전화번호를 확인하세요.", err.message), {
                                          appearance: "error"
                                        });
                                  }),
                                (function (param, param$1) {
                                    var updateUser = param.updateUser;
                                    var variant = updateUser.NAME;
                                    if (variant === "UnselectedUnionMember") {
                                      return addToast(React.createElement("div", {
                                                      className: "flex items-center"
                                                    }, React.createElement(IconError.make, {
                                                          width: "24",
                                                          height: "24",
                                                          className: "mr-2"
                                                        }), "오류가 발생하였습니다. 휴대전화번호를 확인하세요."), {
                                                  appearance: "error"
                                                });
                                    } else if (variant === "User") {
                                      return addToast(React.createElement("div", {
                                                      className: "flex items-center"
                                                    }, React.createElement(IconCheck.make, {
                                                          height: "24",
                                                          width: "24",
                                                          fill: "#12B564",
                                                          className: "mr-2"
                                                        }), "휴대전화번호가 저장되었습니다."), {
                                                  appearance: "success"
                                                });
                                    } else {
                                      return addToast(React.createElement("div", {
                                                      className: "flex items-center"
                                                    }, React.createElement(IconError.make, {
                                                          width: "24",
                                                          height: "24",
                                                          className: "mr-2"
                                                        }), "오류가 발생하였습니다. 휴대전화번호를 확인하세요.", Belt_Option.getWithDefault(updateUser.VAL.message, "")), {
                                                  appearance: "error"
                                                });
                                    }
                                  }),
                                undefined,
                                undefined,
                                undefined,
                                undefined,
                                {
                                  input: {
                                    phone: recipientNo
                                  }
                                },
                                undefined,
                                undefined
                              ]);
                          reset(undefined);
                          Curry._1(onClose, undefined);
                        }), (function (err) {
                          setVerificationCodeError(function (param) {
                                return "인증번호가 일치 하지 않습니다.";
                              });
                          setSmsStatus(function (param) {
                                return /* Sent */1;
                              });
                        }));
          }));
  };
  React.useEffect((function () {
          if (!isOpen) {
            reset(undefined);
          }
          
        }), [isOpen]);
  var tmp;
  var exit = 0;
  if (smsStatus !== undefined) {
    if (smsStatus >= 3) {
      exit = 1;
    } else {
      switch (smsStatus) {
        case /* Sending */0 :
            tmp = React.createElement("button", {
                  className: "py-3 px-6 w-[120px] rounded-xl bg-surface ml-2 h-13",
                  disabled: true
                }, React.createElement("span", undefined, "전송중"));
            break;
        case /* Sent */1 :
            exit = 1;
            break;
        case /* Verifying */2 :
            tmp = React.createElement("button", {
                  className: "py-3 px-6 w-[120px] rounded-xl bg-surface ml-2 h-13",
                  disabled: true
                }, React.createElement("span", undefined, "인증중"));
            break;
        
      }
    }
  } else {
    tmp = React.createElement("button", {
          className: "py-3 px-6 w-[120px] rounded-xl bg-blue-gray-700 ml-2 h-13",
          disabled: Belt_Option.isSome(state.error) || phoneNumber === "",
          onClick: handleOnClickSendSMS
        }, React.createElement("span", {
              className: "text-white"
            }, "보내기"));
  }
  if (exit === 1) {
    tmp = React.createElement("button", {
          className: "py-3 px-6 w-[120px] rounded-xl bg-surface ml-2 h-13",
          onClick: handleOnClickSendSMS
        }, React.createElement("span", undefined, "재전송"));
  }
  var tmp$1;
  var exit$1 = 0;
  if (smsStatus !== undefined) {
    if (smsStatus >= 3) {
      exit$1 = 2;
    } else {
      switch (smsStatus) {
        case /* Sending */0 :
            exit$1 = 1;
            break;
        case /* Sent */1 :
            exit$1 = 2;
            break;
        case /* Verifying */2 :
            tmp$1 = React.createElement("button", {
                  className: "bg-disabled-L2 rounded-xl w-full py-4",
                  disabled: true
                }, React.createElement("span", {
                      className: "text-white"
                    }, "인증 중"));
            break;
        
      }
    }
  } else {
    exit$1 = 1;
  }
  switch (exit$1) {
    case 1 :
        tmp$1 = React.createElement("button", {
              className: "bg-disabled-L2 rounded-xl w-full py-4",
              disabled: true
            }, React.createElement("span", {
                  className: "text-white"
                }, "인증"));
        break;
    case 2 :
        tmp$1 = React.createElement("button", {
              className: "bg-green-500 rounded-xl w-full py-4",
              disabled: Caml_obj.equal(smsStatus, /* Timeout */3) ? true : false,
              onClick: handleOnClickVerify
            }, React.createElement("span", {
                  className: "text-white"
                }, "인증"));
        break;
    
  }
  return React.createElement(ReactDialog.Root, {
              children: null,
              open: isOpen
            }, React.createElement(ReactDialog.Overlay, {
                  className: "dialog-overlay"
                }), React.createElement(ReactDialog.Content, {
                  children: React.createElement("div", {
                        className: "fixed top-0 left-0 h-full xl:static bg-white w-full max-w-3xl xl:min-h-fit xl:min-w-min xl:w-[90vh] xl:max-w-[480px] xl:max-h-[85vh] "
                      }, React.createElement("section", {
                            className: "h-14 w-full xl:h-auto xl:w-auto xl:mt-10"
                          }, React.createElement("div", {
                                className: "flex items-center justify-between px-5 h-14 xl:pb-10"
                              }, React.createElement("div", {
                                    className: "w-6 xl:hidden"
                                  }), React.createElement("div", undefined, React.createElement("span", {
                                        className: "font-bold xl:text-2xl"
                                      }, "휴대전화번호 변경")), React.createElement(ReactDialog.Close, {
                                    onClick: (function (param) {
                                        Curry._1(onClose, undefined);
                                      }),
                                    children: React.createElement(IconClose.make, {
                                          height: "24",
                                          width: "24",
                                          fill: "#262626"
                                        }),
                                    className: "focus:outline-none"
                                  }))), React.createElement("section", {
                            className: "pt-12 xl:pt-3 mb-6 px-4"
                          }, React.createElement("div", {
                                className: "flex flex-col "
                              }, React.createElement("div", {
                                    className: "flex flex-col mb-10"
                                  }, React.createElement("div", {
                                        className: "mb-2"
                                      }, React.createElement("label", {
                                            className: "font-bold"
                                          }, "새 휴대전화번호 입력")), React.createElement("div", {
                                        className: "flex mb-3"
                                      }, React.createElement(Input.make, {
                                            type_: "text",
                                            name: "phone-number",
                                            placeholder: "휴대전화번호",
                                            className: "w-full",
                                            value: phoneNumber,
                                            onChange: handleOnChangePhoneNumber,
                                            size: /* Large */0,
                                            error: Belt_Option.map(state.error, (function (param) {
                                                    return param.message;
                                                  })),
                                            disabled: false
                                          }), tmp), React.createElement("div", {
                                        className: "relative"
                                      }, React.createElement(Input.make, {
                                            type_: "number",
                                            name: "verify-number",
                                            placeholder: "인증번호",
                                            className: "w-full",
                                            value: Belt_Option.mapWithDefault(verificationCode, "", (function (prim) {
                                                    return String(prim);
                                                  })),
                                            onChange: handleOnChangeVerficiationCode,
                                            size: /* Large */0,
                                            error: match$3[0],
                                            disabled: smsStatus !== undefined ? (
                                                smsStatus !== 1 ? smsStatus < 3 : false
                                              ) : true,
                                            inputRef: inputVerificationCodeRef
                                          }), smsStatus !== undefined && smsStatus !== 0 ? (
                                          smsStatus >= 3 ? React.createElement(Timer.make, {
                                                  status: /* Stop */3,
                                                  onChangeStatus: (function (param) {
                                                      
                                                    }),
                                                  startTimeInSec: 0,
                                                  className: "absolute top-3 right-4 text-red-gl"
                                                }) : React.createElement(Timer.make, {
                                                  status: /* Start */0,
                                                  onChangeStatus: (function (status) {
                                                      if (status >= 3) {
                                                        setVerificationCodeError(function (param) {
                                                              return "입력가능한 시간이 지났습니다.";
                                                            });
                                                        return setSmsStatus(function (param) {
                                                                    return /* Timeout */3;
                                                                  });
                                                      }
                                                      
                                                    }),
                                                  startTimeInSec: 180,
                                                  className: "absolute top-3 right-4 text-red-gl"
                                                })
                                        ) : null)), tmp$1))),
                  className: "dialog-content-plain bottom-0 left-0 xl:bottom-auto xl:left-auto xl:rounded-2xl xl:state-open:top-1/2 xl:state-open:left-1/2 xl:state-open:-translate-x-1/2 xl:state-open:-translate-y-1/2"
                }));
}

var make = Update_PhoneNumber_Buyer;

export {
  Mutation ,
  formatValidator ,
  make ,
}
/* Env Not a pure module */
