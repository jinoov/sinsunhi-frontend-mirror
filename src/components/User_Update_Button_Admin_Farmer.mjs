// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Swr from "swr";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as React from "react";
import * as ReForm from "@rescriptbr/reform/src/ReForm.mjs";
import * as Textarea from "./common/Textarea.mjs";
import * as IconCheck from "./svgs/IconCheck.mjs";
import * as IconClose from "./svgs/IconClose.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as FetchHelper from "../utils/FetchHelper.mjs";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.mjs";
import * as ReactDialog from "@radix-ui/react-dialog";
import * as ReactToastNotifications from "react-toast-notifications";
import EditSvg from "../../public/assets/edit.svg";

var editIcon = EditSvg;

function get(values, field) {
  switch (field) {
    case /* Rep */0 :
        return values.rep;
    case /* Manager */1 :
        return values.manager;
    case /* Phone */2 :
        return values.phone;
    case /* Etc */3 :
        return values.etc;
    
  }
}

function set(values, field, value) {
  switch (field) {
    case /* Rep */0 :
        return {
                rep: value,
                manager: values.manager,
                phone: values.phone,
                etc: values.etc
              };
    case /* Manager */1 :
        return {
                rep: values.rep,
                manager: value,
                phone: values.phone,
                etc: values.etc
              };
    case /* Phone */2 :
        return {
                rep: values.rep,
                manager: values.manager,
                phone: value,
                etc: values.etc
              };
    case /* Etc */3 :
        return {
                rep: values.rep,
                manager: values.manager,
                phone: values.phone,
                etc: value
              };
    
  }
}

var FormFields = {
  get: get,
  set: set
};

var Form = ReForm.Make({
      set: set,
      get: get
    });

var initialState = {
  rep: "",
  manager: "",
  phone: "",
  etc: ""
};

function User_Update_Button_Admin_Farmer(Props) {
  var user = Props.user;
  var className = Props.className;
  var router = Router.useRouter();
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var close = function (param) {
    var buttonClose = document.getElementById("btn-close");
    return Belt_Option.forEach(Belt_Option.flatMap((buttonClose == null) ? undefined : Caml_option.some(buttonClose), Webapi__Dom__Element.asHtmlElement), (function (buttonClose$p) {
                  buttonClose$p.click();
                  
                }));
  };
  var onSubmit = function (param) {
    var state = param.state;
    var rep = state.values.rep;
    var manager = state.values.manager;
    var phone = state.values.phone;
    var etc = state.values.etc;
    Belt_Option.map(JSON.stringify({
              "farmer-id": user.id,
              "boss-name": rep,
              manager: manager,
              "manager-phone": phone,
              etc: etc
            }), (function (body) {
            return FetchHelper.requestWithRetry(FetchHelper.putWithToken, Env.restApiUrl + "/user/farmer", body, 3, (function (param) {
                          close(undefined);
                          addToast(React.createElement("div", {
                                    className: "flex items-center"
                                  }, React.createElement(IconCheck.make, {
                                        height: "24",
                                        width: "24",
                                        fill: "#12B564",
                                        className: "mr-2"
                                      }), "저장되었습니다."), {
                                appearance: "success"
                              });
                          var rq = router.query;
                          return mutate(Env.restApiUrl + "/user?" + (rq["role"] = "farmer", new URLSearchParams(rq).toString()), undefined, true);
                        }), (function (param) {
                          return addToast(React.createElement("div", {
                                          className: "flex items-center"
                                        }, React.createElement(IconError.make, {
                                              width: "24",
                                              height: "24",
                                              className: "mr-2"
                                            }), "오류가 발생하였습니다."), {
                                      appearance: "error"
                                    });
                        }));
          }));
    
  };
  var form = Curry._7(Form.use, initialState, /* Schema */{
        _0: Belt_Array.concatMany([Curry._4(Form.ReSchema.Validation.regExp, "전화번호 형식이 맞지 않습니다.", "^$|^\\d{3}-\\d{3,4}-\\d{4}$", undefined, /* Phone */2)])
      }, onSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleOnChangePhone = function (e) {
    var newValue = e.currentTarget.value.replace(/[^0-9]/g, "").replace(/(^1[0-9]{3}|^0[0-9]{2})([0-9]+)?([0-9]{4})$/, "$1-$2-$3").replace("--", "-");
    return Curry._4(form.setFieldValue, /* Phone */2, newValue, true, undefined);
  };
  var prefill = function (isOpen) {
    if (isOpen) {
      Curry._4(form.setFieldValue, /* Rep */0, Belt_Option.getWithDefault(user.rep, ""), false, undefined);
      Curry._4(form.setFieldValue, /* Manager */1, Belt_Option.getWithDefault(user.manager, ""), false, undefined);
      Curry._4(form.setFieldValue, /* Phone */2, Belt_Option.getWithDefault(user.managerPhone, ""), false, undefined);
      return Curry._4(form.setFieldValue, /* Etc */3, Belt_Option.getWithDefault(user.etc, ""), false, undefined);
    } else {
      return Curry._1(form.resetForm, undefined);
    }
  };
  var handleOnSubmit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return Curry._1(form.submit, undefined);
                }), param);
  };
  var tmp = {
    src: editIcon
  };
  if (className !== undefined) {
    tmp.className = Caml_option.valFromOption(className);
  }
  var partial_arg = Curry._1(form.handleChange, /* Rep */0);
  var partial_arg$1 = Curry._1(form.handleChange, /* Manager */1);
  var partial_arg$2 = Curry._1(form.handleChange, /* Etc */3);
  return React.createElement(ReactDialog.Root, {
              children: null,
              onOpenChange: prefill
            }, React.createElement(ReactDialog.Overlay, {
                  className: "dialog-overlay"
                }), React.createElement(ReactDialog.Trigger, {
                  children: React.createElement("img", tmp),
                  className: "block text-left mb-1 underline focus:outline-none"
                }), React.createElement(ReactDialog.Content, {
                  children: React.createElement("div", {
                        className: "p-5"
                      }, React.createElement("section", {
                            className: "flex"
                          }, React.createElement("h2", {
                                className: "text-xl font-bold"
                              }, "생산자 정보"), React.createElement(ReactDialog.Close, {
                                children: React.createElement(IconClose.make, {
                                      height: "24",
                                      width: "24",
                                      fill: "#262626"
                                    }),
                                className: "inline-block p-1 focus:outline-none ml-auto"
                              })), React.createElement("form", {
                            onSubmit: handleOnSubmit
                          }, React.createElement("section", {
                                className: "mt-7"
                              }, React.createElement("h3", undefined, "대표자"), React.createElement("div", {
                                    className: "mt-2"
                                  }, React.createElement(Input.make, {
                                        type_: "text",
                                        name: "rep",
                                        placeholder: "대표자명을 입력해주세요",
                                        value: form.values.rep,
                                        onChange: (function (param) {
                                            return ReForm__Helpers.handleChange(partial_arg, param);
                                          }),
                                        error: undefined
                                      }))), React.createElement("section", {
                                className: "mt-5"
                              }, React.createElement("h3", undefined, "담당자"), React.createElement("div", {
                                    className: "mt-2"
                                  }, React.createElement(Input.make, {
                                        type_: "text",
                                        name: "mannger",
                                        placeholder: "담당자명을 입력해주세요",
                                        value: form.values.manager,
                                        onChange: (function (param) {
                                            return ReForm__Helpers.handleChange(partial_arg$1, param);
                                          }),
                                        error: undefined
                                      }))), React.createElement("section", {
                                className: "mt-5"
                              }, React.createElement("h3", undefined, "담당자 연락처"), React.createElement("div", {
                                    className: "mt-2"
                                  }, React.createElement(Input.make, {
                                        type_: "text",
                                        name: "Mannger-phone-number",
                                        placeholder: "담당자명을 연락처를 입력해주세요(010-0000-0000)",
                                        value: form.values.phone,
                                        onChange: handleOnChangePhone,
                                        error: Curry._1(form.getFieldError, /* Field */{
                                              _0: /* Phone */2
                                            })
                                      }))), React.createElement("section", {
                                className: "mt-5"
                              }, React.createElement("h3", undefined, "업체비고"), React.createElement("div", {
                                    className: "mt-2"
                                  }, React.createElement(Textarea.make, {
                                        type_: "text",
                                        name: "etc",
                                        placeholder: "메모를 작성해주세요(어드민에서 최대 2줄까지 노출되며 그 이상은 말줄임 처리되어 엑셀 다운로드시 모든 내용을 확인할 수 있습니다.)",
                                        value: form.values.etc,
                                        onChange: (function (param) {
                                            return ReForm__Helpers.handleChange(partial_arg$2, param);
                                          }),
                                        error: undefined,
                                        rows: 4,
                                        maxLength: 200
                                      }))), React.createElement("section", {
                                className: "flex justify-center items-center mt-5"
                              }, React.createElement(ReactDialog.Close, {
                                    children: React.createElement("span", {
                                          className: "btn-level6 py-3 px-5",
                                          id: "btn-close"
                                        }, "닫기"),
                                    className: "flex mr-2"
                                  }), React.createElement("span", {
                                    className: "flex mr-2"
                                  }, React.createElement("button", {
                                        className: "btn-level1 py-3 px-5",
                                        type: "submit"
                                      }, "저장"))))),
                  className: "dialog-content overflow-y-auto"
                }));
}

var make = User_Update_Button_Admin_Farmer;

export {
  editIcon ,
  FormFields ,
  Form ,
  initialState ,
  make ,
  
}
/* editIcon Not a pure module */
