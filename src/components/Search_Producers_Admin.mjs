// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as React from "react";
import * as Helper from "../utils/Helper.mjs";
import * as ReForm from "@rescriptbr/reform/src/ReForm.mjs";
import Uniqid from "uniqid";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Checkbox from "./common/Checkbox.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as DatePicker from "./DatePicker.mjs";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as ReactSelect from "./common/ReactSelect.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import $$Set from "date-fns/set";
import * as PeriodSelector from "./common/PeriodSelector.mjs";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import Format from "date-fns/format";
import SubMonths from "date-fns/subMonths";
import * as Select_BulkSale_Search from "./Select_BulkSale_Search.mjs";

function get(values, field) {
  switch (field) {
    case /* ApplicantName */0 :
        return values.applicantName;
    case /* BusinessName */1 :
        return values.businessName;
    case /* FarmAddress */2 :
        return values.farmAddress;
    
  }
}

function set(values, field, value) {
  switch (field) {
    case /* ApplicantName */0 :
        return {
                applicantName: value,
                businessName: values.businessName,
                farmAddress: values.farmAddress
              };
    case /* BusinessName */1 :
        return {
                applicantName: values.applicantName,
                businessName: value,
                farmAddress: values.farmAddress
              };
    case /* FarmAddress */2 :
        return {
                applicantName: values.applicantName,
                businessName: values.businessName,
                farmAddress: value
              };
    
  }
}

var FormFields = {
  get: get,
  set: set
};

var Form = ReForm.Make({
      set: set,
      get: get
    });

var initialState = {
  applicantName: "",
  businessName: "",
  farmAddress: ""
};

function Search_Producers_Admin(Props) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        return /* NotSelected */0;
      });
  var setCropId = match[1];
  var cropId = match[0];
  var match$1 = React.useState(function () {
        return /* NotSelected */0;
      });
  var setProductCategoryId = match$1[1];
  var productCategoryId = match$1[0];
  var match$2 = React.useState(function () {
        return false;
      });
  var setCheckTest = match$2[1];
  var checkTest = match$2[0];
  var match$3 = React.useState(function () {
        return /* NotSelected */0;
      });
  var setSelectStaff = match$3[1];
  var selectStaff = match$3[0];
  var match$4 = React.useState(function () {
        return {
                from: $$Set(new Date(), {
                      year: 2022,
                      month: 0,
                      date: 24,
                      hours: undefined,
                      minutes: undefined,
                      seconds: undefined,
                      milliseconds: undefined
                    }),
                to_: new Date()
              };
      });
  var setQuery = match$4[1];
  var query = match$4[0];
  var onSubmit = function (param) {
    var state = param.state;
    var applicantName = state.values.applicantName;
    var businessName = state.values.businessName;
    var farmAddress = state.values.farmAddress;
    var match = Belt_Option.mapWithDefault(ReactSelect.toOption(cropId), [
          "",
          ""
        ], (function (v) {
            return [
                    v.value,
                    v.label
                  ];
          }));
    var match$1 = Belt_Option.mapWithDefault(ReactSelect.toOption(productCategoryId), [
          "",
          ""
        ], (function (v) {
            return [
                    v.value,
                    v.label
                  ];
          }));
    var match$2 = Belt_Option.mapWithDefault(ReactSelect.toOption(selectStaff), [
          "",
          ""
        ], (function (v) {
            return [
                    v.value,
                    v.label
                  ];
          }));
    router.query["applicant-name"] = applicantName;
    router.query["business-name"] = businessName;
    router.query["farm-address"] = farmAddress;
    router.query["crop-id"] = match[0];
    router.query["crop-name"] = match[1];
    router.query["product-category-id"] = match$1[0];
    router.query["product-category-name"] = match$1[1];
    router.query["from"] = Format(query.from, "yyyyMMdd");
    router.query["to"] = Format(query.to_, "yyyyMMdd");
    router.query["is-test"] = String(checkTest);
    router.query["staff-id"] = match$2[0];
    router.query["staff-name"] = match$2[1];
    router.push("" + router.pathname + "?" + new URLSearchParams(router.query).toString() + "");
  };
  var form = Curry._7(Form.use, initialState, /* Schema */{
        _0: Belt_Array.concatMany([
              Curry._4(Form.ReSchema.Validation.regExp, "최소 2글자를 입력해주세요.", "^(?:.{2,}|)$", undefined, /* BusinessName */1),
              Curry._4(Form.ReSchema.Validation.regExp, "최소 2글자를 입력해주세요.", "^(?:.{2,}|)$", undefined, /* ApplicantName */0)
            ])
      }, onSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleOnSubmit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  Curry._1(form.submit, undefined);
                }), param);
  };
  React.useEffect((function () {
          Curry._1(form.resetForm, undefined);
          Garter_Array.forEach(Js_dict.entries(router.query), (function (entry) {
                  var v = entry[1];
                  var k = entry[0];
                  if (k === "applicant-name") {
                    return Curry._4(form.setFieldValue, /* ApplicantName */0, v, false, undefined);
                  } else if (k === "business-name") {
                    return Curry._4(form.setFieldValue, /* BusinessName */1, v, false, undefined);
                  } else if (k === "farm-address") {
                    return Curry._4(form.setFieldValue, /* FarmAddress */2, v, false, undefined);
                  } else if (k === "is-test") {
                    return setCheckTest(function (param) {
                                return Pervasives.bool_of_string(v);
                              });
                  } else {
                    return ;
                  }
                }));
          Helper.$$Option.map2(Js_dict.get(router.query, "crop-id"), Js_dict.get(router.query, "crop-name"), (function (value, label) {
                  if (value !== "" && label !== "") {
                    return setCropId(function (param) {
                                return /* Selected */{
                                        value: value,
                                        label: label
                                      };
                              });
                  }
                  
                }));
          Helper.$$Option.map2(Js_dict.get(router.query, "product-category-id"), Js_dict.get(router.query, "product-category-name"), (function (value, label) {
                  if (value !== "" && label !== "") {
                    return setProductCategoryId(function (param) {
                                return /* Selected */{
                                        value: value,
                                        label: label
                                      };
                              });
                  }
                  
                }));
          Helper.$$Option.map2(Js_dict.get(router.query, "staff-id"), Js_dict.get(router.query, "staff-name"), (function (value, label) {
                  if (value !== "" && label !== "") {
                    return setSelectStaff(function (param) {
                                return /* Selected */{
                                        value: value,
                                        label: label
                                      };
                              });
                  }
                  
                }));
        }), [router.query]);
  var handleOnChangePeriod = function (d) {
    setQuery(function (prev) {
          return {
                  from: d,
                  to_: prev.to_
                };
        });
  };
  var handleOnReset = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  Curry._4(form.setFieldValue, /* ApplicantName */0, "", false, undefined);
                  Curry._4(form.setFieldValue, /* BusinessName */1, "", false, undefined);
                  Curry._4(form.setFieldValue, /* FarmAddress */2, "", false, undefined);
                  setCheckTest(function (param) {
                        return false;
                      });
                  setSelectStaff(function (param) {
                        return /* NotSelected */0;
                      });
                  setQuery(function (prev) {
                        return {
                                from: SubMonths(new Date(), 1),
                                to_: prev.to_
                              };
                      });
                  setQuery(function (prev) {
                        return {
                                from: prev.from,
                                to_: new Date()
                              };
                      });
                  setCropId(function (param) {
                        return /* NotSelected */0;
                      });
                  setProductCategoryId(function (param) {
                        return /* NotSelected */0;
                      });
                }), param);
  };
  var handleOnChangeDate = function (t, e) {
    var newDate = e.detail.valueAsDate;
    if (t) {
      if (newDate === undefined) {
        return ;
      }
      var newDate$p = Caml_option.valFromOption(newDate);
      return setQuery(function (prev) {
                  return {
                          from: prev.from,
                          to_: newDate$p
                        };
                });
    }
    if (newDate === undefined) {
      return ;
    }
    var newDate$p$1 = Caml_option.valFromOption(newDate);
    setQuery(function (prev) {
          return {
                  from: newDate$p$1,
                  to_: prev.to_
                };
        });
  };
  var handleOnSelect = function (cleanUpFn, setFn, value) {
    setFn(function (param) {
          return value;
        });
    if (cleanUpFn !== undefined) {
      return Curry._1(cleanUpFn, undefined);
    }
    
  };
  var partial_arg = Curry._1(form.handleChange, /* ApplicantName */0);
  var partial_arg$1 = Curry._1(form.handleChange, /* BusinessName */1);
  var partial_arg$2 = Curry._1(form.handleChange, /* FarmAddress */2);
  var partial_arg$3 = (function (param) {
      setProductCategoryId(function (param) {
            return /* NotSelected */0;
          });
    });
  return React.createElement("div", {
              className: "bg-white rounded"
            }, React.createElement("form", {
                  onSubmit: handleOnSubmit
                }, React.createElement("div", {
                      className: "py-3 flex flex-col text-sm bg-gray-gl rounded-xl"
                    }, React.createElement("div", {
                          className: "flex"
                        }, React.createElement("div", {
                              className: "w-32 font-bold mt-2 pl-7 whitespace-nowrap"
                            }, "검색"), React.createElement("div", {
                              className: "flex-1"
                            }, React.createElement("div", {
                                  className: "flex"
                                }, React.createElement("div", {
                                      className: "w-64 flex items-center mr-16"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "farmer-name"
                                        }, "사용자명"), React.createElement(Input.make, {
                                          type_: "text",
                                          name: "farmer-name",
                                          placeholder: "사용자명 입력",
                                          value: form.values.applicantName,
                                          onChange: (function (param) {
                                              return ReForm__Helpers.handleChange(partial_arg, param);
                                            }),
                                          error: Curry._1(form.getFieldError, /* Field */{
                                                _0: /* ApplicantName */0
                                              }),
                                          tabIndex: 1
                                        })), React.createElement("div", {
                                      className: "w-64 flex items-center mr-16"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "farmer-name"
                                        }, "사업자명"), React.createElement(Input.make, {
                                          type_: "text",
                                          name: "farmer-name",
                                          placeholder: "사업자명 입력",
                                          value: form.values.businessName,
                                          onChange: (function (param) {
                                              return ReForm__Helpers.handleChange(partial_arg$1, param);
                                            }),
                                          error: Curry._1(form.getFieldError, /* Field */{
                                                _0: /* BusinessName */1
                                              }),
                                          tabIndex: 1
                                        }))), React.createElement("div", {
                                  className: "flex mt-3"
                                }, React.createElement("div", {
                                      className: "w-64 flex items-center mr-16"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "farmer-name"
                                        }, "담당자명"), React.createElement(Select_BulkSale_Search.Staff.make, {
                                          staffInfo: selectStaff,
                                          onChange: (function (v) {
                                              setSelectStaff(function (param) {
                                                    return v;
                                                  });
                                            }),
                                          key: Uniqid("bulkSaleSearch")
                                        })), React.createElement("div", {
                                      className: "w-[350px] flex items-center mr-16"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-8",
                                          htmlFor: "farmer-name"
                                        }, "주소"), React.createElement(Input.make, {
                                          type_: "text",
                                          name: "farmer-name",
                                          placeholder: "정확한 키워드로 단위로 주소를 검색하세요",
                                          value: form.values.farmAddress,
                                          onChange: (function (param) {
                                              return ReForm__Helpers.handleChange(partial_arg$2, param);
                                            }),
                                          error: Curry._1(form.getFieldError, /* Field */{
                                                _0: /* FarmAddress */2
                                              }),
                                          tabIndex: 1
                                        }))), React.createElement("div", {
                                  className: "flex mt-3"
                                }, React.createElement("div", {
                                      className: "h-9 flex justify-start items-center"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "crop-kind"
                                        }, "작물품종")), React.createElement("div", {
                                      className: "relative"
                                    }, React.createElement("div", {
                                          className: "absolute w-[200px] left-0"
                                        }, React.createElement(React.Suspense, {
                                              children: React.createElement(Select_BulkSale_Search.Crop.make, {
                                                    cropId: cropId,
                                                    onChange: (function (param) {
                                                        return handleOnSelect(partial_arg$3, setCropId, param);
                                                      })
                                                  }),
                                              fallback: React.createElement("div", undefined, "로딩 중..")
                                            })), React.createElement("div", {
                                          className: "absolute w-[296px] left-[221px]"
                                        }, React.createElement(React.Suspense, {
                                              children: React.createElement(Select_BulkSale_Search.ProductCategory.make, {
                                                    cropId: cropId,
                                                    productCategoryId: productCategoryId,
                                                    onChange: (function (param) {
                                                        return handleOnSelect(undefined, setProductCategoryId, param);
                                                      }),
                                                    key: cropId ? cropId.value : ""
                                                  }),
                                              fallback: React.createElement("div", undefined, "로딩 중..")
                                            })))))), React.createElement("div", {
                          className: "flex mt-3"
                        }, React.createElement("div", {
                              className: "w-32 font-bold flex items-center pl-7"
                            }, "기간"), React.createElement("div", {
                              className: "flex"
                            }, React.createElement("div", {
                                  className: "flex mr-8"
                                }, React.createElement(PeriodSelector.make, {
                                      from: query.from,
                                      to_: query.to_,
                                      onSelect: handleOnChangePeriod
                                    })), React.createElement(DatePicker.make, {
                                  id: "from",
                                  onChange: (function (param) {
                                      return handleOnChangeDate(/* From */0, param);
                                    }),
                                  date: query.from,
                                  maxDate: Format(new Date(), "yyyy-MM-dd"),
                                  firstDayOfWeek: 0
                                }), React.createElement("span", {
                                  className: "flex items-center mr-1"
                                }, "~"), React.createElement(DatePicker.make, {
                                  id: "to",
                                  onChange: (function (param) {
                                      return handleOnChangeDate(/* To */1, param);
                                    }),
                                  date: query.to_,
                                  maxDate: Format(new Date(), "yyyy-MM-dd"),
                                  minDate: Format(query.from, "yyyy-MM-dd"),
                                  firstDayOfWeek: 0
                                })), React.createElement("div", {
                              className: "flex items-center justify-start ml-8"
                            }, React.createElement(Checkbox.make, {
                                  id: "check-all",
                                  checked: checkTest,
                                  onChange: (function (param) {
                                      setCheckTest(function (prev) {
                                            return !prev;
                                          });
                                    })
                                }), React.createElement("span", {
                                  className: "ml-2"
                                }, "TEST건 제외")))), React.createElement("div", {
                      className: "flex justify-center mt-5"
                    }, React.createElement("input", {
                          className: "w-20 py-2 bg-gray-button-gl text-black-gl rounded-xl ml-2 hover:bg-gray-button-gl focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-gray-gl focus:ring-opacity-100",
                          tabIndex: 5,
                          type: "button",
                          value: "초기화",
                          onClick: handleOnReset
                        }), React.createElement("input", {
                          className: "w-20 py-2 bg-green-gl text-white font-bold rounded-xl ml-2 hover:bg-green-gl-dark focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-green-gl focus:ring-opacity-100",
                          tabIndex: 4,
                          type: "submit",
                          value: "검색"
                        }))));
}

var Select_Crop_Std;

var make = Search_Producers_Admin;

export {
  Select_Crop_Std ,
  FormFields ,
  Form ,
  initialState ,
  make ,
}
/* Form Not a pure module */
