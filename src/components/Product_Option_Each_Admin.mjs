// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Helper from "../utils/Helper.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactHookForm from "../bindings/ReactHookForm/ReactHookForm.mjs";
import * as ReactHookForm$1 from "react-hook-form";
import * as ErrorMessage from "@hookform/error-message";
import * as Select_Product_Option_Unit from "./Select_Product_Option_Unit.mjs";

function each_encode(v) {
  return Js_dict.fromArray([
              [
                "numMin",
                Spice.floatToJson(v.numMin)
              ],
              [
                "numMax",
                Spice.floatToJson(v.numMax)
              ],
              [
                "sizeMin",
                Spice.floatToJson(v.sizeMin)
              ],
              [
                "sizeMax",
                Spice.floatToJson(v.sizeMax)
              ],
              [
                "sizeUnit",
                Select_Product_Option_Unit.Size.status_encode(v.sizeUnit)
              ],
              [
                "amountUnit",
                Select_Product_Option_Unit.Amount.status_encode(v.amountUnit)
              ]
            ]);
}

function each_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var numMin = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "numMin"), null));
  if (numMin.TAG === /* Ok */0) {
    var numMax = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "numMax"), null));
    if (numMax.TAG === /* Ok */0) {
      var sizeMin = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "sizeMin"), null));
      if (sizeMin.TAG === /* Ok */0) {
        var sizeMax = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "sizeMax"), null));
        if (sizeMax.TAG === /* Ok */0) {
          var sizeUnit = Select_Product_Option_Unit.Size.status_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "sizeUnit"), null));
          if (sizeUnit.TAG === /* Ok */0) {
            var amountUnit = Select_Product_Option_Unit.Amount.status_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "amountUnit"), null));
            if (amountUnit.TAG === /* Ok */0) {
              return {
                      TAG: /* Ok */0,
                      _0: {
                        numMin: numMin._0,
                        numMax: numMax._0,
                        sizeMin: sizeMin._0,
                        sizeMax: sizeMax._0,
                        sizeUnit: sizeUnit._0,
                        amountUnit: amountUnit._0
                      }
                    };
            }
            var e = amountUnit._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".amountUnit" + e.path,
                      message: e.message,
                      value: e.value
                    }
                  };
          }
          var e$1 = sizeUnit._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".sizeUnit" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
        }
        var e$2 = sizeMax._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".sizeMax" + e$2.path,
                  message: e$2.message,
                  value: e$2.value
                }
              };
      }
      var e$3 = sizeMin._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".sizeMin" + e$3.path,
                message: e$3.message,
                value: e$3.value
              }
            };
    }
    var e$4 = numMax._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".numMax" + e$4.path,
              message: e$4.message,
              value: e$4.value
            }
          };
  }
  var e$5 = numMin._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".numMin" + e$5.path,
            message: e$5.message,
            value: e$5.value
          }
        };
}

function getNamesWithPrefix(prefix) {
  return {
          unitAmount: "" + prefix + ".each.amountUnit",
          minSize: "" + prefix + ".each.sizeMin",
          maxSize: "" + prefix + ".each.sizeMax",
          unitSize: "" + prefix + ".each.sizeUnit",
          minNum: "" + prefix + ".each.numMin",
          maxNum: "" + prefix + ".each.numMax",
          values: "" + prefix + ".each"
        };
}

var Form_names = {
  unitAmount: "amountUnit",
  minSize: "sizeMin",
  maxSize: "sizeMax",
  unitSize: "sizeUnit",
  minNum: "numMin",
  maxNum: "numMax",
  values: ""
};

var Form = {
  each_encode: each_encode,
  each_decode: each_decode,
  getNamesWithPrefix: getNamesWithPrefix,
  names: Form_names
};

function divideNum(baseUnit, currentUnit) {
  switch (baseUnit) {
    case /* G */0 :
        switch (currentUnit) {
          case /* KG */1 :
              return 1000;
          case /* T */2 :
              return 1000000;
          case /* G */0 :
          case /* ML */3 :
          case /* L */4 :
          case /* EA */5 :
              return 1;
          
        }
    case /* KG */1 :
        switch (currentUnit) {
          case /* G */0 :
              return 1 / 1000;
          case /* T */2 :
              return 1000;
          case /* KG */1 :
          case /* ML */3 :
          case /* L */4 :
          case /* EA */5 :
              return 1;
          
        }
    case /* T */2 :
        switch (currentUnit) {
          case /* G */0 :
              return 1 / 1000000;
          case /* KG */1 :
              return 1 / 1000;
          case /* T */2 :
          case /* ML */3 :
          case /* L */4 :
          case /* EA */5 :
              return 1;
          
        }
    case /* ML */3 :
        if (currentUnit < 3) {
          return 1;
        }
        switch (currentUnit) {
          case /* L */4 :
              return 1000;
          case /* ML */3 :
          case /* EA */5 :
              return 1;
          
        }
    case /* L */4 :
        if (currentUnit < 3) {
          return 1;
        }
        switch (currentUnit) {
          case /* ML */3 :
              return 1 / 1000;
          case /* L */4 :
          case /* EA */5 :
              return 1;
          
        }
    case /* EA */5 :
        if (currentUnit >= 5) {
          return 1;
        } else {
          return 1;
        }
    
  }
}

function getPerAmount(amount, amountUnit, perNum, unitAmount) {
  var decodedUnit = Belt_Option.getWithDefault(unitAmount, /* KG */1);
  var baseAmount = amount / divideNum(amountUnit, decodedUnit);
  return Belt_Option.mapWithDefault(Belt_Float.fromString((baseAmount / perNum).toFixed(2)), "", (function (prim) {
                return String(prim);
              }));
}

function Product_Option_Each_Admin(props) {
  var readOnly = props.readOnly;
  var readOnly$1 = readOnly !== undefined ? readOnly : false;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var register = match.register;
  var setValue = match.setValue;
  var errors = match.formState.errors;
  var control = match.control;
  var amountAndUnit = ReactHookForm$1.useWatch({
        name: [
          props.amountInputName,
          props.amountUnitInputName
        ]
      });
  var match$1 = Belt_Option.getWithDefault(Belt_Option.map(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.map(amountAndUnit, (function (a) {
                          return Belt_Array.map(a, (function (prim) {
                                        if (prim == null) {
                                          return ;
                                        } else {
                                          return Caml_option.some(prim);
                                        }
                                      }));
                        })), (function (v) {
                      return Helper.$$Option.sequence(v);
                    })), (function (v) {
                  if (v.length !== 2) {
                    return ;
                  }
                  var amount = v[0];
                  var unit = v[1];
                  return [
                          amount,
                          unit
                        ];
                })), (function (param) {
              return [
                      Belt_Float.fromString(param[0]),
                      Belt_Result.getWithDefault(Select_Product_Option_Unit.Amount.fromString(param[1]), /* G */0)
                    ];
            })), [
        undefined,
        /* G */0
      ]);
  var amountUnit = match$1[1];
  var amount = match$1[0];
  var inputNames = getNamesWithPrefix(props.prefix);
  var eachValues = ReactHookForm$1.useWatch({
        name: inputNames.values
      });
  var match$2 = Belt_Option.map(eachValues, each_decode);
  var match$3;
  if (match$2 !== undefined && match$2.TAG === /* Ok */0) {
    var match$4 = match$2._0;
    match$3 = [
      match$4.numMin,
      match$4.numMax,
      match$4.sizeMin,
      match$4.amountUnit
    ];
  } else {
    match$3 = [
      undefined,
      undefined,
      undefined,
      undefined
    ];
  }
  var watchAmountUnit = match$3[3];
  var watchMaxNum = match$3[1];
  var watchMinNum = match$3[0];
  var eachMinNum = register(inputNames.minNum, {
        required: true,
        min: 1,
        valueAsNumber: true
      });
  var eachMaxNum = register(inputNames.maxNum, {
        required: true,
        min: Belt_Option.getWithDefault(Belt_Option.map(watchMinNum, (function (prim) {
                    return prim | 0;
                  })), 1),
        valueAsNumber: true
      });
  var eachMinSize = register(inputNames.minSize, {
        required: true,
        min: 0,
        valueAsNumber: true
      });
  var eachMaxSize = register(inputNames.maxSize, {
        required: true,
        min: Belt_Option.getWithDefault(Belt_Option.map(match$3[2], (function (prim) {
                    return prim | 0;
                  })), 0),
        valueAsNumber: true
      });
  React.useEffect((function () {
          setValue(inputNames.unitSize, Select_Product_Option_Unit.Size.status_encode(/* MM */0));
        }), []);
  React.useEffect((function () {
          if (watchAmountUnit !== undefined) {
            var availableOptions = Select_Product_Option_Unit.AmountStatus.makeVariation(amountUnit);
            var match = Belt_Array.getBy(availableOptions, (function (option) {
                    return Caml_obj.equal(option, watchAmountUnit);
                  }));
            if (match !== undefined) {
              
            } else {
              setValue(inputNames.unitAmount, Select_Product_Option_Unit.Amount.status_encode(Select_Product_Option_Unit.AmountStatus.makeDefaultUnit(amountUnit)));
            }
          }
          
        }), [
        amountUnit,
        watchAmountUnit
      ]);
  return React.createElement("div", {
              className: "py-6 flex flex-col gap-2"
            }, React.createElement("div", {
                  className: "flex gap-2 items-center"
                }, React.createElement("label", {
                      className: "block"
                    }, "입수 정보"), React.createElement("div", {
                      className: "px-3 py-2 border border-border-default-L1 rounded-lg h-9 bg-disabled-L3 w-36 leading-4.5"
                    }, "" + Belt_Option.mapWithDefault(amount, "", (function (prim) {
                            return String(prim);
                          })) + "\n          " + Select_Product_Option_Unit.Amount.toString(amountUnit) + ""), React.createElement("div", undefined, React.createElement("input", {
                          ref: eachMinNum.ref,
                          defaultValue: String(1.0),
                          className: Cx.cx([
                                "px-3 py-2 border border-border-default-L1 rounded-lg h-9 focus:outline-none",
                                readOnly$1 ? "bg-disabled-L3" : "bg-white"
                              ]),
                          id: eachMinNum.name,
                          name: eachMinNum.name,
                          placeholder: "입수 입력",
                          readOnly: readOnly$1,
                          type: "number",
                          onBlur: eachMinNum.onBlur,
                          onChange: eachMinNum.onChange
                        }), React.createElement(ErrorMessage.ErrorMessage, {
                          name: eachMinNum.name,
                          errors: errors,
                          render: (function (param) {
                              return React.createElement("span", {
                                          className: "flex"
                                        }, React.createElement(IconError.make, {
                                              width: "20",
                                              height: "20"
                                            }), React.createElement("span", {
                                              className: "text-sm text-notice ml-1"
                                            }, "입수(최소)를 입력해주세요."));
                            })
                        })), React.createElement("span", undefined, "~"), React.createElement("div", undefined, React.createElement("input", {
                          ref: eachMaxNum.ref,
                          defaultValue: String(1.0),
                          className: Cx.cx([
                                "px-3 py-2 border border-border-default-L1 rounded-lg h-9 focus:outline-none",
                                readOnly$1 ? "bg-disabled-L3" : "bg-white"
                              ]),
                          id: eachMaxNum.name,
                          name: eachMaxNum.name,
                          placeholder: "입수 입력",
                          readOnly: readOnly$1,
                          type: "number",
                          onBlur: eachMaxNum.onBlur,
                          onChange: eachMaxNum.onChange
                        }), React.createElement(ErrorMessage.ErrorMessage, {
                          name: eachMaxNum.name,
                          errors: errors,
                          render: (function (param) {
                              return React.createElement("span", {
                                          className: "flex"
                                        }, React.createElement(IconError.make, {
                                              width: "20",
                                              height: "20"
                                            }), React.createElement("span", {
                                              className: "text-sm text-notice ml-1"
                                            }, "입수(최대)를 입력해주세요."));
                            })
                        }))), React.createElement("div", {
                  className: "flex gap-4 flex-wrap"
                }, React.createElement("div", {
                      className: "flex gap-2 items-center pr-4 border-r border-div-border-L2"
                    }, React.createElement("label", {
                          className: "block shrink-0"
                        }, "개당 무게"), React.createElement("div", {
                          className: "px-3 py-2 border border-border-default-L1 rounded-lg h-9 bg-disabled-L3 w-36 text-disabled-L1 leading-4.5 focus:outline-none"
                        }, amount !== undefined && watchMaxNum !== undefined ? getPerAmount(amount, amountUnit, watchMaxNum, watchAmountUnit) : "자동계산"), React.createElement("span", undefined, "~"), React.createElement("div", {
                          className: "px-3 py-2 border border-border-default-L1 rounded-lg h-9 bg-disabled-L3 w-36 text-disabled-L1 leading-4.5 focus:outline-none"
                        }, amount !== undefined && watchMinNum !== undefined ? getPerAmount(amount, amountUnit, watchMinNum, watchAmountUnit) : "자동계산"), React.createElement(ReactHookForm$1.Controller, {
                          name: inputNames.unitAmount,
                          control: Caml_option.some(control),
                          render: (function (param) {
                              var match = param.field;
                              var onChange = match.onChange;
                              return React.createElement(Select_Product_Option_Unit.Amount.make, {
                                          status: Belt_Result.getWithDefault(Select_Product_Option_Unit.Amount.status_decode(match.value), Select_Product_Option_Unit.AmountStatus.makeDefaultUnit(amountUnit)),
                                          availableOptions: Select_Product_Option_Unit.AmountStatus.makeVariation(amountUnit),
                                          onChange: (function (status) {
                                              Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Select_Product_Option_Unit.Amount.status_encode(status)));
                                            }),
                                          forwardRef: Caml_option.some(match.ref),
                                          disabled: readOnly$1
                                        });
                            }),
                          defaultValue: Caml_option.some(Select_Product_Option_Unit.Amount.status_encode(amountUnit))
                        })), React.createElement("div", {
                      className: "flex gap-2 items-center"
                    }, React.createElement("label", {
                          className: "block shrink-0"
                        }, "개당 크기"), React.createElement("div", undefined, React.createElement("input", {
                              ref: eachMinSize.ref,
                              defaultValue: String(0.0),
                              className: Cx.cx([
                                    "px-3 py-2 border border-border-default-L1 rounded-lg h-9 focus:outline-none shrink",
                                    readOnly$1 ? "bg-disabled-L3" : "bg-white"
                                  ]),
                              id: eachMinSize.name,
                              name: eachMinSize.name,
                              placeholder: "최소 크기",
                              readOnly: readOnly$1,
                              type: "number",
                              onBlur: eachMinSize.onBlur,
                              onChange: eachMinSize.onChange
                            }), React.createElement(ErrorMessage.ErrorMessage, {
                              name: eachMinSize.name,
                              errors: errors,
                              render: (function (param) {
                                  return React.createElement("span", {
                                              className: "flex"
                                            }, React.createElement(IconError.make, {
                                                  width: "20",
                                                  height: "20"
                                                }), React.createElement("span", {
                                                  className: "text-sm text-notice ml-1"
                                                }, "개당 최소 크기를 입력해주세요."));
                                })
                            })), React.createElement("span", undefined, "~"), React.createElement("div", undefined, React.createElement("input", {
                              ref: eachMaxSize.ref,
                              defaultValue: String(0.0),
                              className: Cx.cx([
                                    "px-3 py-2 border border-border-default-L1 rounded-lg h-9 focus:outline-none shrink",
                                    readOnly$1 ? "bg-disabled-L3" : "bg-white"
                                  ]),
                              id: eachMaxSize.name,
                              name: eachMaxSize.name,
                              placeholder: "최대 크기",
                              readOnly: readOnly$1,
                              type: "number",
                              onBlur: eachMaxSize.onBlur,
                              onChange: eachMaxSize.onChange
                            }), React.createElement(ErrorMessage.ErrorMessage, {
                              name: eachMaxSize.name,
                              errors: errors,
                              render: (function (param) {
                                  return React.createElement("span", {
                                              className: "flex"
                                            }, React.createElement(IconError.make, {
                                                  width: "20",
                                                  height: "20"
                                                }), React.createElement("span", {
                                                  className: "text-sm text-notice ml-1"
                                                }, "개당 최대 크기를 입력해주세요."));
                                })
                            })), React.createElement(ReactHookForm$1.Controller, {
                          name: inputNames.unitSize,
                          control: Caml_option.some(control),
                          render: (function (param) {
                              var match = param.field;
                              var onChange = match.onChange;
                              return React.createElement(Select_Product_Option_Unit.Size.make, {
                                          status: Belt_Result.getWithDefault(Select_Product_Option_Unit.Size.status_decode(match.value), /* MM */0),
                                          onChange: (function (status) {
                                              Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Select_Product_Option_Unit.Size.status_encode(status)));
                                            }),
                                          forwardRef: Caml_option.some(match.ref),
                                          disabled: readOnly$1
                                        });
                            })
                        }))));
}

var make = Product_Option_Each_Admin;

export {
  Form ,
  divideNum ,
  getPerAmount ,
  make ,
}
/* react Not a pure module */
