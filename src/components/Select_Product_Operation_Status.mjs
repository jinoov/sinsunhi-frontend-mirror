// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as IconArrowSelect from "./svgs/IconArrowSelect.mjs";

function Select(Status) {
  var status_encode = Status.status_encode;
  var status_decode = Status.status_decode;
  var toString = function (status) {
    return Js_json.decodeString(Curry._1(status_encode, status));
  };
  var defaultStyle = "flex px-3 py-2 border items-center border-border-default-L1 rounded-lg h-9 text-enabled-L1 focus:outline";
  var Select_Product_Operation_Status$Select = function (Props) {
    var status = Props.status;
    var onChange = Props.onChange;
    var forwardRef = Props.forwardRef;
    var disabled = Props.disabled;
    var displayStatus = Belt_Option.getWithDefault(Belt_Option.map(status, Status.toDisplay), "운영상태 선택");
    var value = Belt_Option.getWithDefault(Belt_Option.flatMap(status, toString), "");
    var handleProductOperationStatus = function (e) {
      var status = e.target.value;
      var status$p = Curry._1(status_decode, status);
      if (status$p.TAG === /* Ok */0) {
        return Curry._1(onChange, status$p._0);
      }
      
    };
    var tmp = {
      ref: forwardRef,
      className: "block w-full h-full absolute top-0 opacity-0",
      value: value,
      onChange: handleProductOperationStatus
    };
    if (disabled !== undefined) {
      tmp.disabled = Caml_option.valFromOption(disabled);
    }
    return React.createElement("span", undefined, React.createElement("label", {
                    className: "block relative"
                  }, React.createElement("span", {
                        className: Belt_Option.mapWithDefault(disabled, Cx.cx([
                                  defaultStyle,
                                  "bg-white"
                                ]), (function (d) {
                                if (d) {
                                  return Cx.cx([
                                              defaultStyle,
                                              "bg-disabled-L3"
                                            ]);
                                } else {
                                  return Cx.cx([
                                              defaultStyle,
                                              "bg-white"
                                            ]);
                                }
                              }))
                      }, displayStatus), React.createElement("span", {
                        className: "absolute top-1.5 right-2"
                      }, React.createElement(IconArrowSelect.make, {
                            height: "24",
                            width: "24",
                            fill: "#121212"
                          })), React.createElement("select", tmp, React.createElement("option", {
                            hidden: value !== "",
                            disabled: true,
                            value: ""
                          }, "운영상태 선택"), Belt_Array.map(Status.options, (function (s) {
                              var value = Belt_Option.getWithDefault(Js_json.decodeString(Curry._1(status_encode, s)), "");
                              return React.createElement("option", {
                                          key: value,
                                          value: value
                                        }, Curry._1(Status.toDisplay, s));
                            })))));
  };
  return {
          options: Status.options,
          toDisplay: Status.toDisplay,
          status_encode: status_encode,
          status_decode: status_decode,
          toString: toString,
          defaultStyle: defaultStyle,
          make: Select_Product_Operation_Status$Select
        };
}

function status_encode(v) {
  switch (v) {
    case /* SALE */0 :
        return "SALE";
    case /* SOLDOUT */1 :
        return "SOLDOUT";
    case /* NOSALE */2 :
        return "NOSALE";
    case /* RETIRE */3 :
        return "RETIRE";
    case /* HIDDEN_SALE */4 :
        return "HIDDEN_SALE";
    
  }
}

function status_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("SALE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SALE */0
          };
  } else if ("SOLDOUT" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SOLDOUT */1
          };
  } else if ("NOSALE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* NOSALE */2
          };
  } else if ("RETIRE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* RETIRE */3
          };
  } else if ("HIDDEN_SALE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* HIDDEN_SALE */4
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function toDisplay(status) {
  switch (status) {
    case /* SALE */0 :
        return "판매중";
    case /* SOLDOUT */1 :
        return "품절";
    case /* NOSALE */2 :
        return "숨김";
    case /* RETIRE */3 :
        return "영구판매중지";
    case /* HIDDEN_SALE */4 :
        return "전시판매숨김";
    
  }
}

var options = [
  /* SALE */0,
  /* SOLDOUT */1,
  /* HIDDEN_SALE */4,
  /* NOSALE */2,
  /* RETIRE */3
];

var BaseStatus = {
  status_encode: status_encode,
  status_decode: status_decode,
  toDisplay: toDisplay,
  options: options
};

function status_encode$1(v) {
  switch (v) {
    case /* ALL */0 :
        return "ALL";
    case /* SALE */1 :
        return "SALE";
    case /* SOLDOUT */2 :
        return "SOLDOUT";
    case /* NOSALE */3 :
        return "NOSALE";
    case /* RETIRE */4 :
        return "RETIRE";
    case /* HIDDEN_SALE */5 :
        return "HIDDEN_SALE";
    
  }
}

function status_decode$1(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("ALL" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ALL */0
          };
  } else if ("SALE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SALE */1
          };
  } else if ("SOLDOUT" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SOLDOUT */2
          };
  } else if ("NOSALE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* NOSALE */3
          };
  } else if ("RETIRE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* RETIRE */4
          };
  } else if ("HIDDEN_SALE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* HIDDEN_SALE */5
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function toDisplay$1(status) {
  switch (status) {
    case /* ALL */0 :
        return "전체";
    case /* SALE */1 :
        return "판매중";
    case /* SOLDOUT */2 :
        return "품절";
    case /* NOSALE */3 :
        return "숨김";
    case /* RETIRE */4 :
        return "영구판매중지";
    case /* HIDDEN_SALE */5 :
        return "전시판매중지";
    
  }
}

var options$1 = [
  /* ALL */0,
  /* SALE */1,
  /* SOLDOUT */2,
  /* HIDDEN_SALE */5,
  /* NOSALE */3,
  /* RETIRE */4
];

var SearchStatus = {
  status_encode: status_encode$1,
  status_decode: status_decode$1,
  toDisplay: toDisplay$1,
  options: options$1
};

function toString(status) {
  return Js_json.decodeString(status_encode(status));
}

var defaultStyle = "flex px-3 py-2 border items-center border-border-default-L1 rounded-lg h-9 text-enabled-L1 focus:outline";

function Select_Product_Operation_Status$Select(Props) {
  var status = Props.status;
  var onChange = Props.onChange;
  var forwardRef = Props.forwardRef;
  var disabled = Props.disabled;
  var displayStatus = Belt_Option.getWithDefault(Belt_Option.map(status, toDisplay), "운영상태 선택");
  var value = Belt_Option.getWithDefault(Belt_Option.flatMap(status, toString), "");
  var handleProductOperationStatus = function (e) {
    var status = e.target.value;
    var status$p = status_decode(status);
    if (status$p.TAG === /* Ok */0) {
      return Curry._1(onChange, status$p._0);
    }
    
  };
  var tmp = {
    ref: forwardRef,
    className: "block w-full h-full absolute top-0 opacity-0",
    value: value,
    onChange: handleProductOperationStatus
  };
  if (disabled !== undefined) {
    tmp.disabled = Caml_option.valFromOption(disabled);
  }
  return React.createElement("span", undefined, React.createElement("label", {
                  className: "block relative"
                }, React.createElement("span", {
                      className: Belt_Option.mapWithDefault(disabled, Cx.cx([
                                defaultStyle,
                                "bg-white"
                              ]), (function (d) {
                              if (d) {
                                return Cx.cx([
                                            defaultStyle,
                                            "bg-disabled-L3"
                                          ]);
                              } else {
                                return Cx.cx([
                                            defaultStyle,
                                            "bg-white"
                                          ]);
                              }
                            }))
                    }, displayStatus), React.createElement("span", {
                      className: "absolute top-1.5 right-2"
                    }, React.createElement(IconArrowSelect.make, {
                          height: "24",
                          width: "24",
                          fill: "#121212"
                        })), React.createElement("select", tmp, React.createElement("option", {
                          hidden: value !== "",
                          disabled: true,
                          value: ""
                        }, "운영상태 선택"), Belt_Array.map(options, (function (s) {
                            var value = Belt_Option.getWithDefault(Js_json.decodeString(status_encode(s)), "");
                            return React.createElement("option", {
                                        key: value,
                                        value: value
                                      }, toDisplay(s));
                          })))));
}

var Base = {
  options: options,
  toDisplay: toDisplay,
  status_encode: status_encode,
  status_decode: status_decode,
  toString: toString,
  defaultStyle: defaultStyle,
  make: Select_Product_Operation_Status$Select
};

function toString$1(status) {
  return Js_json.decodeString(status_encode$1(status));
}

var defaultStyle$1 = "flex px-3 py-2 border items-center border-border-default-L1 rounded-lg h-9 text-enabled-L1 focus:outline";

function Select_Product_Operation_Status$Select$1(Props) {
  var status = Props.status;
  var onChange = Props.onChange;
  var forwardRef = Props.forwardRef;
  var disabled = Props.disabled;
  var displayStatus = Belt_Option.getWithDefault(Belt_Option.map(status, toDisplay$1), "운영상태 선택");
  var value = Belt_Option.getWithDefault(Belt_Option.flatMap(status, toString$1), "");
  var handleProductOperationStatus = function (e) {
    var status = e.target.value;
    var status$p = status_decode$1(status);
    if (status$p.TAG === /* Ok */0) {
      return Curry._1(onChange, status$p._0);
    }
    
  };
  var tmp = {
    ref: forwardRef,
    className: "block w-full h-full absolute top-0 opacity-0",
    value: value,
    onChange: handleProductOperationStatus
  };
  if (disabled !== undefined) {
    tmp.disabled = Caml_option.valFromOption(disabled);
  }
  return React.createElement("span", undefined, React.createElement("label", {
                  className: "block relative"
                }, React.createElement("span", {
                      className: Belt_Option.mapWithDefault(disabled, Cx.cx([
                                defaultStyle$1,
                                "bg-white"
                              ]), (function (d) {
                              if (d) {
                                return Cx.cx([
                                            defaultStyle$1,
                                            "bg-disabled-L3"
                                          ]);
                              } else {
                                return Cx.cx([
                                            defaultStyle$1,
                                            "bg-white"
                                          ]);
                              }
                            }))
                    }, displayStatus), React.createElement("span", {
                      className: "absolute top-1.5 right-2"
                    }, React.createElement(IconArrowSelect.make, {
                          height: "24",
                          width: "24",
                          fill: "#121212"
                        })), React.createElement("select", tmp, React.createElement("option", {
                          hidden: value !== "",
                          disabled: true,
                          value: ""
                        }, "운영상태 선택"), Belt_Array.map(options$1, (function (s) {
                            var value = Belt_Option.getWithDefault(Js_json.decodeString(status_encode$1(s)), "");
                            return React.createElement("option", {
                                        key: value,
                                        value: value
                                      }, toDisplay$1(s));
                          })))));
}

var Search = {
  options: options$1,
  toDisplay: toDisplay$1,
  status_encode: status_encode$1,
  status_decode: status_decode$1,
  toString: toString$1,
  defaultStyle: defaultStyle$1,
  make: Select_Product_Operation_Status$Select$1
};

export {
  Select ,
  BaseStatus ,
  SearchStatus ,
  Base ,
  Search ,
  
}
/* react Not a pure module */
