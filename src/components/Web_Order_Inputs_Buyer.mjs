// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as DatePicker from "./DatePicker.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as ReactHookForm from "../bindings/ReactHookForm/ReactHookForm.mjs";
import Format from "date-fns/format";
import * as ReactHookForm$1 from "react-hook-form";
import AddDays from "date-fns/addDays";
import AddHours from "date-fns/addHours";
import * as Web_Order_Buyer_Form from "./Web_Order_Buyer_Form.mjs";
import * as ErrorMessage from "@hookform/error-message";
import * as Web_Order_Util_Component from "./Web_Order_Util_Component.mjs";
import * as FreightDeliveryCost_Table_Buyer from "./FreightDeliveryCost_Table_Buyer.mjs";

function Web_Order_Inputs_Buyer$ReceiverNameInput(Props) {
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(Web_Order_Buyer_Form.names.receiverName, {
        required: true,
        maxLength: 50
      });
  var name = match$1.name;
  return React.createElement("div", {
              className: "flex flex-col gap-2 xl:gap-0 xl:flex-row xl:items-baseline"
            }, React.createElement("label", {
                  className: "xl:w-1/4 block font-bold text-text-L1",
                  htmlFor: name
                }, "이름"), React.createElement("div", undefined, React.createElement("input", {
                      ref: match$1.ref,
                      className: "w-80 h-13 xl:h-9 px-3 border border-gray-300 rounded-lg",
                      id: name,
                      name: name,
                      placeholder: "배송 받으실 분의 이름을 입력해주세요",
                      onBlur: match$1.onBlur,
                      onChange: match$1.onChange
                    }), React.createElement(ErrorMessage.ErrorMessage, {
                      name: name,
                      errors: match.formState.errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex mt-1"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "배송 받으실 분의 이름을 입력해주세요"));
                        })
                    })));
}

var ReceiverNameInput = {
  make: Web_Order_Inputs_Buyer$ReceiverNameInput
};

function Web_Order_Inputs_Buyer$ReceiverPhoneInput(Props) {
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var errors = match.formState.errors;
  var newValue = function (e) {
    var str = e.currentTarget.value.slice(0, 14).replace(/[^0-9]/g, "");
    return (
              str.length === 12 ? str.replace(/([0-9]{4})([0-9]{4})([0-9]{4})/, "$1-$2-$3") : str.replace(/(^02.{0}|^01.{1}|[0-9]{3})([0-9]+)([0-9]{4})/, "$1-$2-$3")
            ).replace("--", "-");
  };
  return React.createElement("div", {
              className: "flex flex-col gap-2 xl:gap-0 xl:flex-row xl:items-baseline"
            }, React.createElement("label", {
                  className: "xl:w-1/4 block font-bold text-text-L1",
                  htmlFor: Web_Order_Buyer_Form.names.receiverPhone
                }, "연락처"), React.createElement("div", undefined, React.createElement(ReactHookForm$1.Controller, {
                      name: Web_Order_Buyer_Form.names.receiverPhone,
                      control: match.control,
                      render: (function (param) {
                          var match = param.field;
                          var onChange = match.onChange;
                          return React.createElement(React.Fragment, undefined, React.createElement("input", {
                                          ref: match.ref,
                                          className: "w-80 h-13 xl:h-9 px-3 border border-gray-300 rounded-lg",
                                          placeholder: "배송 받으실 분의 연락처를 입력해주세요",
                                          value: Belt_Option.getWithDefault(Js_json.decodeString(match.value), ""),
                                          onChange: (function (param) {
                                              return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, newValue(param)));
                                            })
                                        }), React.createElement(ErrorMessage.ErrorMessage, {
                                          name: match.name,
                                          errors: errors,
                                          render: (function (param) {
                                              return React.createElement("span", {
                                                          className: "flex mt-1"
                                                        }, React.createElement(IconError.make, {
                                                              width: "20",
                                                              height: "20"
                                                            }), React.createElement("span", {
                                                              className: "text-sm text-notice ml-1"
                                                            }, "배송 받으실 분의 연락처를 입력해주세요"));
                                            })
                                        }));
                        }),
                      defaultValue: "",
                      rules: ReactHookForm.Rules.make(true, undefined, 10, undefined, undefined, undefined, undefined, undefined, undefined, undefined)
                    })));
}

var ReceiverPhoneInput = {
  make: Web_Order_Inputs_Buyer$ReceiverPhoneInput
};

function Web_Order_Inputs_Buyer$ReceiverAddressInput(Props) {
  var match = ReactHookForm$1.useFormContext({
        mode: "all"
      }, undefined);
  var register = match.register;
  var setValue = match.setValue;
  var errors = match.formState.errors;
  var zipcodeRegister = register(Web_Order_Buyer_Form.names.receiverZipCode, {
        required: true
      });
  var addressRegister = register(Web_Order_Buyer_Form.names.receiverAddress, undefined);
  var detailAdressRegister = register(Web_Order_Buyer_Form.names.receiverDetailAddress, {
        required: true,
        maxLength: 50
      });
  var handleOnClickSearchAddress = function (changeFn) {
    return function (param) {
      return ReactEvents.interceptingHandler((function (param) {
                    var option = {
                      oncomplete: (function (data) {
                          Curry._1(changeFn, Curry._1(ReactHookForm.Controller.OnChangeArg.value, data.zonecode));
                          return setValue(Web_Order_Buyer_Form.names.receiverAddress, data.address);
                        })
                    };
                    var daumPostCode = new (daum.Postcode)(option);
                    var openOption = {
                      popupName: "\xec\x9a\xb0\xed\x8e\xb8\xeb\xb2\x88\xed\x98\xb8 \xea\xb2\x80\xec\x83\x89"
                    };
                    daumPostCode.open(openOption);
                    
                  }), param);
    };
  };
  return React.createElement("div", {
              className: "flex flex-col gap-2 xl:flex-row xl:gap-0 xl:items-baseline"
            }, React.createElement("label", {
                  className: "block font-bold text-text-L1 xl:w-1/4"
                }, "주소"), React.createElement("div", {
                  className: "flex flex-col gap-2 w-full xl:w-3/4 max-w-[320px] xl:max-w-full"
                }, React.createElement("div", {
                      className: "flex flex-col gap-1"
                    }, React.createElement(ReactHookForm$1.Controller, {
                          name: zipcodeRegister.name,
                          control: match.control,
                          render: (function (param) {
                              var match = param.field;
                              var name = match.name;
                              return React.createElement(React.Fragment, undefined, React.createElement("div", {
                                              className: "flex gap-1"
                                            }, React.createElement("input", {
                                                  ref: match.ref,
                                                  className: "w-full xl:w-40 h-13 xl:h-9 px-3 border border-gray-300 rounded-lg bg-disabled-L3 text-disabled-L1",
                                                  id: name,
                                                  name: name,
                                                  placeholder: "우편번호",
                                                  readOnly: true,
                                                  value: Belt_Option.getWithDefault(Js_json.decodeString(match.value), ""),
                                                  onBlur: zipcodeRegister.onBlur
                                                }), React.createElement("button", {
                                                  className: "px-3 min-w-max py-1.5 h-13 xl:h-9 text-white bg-blue-gray-700 rounded-lg",
                                                  type: "button",
                                                  onClick: handleOnClickSearchAddress(match.onChange)
                                                }, "주소검색")), React.createElement(ErrorMessage.ErrorMessage, {
                                              name: Web_Order_Buyer_Form.names.receiverZipCode,
                                              errors: errors,
                                              render: (function (param) {
                                                  return React.createElement("span", {
                                                              className: "flex"
                                                            }, React.createElement(IconError.make, {
                                                                  width: "20",
                                                                  height: "20"
                                                                }), React.createElement("span", {
                                                                  className: "text-sm text-notice ml-1"
                                                                }, "'주소검색'을 통해 우편번호를 입력해주세요"));
                                                })
                                            }));
                            }),
                          defaultValue: "",
                          rules: ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)
                        })), React.createElement("input", {
                      ref: addressRegister.ref,
                      className: "w-full xl:w-3/4 xl:min-w-[20rem] h-13 xl:h-9 px-3 border border-gray-300 rounded-lg bg-disabled-L3 text-disabled-L1",
                      id: addressRegister.name,
                      name: addressRegister.name,
                      placeholder: "우편번호 찾기를 통해 주소입력이 가능합니다.",
                      readOnly: true,
                      onBlur: addressRegister.onBlur,
                      onChange: addressRegister.onChange
                    }), React.createElement("input", {
                      ref: detailAdressRegister.ref,
                      className: "w-full xl:w-3/4 xl:min-w-[20rem] h-13 xl:h-9 px-3 border border-gray-300 rounded-lg ",
                      id: detailAdressRegister.name,
                      name: detailAdressRegister.name,
                      placeholder: "상세주소를 입력해주세요.",
                      onBlur: detailAdressRegister.onBlur,
                      onChange: detailAdressRegister.onChange
                    }), React.createElement(ErrorMessage.ErrorMessage, {
                      name: detailAdressRegister.name,
                      errors: errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex mt-1"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "상세주소를 입력해주세요"));
                        })
                    })));
}

var ReceiverAddressInput = {
  make: Web_Order_Inputs_Buyer$ReceiverAddressInput
};

function Web_Order_Inputs_Buyer$DeliveryMessageInput(Props) {
  var selfModeOpt = Props.selfMode;
  var selfMode = selfModeOpt !== undefined ? selfModeOpt : false;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(Web_Order_Buyer_Form.names.deliveryMessage, {
        maxLength: 100
      });
  var name = match$1.name;
  return React.createElement("div", {
              className: "flex flex-col gap-2 xl:gap-0 max-w-[320px] xl:max-w-full xl:flex-row text-text-L1 xl:items-baseline"
            }, React.createElement("label", {
                  className: "xl:w-1/4 block font-bold",
                  htmlFor: name
                }, (
                  selfMode ? "수령시" : "배송"
                ) + " 요청사항"), React.createElement("div", {
                  className: "w-full xl:w-3/4"
                }, React.createElement("input", {
                      ref: match$1.ref,
                      className: "w-full xl:w-3/4 xl:min-w-[20rem] h-13 xl:h-9 px-3 border border-gray-300 rounded-lg",
                      id: name,
                      name: name,
                      placeholder: (
                        selfMode ? "수령" : "배송"
                      ) + "시 요청사항을 입력해주세요 (최대 100자)",
                      onBlur: match$1.onBlur,
                      onChange: match$1.onChange
                    }), React.createElement(ErrorMessage.ErrorMessage, {
                      name: name,
                      errors: match.formState.errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex mt-1"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "최대 100자 까지 입력해주세요"));
                        })
                    })));
}

var DeliveryMessageInput = {
  make: Web_Order_Inputs_Buyer$DeliveryMessageInput
};

function Web_Order_Inputs_Buyer$DeliveryDesiredDateSelection(Props) {
  var selfModeOpt = Props.selfMode;
  var selfMode = selfModeOpt !== undefined ? selfModeOpt : false;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var t = AddHours(new Date(), 39);
  var match$1 = t.getDay();
  var minDate = match$1 !== 0 ? (
      match$1 !== 6 ? t : AddDays(t, 2)
    ) : AddDays(t, 1);
  return React.createElement("div", {
              className: "flex flex-col xl:flex-row gap-2 xl:gap-0 w-80 xl:w-full xl:items-baseline"
            }, React.createElement("label", {
                  className: "xl:w-1/4 block font-bold"
                }, (
                  selfMode ? "수령" : "배송"
                ) + " 희망일"), React.createElement("div", {
                  className: "flex flex-col gap-1 xl:w-3/4"
                }, React.createElement("div", {
                      className: "flex gap-2"
                    }, React.createElement(ReactHookForm$1.Controller, {
                          name: Web_Order_Buyer_Form.names.deliveryDesiredDate,
                          control: match.control,
                          render: (function (param) {
                              var onChange = param.field.onChange;
                              return React.createElement(DatePicker.make, {
                                          id: "from",
                                          onChange: (function (param) {
                                              var newDate = param.detail.value;
                                              return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, newDate));
                                            }),
                                          date: minDate,
                                          minDate: Format(minDate, "yyyy-MM-dd"),
                                          firstDayOfWeek: 0,
                                          isDateDisabled: (function (d) {
                                              if (d.getDay() === 0) {
                                                return true;
                                              } else {
                                                return d.getDay() === 6;
                                              }
                                            })
                                        });
                            }),
                          defaultValue: Format(minDate, "yyy-MM-dd"),
                          shouldUnregister: true
                        }), selfMode ? null : React.createElement(FreightDeliveryCost_Table_Buyer.make, {})), React.createElement("span", {
                      className: "text-sm text-text-L2"
                    }, "* 원하시는 날짜에 맞춰 물량 확보 및 " + (
                      selfMode ? "수령" : "배송"
                    ) + "이 가능한지 확인 후 연락 드립니다.")));
}

var DeliveryDesiredDateSelection = {
  make: Web_Order_Inputs_Buyer$DeliveryDesiredDateSelection
};

function Web_Order_Inputs_Buyer$PaymentMethodSelection(Props) {
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(Web_Order_Buyer_Form.names.paymentMethod, {
        required: true
      });
  var name = match$1.name;
  var ref = match$1.ref;
  var onBlur = match$1.onBlur;
  var onChange = match$1.onChange;
  var watchValue = ReactHookForm$1.useWatch({
        name: Web_Order_Buyer_Form.names.paymentMethod
      });
  return React.createElement("section", {
              className: "flex flex-col gap-5 bg-white text-enabled-L1"
            }, React.createElement("span", {
                  className: "text-lg xl:text-xl font-bold"
                }, "결제 수단 선택"), React.createElement("div", {
                  className: "flex gap-2"
                }, Belt_Array.map([
                      [
                        "card",
                        "카드결제"
                      ],
                      [
                        "transfer",
                        "계좌이체"
                      ]
                    ], (function (param) {
                        var n = param[1];
                        var value = param[0];
                        return React.createElement("label", {
                                    key: n,
                                    className: "focus:outline-none focus-within:bg-primary-light focus-within:outline-none focus-within:rounded-xl"
                                  }, React.createElement("input", {
                                        ref: ref,
                                        className: "sr-only",
                                        id: name,
                                        name: name,
                                        type: "radio",
                                        value: value,
                                        onBlur: onBlur,
                                        onChange: onChange
                                      }), React.createElement(Web_Order_Util_Component.RadioButton.make, {
                                        watchValue: watchValue,
                                        name: n,
                                        value: value
                                      }));
                      }))), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "결제 수단을 선택해주세요"));
                    })
                }));
}

var PaymentMethodSelection = {
  make: Web_Order_Inputs_Buyer$PaymentMethodSelection
};

var Form;

export {
  Form ,
  ReceiverNameInput ,
  ReceiverPhoneInput ,
  ReceiverAddressInput ,
  DeliveryMessageInput ,
  DeliveryDesiredDateSelection ,
  PaymentMethodSelection ,
  
}
/* react Not a pure module */
