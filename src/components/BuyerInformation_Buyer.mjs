// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as DS_Tab from "./common/container/DS_Tab.mjs";
import * as DS_Icon from "./svgs/DS_Icon.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as DS_Button from "./common/element/DS_Button.mjs";
import * as IconCheck from "./svgs/IconCheck.mjs";
import * as IconClose from "./svgs/IconClose.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as IconSearch from "./svgs/IconSearch.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ChannelTalk from "../bindings/ChannelTalk.mjs";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as IconWarning from "./svgs/IconWarning.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Belt_SetString from "rescript/lib/es6/belt_SetString.js";
import * as IconCloseInput from "./svgs/IconCloseInput.mjs";
import * as LocalStorageHooks from "../utils/LocalStorageHooks.mjs";
import ParseISO from "date-fns/parseISO";
import * as Hooks from "react-relay/hooks";
import * as DS_ButtonContainer from "./common/container/DS_ButtonContainer.mjs";
import FormatISO from "date-fns/formatISO";
import IsYesterday from "date-fns/isYesterday";
import * as ReactDialog from "@radix-ui/react-dialog";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as BuyerInformationBuyerQuery_graphql from "../__generated__/BuyerInformationBuyerQuery_graphql.mjs";
import * as BuyerInformationBuyerSalesBinQuery_graphql from "../__generated__/BuyerInformationBuyerSalesBinQuery_graphql.mjs";
import * as BuyerInformationBuyerSectorSalesMutation_graphql from "../__generated__/BuyerInformationBuyerSectorSalesMutation_graphql.mjs";
import * as BuyerInformationBuyerBusinessSectorListingQuery_graphql from "../__generated__/BuyerInformationBuyerBusinessSectorListingQuery_graphql.mjs";
import * as BuyerInformationBuyerInterestedCategoryMutation_graphql from "../__generated__/BuyerInformationBuyerInterestedCategoryMutation_graphql.mjs";
import * as BuyerInformationBuyerInterestedItemCategoryQuery_graphql from "../__generated__/BuyerInformationBuyerInterestedItemCategoryQuery_graphql.mjs";
import * as BuyerInformationBuyerInterestedCategoryListingQuery_graphql from "../__generated__/BuyerInformationBuyerInterestedCategoryListingQuery_graphql.mjs";

function BuyerInformation_Buyer$Button(Props) {
  var label = Props.label;
  var disabled = Props.disabled;
  var onClick = Props.onClick;
  var tmp = {
    className: "bg-primary text-white font-bold h-13 rounded-xl w-full",
    disabled: disabled
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  return React.createElement("button", tmp, label);
}

var Button = {
  make: BuyerInformation_Buyer$Button
};

function BuyerInformation_Buyer$SectorAndSale$Capsule(Props) {
  var label = Props.label;
  var selected = Props.selected;
  var onClick = Props.onClick;
  var className = selected ? "px-4 py-2 rounded-[20px] bg-primary-light-variant text-primary" : "px-4 py-2 rounded-[20px] bg-gray-50";
  return React.createElement("button", {
              className: className,
              onClick: onClick
            }, label);
}

var Capsule = {
  make: BuyerInformation_Buyer$SectorAndSale$Capsule
};

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(BuyerInformationBuyerBusinessSectorListingQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(BuyerInformationBuyerBusinessSectorListingQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(BuyerInformationBuyerBusinessSectorListingQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(BuyerInformationBuyerBusinessSectorListingQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, BuyerInformationBuyerBusinessSectorListingQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, BuyerInformationBuyerBusinessSectorListingQuery_graphql.node, BuyerInformationBuyerBusinessSectorListingQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: BuyerInformationBuyerBusinessSectorListingQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, BuyerInformationBuyerBusinessSectorListingQuery_graphql.node, BuyerInformationBuyerBusinessSectorListingQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(BuyerInformationBuyerBusinessSectorListingQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(BuyerInformationBuyerBusinessSectorListingQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(BuyerInformationBuyerBusinessSectorListingQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(BuyerInformationBuyerBusinessSectorListingQuery_graphql.node, BuyerInformationBuyerBusinessSectorListingQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_selfReportedBusinessSector_decode = BuyerInformationBuyerBusinessSectorListingQuery_graphql.Utils.selfReportedBusinessSector_decode;

var Query_selfReportedBusinessSector_fromString = BuyerInformationBuyerBusinessSectorListingQuery_graphql.Utils.selfReportedBusinessSector_fromString;

var Query_makeVariables = BuyerInformationBuyerBusinessSectorListingQuery_graphql.Utils.makeVariables;

var Query = {
  selfReportedBusinessSector_decode: Query_selfReportedBusinessSector_decode,
  selfReportedBusinessSector_fromString: Query_selfReportedBusinessSector_fromString,
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function BuyerInformation_Buyer$SectorAndSale$Sector(Props) {
  var selected = Props.selected;
  var onClick = Props.onClick;
  var hasSelected = Props.hasSelected;
  var queryData = use(undefined, undefined, undefined, undefined, undefined);
  var listing = queryData.selfReportedBusinessSectorListing;
  return React.createElement(React.Fragment, undefined, React.createElement("section", undefined, React.createElement("h3", {
                      className: "font-bold"
                    }, "업종", React.createElement("span", {
                          className: "ml-1 text-sm font-normal text-text-L2"
                        }, "*최대 3개 선택가능"))), React.createElement("section", {
                  className: "flex flex-wrap gap-2 mt-5"
                }, listing !== undefined ? Belt_Array.map(listing, (function (d) {
                          var partial_arg = d.id;
                          return React.createElement(BuyerInformation_Buyer$SectorAndSale$Capsule, {
                                      label: d.label,
                                      selected: Curry._2(hasSelected, selected, d.id),
                                      onClick: (function (param) {
                                          return Curry._1(onClick, partial_arg);
                                        }),
                                      key: d.id
                                    });
                        })) : "업종 정보를 찾을 수 없습니다."), React.createElement("section", {
                  className: "mt-4 text-text-L3"
                }, React.createElement("div", undefined, "* 슈퍼마켓 : 정육이나 수산은 취급하지 않아요."), React.createElement("div", undefined, "* 마트 : 정육이나 수산도 취급해요.")));
}

var Sector = {
  Query: Query,
  make: BuyerInformation_Buyer$SectorAndSale$Sector
};

function use$1(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(BuyerInformationBuyerSalesBinQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(BuyerInformationBuyerSalesBinQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(BuyerInformationBuyerSalesBinQuery_graphql.Internal.convertResponse, data);
}

function useLoader$1(param) {
  var match = Hooks.useQueryLoader(BuyerInformationBuyerSalesBinQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, BuyerInformationBuyerSalesBinQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch$1(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, BuyerInformationBuyerSalesBinQuery_graphql.node, BuyerInformationBuyerSalesBinQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: BuyerInformationBuyerSalesBinQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised$1(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, BuyerInformationBuyerSalesBinQuery_graphql.node, BuyerInformationBuyerSalesBinQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(BuyerInformationBuyerSalesBinQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded$1(queryRef, param) {
  var data = Hooks.usePreloadedQuery(BuyerInformationBuyerSalesBinQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(BuyerInformationBuyerSalesBinQuery_graphql.Internal.convertResponse, data);
}

function retain$1(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(BuyerInformationBuyerSalesBinQuery_graphql.node, BuyerInformationBuyerSalesBinQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_selfReportedSalesBin_decode = BuyerInformationBuyerSalesBinQuery_graphql.Utils.selfReportedSalesBin_decode;

var Query_selfReportedSalesBin_fromString = BuyerInformationBuyerSalesBinQuery_graphql.Utils.selfReportedSalesBin_fromString;

var Query_makeVariables$1 = BuyerInformationBuyerSalesBinQuery_graphql.Utils.makeVariables;

var Query$1 = {
  selfReportedSalesBin_decode: Query_selfReportedSalesBin_decode,
  selfReportedSalesBin_fromString: Query_selfReportedSalesBin_fromString,
  makeVariables: Query_makeVariables$1,
  Types: undefined,
  use: use$1,
  useLoader: useLoader$1,
  $$fetch: $$fetch$1,
  fetchPromised: fetchPromised$1,
  usePreloaded: usePreloaded$1,
  retain: retain$1
};

function BuyerInformation_Buyer$SectorAndSale$Sale(Props) {
  var selected = Props.selected;
  var onClick = Props.onClick;
  var queryData = use$1(undefined, undefined, undefined, undefined, undefined);
  var listing = queryData.selfReportedSalesBinListing;
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "mt-12"
                }, React.createElement("h3", {
                      className: "font-bold"
                    }, "연매출")), React.createElement("section", {
                  className: "flex flex-wrap gap-2 mt-5"
                }, listing !== undefined ? Belt_Array.map(listing, (function (d) {
                          var partial_arg = d.id;
                          return React.createElement(BuyerInformation_Buyer$SectorAndSale$Capsule, {
                                      label: d.label,
                                      selected: Caml_obj.caml_equal(selected, d.id),
                                      onClick: (function (param) {
                                          return Curry._1(onClick, partial_arg);
                                        }),
                                      key: d.id
                                    });
                        })) : "연매출 정보를 찾을 수 없습니다."));
}

var Sale = {
  Query: Query$1,
  make: BuyerInformation_Buyer$SectorAndSale$Sale
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: BuyerInformationBuyerSectorSalesMutation_graphql.node,
              variables: BuyerInformationBuyerSectorSalesMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, BuyerInformationBuyerSectorSalesMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? BuyerInformationBuyerSectorSalesMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, BuyerInformationBuyerSectorSalesMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$2(param) {
  var match = Hooks.useMutation(BuyerInformationBuyerSectorSalesMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, BuyerInformationBuyerSectorSalesMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? BuyerInformationBuyerSectorSalesMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, BuyerInformationBuyerSectorSalesMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: BuyerInformationBuyerSectorSalesMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Mutation_errorCode_decode = BuyerInformationBuyerSectorSalesMutation_graphql.Utils.errorCode_decode;

var Mutation_errorCode_fromString = BuyerInformationBuyerSectorSalesMutation_graphql.Utils.errorCode_fromString;

var Mutation_selfReportedBusinessSector_decode = BuyerInformationBuyerSectorSalesMutation_graphql.Utils.selfReportedBusinessSector_decode;

var Mutation_selfReportedBusinessSector_fromString = BuyerInformationBuyerSectorSalesMutation_graphql.Utils.selfReportedBusinessSector_fromString;

var Mutation_selfReportedSalesBin_decode = BuyerInformationBuyerSectorSalesMutation_graphql.Utils.selfReportedSalesBin_decode;

var Mutation_selfReportedSalesBin_fromString = BuyerInformationBuyerSectorSalesMutation_graphql.Utils.selfReportedSalesBin_fromString;

var Mutation_makeVariables = BuyerInformationBuyerSectorSalesMutation_graphql.Utils.makeVariables;

var Mutation = {
  errorCode_decode: Mutation_errorCode_decode,
  errorCode_fromString: Mutation_errorCode_fromString,
  selfReportedBusinessSector_decode: Mutation_selfReportedBusinessSector_decode,
  selfReportedBusinessSector_fromString: Mutation_selfReportedBusinessSector_fromString,
  selfReportedSalesBin_decode: Mutation_selfReportedSalesBin_decode,
  selfReportedSalesBin_fromString: Mutation_selfReportedSalesBin_fromString,
  makeVariables: Mutation_makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$2
};

function BuyerInformation_Buyer$SectorAndSale(Props) {
  var selected = Props.selected;
  var close = Props.close;
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var selectedSet = selected !== undefined ? Belt_Option.mapWithDefault(selected[0], undefined, (function (bs) {
            return Belt_SetString.fromArray(Belt_Array.map(bs, (function (i) {
                              return i.id;
                            })));
          })) : undefined;
  var selectedBin = selected !== undefined ? Belt_Option.map(selected[1], (function (sb) {
            return sb.id;
          })) : undefined;
  var match$1 = React.useState(function () {
        return selectedSet;
      });
  var setBusinessSectorSet = match$1[1];
  var businessSectorSet = match$1[0];
  var match$2 = React.useState(function () {
        return selectedBin;
      });
  var setSalesBin = match$2[1];
  var salesBin = match$2[0];
  var match$3 = use$2(undefined);
  var mutate = match$3[0];
  var handleClickBusiSect = function (item) {
    return setBusinessSectorSet(function (prev) {
                if (Belt_SetString.has(prev, item)) {
                  return Belt_SetString.remove(prev, item);
                } else if (Belt_SetString.size(prev) < 3) {
                  return Belt_SetString.add(prev, item);
                } else {
                  addToast(React.createElement("div", {
                            className: "flex items-center"
                          }, React.createElement(IconWarning.make, {
                                width: "24",
                                height: "24",
                                className: "mr-2",
                                stroke: "#FED925"
                              }), "선택 가능한 최대 품목수를 넘었습니다. (최대3개)"), {
                        appearance: "error"
                      });
                  return prev;
                }
              });
  };
  var handleClickSalesBin = function (item) {
    return setSalesBin(function (prev) {
                if (Caml_obj.caml_equal(prev, item)) {
                  return ;
                } else {
                  return item;
                }
              });
  };
  var hasItem = Belt_SetString.has;
  React.useEffect((function () {
          ChannelTalk.hideChannelButton(undefined);
          return (function (param) {
                    return ChannelTalk.showChannelButton(undefined);
                  });
        }), []);
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "p-5 pt-0 text-text-L1"
                }, React.createElement("article", undefined, React.createElement("h2", {
                          className: "text-xl font-bold whitespace-pre-wrap"
                        }, "프로필이 자세할 수록\n", React.createElement("span", {
                              className: "text-primary"
                            }, "맞춤 소싱 정보"), React.createElement("span", undefined, "를 알려드릴 수 있어요")))), React.createElement("section", {
                  className: "p-5 text-text-L1"
                }, React.createElement(BuyerInformation_Buyer$SectorAndSale$Sector, {
                      selected: businessSectorSet,
                      onClick: handleClickBusiSect,
                      hasSelected: hasItem
                    }), React.createElement(BuyerInformation_Buyer$SectorAndSale$Sale, {
                      selected: salesBin,
                      onClick: handleClickSalesBin
                    })), React.createElement("section", {
                  className: "p-5"
                }, React.createElement(BuyerInformation_Buyer$Button, {
                      label: "저장",
                      disabled: match$3[1],
                      onClick: (function (param) {
                          var match = Belt_SetString.size(businessSectorSet) > 0;
                          if (salesBin !== undefined) {
                            if (match) {
                              Curry.app(mutate, [
                                    (function (param) {
                                        return addToast(React.createElement("div", {
                                                        className: "flex items-center"
                                                      }, React.createElement(IconError.make, {
                                                            width: "24",
                                                            height: "24",
                                                            className: "mr-2"
                                                          }), "에러가 발생하였습니다."), {
                                                    appearance: "error"
                                                  });
                                      }),
                                    (function (param, param$1) {
                                        addToast(React.createElement("div", {
                                                  className: "flex items-center"
                                                }, React.createElement(IconCheck.make, {
                                                      height: "24",
                                                      width: "24",
                                                      fill: "#12B564",
                                                      className: "mr-2"
                                                    }), "업종과 연매출 정보가 저장되었습니다."), {
                                              appearance: "success"
                                            });
                                        return Curry._1(close, undefined);
                                      }),
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    {
                                      binId: salesBin,
                                      businessSectors: Belt_SetString.toArray(businessSectorSet)
                                    },
                                    undefined,
                                    undefined
                                  ]);
                              return ;
                            } else {
                              return addToast(React.createElement("div", {
                                              className: "flex items-center"
                                            }, React.createElement(IconWarning.make, {
                                                  width: "24",
                                                  height: "24",
                                                  className: "mr-2"
                                                }), "업종을 선택해주세요."), {
                                          appearance: "success"
                                        });
                            }
                          } else if (match) {
                            return addToast(React.createElement("div", {
                                            className: "flex items-center"
                                          }, React.createElement(IconWarning.make, {
                                                width: "24",
                                                height: "24",
                                                className: "mr-2"
                                              }), "연매출을 선택해주세요."), {
                                        appearance: "success"
                                      });
                          } else {
                            return addToast(React.createElement("div", {
                                            className: "flex items-center"
                                          }, React.createElement(IconWarning.make, {
                                                width: "24",
                                                height: "24",
                                                className: "mr-2"
                                              }), "업종과 연매출을 선택해주세요."), {
                                        appearance: "success"
                                      });
                          }
                        })
                    })));
}

var SectorAndSale = {
  Capsule: Capsule,
  Sector: Sector,
  Sale: Sale,
  Mutation: Mutation,
  make: BuyerInformation_Buyer$SectorAndSale
};

function BuyerInformation_Buyer$InterestedCategories$Capsule(Props) {
  var item = Props.item;
  var onClick = Props.onClick;
  return React.createElement("button", {
              className: "px-4 py-2 rounded-[20px] bg-gray-50 flex items-center whitespace-pre",
              onClick: (function (param) {
                  return Curry._1(onClick, item.id);
                })
            }, item.name, React.createElement("span", {
                  className: "ml-1"
                }, React.createElement(IconClose.make, {
                      height: "16",
                      width: "16",
                      fill: "#000000"
                    })));
}

var Capsule$1 = {
  make: BuyerInformation_Buyer$InterestedCategories$Capsule
};

function BuyerInformation_Buyer$InterestedCategories$Search(Props) {
  var search = Props.search;
  var onChange = Props.onChange;
  var onClear = Props.onClear;
  return React.createElement(React.Fragment, undefined, React.createElement("section", undefined, React.createElement("h3", {
                      className: "font-bold"
                    }, "관심 상품 찾기", React.createElement("span", {
                          className: "ml-1 text-sm font-normal text-text-L2"
                        }, "*최대 20품목 선택가능"))), React.createElement("section", {
                  className: "flex flex-wrap gap-2 mt-5 relative"
                }, React.createElement(Input.make, {
                      type_: "text",
                      name: "search-category",
                      placeholder: "상품을 검색해보세요.",
                      className: "pl-11",
                      value: search,
                      onChange: onChange,
                      size: /* Large */0,
                      error: undefined
                    }), React.createElement(IconSearch.make, {
                      width: "28",
                      height: "28",
                      className: "absolute left-3 top-1/2 transform -translate-y-1/2",
                      stroke: "#262626"
                    }), search.length > 0 ? React.createElement("span", {
                        className: "absolute p-2 right-1 top-1/2 transform -translate-y-1/2 cursor-pointer",
                        onClick: (function (param) {
                            return Curry._1(onClear, undefined);
                          })
                      }, React.createElement(IconCloseInput.make, {
                            height: "24",
                            width: "24",
                            fill: "#DDDDDD"
                          })) : null));
}

var Search = {
  make: BuyerInformation_Buyer$InterestedCategories$Search
};

function BuyerInformation_Buyer$InterestedCategories$Selected(Props) {
  var data = Props.data;
  var selected = Props.selected;
  var onClick = Props.onClick;
  var matchedItem = function (id) {
    return Belt_Option.flatMap(data, (function (d) {
                  return Belt_Array.getBy(d, (function (d) {
                                return d.id === id;
                              }));
                }));
  };
  var hasSelected = !Garter_Array.isEmpty(selected);
  return React.createElement("section", {
              className: hasSelected ? "my-4 flex gap-2 overflow-x-auto scrollbar-hide" : "flex gap-2 overflow-x-auto scrollbar-hide"
            }, Belt_Array.map(Belt_Array.reverse(selected), (function (id) {
                    var item = matchedItem(id);
                    if (item !== undefined) {
                      return React.createElement(BuyerInformation_Buyer$InterestedCategories$Capsule, {
                                  item: item,
                                  onClick: onClick,
                                  key: item.id
                                });
                    } else {
                      return null;
                    }
                  })));
}

var Selected = {
  make: BuyerInformation_Buyer$InterestedCategories$Selected
};

function BuyerInformation_Buyer$InterestedCategories$ListItems(Props) {
  var items = Props.items;
  var selected = Props.selected;
  var onClickItem = Props.onClickItem;
  var hasItem = Props.hasItem;
  if (items === undefined) {
    return "검색 결과가 없습니다.";
  }
  var hasSelected = !Garter_Array.isEmpty(selected);
  var style = {};
  return React.createElement("ul", {
              "aria-multiselectable": true,
              className: hasSelected ? "my-4 overflow-scroll scrollbar-hide h-[calc(90vh-476px)] h-lg:h-[calc(900px-482px)]" : "my-4 overflow-scroll scrollbar-hide h-[calc(90vh-416px)] h-lg:h-[calc(900px-422px)]",
              style: (style["content-visibility"] = "auto", style)
            }, Belt_Array.map(items, (function (param) {
                    var id = param.id;
                    return React.createElement("li", {
                                key: id,
                                "aria-selected": Curry._2(hasItem, selected, id),
                                className: "flex items-center min-h-[48px] cursor-pointer tab-highlight-color",
                                onClick: (function (param) {
                                    return Curry._1(onClickItem, id);
                                  })
                              }, React.createElement("div", {
                                    className: "flex flex-col justify-between truncate"
                                  }, React.createElement("span", {
                                        className: "block text-base truncate text-text-L1"
                                      }, "" + param.name)), React.createElement("div", {
                                    className: "ml-auto pl-2"
                                  }, Curry._2(hasItem, selected, id) ? React.createElement(DS_Icon.Common.CheckedLarge1.make, {
                                          height: "24",
                                          width: "24",
                                          fill: "#12B564"
                                        }) : React.createElement(DS_Icon.Common.UncheckedLarge1.make, {
                                          height: "24",
                                          width: "24",
                                          fill: "#12B564"
                                        })));
                  })));
}

var ListItems = {
  make: BuyerInformation_Buyer$InterestedCategories$ListItems
};

function use$3(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(BuyerInformationBuyerInterestedItemCategoryQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(BuyerInformationBuyerInterestedItemCategoryQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(BuyerInformationBuyerInterestedItemCategoryQuery_graphql.Internal.convertResponse, data);
}

function useLoader$2(param) {
  var match = Hooks.useQueryLoader(BuyerInformationBuyerInterestedItemCategoryQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, BuyerInformationBuyerInterestedItemCategoryQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch$2(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, BuyerInformationBuyerInterestedItemCategoryQuery_graphql.node, BuyerInformationBuyerInterestedItemCategoryQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: BuyerInformationBuyerInterestedItemCategoryQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised$2(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, BuyerInformationBuyerInterestedItemCategoryQuery_graphql.node, BuyerInformationBuyerInterestedItemCategoryQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(BuyerInformationBuyerInterestedItemCategoryQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded$2(queryRef, param) {
  var data = Hooks.usePreloadedQuery(BuyerInformationBuyerInterestedItemCategoryQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(BuyerInformationBuyerInterestedItemCategoryQuery_graphql.Internal.convertResponse, data);
}

function retain$2(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(BuyerInformationBuyerInterestedItemCategoryQuery_graphql.node, BuyerInformationBuyerInterestedItemCategoryQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_makeVariables$2 = BuyerInformationBuyerInterestedItemCategoryQuery_graphql.Utils.makeVariables;

var Query$2 = {
  makeVariables: Query_makeVariables$2,
  Types: undefined,
  use: use$3,
  useLoader: useLoader$2,
  $$fetch: $$fetch$2,
  fetchPromised: fetchPromised$2,
  usePreloaded: usePreloaded$2,
  retain: retain$2
};

function BuyerInformation_Buyer$InterestedCategories$SearchResults(Props) {
  var search = Props.search;
  var selected = Props.selected;
  var isMutating = Props.isMutating;
  var save = Props.save;
  var onClickItem = Props.onClickItem;
  var hasItem = Props.hasItem;
  var match = CustomHooks.useDebounce(search, 500);
  var queryData = use$3({
        q: match[0]
      }, undefined, undefined, undefined, undefined);
  var hasSelected = !Garter_Array.isEmpty(selected);
  var style = {};
  var itemCategories = Belt_Option.flatMap(queryData.searchInterestedItemCategoryListing, (function (listing) {
          return listing.itemCategories;
        }));
  return React.createElement(React.Fragment, undefined, React.createElement("ul", {
                  "aria-multiselectable": true,
                  className: hasSelected ? "my-4 overflow-scroll scrollbar-hide h-[calc(90vh-398px)] h-lg:h-[calc(900px-398px)]" : "my-4 overflow-scroll scrollbar-hide h-[calc(90vh-358px)] h-lg:h-[calc(900px-358px)]",
                  style: (style["content-visibility"] = "auto", style)
                }, itemCategories !== undefined ? Belt_Array.map(itemCategories, (function (param) {
                          var id = param.id;
                          return React.createElement("li", {
                                      key: id,
                                      "aria-selected": Curry._2(hasItem, selected, id),
                                      className: "flex items-center min-h-[48px] cursor-pointer tab-highlight-color",
                                      onClick: (function (param) {
                                          return Curry._1(onClickItem, id);
                                        })
                                    }, React.createElement("div", {
                                          className: "flex flex-col justify-between truncate"
                                        }, React.createElement("span", {
                                              className: "block text-base truncate text-text-L1"
                                            }, "" + param.name)), React.createElement("div", {
                                          className: "ml-auto pl-2"
                                        }, Curry._2(hasItem, selected, id) ? React.createElement(DS_Icon.Common.CheckedLarge1.make, {
                                                height: "24",
                                                width: "24",
                                                fill: "#12B564"
                                              }) : React.createElement(DS_Icon.Common.UncheckedLarge1.make, {
                                                height: "24",
                                                width: "24",
                                                fill: "#12B564"
                                              })));
                        })) : "검색 결과가 없습니다."), React.createElement(DS_ButtonContainer.Floating1.make, {
                  label: "저장",
                  disabled: isMutating,
                  onClick: (function (param) {
                      return Curry._1(save, undefined);
                    })
                }));
}

var SearchResults = {
  Query: Query$2,
  make: BuyerInformation_Buyer$InterestedCategories$SearchResults
};

function BuyerInformation_Buyer$InterestedCategories$List(Props) {
  var data = Props.data;
  var isMutating = Props.isMutating;
  var save = Props.save;
  var selected = Props.selected;
  var onClickItem = Props.onClickItem;
  var hasItem = Props.hasItem;
  var initialSelectedDepth0Category = Belt_Option.map(Belt_Option.flatMap(data.interestedCategoryListing, (function (listing) {
              return Garter_Array.first(listing.depth0Categories);
            })), (function (depth0Categories) {
          return depth0Categories.id;
        }));
  var match = React.useState(function () {
        return initialSelectedDepth0Category;
      });
  var setSelectedDepth0Category = match[1];
  var selectedDepth0Category = match[0];
  var itemCategories = selectedDepth0Category !== undefined ? Belt_Option.flatMap(data.interestedCategoryListing, (function (listing) {
            return Belt_Option.map(Garter_Array.first(Belt_Array.keep(listing.depth0Categories, (function (depth0Item) {
                                  return depth0Item.id === selectedDepth0Category;
                                }))), (function (depth0Item) {
                          return depth0Item.itemCategories;
                        }));
          })) : Belt_Option.flatMap(data.interestedCategoryListing, (function (listing) {
            return Belt_Option.map(Garter_Array.first(listing.depth0Categories), (function (depth0Item) {
                          return depth0Item.itemCategories;
                        }));
          }));
  var countOfSelected = function (selectedDepth0Category) {
    return Belt_Option.map(Belt_Option.map(Belt_Option.map(Belt_Option.flatMap(data.interestedCategoryListing, (function (listing) {
                              return Belt_Array.getBy(listing.depth0Categories, (function (depth0Item) {
                                            return depth0Item.id === selectedDepth0Category;
                                          }));
                            })), (function (depth0Categories) {
                          return Belt_Array.keep(depth0Categories.itemCategories, (function (itemCategory) {
                                        return Garter_Array.some(selected, (function (i) {
                                                      return i === itemCategory.id;
                                                    }));
                                      }));
                        })), (function (prim) {
                      return prim.length;
                    })), (function (prim) {
                  return String(prim);
                }));
  };
  var list = data.interestedCategoryListing;
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "mt-4"
                }, React.createElement(DS_Tab.LeftTab.Root.make, {
                      children: list !== undefined ? Belt_Array.map(list.depth0Categories, (function (param) {
                                var id = param.id;
                                return React.createElement(DS_Tab.LeftTab.Item.make, {
                                            children: React.createElement(DS_Button.Tab.LeftTab1.make, {
                                                  text: param.name,
                                                  selected: Caml_obj.caml_equal(id, selectedDepth0Category),
                                                  labelNumber: countOfSelected(id),
                                                  onClick: (function (param) {
                                                      return setSelectedDepth0Category(function (param) {
                                                                  return id;
                                                                });
                                                    })
                                                }),
                                            className: "mx-2 first:ml-0 last:mr-0",
                                            key: id
                                          });
                              })) : null
                    })), React.createElement(React.Suspense, {
                  children: React.createElement(BuyerInformation_Buyer$InterestedCategories$ListItems, {
                        items: itemCategories,
                        selected: selected,
                        onClickItem: onClickItem,
                        hasItem: hasItem,
                        key: Belt_Option.getWithDefault(selectedDepth0Category, "")
                      })
                }), React.createElement("div", {
                  className: "h-[56px]"
                }), React.createElement(DS_ButtonContainer.Floating1.make, {
                  label: "저장",
                  disabled: isMutating,
                  onClick: (function (param) {
                      return Curry._1(save, undefined);
                    })
                }));
}

var List = {
  make: BuyerInformation_Buyer$InterestedCategories$List
};

function commitMutation$1(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: BuyerInformationBuyerInterestedCategoryMutation_graphql.node,
              variables: BuyerInformationBuyerInterestedCategoryMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, BuyerInformationBuyerInterestedCategoryMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? BuyerInformationBuyerInterestedCategoryMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, BuyerInformationBuyerInterestedCategoryMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$4(param) {
  var match = Hooks.useMutation(BuyerInformationBuyerInterestedCategoryMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, BuyerInformationBuyerInterestedCategoryMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? BuyerInformationBuyerInterestedCategoryMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, BuyerInformationBuyerInterestedCategoryMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: BuyerInformationBuyerInterestedCategoryMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Mutation_errorCode_decode$1 = BuyerInformationBuyerInterestedCategoryMutation_graphql.Utils.errorCode_decode;

var Mutation_errorCode_fromString$1 = BuyerInformationBuyerInterestedCategoryMutation_graphql.Utils.errorCode_fromString;

var Mutation_makeVariables$1 = BuyerInformationBuyerInterestedCategoryMutation_graphql.Utils.makeVariables;

var Mutation$1 = {
  errorCode_decode: Mutation_errorCode_decode$1,
  errorCode_fromString: Mutation_errorCode_fromString$1,
  makeVariables: Mutation_makeVariables$1,
  Types: undefined,
  commitMutation: commitMutation$1,
  use: use$4
};

function BuyerInformation_Buyer$InterestedCategories$SearchAndList(Props) {
  var data = Props.data;
  var selected = Props.selected;
  var changeModeToSectorSale = Props.changeModeToSectorSale;
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var selected$1 = selected !== undefined ? Belt_Array.map(selected, (function (s) {
            return s.id;
          })) : [];
  var match$1 = React.useState(function () {
        return selected$1;
      });
  var setSelected = match$1[1];
  var selected$2 = match$1[0];
  var match$2 = use$4(undefined);
  var isMutating = match$2[1];
  var mutate = match$2[0];
  var save = function (param) {
    if (selected$2.length !== 0) {
      Curry.app(mutate, [
            (function (param) {
                return addToast(React.createElement("div", {
                                className: "flex items-center"
                              }, React.createElement(IconError.make, {
                                    width: "24",
                                    height: "24",
                                    className: "mr-2"
                                  }), "에러가 발생하였습니다."), {
                            appearance: "error"
                          });
              }),
            (function (param, param$1) {
                addToast(React.createElement("div", {
                          className: "flex items-center"
                        }, React.createElement(IconCheck.make, {
                              height: "24",
                              width: "24",
                              fill: "#12B564",
                              className: "mr-2"
                            }), "관심 상품이 저장되었습니다."), {
                      appearance: "success"
                    });
                return Curry._1(changeModeToSectorSale, undefined);
              }),
            undefined,
            undefined,
            undefined,
            undefined,
            {
              itemCategoryIds: selected$2
            },
            undefined,
            undefined
          ]);
      return ;
    } else {
      return addToast(React.createElement("div", {
                      className: "flex items-center"
                    }, React.createElement(IconWarning.make, {
                          width: "24",
                          height: "24",
                          className: "mr-2"
                        }), "관심 상품을 선택해주세요."), {
                  appearance: "error"
                });
    }
  };
  var itemCategories = Belt_Option.map(Belt_Option.map(data.interestedCategoryListing, (function (listing) {
              return Belt_Array.map(listing.depth0Categories, (function (depth0Item) {
                            return depth0Item.itemCategories;
                          }));
            })), Belt_Array.concatMany);
  var handleClickItemCategory = function (item) {
    return setSelected(function (prev) {
                if (Garter_Array.some(prev, (function (p) {
                          return p === item;
                        }))) {
                  return Garter_Array.keep(prev, (function (p) {
                                return p !== item;
                              }));
                } else if (prev.length < 20) {
                  return Garter_Array.concat(prev, [item]);
                } else {
                  addToast(React.createElement("div", {
                            className: "flex items-center whitespace-pre-line sm:whitespace-normal"
                          }, React.createElement(IconWarning.make, {
                                width: "24",
                                height: "24",
                                className: "mr-2",
                                stroke: "#FED925"
                              }), "선택 가능한 최대 품목수를 넘었습니다. \n(최대20개)"), {
                        appearance: "error"
                      });
                  return prev;
                }
              });
  };
  var hasItem = function (set, item) {
    return Garter_Array.some(set, (function (i) {
                  return Caml_obj.caml_equal(i, item);
                }));
  };
  var match$3 = React.useState(function () {
        return "";
      });
  var setSearch = match$3[1];
  var search = match$3[0];
  var handleOnChange = function ($$event) {
    var value = $$event.target.value;
    return setSearch(function (param) {
                return value;
              });
  };
  var handleOnClear = function (param) {
    return setSearch(function (param) {
                return "";
              });
  };
  return React.createElement(React.Fragment, undefined, React.createElement(BuyerInformation_Buyer$InterestedCategories$Search, {
                  search: search,
                  onChange: handleOnChange,
                  onClear: handleOnClear
                }), React.createElement(BuyerInformation_Buyer$InterestedCategories$Selected, {
                  data: itemCategories,
                  selected: selected$2,
                  onClick: handleClickItemCategory
                }), search.length > 0 ? React.createElement(React.Suspense, {
                    children: React.createElement(BuyerInformation_Buyer$InterestedCategories$SearchResults, {
                          search: search,
                          selected: selected$2,
                          isMutating: isMutating,
                          save: save,
                          onClickItem: handleClickItemCategory,
                          hasItem: hasItem,
                          key: search
                        }),
                    fallback: React.createElement("div", {
                          className: "h-[500px]"
                        })
                  }) : React.createElement(BuyerInformation_Buyer$InterestedCategories$List, {
                    data: data,
                    isMutating: isMutating,
                    save: save,
                    selected: selected$2,
                    onClickItem: handleClickItemCategory,
                    hasItem: hasItem
                  }));
}

var SearchAndList = {
  make: BuyerInformation_Buyer$InterestedCategories$SearchAndList
};

function use$5(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(BuyerInformationBuyerInterestedCategoryListingQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(BuyerInformationBuyerInterestedCategoryListingQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(BuyerInformationBuyerInterestedCategoryListingQuery_graphql.Internal.convertResponse, data);
}

function useLoader$3(param) {
  var match = Hooks.useQueryLoader(BuyerInformationBuyerInterestedCategoryListingQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, BuyerInformationBuyerInterestedCategoryListingQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch$3(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, BuyerInformationBuyerInterestedCategoryListingQuery_graphql.node, BuyerInformationBuyerInterestedCategoryListingQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: BuyerInformationBuyerInterestedCategoryListingQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised$3(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, BuyerInformationBuyerInterestedCategoryListingQuery_graphql.node, BuyerInformationBuyerInterestedCategoryListingQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(BuyerInformationBuyerInterestedCategoryListingQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded$3(queryRef, param) {
  var data = Hooks.usePreloadedQuery(BuyerInformationBuyerInterestedCategoryListingQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(BuyerInformationBuyerInterestedCategoryListingQuery_graphql.Internal.convertResponse, data);
}

function retain$3(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(BuyerInformationBuyerInterestedCategoryListingQuery_graphql.node, BuyerInformationBuyerInterestedCategoryListingQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_makeVariables$3 = BuyerInformationBuyerInterestedCategoryListingQuery_graphql.Utils.makeVariables;

var Query$3 = {
  makeVariables: Query_makeVariables$3,
  Types: undefined,
  use: use$5,
  useLoader: useLoader$3,
  $$fetch: $$fetch$3,
  fetchPromised: fetchPromised$3,
  usePreloaded: usePreloaded$3,
  retain: retain$3
};

function BuyerInformation_Buyer$InterestedCategories(Props) {
  var selected = Props.selected;
  var changeModeToSectorSale = Props.changeModeToSectorSale;
  var queryData = use$5(undefined, undefined, undefined, undefined, undefined);
  React.useEffect((function () {
          ChannelTalk.hideChannelButton(undefined);
          return (function (param) {
                    return ChannelTalk.showChannelButton(undefined);
                  });
        }), []);
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "p-5 pt-0 text-text-L1"
                }, React.createElement("article", undefined, React.createElement("h2", {
                          className: "text-xl font-bold whitespace-pre-wrap"
                        }, "관심 상품을 입력하고\n", React.createElement("span", {
                              className: "text-primary"
                            }, "더 유리한 소싱 조건"), React.createElement("span", undefined, "을 받아보세요!")))), React.createElement("section", {
                  className: "p-5 text-text-L1"
                }, React.createElement(BuyerInformation_Buyer$InterestedCategories$SearchAndList, {
                      data: queryData,
                      selected: selected,
                      changeModeToSectorSale: changeModeToSectorSale
                    })));
}

var InterestedCategories = {
  Capsule: Capsule$1,
  Search: Search,
  Selected: Selected,
  ListItems: ListItems,
  SearchResults: SearchResults,
  List: List,
  Mutation: Mutation$1,
  SearchAndList: SearchAndList,
  Query: Query$3,
  make: BuyerInformation_Buyer$InterestedCategories
};

function use$6(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(BuyerInformationBuyerQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(BuyerInformationBuyerQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(BuyerInformationBuyerQuery_graphql.Internal.convertResponse, data);
}

function useLoader$4(param) {
  var match = Hooks.useQueryLoader(BuyerInformationBuyerQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, BuyerInformationBuyerQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch$4(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, BuyerInformationBuyerQuery_graphql.node, BuyerInformationBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: BuyerInformationBuyerQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised$4(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, BuyerInformationBuyerQuery_graphql.node, BuyerInformationBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(BuyerInformationBuyerQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded$4(queryRef, param) {
  var data = Hooks.usePreloadedQuery(BuyerInformationBuyerQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(BuyerInformationBuyerQuery_graphql.Internal.convertResponse, data);
}

function retain$4(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(BuyerInformationBuyerQuery_graphql.node, BuyerInformationBuyerQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_selfReportedBusinessSector_decode$1 = BuyerInformationBuyerQuery_graphql.Utils.selfReportedBusinessSector_decode;

var Query_selfReportedBusinessSector_fromString$1 = BuyerInformationBuyerQuery_graphql.Utils.selfReportedBusinessSector_fromString;

var Query_selfReportedSalesBin_decode$1 = BuyerInformationBuyerQuery_graphql.Utils.selfReportedSalesBin_decode;

var Query_selfReportedSalesBin_fromString$1 = BuyerInformationBuyerQuery_graphql.Utils.selfReportedSalesBin_fromString;

var Query_makeVariables$4 = BuyerInformationBuyerQuery_graphql.Utils.makeVariables;

var Query$4 = {
  selfReportedBusinessSector_decode: Query_selfReportedBusinessSector_decode$1,
  selfReportedBusinessSector_fromString: Query_selfReportedBusinessSector_fromString$1,
  selfReportedSalesBin_decode: Query_selfReportedSalesBin_decode$1,
  selfReportedSalesBin_fromString: Query_selfReportedSalesBin_fromString$1,
  makeVariables: Query_makeVariables$4,
  Types: undefined,
  use: use$6,
  useLoader: useLoader$4,
  $$fetch: $$fetch$4,
  fetchPromised: fetchPromised$4,
  usePreloaded: usePreloaded$4,
  retain: retain$4
};

function lastShownDate_encode(v) {
  return Js_dict.fromArray([
              [
                "userId",
                Spice.intToJson(v.userId)
              ],
              [
                "date",
                Spice.stringToJson(v.date)
              ]
            ]);
}

function lastShownDate_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var userId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "userId"), null));
  if (userId.TAG === /* Ok */0) {
    var date = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "date"), null));
    if (date.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                userId: userId._0,
                date: date._0
              }
            };
    }
    var e = date._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".date" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = userId._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".userId" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function parse(str) {
  try {
    var lastShownDate = lastShownDate_decode(JSON.parse(str));
    if (lastShownDate.TAG === /* Ok */0) {
      return lastShownDate._0;
    } else {
      return ;
    }
  }
  catch (exn){
    return ;
  }
}

function makeLastShown(id) {
  return JSON.stringify(lastShownDate_encode({
                  userId: id,
                  date: FormatISO(new Date())
                }));
}

function BuyerInformation_Buyer$Fetcher(Props) {
  var match = React.useState(function () {
        return /* Hide */1;
      });
  var setOpen = match[1];
  var match$1 = React.useState(function () {
        return /* InterestedCategories */1;
      });
  var setMode = match$1[1];
  var mode = match$1[0];
  var queryData = use$6(undefined, undefined, undefined, undefined, undefined);
  var user = CustomHooks.Auth.use(undefined);
  React.useEffect((function () {
          if (typeof user !== "number") {
            var match = user._0;
            if (match.role === 1) {
              var id = match.id;
              var lastShownDate = Curry._1(LocalStorageHooks.BuyerInfoLastShown.get, undefined);
              var userId = Belt_Option.map(parse(lastShownDate), (function (lastShown) {
                      return lastShown.userId;
                    }));
              var date = Belt_Option.map(parse(lastShownDate), (function (lastShown) {
                      return lastShown.date;
                    }));
              if (lastShownDate === "" || Caml_obj.caml_notequal(userId, id) || Belt_Option.mapWithDefault(date, true, (function (d) {
                        return IsYesterday(ParseISO(d));
                      }))) {
                var isSalesBinInput = Belt_Option.flatMap(queryData.viewer, (function (viewer) {
                        return viewer.selfReportedSalesBin;
                      }));
                var isBusiniessSectorsInput = Belt_Option.flatMap(queryData.viewer, (function (viewer) {
                        return Belt_Option.map(viewer.selfReportedBusinessSectors, (function (arr) {
                                      return !Garter_Array.isEmpty(arr);
                                    }));
                      }));
                var isInterestedItemCategoriesInput = Belt_Option.flatMap(queryData.viewer, (function (viewer) {
                        return Belt_Option.map(viewer.interestedItemCategories, (function (arr) {
                                      return !Garter_Array.isEmpty(arr);
                                    }));
                      }));
                var exit = 0;
                var exit$1 = 0;
                if (!(isSalesBinInput !== undefined && isBusiniessSectorsInput !== undefined && isBusiniessSectorsInput && isInterestedItemCategoriesInput !== undefined && isInterestedItemCategoriesInput)) {
                  exit$1 = 2;
                }
                if (exit$1 === 2) {
                  var exit$2 = 0;
                  if (isBusiniessSectorsInput !== undefined && isBusiniessSectorsInput) {
                    exit = 1;
                  } else {
                    exit$2 = 3;
                  }
                  if (exit$2 === 3) {
                    if (isInterestedItemCategoriesInput !== undefined && isInterestedItemCategoriesInput) {
                      setOpen(function (param) {
                            return /* Show */0;
                          });
                      setMode(function (param) {
                            return /* SectorAndSale */0;
                          });
                      Curry._1(LocalStorageHooks.BuyerInfoLastShown.set, makeLastShown(id));
                    } else {
                      exit = 1;
                    }
                  }
                  
                }
                if (exit === 1) {
                  setOpen(function (param) {
                        return /* Show */0;
                      });
                  setMode(function (param) {
                        return /* InterestedCategories */1;
                      });
                  Curry._1(LocalStorageHooks.BuyerInfoLastShown.set, makeLastShown(id));
                }
                
              }
              
            }
            
          }
          
        }), [
        queryData,
        user
      ]);
  var changeModeToSectorSale = function (param) {
    return setMode(function (param) {
                return /* SectorAndSale */0;
              });
  };
  var close = function (param) {
    return setOpen(function (param) {
                return /* Hide */1;
              });
  };
  var hasInputBusinessSectorsAndSalesBin = Belt_Option.mapWithDefault(queryData.viewer, false, (function (v) {
          var bs = Belt_Option.map(v.selfReportedBusinessSectors, (function (arr) {
                  return !Garter_Array.isEmpty(arr);
                }));
          var sb = v.selfReportedSalesBin;
          if (bs !== undefined && bs) {
            return sb !== undefined;
          } else {
            return false;
          }
        }));
  var contentStyle = mode ? "dialog-content-full overflow-y-auto sm:rounded-2xl" : "dialog-content-detail overflow-y-auto rounded-2xl";
  return React.createElement(ReactDialog.Root, {
              children: null,
              open: match[0] ? false : true
            }, React.createElement(ReactDialog.Overlay, {
                  className: "dialog-overlay"
                }), React.createElement(ReactDialog.Content, {
                  children: null,
                  className: contentStyle
                }, React.createElement("section", {
                      className: "text-text-L1"
                    }, React.createElement("article", {
                          className: "flex"
                        }, React.createElement(ReactDialog.Close, {
                              onClick: (function (param) {
                                  if (mode === /* InterestedCategories */1 && !hasInputBusinessSectorsAndSalesBin) {
                                    return setMode(function (param) {
                                                return /* SectorAndSale */0;
                                              });
                                  } else {
                                    return setOpen(function (param) {
                                                return /* Hide */1;
                                              });
                                  }
                                }),
                              children: React.createElement(IconClose.make, {
                                    height: "24",
                                    width: "24",
                                    fill: "#262626"
                                  }),
                              className: "p-2 m-3 mb-0 focus:outline-none ml-auto"
                            }))), mode ? React.createElement(BuyerInformation_Buyer$InterestedCategories, {
                        selected: Belt_Option.flatMap(queryData.viewer, (function (v) {
                                return v.interestedItemCategories;
                              })),
                        changeModeToSectorSale: changeModeToSectorSale
                      }) : React.createElement(BuyerInformation_Buyer$SectorAndSale, {
                        selected: Belt_Option.map(queryData.viewer, (function (v) {
                                return [
                                        v.selfReportedBusinessSectors,
                                        v.selfReportedSalesBin
                                      ];
                              })),
                        close: close
                      })));
}

var Fetcher = {
  lastShownDate_encode: lastShownDate_encode,
  lastShownDate_decode: lastShownDate_decode,
  parse: parse,
  makeLastShown: makeLastShown,
  make: BuyerInformation_Buyer$Fetcher
};

function BuyerInformation_Buyer(Props) {
  var user = CustomHooks.Auth.use(undefined);
  if (typeof user === "number" || user._0.role !== 1) {
    return null;
  } else {
    return React.createElement(React.Suspense, {
                children: React.createElement(BuyerInformation_Buyer$Fetcher, {}),
                fallback: React.createElement("div", undefined, "!!!")
              });
  }
}

var make = BuyerInformation_Buyer;

export {
  Button ,
  SectorAndSale ,
  InterestedCategories ,
  Query$4 as Query,
  Fetcher ,
  make ,
  
}
/* Input Not a pure module */
