// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Helper from "../utils/Helper.mjs";
import * as Locale from "../utils/Locale.mjs";
import * as Converter from "../utils/Converter.mjs";
import * as IconClose from "./svgs/IconClose.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as ReactDialog from "@radix-ui/react-dialog";

function formatDate(d) {
  return Locale.DateTime.formatFromUTC(new Date(d), "yyyy/MM/dd HH:mm");
}

var Converter$1 = Converter.Status({});

function Order_Detail_Button_Buyer_Seller(Props) {
  var order = Props.order;
  var status = CustomHooks.Courier.use(undefined);
  var courierName;
  if (typeof status === "number" || status.TAG !== /* Loaded */0) {
    courierName = "-";
  } else {
    var couriers = status._0;
    courierName = Belt_Option.getWithDefault(Belt_Option.map(Belt_Option.flatMap(order.courierCode, (function (courierCode$p) {
                    return Belt_Result.getWithDefault(Belt_Result.map(CustomHooks.Courier.response_decode(couriers), (function (couriers$p) {
                                      return Belt_Array.getBy(couriers$p.data, (function (courier) {
                                                    return courier.code === courierCode$p;
                                                  }));
                                    })), undefined);
                  })), (function (courier) {
                return courier.name;
              })), "-");
  }
  return React.createElement(ReactDialog.Root, {
              children: null
            }, React.createElement(ReactDialog.Overlay, {
                  className: "dialog-overlay"
                }), React.createElement(ReactDialog.Trigger, {
                  children: order.orderProductNo,
                  className: "block text-left mb-1 underline focus:outline-none"
                }), React.createElement(ReactDialog.Content, {
                  children: React.createElement("div", {
                        className: "p-5"
                      }, React.createElement("div", {
                            className: "flex"
                          }, React.createElement("h2", {
                                className: "text-xl font-bold"
                              }, "주문상세조회"), React.createElement(ReactDialog.Close, {
                                children: React.createElement(IconClose.make, {
                                      height: "24",
                                      width: "24",
                                      fill: "#262626"
                                    }),
                                className: "focus:outline-none ml-auto"
                              })), React.createElement("h3", {
                            className: "mt-10 font-bold"
                          }, "주문정보"), React.createElement("section", {
                            className: "divide-y text-sm text-text-L2 mt-2 border-t border-b"
                          }, React.createElement("div", {
                                className: "grid grid-cols-2-detail sm:grid-cols-4-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "주문번호"), React.createElement("div", {
                                    className: "p-3"
                                  }, order.orderProductNo), React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2 border-t sm:border-t-0"
                                  }, "상품번호"), React.createElement("div", {
                                    className: "p-3 border-t sm:border-t-0"
                                  }, String(order.productId))), React.createElement("div", {
                                className: "grid grid-cols-2-detail sm:grid-cols-4-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "주문일시"), React.createElement("div", {
                                    className: "p-3"
                                  }, formatDate(order.orderDate)), React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2 border-t sm:border-t-0"
                                  }, "결제금액"), React.createElement("div", {
                                    className: "p-3 border-t sm:border-t-0"
                                  }, "" + Locale.Float.show(undefined, order.productPrice * order.quantity, 0) + "원")), React.createElement("div", {
                                className: "grid grid-cols-2-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "주문상태"), React.createElement("div", {
                                    className: "p-3"
                                  }, Curry._1(Converter$1.displayStatus, order.status))), React.createElement("div", {
                                className: "grid grid-cols-2-detail sm:grid-cols-4-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "주문자"), React.createElement("div", {
                                    className: "p-3"
                                  }, Belt_Option.getWithDefault(order.ordererName, "-")), React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2 border-t sm:border-t-0"
                                  }, "주문자 연락처"), React.createElement("div", {
                                    className: "p-3 border-t sm:border-t-0"
                                  }, Belt_Option.getWithDefault(order.ordererPhone, "-")))), React.createElement("h3", {
                            className: "mt-10 font-bold"
                          }, "상품정보"), React.createElement("section", {
                            className: "divide-y text-sm text-text-L2 mt-2 border-t border-b"
                          }, React.createElement("div", {
                                className: "grid grid-cols-2-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "상품명(번호)"), React.createElement("div", {
                                    className: "p-3"
                                  }, order.productName, " (" + String(order.productId) + ")")), React.createElement("div", {
                                className: "grid grid-cols-2-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "옵션명(번호)"), React.createElement("div", {
                                    className: "p-3"
                                  }, Belt_Option.getWithDefault(order.productOptionName, "-"), " (" + order.productSku + ")")), React.createElement("div", {
                                className: "grid grid-cols-2-detail sm:grid-cols-4-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "수량"), React.createElement("div", {
                                    className: "p-3"
                                  }, String(order.quantity)), React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2 border-t sm:border-t-0"
                                  }, "금액"), React.createElement("div", {
                                    className: "p-3 border-t sm:border-t-0"
                                  }, "" + Locale.Float.show(undefined, order.productPrice, 0) + "원"))), React.createElement("h3", {
                            className: "mt-10 font-bold"
                          }, "배송정보"), React.createElement("section", {
                            className: "divide-y text-sm text-text-L2 mt-2 border-t border-b"
                          }, React.createElement("div", {
                                className: "grid grid-cols-2-detail sm:grid-cols-4-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "택배사"), React.createElement("div", {
                                    className: "p-3"
                                  }, React.createElement("span", {
                                        className: "block"
                                      }, courierName)), React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2 border-t sm:border-t-0"
                                  }, "송장번호"), React.createElement("div", {
                                    className: "p-3 border-t sm:border-t-0"
                                  }, Belt_Option.getWithDefault(order.invoice, "-"))), React.createElement("div", {
                                className: "grid grid-cols-2-detail sm:grid-cols-4-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "수취인"), React.createElement("div", {
                                    className: "p-3"
                                  }, Belt_Option.getWithDefault(order.receiverName, "-")), React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2 border-t sm:border-t-0"
                                  }, "수취인 연락처"), React.createElement("div", {
                                    className: "p-3 border-t sm:border-t-0"
                                  }, Belt_Option.getWithDefault(Belt_Option.flatMap(Helper.PhoneNumber.parse(Belt_Option.getWithDefault(order.receiverPhone, "-")), Helper.PhoneNumber.format), Belt_Option.getWithDefault(order.receiverPhone, "-")))), React.createElement("div", {
                                className: "grid grid-cols-2-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "주소·우편번호"), React.createElement("div", {
                                    className: "p-3"
                                  }, Belt_Option.getWithDefault(order.receiverAddress, "-"), " (" + Belt_Option.getWithDefault(order.receiverZipcode, "-") + ")")), React.createElement("div", {
                                className: "grid grid-cols-2-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "배송메모"), React.createElement("div", {
                                    className: "p-3"
                                  }, Belt_Option.getWithDefault(order.deliveryMessage, ""))))),
                  className: "dialog-content-detail overflow-y-auto"
                }));
}

var make = Order_Detail_Button_Buyer_Seller;

export {
  formatDate ,
  Converter$1 as Converter,
  make ,
}
/* Converter Not a pure module */
