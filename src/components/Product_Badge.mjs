// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Converter from "../utils/Converter.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";

function Product_Badge(Props) {
  var status = Props.status;
  var displayStyle = status !== 1 && status === 0 ? "max-w-min bg-green-gl-light py-0.5 px-2 text-green-gl rounded mr-2 whitespace-nowrap" : "max-w-min bg-gray-gl py-0.5 px-2 text-gray-gl rounded mr-2 whitespace-nowrap";
  var Converter$1 = Converter.SalesStatus({});
  var displayText = Curry._1(Converter$1.statusToString, status);
  return React.createElement("span", {
              className: displayStyle
            }, displayText);
}

function status_encode(v) {
  switch (v) {
    case /* SALE */0 :
        return ["SALE"];
    case /* SOLDOUT */1 :
        return ["SOLDOUT"];
    case /* HIDDEN_SALE */2 :
        return ["HIDDEN_SALE"];
    case /* NOSALE */3 :
        return ["NOSALE"];
    case /* RETIRE */4 :
        return ["RETIRE"];
    
  }
}

function status_decode(v) {
  var json_arr = Js_json.classify(v);
  if (typeof json_arr === "number") {
    return Spice.error(undefined, "Not a variant", v);
  }
  if (json_arr.TAG !== /* JSONArray */3) {
    return Spice.error(undefined, "Not a variant", v);
  }
  var json_arr$1 = json_arr._0;
  if (json_arr$1.length === 0) {
    return Spice.error(undefined, "Expected variant, found empty array", v);
  }
  var tagged = json_arr$1.map(Js_json.classify);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match !== "number" && match.TAG === /* JSONString */0) {
    switch (match._0) {
      case "HIDDEN_SALE" :
          if (tagged.length !== 1) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          } else {
            return {
                    TAG: /* Ok */0,
                    _0: /* HIDDEN_SALE */2
                  };
          }
      case "NOSALE" :
          if (tagged.length !== 1) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          } else {
            return {
                    TAG: /* Ok */0,
                    _0: /* NOSALE */3
                  };
          }
      case "RETIRE" :
          if (tagged.length !== 1) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          } else {
            return {
                    TAG: /* Ok */0,
                    _0: /* RETIRE */4
                  };
          }
      case "SALE" :
          if (tagged.length !== 1) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          } else {
            return {
                    TAG: /* Ok */0,
                    _0: /* SALE */0
                  };
          }
      case "SOLDOUT" :
          if (tagged.length !== 1) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          } else {
            return {
                    TAG: /* Ok */0,
                    _0: /* SOLDOUT */1
                  };
          }
      default:
        
    }
  }
  return Spice.error(undefined, "Invalid variant constructor", Belt_Array.getExn(json_arr$1, 0));
}

function Product_Badge$V2(Props) {
  var status = Props.status;
  var displayText;
  switch (status) {
    case /* SALE */0 :
        displayText = "판매중";
        break;
    case /* SOLDOUT */1 :
        displayText = "품절";
        break;
    case /* HIDDEN_SALE */2 :
        displayText = "전시숨김";
        break;
    case /* NOSALE */3 :
        displayText = "숨김";
        break;
    case /* RETIRE */4 :
        displayText = "영구판매중지";
        break;
    
  }
  var displayStyle = status !== 1 && status === 0 ? "max-w-min bg-green-gl-light py-0.5 px-2 text-green-gl rounded mr-2 whitespace-nowrap" : "max-w-min bg-gray-gl py-0.5 px-2 text-gray-gl rounded mr-2 whitespace-nowrap";
  return React.createElement("span", {
              className: displayStyle
            }, displayText);
}

var V2 = {
  status_encode: status_encode,
  status_decode: status_decode,
  make: Product_Badge$V2
};

var make = Product_Badge;

export {
  make ,
  V2 ,
  
}
/* react Not a pure module */
