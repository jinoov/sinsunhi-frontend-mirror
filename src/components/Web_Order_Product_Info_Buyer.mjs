// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as React from "@rescript/react/src/React.mjs";
import * as React$1 from "react";
import * as Locale from "../utils/Locale.mjs";
import * as Skeleton from "./Skeleton.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";

function Web_Order_Product_Info_Buyer$PlaceHolder$PC(props) {
  return React$1.createElement("section", {
              className: "flex flex-col gap-5 bg-white rounded-sm"
            }, React$1.createElement("span", {
                  className: "text-xl text-enabled-L1 font-bold"
                }, "상품 정보"), React$1.createElement("div", {
                  className: "flex justify-between gap-3 h-20"
                }, React$1.createElement(Skeleton.Box.make, {
                      className: "w-20 h-20 rounded-lg"
                    }), React$1.createElement("div", {
                      className: "flex-auto"
                    }, React$1.createElement(Skeleton.Box.make, {
                          className: "w-32 mb-1"
                        }), React$1.createElement(Skeleton.Box.make, {
                          className: "w-32 mb-1"
                        }), React$1.createElement(Skeleton.Box.make, {
                          className: "w-24"
                        })), React$1.createElement(Skeleton.Box.make, {
                      className: "w-24 flex min-w-fit"
                    })));
}

var PC = {
  make: Web_Order_Product_Info_Buyer$PlaceHolder$PC
};

function Web_Order_Product_Info_Buyer$PlaceHolder$MO(props) {
  return React$1.createElement("section", {
              className: "flex flex-col gap-5 bg-white rounded-sm"
            }, React$1.createElement("span", {
                  className: "text-lg text-enabled-L1 font-bold"
                }, "상품 정보"), React$1.createElement("div", {
                  className: "flex justify-between gap-3 h-18"
                }, React$1.createElement(Skeleton.Box.make, {
                      className: "w-18 h-18 rounded-lg"
                    }), React$1.createElement("div", {
                      className: "flex-auto"
                    }, React$1.createElement(Skeleton.Box.make, {
                          className: "w-32 mb-1"
                        }), React$1.createElement(Skeleton.Box.make, {
                          className: "w-32 mb-1"
                        }), React$1.createElement(Skeleton.Box.make, {
                          className: "w-24"
                        }))));
}

var MO = {
  make: Web_Order_Product_Info_Buyer$PlaceHolder$MO
};

var PlaceHolder = {
  PC: PC,
  MO: MO
};

function Web_Order_Product_Info_Buyer$List(props) {
  return React$1.createElement("div", {
              className: "flex flex-col gap-2"
            }, Belt_Array.map(props.productOptions, (function (param) {
                    var productOptionName = param.productOptionName;
                    return React$1.createElement("div", {
                                key: productOptionName,
                                className: "flex flex-col p-3 gap-1 w-full bg-gray-50 rounded-md"
                              }, React$1.createElement("span", {
                                    className: "text-sm text-gray-800"
                                  }, productOptionName), React$1.createElement("span", {
                                    className: "text-sm text-gray-600"
                                  }, "수량 " + Locale.Int.show(undefined, param.quantity) + " | " + Locale.Int.show(undefined, param.price) + "원"));
                  })));
}

var List = {
  make: Web_Order_Product_Info_Buyer$List
};

function Web_Order_Product_Info_Buyer$ProductCard$PC(props) {
  var isLast = props.isLast;
  var data = props.data;
  var isLast$1 = isLast !== undefined ? isLast : false;
  return React$1.createElement("div", {
              className: "w-full flex gap-3 pt-7"
            }, React$1.createElement("img", {
                  className: "min-w-[80px] min-h-[80px] w-20 h-20 rounded-lg",
                  alt: "product-image",
                  src: data.imageUrl
                }), React$1.createElement("div", {
                  className: Cx.cx([
                        "flex flex-col gap-2 w-full pb-7 border border-x-0 border-t-0 border-div-border-L2",
                        isLast$1 ? "border-b-0" : ""
                      ])
                }, React$1.createElement("div", {
                      className: "flex flex-row w-full justify-between xl:items-center"
                    }, React$1.createElement("span", {
                          className: "text-gray-800 font-bold"
                        }, data.productName), React$1.createElement("span", {
                          className: "text-gray-800 font-bold text-base"
                        }, "" + Locale.Int.show(undefined, data.totalPrice) + "원")), React$1.createElement(Web_Order_Product_Info_Buyer$List, {
                      productOptions: data.productOptions
                    })));
}

var PC$1 = {
  make: Web_Order_Product_Info_Buyer$ProductCard$PC
};

function Web_Order_Product_Info_Buyer$ProductCard$MO(props) {
  var isLast = props.isLast;
  var data = props.data;
  var isLast$1 = isLast !== undefined ? isLast : false;
  return React$1.createElement("div", undefined, React$1.createElement("div", {
                  className: "w-full flex gap-3 pt-5"
                }, React$1.createElement("img", {
                      className: "w-18 h-18 min-w-[72px] min-h-[72px] rounded-lg",
                      alt: "product-image",
                      src: data.imageUrl
                    }), React$1.createElement("div", {
                      className: "flex flex-col gap-2 w-full pb-7"
                    }, React$1.createElement("div", {
                          className: "flex flex-col justify-between"
                        }, React$1.createElement("span", {
                              className: "text-gray-800 font-normal"
                            }, data.productName), React$1.createElement("span", {
                              className: "text-gray-800 font-bold text-lg"
                            }, "" + Locale.Int.show(undefined, data.totalPrice) + "원")))), React$1.createElement("div", {
                  className: isLast$1 ? "" : "pb-5 border border-x-0 border-t-0 border-div-border-L2"
                }, React$1.createElement(Web_Order_Product_Info_Buyer$List, {
                      productOptions: data.productOptions
                    })));
}

var MO$1 = {
  make: Web_Order_Product_Info_Buyer$ProductCard$MO
};

var ProductCard = {
  PC: PC$1,
  MO: MO$1
};

function Web_Order_Product_Info_Buyer$PC(props) {
  var productInfos = props.productInfos;
  return React$1.createElement(React$1.Fragment, undefined, React$1.createElement("span", {
                  className: "text-xl text-enabled-L1 font-bold"
                }, "상품 정보"), React$1.createElement("div", undefined, Belt_Array.mapWithIndex(productInfos, (function (idx, data) {
                        return React.createElementWithKey(Web_Order_Product_Info_Buyer$ProductCard$PC, {
                                    data: data,
                                    isLast: idx === (productInfos.length - 1 | 0)
                                  }, data.productName);
                      }))));
}

var PC$2 = {
  make: Web_Order_Product_Info_Buyer$PC
};

function Web_Order_Product_Info_Buyer$MO(props) {
  var productInfos = props.productInfos;
  return React$1.createElement(React$1.Fragment, undefined, React$1.createElement("span", {
                  className: "text-lg text-enabled-L1 font-bold"
                }, "상품 정보"), React$1.createElement("div", {
                  className: "pb-8"
                }, Belt_Array.mapWithIndex(productInfos, (function (idx, data) {
                        return React.createElementWithKey(Web_Order_Product_Info_Buyer$ProductCard$MO, {
                                    data: data,
                                    isLast: idx === (productInfos.length - 1 | 0)
                                  }, data.productName);
                      }))));
}

var MO$2 = {
  make: Web_Order_Product_Info_Buyer$MO
};

var Form;

export {
  PlaceHolder ,
  Form ,
  List ,
  ProductCard ,
  PC$2 as PC,
  MO$2 as MO,
}
/* React Not a pure module */
