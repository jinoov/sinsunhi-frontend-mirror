// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as ReForm from "@rescriptbr/reform/src/ReForm.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as FetchHelper from "../utils/FetchHelper.mjs";
import * as ReactEvents from "../utils/ReactEvents.mjs";

function response_encode(v) {
  return Js_dict.fromArray([[
                "message",
                Spice.stringToJson(v.message)
              ]]);
}

function response_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict._0, "message"), null));
  if (message.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              message: message._0
            }
          };
  }
  var e = message._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".message" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function parseMessage(message, businessNumber) {
  switch (message) {
    case "CLOSE" :
        return {
                TAG: /* Invalid */1,
                _0: /* Closed */2
              };
    case "NOT_REGISTERED" :
        return {
                TAG: /* Invalid */1,
                _0: /* Unregistered */0
              };
    case "SUSPEND" :
        return {
                TAG: /* Invalid */1,
                _0: /* Suspended */1
              };
    case "VALID" :
        return {
                TAG: /* Valid */0,
                _0: businessNumber
              };
    default:
      return {
              TAG: /* Invalid */1,
              _0: /* Unexpected */3
            };
  }
}

function dictToQueryStr(dict) {
  return new URLSearchParams(dict).toString();
}

function get(values, field) {
  return values.businessNumber;
}

function set(values, field, value) {
  return {
          businessNumber: value
        };
}

var FormFields = {
  get: get,
  set: set
};

var Form = ReForm.Make({
      set: set,
      get: get
    });

var initialState = {
  businessNumber: ""
};

var btnStyle = "w-full bg-blue-gray-700 rounded-xl text-white font-bold whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-gray-700 focus:ring-offset-1";

var btnStyleDisabled = "w-full bg-gray-50 rounded-xl whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-1";

function VerifyBusinessNumber(Props) {
  var onChange = Props.onChange;
  var match = React.useState(function () {
        return false;
      });
  var setLoading = match[1];
  var isLoading = match[0];
  var match$1 = React.useState(function () {
        return /* Waiting */0;
      });
  var setStatus = match$1[1];
  var status = match$1[0];
  var isValid;
  isValid = typeof status === "number" || status.TAG !== /* Valid */0 ? false : true;
  var updateStatus = function (nextStatus) {
    if (typeof nextStatus === "number" || nextStatus.TAG !== /* Valid */0) {
      Curry._1(onChange, undefined);
    } else {
      Curry._1(onChange, nextStatus._0);
    }
    return setStatus(function (param) {
                return nextStatus;
              });
  };
  var submit = function (param) {
    setLoading(function (param) {
          return true;
        });
    var businessNumber = param.state.values.businessNumber.replace(new RegExp("\\-", "g"), "");
    var dict = Js_dict.fromList({
          hd: [
            "b-no",
            businessNumber
          ],
          tl: /* [] */0
        });
    var queryStr = new URLSearchParams(dict).toString();
    FetchHelper.get(Env.restApiUrl + "/user/validate-business-number?" + queryStr, (function (json) {
            var json$p = response_decode(json);
            if (json$p.TAG === /* Ok */0) {
              return updateStatus(parseMessage(json$p._0.message, businessNumber));
            } else {
              return updateStatus({
                          TAG: /* Invalid */1,
                          _0: /* Unexpected */3
                        });
            }
          }), (function (param) {
            return updateStatus({
                        TAG: /* Invalid */1,
                        _0: /* Unexpected */3
                      });
          }));
    setLoading(function (param) {
          return false;
        });
    
  };
  var form = Curry._7(Form.use, initialState, /* Schema */{
        _0: Belt_Array.concatMany([Curry._4(Form.ReSchema.Validation.regExp, "사업자 등록번호 형식을 확인해주세요.", "^\\d{3}-\\d{2}-\\d{5}$", undefined, /* BusinessNumber */0)])
      }, submit, undefined, undefined, /* OnChange */0, undefined);
  var onChangeBusinessNumber = function (e) {
    updateStatus(/* Waiting */0);
    var businessNumber = e.currentTarget.value.replace(/[^\d]/g, "").replace(/(^\d{3})(\d+)?(\d{5})$/, "$1-$2-$3").replace("--", "-");
    return Curry._4(form.setFieldValue, /* BusinessNumber */0, businessNumber, true, undefined);
  };
  var statusErr;
  statusErr = typeof status === "number" || status.TAG === /* Valid */0 ? undefined : (
      status._0 >= 3 ? "인증에 실패하였습니다. 다시 한번 시도해주세요." : "유효하지 않은 사업자 등록번호입니다."
    );
  var errorMessage = Belt_Option.isSome(statusErr) ? statusErr : Curry._1(form.getFieldError, /* Field */{
          _0: /* BusinessNumber */0
        });
  var tmp;
  tmp = typeof status === "number" || status.TAG !== /* Valid */0 ? null : React.createElement("span", {
          className: "absolute top-3.5 right-4 text-green-gl"
        }, "인증됨");
  return React.createElement("div", {
              className: "w-full flex"
            }, React.createElement("div", {
                  className: "w-full relative"
                }, React.createElement(Input.make, {
                      type_: "text",
                      name: "business-number",
                      placeholder: "사업자 등록번호 입력",
                      value: form.values.businessNumber,
                      onChange: onChangeBusinessNumber,
                      size: /* Large */0,
                      error: errorMessage,
                      disabled: isLoading
                    }), tmp), React.createElement("span", {
                  className: "flex ml-2 w-24 h-13"
                }, React.createElement("button", {
                      className: isLoading || isValid ? btnStyleDisabled : btnStyle,
                      disabled: isLoading || isValid,
                      type: "button",
                      onClick: (function (param) {
                          return ReactEvents.interceptingHandler((function (param) {
                                        return Curry._1(form.submit, undefined);
                                      }), param);
                        })
                    }, "인증")));
}

var make = VerifyBusinessNumber;

export {
  response_encode ,
  response_decode ,
  parseMessage ,
  dictToQueryStr ,
  FormFields ,
  Form ,
  initialState ,
  btnStyle ,
  btnStyleDisabled ,
  make ,
  
}
/* Form Not a pure module */
