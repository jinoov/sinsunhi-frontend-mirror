// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Dialog from "./common/Dialog.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as DatePicker from "./DatePicker.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ProductForm from "../utils/ProductForm.mjs";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as ReactHookForm from "../bindings/ReactHookForm/ReactHookForm.mjs";
import * as RelayRuntime from "relay-runtime";
import * as ReactHookForm$1 from "react-hook-form";
import EndOfDay from "date-fns/endOfDay";
import * as Hooks from "react-relay/hooks";
import StartOfDay from "date-fns/startOfDay";
import * as Product_Detail_Editor from "./Product_Detail_Editor.mjs";
import * as Upload_Thumbnail_Admin from "./Upload_Thumbnail_Admin.mjs";
import * as ErrorMessage from "@hookform/error-message";
import * as Select_Product_Category from "./Select_Product_Category.mjs";
import * as Select_Display_Categories from "./Select_Display_Categories.mjs";
import * as Select_Product_Categories from "./Select_Product_Categories.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as Product_Detail_Basic_Admin from "./Product_Detail_Basic_Admin.mjs";
import * as Select_Product_Operation_Status from "./Select_Product_Operation_Status.mjs";
import * as Product_Detail_Description_Admin from "./Product_Detail_Description_Admin.mjs";
import * as Product_Detail_Display_Categories from "./Product_Detail_Display_Categories.mjs";
import * as AddMatchingProductFormAdminMutation_graphql from "../__generated__/AddMatchingProductFormAdminMutation_graphql.mjs";

var makeVariables = AddMatchingProductFormAdminMutation_graphql.Utils.makeVariables;

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: AddMatchingProductFormAdminMutation_graphql.node,
              variables: AddMatchingProductFormAdminMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, AddMatchingProductFormAdminMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? AddMatchingProductFormAdminMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, AddMatchingProductFormAdminMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use(param) {
  var match = Hooks.useMutation(AddMatchingProductFormAdminMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, AddMatchingProductFormAdminMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? AddMatchingProductFormAdminMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, AddMatchingProductFormAdminMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: AddMatchingProductFormAdminMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Mutation_errorCode_decode = AddMatchingProductFormAdminMutation_graphql.Utils.errorCode_decode;

var Mutation_errorCode_fromString = AddMatchingProductFormAdminMutation_graphql.Utils.errorCode_fromString;

var Mutation_productStatus_decode = AddMatchingProductFormAdminMutation_graphql.Utils.productStatus_decode;

var Mutation_productStatus_fromString = AddMatchingProductFormAdminMutation_graphql.Utils.productStatus_fromString;

var Mutation_make_imageInput = AddMatchingProductFormAdminMutation_graphql.Utils.make_imageInput;

var Mutation = {
  errorCode_decode: Mutation_errorCode_decode,
  errorCode_fromString: Mutation_errorCode_fromString,
  productStatus_decode: Mutation_productStatus_decode,
  productStatus_fromString: Mutation_productStatus_fromString,
  make_imageInput: Mutation_make_imageInput,
  makeVariables: makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use
};

function encoderShipment(ship) {
  return ship;
}

function decodeShipment(json) {
  var str = Js_json.classify(json);
  if (typeof str === "number") {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONString number",
              value: json
            }
          };
  }
  if (str.TAG !== /* JSONString */0) {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONString number",
              value: json
            }
          };
  }
  var i = Belt_Float.fromString(str._0);
  if (i !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: i
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONString number",
              value: json
            }
          };
  }
}

var codecShipment = [
  encoderShipment,
  decodeShipment
];

function submit_encode(v) {
  return Js_dict.fromArray([
              [
                "producer-product-name",
                Spice.stringToJson(v.producerProductName)
              ],
              [
                "buyer-product-name",
                Spice.stringToJson(v.buyerProductName)
              ],
              [
                "origin",
                Spice.stringToJson(v.origin)
              ],
              [
                "product-category",
                Select_Product_Category.Form.submit_encode(v.productCategory)
              ],
              [
                "display-categories",
                Spice.arrayToJson(Select_Display_Categories.Form.submit_encode, v.displayCategories)
              ],
              [
                "product-operation-status",
                Select_Product_Operation_Status.Base.status_encode(v.operationStatus)
              ],
              [
                "shipment-from",
                encoderShipment(v.shipmentFrom)
              ],
              [
                "shipment-to",
                encoderShipment(v.shipmentTo)
              ],
              [
                "notice",
                Spice.optionToJson(Spice.stringToJson, v.notice)
              ],
              [
                "notice-date-from",
                Spice.optionToJson(Spice.stringToJson, v.noticeStartAt)
              ],
              [
                "notice-date-to",
                Spice.optionToJson(Spice.stringToJson, v.noticeEndAt)
              ],
              [
                "thumbnail",
                Upload_Thumbnail_Admin.Form.image_encode(v.thumbnail)
              ],
              [
                "document-url",
                Spice.optionToJson(Spice.stringToJson, v.documentURL)
              ],
              [
                "description-html",
                Spice.stringToJson(v.editor)
              ]
            ]);
}

function submit_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var producerProductName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-product-name"), null));
  if (producerProductName.TAG === /* Ok */0) {
    var buyerProductName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyer-product-name"), null));
    if (buyerProductName.TAG === /* Ok */0) {
      var origin = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "origin"), null));
      if (origin.TAG === /* Ok */0) {
        var productCategory = Select_Product_Category.Form.submit_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-category"), null));
        if (productCategory.TAG === /* Ok */0) {
          var displayCategories = Spice.arrayFromJson(Select_Display_Categories.Form.submit_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "display-categories"), null));
          if (displayCategories.TAG === /* Ok */0) {
            var operationStatus = Select_Product_Operation_Status.Base.status_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-operation-status"), null));
            if (operationStatus.TAG === /* Ok */0) {
              var shipmentFrom = decodeShipment(Belt_Option.getWithDefault(Js_dict.get(dict$1, "shipment-from"), null));
              if (shipmentFrom.TAG === /* Ok */0) {
                var shipmentTo = decodeShipment(Belt_Option.getWithDefault(Js_dict.get(dict$1, "shipment-to"), null));
                if (shipmentTo.TAG === /* Ok */0) {
                  var notice = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "notice"), null));
                  if (notice.TAG === /* Ok */0) {
                    var noticeStartAt = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "notice-date-from"), null));
                    if (noticeStartAt.TAG === /* Ok */0) {
                      var noticeEndAt = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "notice-date-to"), null));
                      if (noticeEndAt.TAG === /* Ok */0) {
                        var thumbnail = Upload_Thumbnail_Admin.Form.image_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "thumbnail"), null));
                        if (thumbnail.TAG === /* Ok */0) {
                          var documentURL = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "document-url"), null));
                          if (documentURL.TAG === /* Ok */0) {
                            var editor = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "description-html"), null));
                            if (editor.TAG === /* Ok */0) {
                              return {
                                      TAG: /* Ok */0,
                                      _0: {
                                        producerProductName: producerProductName._0,
                                        buyerProductName: buyerProductName._0,
                                        origin: origin._0,
                                        productCategory: productCategory._0,
                                        displayCategories: displayCategories._0,
                                        operationStatus: operationStatus._0,
                                        shipmentFrom: shipmentFrom._0,
                                        shipmentTo: shipmentTo._0,
                                        notice: notice._0,
                                        noticeStartAt: noticeStartAt._0,
                                        noticeEndAt: noticeEndAt._0,
                                        thumbnail: thumbnail._0,
                                        documentURL: documentURL._0,
                                        editor: editor._0
                                      }
                                    };
                            }
                            var e = editor._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".description-html" + e.path,
                                      message: e.message,
                                      value: e.value
                                    }
                                  };
                          }
                          var e$1 = documentURL._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".document-url" + e$1.path,
                                    message: e$1.message,
                                    value: e$1.value
                                  }
                                };
                        }
                        var e$2 = thumbnail._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".thumbnail" + e$2.path,
                                  message: e$2.message,
                                  value: e$2.value
                                }
                              };
                      }
                      var e$3 = noticeEndAt._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".notice-date-to" + e$3.path,
                                message: e$3.message,
                                value: e$3.value
                              }
                            };
                    }
                    var e$4 = noticeStartAt._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".notice-date-from" + e$4.path,
                              message: e$4.message,
                              value: e$4.value
                            }
                          };
                  }
                  var e$5 = notice._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".notice" + e$5.path,
                            message: e$5.message,
                            value: e$5.value
                          }
                        };
                }
                var e$6 = shipmentTo._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".shipment-to" + e$6.path,
                          message: e$6.message,
                          value: e$6.value
                        }
                      };
              }
              var e$7 = shipmentFrom._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".shipment-from" + e$7.path,
                        message: e$7.message,
                        value: e$7.value
                      }
                    };
            }
            var e$8 = operationStatus._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".product-operation-status" + e$8.path,
                      message: e$8.message,
                      value: e$8.value
                    }
                  };
          }
          var e$9 = displayCategories._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".display-categories" + e$9.path,
                    message: e$9.message,
                    value: e$9.value
                  }
                };
        }
        var e$10 = productCategory._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".product-category" + e$10.path,
                  message: e$10.message,
                  value: e$10.value
                }
              };
      }
      var e$11 = origin._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".origin" + e$11.path,
                message: e$11.message,
                value: e$11.value
              }
            };
    }
    var e$12 = buyerProductName._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".buyer-product-name" + e$12.path,
              message: e$12.message,
              value: e$12.value
            }
          };
  }
  var e$13 = producerProductName._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".producer-product-name" + e$13.path,
            message: e$13.message,
            value: e$13.value
          }
        };
}

var Form_formName = {
  producerProductName: "producer-product-name",
  buyerProductName: "buyer-product-name",
  origin: "origin",
  productCategory: "product-category",
  displayCategories: "display-categories",
  operationStatus: "product-operation-status",
  shipmentFrom: "shipment-from",
  shipmentTo: "shipment-to",
  notice: "notice",
  noticeDateTo: "notice-date-to",
  noticeDateFrom: "notice-date-from",
  thumbnail: "thumbnail",
  documentURL: "document-url",
  editor: "description-html"
};

var Form = {
  formName: Form_formName,
  encoderShipment: encoderShipment,
  decodeShipment: decodeShipment,
  codecShipment: codecShipment,
  submit_encode: submit_encode,
  submit_decode: submit_decode
};

function getTextInputStyle(disabled) {
  var defaultStyle = "px-3 py-2 border border-border-default-L1 rounded-lg h-9 focus:outline-none min-w-1/2 max-w-2xl";
  if (disabled) {
    return Cx.cx([
                defaultStyle,
                "bg-disabled-L3"
              ]);
  } else {
    return defaultStyle;
  }
}

function Add_Matching_Product_Form_Admin$ProductNameInputs(Props) {
  var producerProductName = Props.producerProductName;
  var buyerProductName = Props.buyerProductName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var register = match.register;
  var errors = match.formState.errors;
  var producerProductNameInput = register(producerProductName, {
        required: true,
        maxLength: 100
      });
  var buyerProductNameInput = register(buyerProductName, {
        required: true,
        maxLength: 100
      });
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "flex flex-col gap-2"
                }, React.createElement("label", {
                      className: "block",
                      htmlFor: producerProductNameInput.name
                    }, React.createElement("span", {
                          className: "font-bold"
                        }, "생산자용 상품명"), React.createElement("span", {
                          className: "text-notice"
                        }, "*")), React.createElement("div", undefined, React.createElement("input", {
                          ref: producerProductNameInput.ref,
                          className: getTextInputStyle(false),
                          id: producerProductNameInput.name,
                          name: producerProductNameInput.name,
                          placeholder: "생산자용 상품명 입력(최대 100자)",
                          onBlur: producerProductNameInput.onBlur,
                          onChange: producerProductNameInput.onChange
                        }), React.createElement(ErrorMessage.ErrorMessage, {
                          name: producerProductNameInput.name,
                          errors: errors,
                          render: (function (param) {
                              return React.createElement("span", {
                                          className: "flex"
                                        }, React.createElement(IconError.make, {
                                              width: "20",
                                              height: "20"
                                            }), React.createElement("span", {
                                              className: "text-sm text-notice ml-1"
                                            }, "생산자용 상품명을 입력해주세요.(최대100자)"));
                            })
                        }))), React.createElement("div", {
                  className: "flex flex-col gap-2"
                }, React.createElement("label", {
                      className: "block",
                      htmlFor: buyerProductNameInput.name
                    }, React.createElement("span", {
                          className: "font-bold"
                        }, "바이어용 상품명"), React.createElement("span", {
                          className: "text-notice"
                        }, "*")), React.createElement("input", {
                      ref: buyerProductNameInput.ref,
                      className: getTextInputStyle(false),
                      id: buyerProductNameInput.name,
                      name: buyerProductNameInput.name,
                      placeholder: "바이어용 상품명 입력, 상품매장에 노출됨(최대 100자)",
                      onBlur: buyerProductNameInput.onBlur,
                      onChange: buyerProductNameInput.onChange
                    }), React.createElement(ErrorMessage.ErrorMessage, {
                      name: buyerProductNameInput.name,
                      errors: errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "바이어용 상품명을 입력해주세요.(최대100자)"));
                        })
                    })));
}

var ProductNameInputs = {
  make: Add_Matching_Product_Form_Admin$ProductNameInputs
};

function Add_Matching_Product_Form_Admin$Category(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("div", undefined, React.createElement("span", {
                      className: " font-bold"
                    }, "표준카테고리"), React.createElement("span", {
                      className: "text-notice"
                    }, "*")), React.createElement(Select_Product_Categories.make, {
                  control: match.control,
                  name: name,
                  disabled: false
                }));
}

var Category = {
  make: Add_Matching_Product_Form_Admin$Category
};

function Add_Matching_Product_Form_Admin$DisplayCategory(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("div", undefined, React.createElement("span", {
                      className: " font-bold"
                    }, "전시카테고리"), React.createElement("span", {
                      className: "text-notice"
                    }, "*")), React.createElement(Product_Detail_Display_Categories.make, {
                  control: match.control,
                  name: name,
                  disabled: false
                }), React.createElement("div", undefined));
}

var DisplayCategory = {
  make: Add_Matching_Product_Form_Admin$DisplayCategory
};

function Add_Matching_Product_Form_Admin$ReadOnlyProductId(Props) {
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("div", undefined, React.createElement("span", {
                      className: "font-bold"
                    }, "상품번호")), React.createElement("div", {
                  className: "px-3 py-2 border border-border-default-L1 bg-disabled-L3 text-disabled-L1 rounded-lg h-9 max-w-md w-1/3"
                }, React.createElement("span", {
                      className: "text-disabled-L1"
                    }, "저장 후 자동생성됩니다.")));
}

var ReadOnlyProductId = {
  make: Add_Matching_Product_Form_Admin$ReadOnlyProductId
};

function Add_Matching_Product_Form_Admin$OperationStatusInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var setValue = match.setValue;
  var errors = match.formState.errors;
  var match$1 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowProductOperationNoSale = match$1[1];
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "flex flex-col gap-2 max-w-md w-1/3"
                }, React.createElement("div", undefined, React.createElement("span", {
                          className: "font-bold"
                        }, "운영상태"), React.createElement("span", {
                          className: "text-notice"
                        }, "*")), React.createElement(ReactHookForm$1.Controller, {
                      name: name,
                      control: match.control,
                      render: (function (param) {
                          var match = param.field;
                          var onChange = match.onChange;
                          return React.createElement("div", undefined, React.createElement(Select_Product_Operation_Status.Base.make, {
                                          status: Belt_Result.mapWithDefault(Select_Product_Operation_Status.Base.status_decode(match.value), undefined, (function (status) {
                                                  return status;
                                                })),
                                          onChange: (function (param) {
                                              if (param !== 3) {
                                                return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Select_Product_Operation_Status.Base.status_encode(param)));
                                              } else {
                                                return setShowProductOperationNoSale(function (param) {
                                                            return /* Show */0;
                                                          });
                                              }
                                            }),
                                          forwardRef: match.ref
                                        }), React.createElement(ErrorMessage.ErrorMessage, {
                                          name: name,
                                          errors: errors,
                                          render: (function (param) {
                                              return React.createElement("span", {
                                                          className: "flex"
                                                        }, React.createElement(IconError.make, {
                                                              width: "20",
                                                              height: "20"
                                                            }), React.createElement("span", {
                                                              className: "text-sm text-notice ml-1"
                                                            }, "운영상태를 선택해주세요."));
                                            })
                                        }));
                        }),
                      defaultValue: "",
                      rules: ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)
                    })), React.createElement(Dialog.make, {
                  isShow: match$1[0],
                  children: React.createElement("p", undefined, "영구판매중지 상태를 선택 후 저장하시면", React.createElement("br", undefined), "추후 해당 상품을 수정할 수 없습니다.", React.createElement("br", undefined), React.createElement("br", undefined), "영구판매중지 상태로 변경할까요?"),
                  onCancel: (function (param) {
                      return setShowProductOperationNoSale(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  onConfirm: (function (param) {
                      setValue(name, Select_Product_Operation_Status.Base.status_encode(/* RETIRE */3));
                      return setShowProductOperationNoSale(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  textOnCancel: "닫기",
                  textOnConfirm: "확인",
                  kindOfConfirm: /* Negative */1,
                  boxStyle: "rounded-2xl text-center"
                }));
}

var OperationStatusInput = {
  make: Add_Matching_Product_Form_Admin$OperationStatusInput
};

function Add_Matching_Product_Form_Admin$OriginInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var productOrigin = match.register(name, {
        required: true
      });
  return React.createElement("div", {
              className: "flex flex-col gap-2 max-w-md w-1/3"
            }, React.createElement("label", {
                  className: "block",
                  htmlFor: productOrigin.name
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "원산지"), React.createElement("span", {
                      className: "text-notice"
                    }, "*")), React.createElement("input", {
                  ref: productOrigin.ref,
                  className: getTextInputStyle(false),
                  id: productOrigin.name,
                  name: productOrigin.name,
                  placeholder: "원산지 입력(선택사항)",
                  onBlur: productOrigin.onBlur,
                  onChange: productOrigin.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: productOrigin.name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "원산지를 입력해주세요."));
                    })
                }));
}

var OriginInput = {
  make: Add_Matching_Product_Form_Admin$OriginInput
};

function getError(fromName, toName, errors) {
  var match = Js_dict.get(errors, fromName);
  var match$1 = Js_dict.get(errors, toName);
  if (match !== undefined) {
    if (match$1 !== undefined) {
      return /* ALL */2;
    } else {
      return /* FromError */0;
    }
  } else if (match$1 !== undefined) {
    return /* ToError */1;
  } else {
    return ;
  }
}

function Add_Matching_Product_Form_Admin$ShipMonthInput(Props) {
  var fromName = Props.fromName;
  var toName = Props.toName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var register = match.register;
  var errors = match.formState.errors;
  var from = register(fromName, {
        required: true,
        max: 12,
        min: 1,
        pattern: /^[0-9]{1,2}$/
      });
  var to = register(toName, {
        required: true,
        max: 12,
        min: 1,
        pattern: /^[0-9]{1,2}$/
      });
  console.log(errors);
  var getTextInputStyle = function (disabled) {
    var defaultStyle = "px-3 py-2 border border-border-default-L1 rounded-lg h-9 focus:outline-none min-w-1/3 max-w-2xl";
    if (disabled) {
      return Cx.cx([
                  defaultStyle,
                  "bg-disabled-L3"
                ]);
    } else {
      return defaultStyle;
    }
  };
  var match$1 = getError(from.name, to.name, errors);
  return React.createElement("div", {
              className: "flex flex-col gap-2 max-w-md w-1/3"
            }, React.createElement("label", {
                  className: "block",
                  htmlFor: fromName
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "출하시기"), React.createElement("span", {
                      className: "text-notice"
                    }, "*")), React.createElement("div", {
                  className: "flex gap-2 items-center"
                }, React.createElement("input", {
                      ref: from.ref,
                      className: getTextInputStyle(false),
                      id: from.name,
                      name: from.name,
                      placeholder: "시작 월",
                      onBlur: from.onBlur,
                      onChange: from.onChange
                    }), React.createElement("span", undefined, "월"), React.createElement("span", undefined, "~"), React.createElement("input", {
                      ref: to.ref,
                      className: getTextInputStyle(false),
                      id: to.name,
                      name: to.name,
                      placeholder: "종료 월",
                      onBlur: to.onBlur,
                      onChange: to.onChange
                    }), React.createElement("span", undefined, "월")), React.createElement("div", undefined, match$1 !== undefined ? (
                    match$1 !== 1 ? React.createElement("span", {
                            className: "flex"
                          }, React.createElement(IconError.make, {
                                width: "20",
                                height: "20"
                              }), React.createElement("span", {
                                className: "text-sm text-notice ml-1"
                              }, "출하시기를 입력해주세요. (1~12 입력가능)")) : React.createElement("span", {
                            className: "flex"
                          }, React.createElement(IconError.make, {
                                width: "20",
                                height: "20"
                              }), React.createElement("span", {
                                className: "text-sm text-notice ml-1"
                              }, "출하시기를 입력해주세요. (1~12 입력가능)"))
                  ) : null));
}

var ShipMonthInput = {
  getError: getError,
  make: Add_Matching_Product_Form_Admin$ShipMonthInput
};

function Add_Matching_Product_Form_Admin$NoticeAndDateInput$DateInput(Props) {
  var name = Props.name;
  var minDate = Props.minDate;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var jsonToStr = function (jsonStr) {
    return Belt_Option.map(Belt_Option.keep(Js_json.decodeString(jsonStr), (function (str) {
                      return str !== "";
                    })), (function (prim) {
                  return new Date(prim);
                }));
  };
  return React.createElement(ReactHookForm$1.Controller, {
              name: name,
              control: match.control,
              render: (function (param) {
                  var match = param.field;
                  var onChange = match.onChange;
                  var tmp = {
                    id: match.name,
                    onChange: (function (e) {
                        return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, e.detail.value));
                      }),
                    firstDayOfWeek: 0
                  };
                  var tmp$1 = jsonToStr(match.value);
                  if (tmp$1 !== undefined) {
                    tmp.date = Caml_option.valFromOption(tmp$1);
                  }
                  if (minDate !== undefined) {
                    tmp.minDate = Caml_option.valFromOption(minDate);
                  }
                  return React.createElement(DatePicker.make, tmp);
                }),
              defaultValue: ""
            });
}

var DateInput = {
  make: Add_Matching_Product_Form_Admin$NoticeAndDateInput$DateInput
};

function Add_Matching_Product_Form_Admin$NoticeAndDateInput(Props) {
  var noticeName = Props.noticeName;
  var noticeFromName = Props.noticeFromName;
  var noticeToName = Props.noticeToName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var noticeDateFrom = ReactHookForm$1.useWatch({
        name: noticeFromName
      });
  var notice = match.register(noticeName, {
        maxLength: 1000
      });
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "flex flex-col gap-2"
                }, React.createElement("label", {
                      htmlFor: notice.name
                    }, React.createElement("span", {
                          className: "font-bold"
                        }, "공지사항")), React.createElement("textarea", {
                      ref: notice.ref,
                      className: "px-3 py-2 border border-border-default-L1 rounded-lg h-24 focus:outline-none min-w-1/2 max-w-2xl",
                      id: notice.name,
                      name: notice.name,
                      placeholder: "공지사항 또는 메모 입력(최대 1000자)",
                      onBlur: notice.onBlur,
                      onChange: notice.onChange
                    }), React.createElement(ErrorMessage.ErrorMessage, {
                      name: notice.name,
                      errors: match.formState.errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "공지사항은 최대 1000자까지 입력 가능합니다."));
                        })
                    })), React.createElement("div", {
                  className: "flex flex-col gap-2"
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "공지사항 적용기간"), React.createElement("div", {
                      className: "flex gap-1"
                    }, React.createElement(Add_Matching_Product_Form_Admin$NoticeAndDateInput$DateInput, {
                          name: noticeFromName,
                          minDate: "2021-01-01"
                        }), React.createElement("span", {
                          className: "flex items-center"
                        }, "~"), React.createElement(Add_Matching_Product_Form_Admin$NoticeAndDateInput$DateInput, {
                          name: noticeToName,
                          minDate: Belt_Option.getWithDefault(noticeDateFrom, "")
                        }))));
}

var NoticeAndDateInput = {
  DateInput: DateInput,
  make: Add_Matching_Product_Form_Admin$NoticeAndDateInput
};

function Add_Matching_Product_Form_Admin$ThumbnailUploadInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("div", undefined, React.createElement("span", {
                      className: "font-bold"
                    }, "대표이미지(썸네일)"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*"), React.createElement("span", {
                      className: "text-text-L2 ml-2"
                    }, "*이미지 파일 형식 등록 가능")), React.createElement("div", undefined, React.createElement(ReactHookForm$1.Controller, {
                      name: name,
                      control: match.control,
                      render: (function (param) {
                          var match = param.field;
                          var onChange = match.onChange;
                          return React.createElement(Upload_Thumbnail_Admin.make, {
                                      name: match.name,
                                      updateFn: (function (imageUrls) {
                                          return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Upload_Thumbnail_Admin.Form.image_encode(imageUrls)));
                                        }),
                                      value: Belt_Result.getWithDefault(Upload_Thumbnail_Admin.Form.image_decode(match.value), Upload_Thumbnail_Admin.Form.resetImage)
                                    });
                        }),
                      defaultValue: Upload_Thumbnail_Admin.Form.image_encode(Upload_Thumbnail_Admin.Form.resetImage),
                      rules: ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Js_dict.fromArray([[
                                      "required",
                                      ReactHookForm.Validation.sync(function (value) {
                                            return Belt_Result.mapWithDefault(Upload_Thumbnail_Admin.Form.image_decode(value), false, (function (image) {
                                                          return image.original !== "";
                                                        }));
                                          })
                                    ]])), undefined, undefined, undefined)
                    }), React.createElement(ErrorMessage.ErrorMessage, {
                      name: name,
                      errors: match.formState.errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "대표이미지(썸네일)을 선택해주세요."));
                        })
                    })));
}

var ThumbnailUploadInput = {
  make: Add_Matching_Product_Form_Admin$ThumbnailUploadInput
};

function Add_Matching_Product_Form_Admin$SalesDocumentURLInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var documentURL = match.register(name, undefined);
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("label", {
                  className: "block font-bold"
                }, "판매자료 URL"), React.createElement("input", {
                  ref: documentURL.ref,
                  className: "py-2 px-3 h-9 border-border-default-L1 border rounded-lg focus:outline-none min-w-1/2 max-w-2xl",
                  id: documentURL.name,
                  name: documentURL.name,
                  onBlur: documentURL.onBlur,
                  onChange: documentURL.onChange
                }));
}

var SalesDocumentURLInput = {
  make: Add_Matching_Product_Form_Admin$SalesDocumentURLInput
};

function Add_Matching_Product_Form_Admin$EditorInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("div", {
                  className: "flex gap-2"
                }, React.createElement("div", undefined, React.createElement("span", {
                          className: "font-bold"
                        }, "상품설명"), React.createElement("span", {
                          className: "text-red-500"
                        }, "*")), React.createElement(ErrorMessage.ErrorMessage, {
                      name: name,
                      errors: match.formState.errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "상품설명을 추가해주세요."));
                        })
                    })), React.createElement("div", undefined, React.createElement(Product_Detail_Editor.make, {
                      control: match.control,
                      name: name
                    })));
}

var EditorInput = {
  make: Add_Matching_Product_Form_Admin$EditorInput
};

function Add_Matching_Product_Form_Admin$MatchingSuccessDialog(Props) {
  var isShow = Props.isShow;
  var router = Router.useRouter();
  return React.createElement(Dialog.make, {
              isShow: isShow,
              children: React.createElement("div", {
                    className: "flex flex-col"
                  }, React.createElement("span", undefined, "매칭상품등록이 완료되었습니다.")),
              onCancel: (function (param) {
                  router.push("/admin/products");
                  
                }),
              textOnCancel: "확인",
              kindOfConfirm: /* Positive */0,
              boxStyle: "text-center rounded-2xl"
            });
}

var MatchingSuccessDialog = {
  make: Add_Matching_Product_Form_Admin$MatchingSuccessDialog
};

function makeMatchingProductVariables(form) {
  var match = form.operationStatus;
  var tmp;
  switch (match) {
    case /* SALE */0 :
        tmp = "SALE";
        break;
    case /* SOLDOUT */1 :
        tmp = "SOLDOUT";
        break;
    case /* NOSALE */2 :
        tmp = "NOSALE";
        break;
    case /* RETIRE */3 :
        tmp = "RETIRE";
        break;
    case /* HIDDEN_SALE */4 :
        tmp = "HIDDEN_SALE";
        break;
    
  }
  return Curry.app(makeVariables, [
              ProductForm.makeCategoryId(form.productCategory.c5),
              form.editor,
              ProductForm.makeDisplayCategoryIds(form.displayCategories),
              form.buyerProductName,
              {
                original: form.thumbnail.original,
                thumb100x100: form.thumbnail.thumb100x100,
                thumb400x400: form.thumbnail.thumb400x400,
                thumb800x800: form.thumbnail.thumb800x800,
                thumb1000x1000: form.thumbnail.thumb1000x1000,
                thumb1920x1920: form.thumbnail.thumb1920x1920
              },
              form.producerProductName,
              Belt_Option.keep(form.notice, (function (str) {
                      return str !== "";
                    })),
              ProductForm.makeNoticeDate(form.noticeEndAt, (function (prim) {
                      return EndOfDay(prim);
                    })),
              ProductForm.makeNoticeDate(form.noticeStartAt, (function (prim) {
                      return StartOfDay(prim);
                    })),
              form.origin,
              Belt_Option.keep(form.documentURL, (function (str) {
                      return str !== "";
                    })),
              tmp,
              form.shipmentTo | 0,
              form.shipmentFrom | 0,
              undefined
            ]);
}

function Add_Matching_Product_Form_Admin(Props) {
  var match = use(undefined);
  var isMatchingMutating = match[1];
  var matchingMutate = match[0];
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var methods = ReactHookForm$1.useForm({
        mode: "onChange",
        defaultValues: Js_dict.fromArray([
              [
                Product_Detail_Basic_Admin.Form.formName.displayCategories,
                [Select_Display_Categories.Form.defaultDisplayCategory(/* Normal */0)]
              ],
              [
                Product_Detail_Description_Admin.Form.formName.thumbnail,
                ""
              ]
            ])
      }, undefined);
  var reset = methods.reset;
  var match$2 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowReset = match$2[1];
  var match$3 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowMatchingSuccess = match$3[1];
  var onSubmit = function (data, param) {
    var result = Belt_Result.map(submit_decode(data), (function (data$p) {
            Curry.app(matchingMutate, [
                  undefined,
                  (function (param, param$1) {
                      var createMatchingProduct = param.createMatchingProduct;
                      if (typeof createMatchingProduct === "object" && createMatchingProduct.NAME === "CreateMatchingProductResult") {
                        return setShowMatchingSuccess(function (param) {
                                    return /* Show */0;
                                  });
                      }
                      
                    }),
                  undefined,
                  undefined,
                  undefined,
                  undefined,
                  makeMatchingProductVariables(data$p),
                  undefined,
                  undefined
                ]);
            
          }));
    if (result.TAG === /* Ok */0) {
      return ;
    }
    console.log(result._0);
    return addToast(React.createElement("div", {
                    className: "flex items-center"
                  }, React.createElement(IconError.make, {
                        width: "24",
                        height: "24",
                        className: "mr-2"
                      }), "오류가 발생하였습니다. 등록내용을 확인하세요."), {
                appearance: "error"
              });
  };
  var handleReset = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return setShowReset(function (param) {
                              return /* Show */0;
                            });
                }), param);
  };
  return React.createElement(ReactHookForm.Provider.make, {
              children: React.createElement("form", {
                    onSubmit: methods.handleSubmit(onSubmit)
                  }, React.createElement("section", {
                        className: "p-7 mx-4 bg-white rounded-b-md"
                      }, React.createElement("h2", {
                            className: "text-text-L1 text-lg font-bold"
                          }, "기본정보"), React.createElement("div", {
                            className: "divide-y text-sm"
                          }, React.createElement("div", {
                                className: "flex flex-col space-y-6 py-6"
                              }, React.createElement(Add_Matching_Product_Form_Admin$Category, {
                                    name: "product-category"
                                  }), React.createElement(Add_Matching_Product_Form_Admin$DisplayCategory, {
                                    name: "display-categories"
                                  })), React.createElement("div", {
                                className: "flex flex-col space-y-6 py-6"
                              }, React.createElement(Add_Matching_Product_Form_Admin$ProductNameInputs, {
                                    producerProductName: "producer-product-name",
                                    buyerProductName: "buyer-product-name"
                                  }), React.createElement(Add_Matching_Product_Form_Admin$ReadOnlyProductId, {})), React.createElement("div", {
                                className: "py-6 flex flex-col space-y-6"
                              }, React.createElement("div", {
                                    className: "flex gap-2"
                                  }, React.createElement(Add_Matching_Product_Form_Admin$OperationStatusInput, {
                                        name: "product-operation-status"
                                      }), React.createElement(Add_Matching_Product_Form_Admin$OriginInput, {
                                        name: "origin"
                                      })), React.createElement(Add_Matching_Product_Form_Admin$ShipMonthInput, {
                                    fromName: "shipment-from",
                                    toName: "shipment-to"
                                  })))), React.createElement("section", {
                        className: "p-7 mt-4 mx-4 mb-7 bg-white rounded shadow-gl"
                      }, React.createElement("h2", {
                            className: "text-text-L1 text-lg font-bold"
                          }, "상품상세설명"), React.createElement("div", {
                            className: "text-sm py-6 flex flex-col space-y-6"
                          }, React.createElement(Add_Matching_Product_Form_Admin$NoticeAndDateInput, {
                                noticeName: "notice",
                                noticeFromName: "notice-date-from",
                                noticeToName: "notice-date-to"
                              }), React.createElement(Add_Matching_Product_Form_Admin$ThumbnailUploadInput, {
                                name: "thumbnail"
                              }), React.createElement(Add_Matching_Product_Form_Admin$SalesDocumentURLInput, {
                                name: "document-url"
                              }), React.createElement(Add_Matching_Product_Form_Admin$EditorInput, {
                                name: "description-html"
                              }))), React.createElement("div", {
                        className: "relative h-16 max-w-gnb-panel bg-white flex items-center gap-2 justify-end pr-5"
                      }, React.createElement("button", {
                            className: "px-3 py-2 bg-div-shape-L1 rounded-lg focus:outline-none",
                            disabled: isMatchingMutating,
                            type: "reset",
                            onClick: handleReset
                          }, "초기화"), React.createElement("button", {
                            className: "px-3 py-2 bg-green-gl text-white rounded-lg hover:bg-green-gl-dark focus:outline-none",
                            disabled: isMatchingMutating,
                            type: "submit"
                          }, "상품 등록")), React.createElement(Dialog.make, {
                        isShow: match$2[0],
                        children: React.createElement("p", undefined, "모든 내용을 초기화 하시겠어요?"),
                        onCancel: (function (param) {
                            return setShowReset(function (param) {
                                        return /* Hide */1;
                                      });
                          }),
                        onConfirm: (function (param) {
                            reset(undefined);
                            return setShowReset(function (param) {
                                        return /* Hide */1;
                                      });
                          }),
                        textOnCancel: "닫기",
                        textOnConfirm: "초기화",
                        kindOfConfirm: /* Negative */1,
                        boxStyle: "text-center rounded-2xl"
                      }), React.createElement(Add_Matching_Product_Form_Admin$MatchingSuccessDialog, {
                        isShow: match$3[0]
                      })),
              methods: methods
            });
}

var make = Add_Matching_Product_Form_Admin;

export {
  Mutation ,
  Form ,
  getTextInputStyle ,
  ProductNameInputs ,
  Category ,
  DisplayCategory ,
  ReadOnlyProductId ,
  OperationStatusInput ,
  OriginInput ,
  ShipMonthInput ,
  NoticeAndDateInput ,
  ThumbnailUploadInput ,
  SalesDocumentURLInput ,
  EditorInput ,
  MatchingSuccessDialog ,
  makeMatchingProductVariables ,
  make ,
  
}
/* react Not a pure module */
