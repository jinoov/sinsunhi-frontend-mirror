// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Swr from "swr";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Dialog from "./common/Dialog.mjs";
import * as Locale from "../utils/Locale.mjs";
import * as Converter from "../utils/Converter.mjs";
import * as IconCheck from "./svgs/IconCheck.mjs";
import * as IconClose from "./svgs/IconClose.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as FetchHelper from "../utils/FetchHelper.mjs";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Router from "next/router";
import Format from "date-fns/format";
import SubMinutes from "date-fns/subMinutes";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.mjs";
import * as ReactDialog from "@radix-ui/react-dialog";
import * as ReactToastNotifications from "react-toast-notifications";

function formatDate(d) {
  return Locale.DateTime.formatFromUTC(new Date(d), "yyyy/MM/dd HH:mm");
}

var Converter$1 = Converter.Status({});

function Order_Detail_Button_Admin(Props) {
  var order = Props.order;
  var router = Router.useRouter();
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var status = CustomHooks.Courier.use(undefined);
  var courierName;
  if (typeof status === "number" || status.TAG !== /* Loaded */0) {
    courierName = "-";
  } else {
    var couriers = status._0;
    courierName = Belt_Option.getWithDefault(Belt_Option.map(Belt_Option.flatMap(order.courierCode, (function (courierCode$p) {
                    return Belt_Result.getWithDefault(Belt_Result.map(CustomHooks.Courier.response_decode(couriers), (function (couriers$p) {
                                      return Belt_Array.getBy(couriers$p.data, (function (courier) {
                                                    return courier.code === courierCode$p;
                                                  }));
                                    })), undefined);
                  })), (function (courier) {
                return courier.name;
              })), "-");
  }
  var match$2 = React.useState(function () {
        return Belt_Option.getWithDefault(order.adminMemo, "");
      });
  var setAdminMemo = match$2[1];
  var adminMemo = match$2[0];
  var handleOnConfirm = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  Belt_Option.map(JSON.stringify({
                            memo: adminMemo
                          }), (function (body) {
                          return FetchHelper.requestWithRetry(FetchHelper.patchWithToken, "" + Env.restApiUrl + "/order/" + order.orderProductNo + "/memo", body, 3, (function (param) {
                                        addToast(React.createElement("div", {
                                                  className: "flex items-center"
                                                }, React.createElement(IconCheck.make, {
                                                      height: "24",
                                                      width: "24",
                                                      fill: "#12B564",
                                                      className: "mr-2"
                                                    }), "저장되었습니다."), {
                                              appearance: "success"
                                            });
                                        mutate("" + Env.restApiUrl + "/order?" + new URLSearchParams(router.query).toString() + "", undefined, true);
                                      }), (function (param) {
                                        addToast(React.createElement("div", {
                                                  className: "flex items-center"
                                                }, React.createElement(IconError.make, {
                                                      width: "24",
                                                      height: "24",
                                                      className: "mr-2"
                                                    }), "오류가 발생하였습니다."), {
                                              appearance: "error"
                                            });
                                      }));
                        }));
                }), param);
  };
  var match$3 = order.deliveryType;
  var tmp;
  var exit = 0;
  if (match$3 !== undefined) {
    switch (match$3) {
      case /* SELF */0 :
          var timezone = new Date(Date.now()).getTimezoneOffset();
          tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
                    className: "grid grid-cols-2-detail"
                  }, React.createElement("div", {
                        className: "p-3 bg-div-shape-L2"
                      }, "수령 희망일"), React.createElement("div", {
                        className: "p-3"
                      }, Belt_Option.getWithDefault(Belt_Option.map(order.desiredDeliveryDate, (function (date) {
                                  return Format(SubMinutes(new Date(date), timezone), "yyyy-MM-dd");
                                })), "-"))), React.createElement("div", {
                    className: "grid grid-cols-2-detail"
                  }, React.createElement("div", {
                        className: "p-3 bg-div-shape-L2"
                      }, "요청사항"), React.createElement("div", {
                        className: "p-3"
                      }, Belt_Option.getWithDefault(order.deliveryMessage, "-"))));
          break;
      case /* FREIGHT */1 :
          var timezone$1 = new Date(Date.now()).getTimezoneOffset();
          tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
                    className: "grid grid-cols-2-detail"
                  }, React.createElement("div", {
                        className: "p-3 bg-div-shape-L2"
                      }, "배송 희망일"), React.createElement("div", {
                        className: "p-3"
                      }, Belt_Option.getWithDefault(Belt_Option.map(order.desiredDeliveryDate, (function (date) {
                                  return Format(SubMinutes(new Date(date), timezone$1), "yyyy-MM-dd");
                                })), "-"))), React.createElement("div", {
                    className: "grid grid-cols-4-detail"
                  }, React.createElement("div", {
                        className: "p-3 bg-div-shape-L2"
                      }, "수취인"), React.createElement("div", {
                        className: "p-3"
                      }, Belt_Option.getWithDefault(order.receiverName, "-")), React.createElement("div", {
                        className: "p-3 bg-div-shape-L2"
                      }, "수취인 연락처"), React.createElement("div", {
                        className: "p-3"
                      }, Belt_Option.getWithDefault(order.receiverPhone, "-"))), React.createElement("div", {
                    className: "grid grid-cols-2-detail"
                  }, React.createElement("div", {
                        className: "p-3 bg-div-shape-L2"
                      }, "주소·우편번호"), React.createElement("div", {
                        className: "p-3"
                      }, Belt_Option.getWithDefault(order.receiverAddress, "-"), " (" + Belt_Option.getWithDefault(order.receiverZipcode, "-") + ")")), React.createElement("div", {
                    className: "grid grid-cols-2-detail"
                  }, React.createElement("div", {
                        className: "p-3 bg-div-shape-L2"
                      }, "배송메모"), React.createElement("div", {
                        className: "p-3"
                      }, Belt_Option.getWithDefault(order.deliveryMessage, "-"))));
          break;
      case /* PARCEL */2 :
          exit = 1;
          break;
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
              className: "grid grid-cols-4-detail"
            }, React.createElement("div", {
                  className: "p-3 bg-div-shape-L2"
                }, "택배사"), React.createElement("div", {
                  className: "p-3"
                }, React.createElement("span", {
                      className: "block"
                    }, courierName)), React.createElement("div", {
                  className: "p-3 bg-div-shape-L2"
                }, "송장번호"), React.createElement("div", {
                  className: "p-3"
                }, Belt_Option.getWithDefault(order.invoice, "-"))), React.createElement("div", {
              className: "grid grid-cols-4-detail"
            }, React.createElement("div", {
                  className: "p-3 bg-div-shape-L2"
                }, "수취인"), React.createElement("div", {
                  className: "p-3"
                }, Belt_Option.getWithDefault(order.receiverName, "-")), React.createElement("div", {
                  className: "p-3 bg-div-shape-L2"
                }, "수취인 연락처"), React.createElement("div", {
                  className: "p-3"
                }, Belt_Option.getWithDefault(order.receiverPhone, "-"))), React.createElement("div", {
              className: "grid grid-cols-2-detail"
            }, React.createElement("div", {
                  className: "p-3 bg-div-shape-L2"
                }, "주소·우편번호"), React.createElement("div", {
                  className: "p-3"
                }, Belt_Option.getWithDefault(order.receiverAddress, "-"), " (" + Belt_Option.getWithDefault(order.receiverZipcode, "-") + ")")), React.createElement("div", {
              className: "grid grid-cols-2-detail"
            }, React.createElement("div", {
                  className: "p-3 bg-div-shape-L2"
                }, "배송메모"), React.createElement("div", {
                  className: "p-3"
                }, Belt_Option.getWithDefault(order.deliveryMessage, ""))));
  }
  return React.createElement(ReactDialog.Root, {
              children: null,
              onOpenChange: (function (param) {
                  setAdminMemo(function (param) {
                        return Belt_Option.getWithDefault(order.adminMemo, "");
                      });
                })
            }, React.createElement(ReactDialog.Overlay, {
                  className: "dialog-overlay"
                }), React.createElement(ReactDialog.Trigger, {
                  children: order.orderProductNo,
                  className: "block text-left mb-1 underline focus:outline-none"
                }), React.createElement(ReactDialog.Content, {
                  children: React.createElement("div", {
                        className: "p-5"
                      }, React.createElement("div", {
                            className: "flex"
                          }, React.createElement("h2", {
                                className: "text-xl font-bold"
                              }, "주문상세조회"), React.createElement(ReactDialog.Close, {
                                children: React.createElement(IconClose.make, {
                                      height: "24",
                                      width: "24",
                                      fill: "#262626"
                                    }),
                                className: "focus:outline-none ml-auto",
                                id: "btn-close"
                              })), React.createElement("h3", {
                            className: "mt-10 font-bold"
                          }, "주문정보"), React.createElement("section", {
                            className: "divide-y text-sm text-text-L2 mt-2 border-t border-b"
                          }, React.createElement("div", {
                                className: "grid grid-cols-4-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "주문번호"), React.createElement("div", {
                                    className: "p-3"
                                  }, order.orderProductNo), React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "상품번호"), React.createElement("div", {
                                    className: "p-3"
                                  }, String(order.productId))), React.createElement("div", {
                                className: "grid grid-cols-4-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "주문일시"), React.createElement("div", {
                                    className: "p-3"
                                  }, formatDate(order.orderDate)), React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "결제금액"), React.createElement("div", {
                                    className: "p-3"
                                  }, "" + Locale.Float.show(undefined, order.productPrice * order.quantity, 0) + "원")), React.createElement("div", {
                                className: "grid grid-cols-4-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "바이어"), React.createElement("div", {
                                    className: "p-3"
                                  }, order.buyerName), React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "주문상태"), React.createElement("div", {
                                    className: "p-3"
                                  }, Curry._1(Converter$1.displayStatus, order.status))), React.createElement("div", {
                                className: "grid grid-cols-4-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "주문자"), React.createElement("div", {
                                    className: "p-3"
                                  }, Belt_Option.getWithDefault(order.ordererName, "-")), React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "주문자 연락처"), React.createElement("div", {
                                    className: "p-3"
                                  }, Belt_Option.getWithDefault(order.ordererPhone, "-")))), React.createElement("h3", {
                            className: "mt-10 font-bold"
                          }, "상품정보"), React.createElement("section", {
                            className: "divide-y text-sm text-text-L2 mt-2 border-t border-b"
                          }, React.createElement("div", {
                                className: "grid grid-cols-2-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "상품명(번호)"), React.createElement("div", {
                                    className: "p-3"
                                  }, order.productName, " (" + String(order.productId) + ")")), React.createElement("div", {
                                className: "grid grid-cols-2-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "옵션명(번호)"), React.createElement("div", {
                                    className: "p-3"
                                  }, Belt_Option.getWithDefault(order.productOptionName, "-"), " (" + order.productSku + ")")), React.createElement("div", {
                                className: "grid grid-cols-2-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "생산자명"), React.createElement("div", {
                                    className: "p-3"
                                  }, order.farmerName)), React.createElement("div", {
                                className: "grid grid-cols-4-detail"
                              }, React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "수량"), React.createElement("div", {
                                    className: "p-3"
                                  }, String(order.quantity)), React.createElement("div", {
                                    className: "p-3 bg-div-shape-L2"
                                  }, "금액"), React.createElement("div", {
                                    className: "p-3"
                                  }, "" + Locale.Float.show(undefined, order.productPrice, 0) + "원"))), React.createElement("h3", {
                            className: "mt-10 font-bold"
                          }, "배송정보"), React.createElement("section", {
                            className: "divide-y text-sm text-text-L2 mt-2 border-t border-b"
                          }, tmp), React.createElement("h3", {
                            className: "mt-10 font-bold"
                          }, "담당MD 메모"), React.createElement("textarea", {
                            className: "px-3 py-2 mt-2 border border-border-default-L1 rounded-lg w-full h-24 focus:outline-none",
                            maxLength: 1000,
                            placeholder: "공지사항 또는 메모 입력(최대 1000자)",
                            value: adminMemo,
                            onChange: (function (e) {
                                var v = e.target.value;
                                setAdminMemo(function (param) {
                                      return v;
                                    });
                              })
                          }), React.createElement("span", {
                            className: "w-1/2"
                          }, React.createElement(Dialog.ButtonBox.make, {
                                onCancel: (function (param) {
                                    var buttonClose = document.getElementById("btn-close");
                                    Belt_Option.forEach(Belt_Option.flatMap((buttonClose == null) ? undefined : Caml_option.some(buttonClose), Webapi__Dom__Element.asHtmlElement), (function (buttonClose$p) {
                                            buttonClose$p.click();
                                          }));
                                  }),
                                onConfirm: handleOnConfirm,
                                textOnCancel: "닫기",
                                textOnConfirm: "저장"
                              }))),
                  className: "dialog-content-detail overflow-y-auto"
                }));
}

var make = Order_Detail_Button_Admin;

export {
  formatDate ,
  Converter$1 as Converter,
  make ,
}
/* Converter Not a pure module */
