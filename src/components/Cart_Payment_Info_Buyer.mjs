// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Locale from "../utils/Locale.mjs";
import * as Skeleton from "./Skeleton.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Garter_Math from "@greenlabs/garter/src/Garter_Math.mjs";
import * as Cart_Buyer_Form from "./Cart_Buyer_Form.mjs";
import * as ReactHookForm from "react-hook-form";

function Cart_Payment_Info_Buyer$PlaceHolder$PC(Props) {
  return React.createElement("div", {
              className: "rounded-sm bg-white p-7 w-fit sticky top-64"
            }, React.createElement(Skeleton.Box.make, {
                  className: "block w-10"
                }), React.createElement("div", {
                  className: "text-sm flex flex-col gap-5 py-7 border border-x-0 border-t-0 border-div-border-L2 w-[440px]"
                }, React.createElement("div", {
                      className: "flex justify-between items-center"
                    }, React.createElement(Skeleton.Box.make, {
                          className: "w-16"
                        }), React.createElement(Skeleton.Box.make, {
                          className: "w-8"
                        })), React.createElement("div", {
                      className: "flex justify-between items-center"
                    }, React.createElement(Skeleton.Box.make, {
                          className: "w-16"
                        }), React.createElement(Skeleton.Box.make, {
                          className: "w-8"
                        })), React.createElement("div", {
                      className: "flex justify-between items-center"
                    }, React.createElement("div", {
                          className: "flex flex-col"
                        }, React.createElement(Skeleton.Box.make, {
                              className: "w-16"
                            })), React.createElement(Skeleton.Box.make, {
                          className: "w-8"
                        }))), React.createElement(Skeleton.Box.make, {
                  className: "w-full h-14 mt-7 flex justify-center items-center rounded-xl"
                }));
}

var PC = {
  make: Cart_Payment_Info_Buyer$PlaceHolder$PC
};

function Cart_Payment_Info_Buyer$PlaceHolder$MO(Props) {
  return React.createElement("div", {
              className: "rounded-sm bg-white px-4 pb-4 w-full"
            }, React.createElement("div", {
                  className: "text-sm flex flex-col gap-5 py-7 border-0 border-div-border-L2"
                }, React.createElement("div", {
                      className: "flex justify-between items-center"
                    }, React.createElement("div", {
                          className: "flex flex-col"
                        }, React.createElement(Skeleton.Box.make, {
                              className: "w-16"
                            }), React.createElement(Skeleton.Box.make, {
                              className: "block w-16"
                            })), React.createElement(Skeleton.Box.make, {
                          className: "w-8"
                        }))), React.createElement(Skeleton.Box.make, {
                  className: "w-full h-14  flex justify-center items-center rounded-xl"
                }));
}

var MO = {
  make: Cart_Payment_Info_Buyer$PlaceHolder$MO
};

var PlaceHolder = {
  PC: PC,
  MO: MO
};

function Cart_Payment_Info_Buyer$PC(Props) {
  var prefix = Props.prefix;
  var watchOptions = ReactHookForm.useWatch({
        name: prefix
      });
  var match = Belt_Option.map(watchOptions, Cart_Buyer_Form.cart_decode);
  var match$1;
  if (match !== undefined && match.TAG === /* Ok */0) {
    var checked = Belt_Array.concatMany(Belt_Array.map(Belt_Option.getWithDefault(match._0.cartItems, []), (function (c) {
                return Belt_Array.keep(c.productOptions, (function (o) {
                              if (Cart_Buyer_Form.soldable(c.productStatus) && Cart_Buyer_Form.soldable(o.optionStatus)) {
                                return o.checked;
                              } else {
                                return false;
                              }
                            }));
              })));
    var totalOrderPrice = Garter_Math.sum_int(Belt_Array.map(checked, (function (c) {
                return Math.imul(c.price, c.quantity);
              })));
    var totalNum = checked.length;
    match$1 = [
      totalOrderPrice,
      totalNum
    ];
  } else {
    match$1 = [
      0,
      0
    ];
  }
  var totalNumber = match$1[1];
  var totalOrderPrice$1 = match$1[0];
  return React.createElement("div", {
              className: "rounded-sm bg-white p-7 w-fit sticky top-64"
            }, React.createElement("span", {
                  className: "block text-xl text-enabled-L1 font-bold"
                }, "주문 정보"), React.createElement("div", {
                  className: "text-sm flex flex-col gap-5 py-7 border border-x-0 border-t-0 border-div-border-L2 w-[440px]"
                }, React.createElement("div", {
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 상품금액"), React.createElement("span", {
                          className: "text-base font-bold xl:text-sm xl:font-normal"
                        }, "" + Locale.Int.show(undefined, totalOrderPrice$1) + "원")), React.createElement("div", {
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "배송비"), React.createElement("span", {
                          className: "text-sm text-gray-600 xl:text-text-L1"
                        }, "배송타입 선택 후 배송비 확인 가능")), React.createElement("div", {
                      className: "flex justify-between items-center"
                    }, React.createElement("div", {
                          className: "flex flex-col"
                        }, React.createElement("span", {
                              className: "font-normal text-text-L2"
                            }, "총 결제금액")), React.createElement("span", {
                          className: "text-lg text-primary font-bold"
                        }, "" + Locale.Int.show(undefined, totalOrderPrice$1) + "원"))), totalNumber !== 0 ? React.createElement("button", {
                    className: "w-full h-14 mt-7 flex justify-center items-center bg-primary text-lg text-white rounded-xl",
                    type: "submit"
                  }, "총 " + Locale.Int.show(undefined, totalNumber) + "건 주문하기") : React.createElement("div", {
                    className: "w-full h-14 mt-7 flex justify-center items-center bg-disabled-L1 text-lg text-white rounded-xl"
                  }, "총 0건 주문하기"));
}

var PC$1 = {
  make: Cart_Payment_Info_Buyer$PC
};

function Cart_Payment_Info_Buyer$MO(Props) {
  var prefix = Props.prefix;
  var watchOptions = ReactHookForm.useWatch({
        name: prefix
      });
  var match = Belt_Option.map(watchOptions, Cart_Buyer_Form.cart_decode);
  var match$1;
  if (match !== undefined && match.TAG === /* Ok */0) {
    var checked = Belt_Array.concatMany(Belt_Array.map(Belt_Option.getWithDefault(match._0.cartItems, []), (function (c) {
                return Belt_Array.keep(c.productOptions, (function (o) {
                              if (Cart_Buyer_Form.soldable(c.productStatus) && Cart_Buyer_Form.soldable(o.optionStatus)) {
                                return o.checked;
                              } else {
                                return false;
                              }
                            }));
              })));
    var totalOrderPrice = Garter_Math.sum_int(Belt_Array.map(checked, (function (c) {
                return Math.imul(c.price, c.quantity);
              })));
    var totalNum = checked.length;
    match$1 = [
      totalOrderPrice,
      totalNum
    ];
  } else {
    match$1 = [
      0,
      0
    ];
  }
  var totalNumber = match$1[1];
  return React.createElement("div", {
              className: "rounded-sm bg-white px-4 pb-4 w-full top-64"
            }, React.createElement("div", {
                  className: "text-sm flex flex-col gap-5 py-7 border-0 border-div-border-L2"
                }, React.createElement("div", {
                      className: "flex justify-between items-center"
                    }, React.createElement("div", {
                          className: "flex flex-col"
                        }, React.createElement("span", {
                              className: "text-black font-bold"
                            }, "총 결제금액"), React.createElement("span", {
                              className: "block text-gray-600 text-xs"
                            }, "배송타입 선택 후 배송비 확인 가능")), React.createElement("span", {
                          className: "text-xl text-primary font-bold"
                        }, "" + Locale.Int.show(undefined, match$1[0]) + "원"))), totalNumber !== 0 ? React.createElement("button", {
                    className: "w-full h-14 flex justify-center items-center bg-primary text-lg text-white rounded-xl",
                    type: "submit"
                  }, "총 " + Locale.Int.show(undefined, totalNumber) + "건 주문하기") : React.createElement("div", {
                    className: "w-full h-14 flex justify-center items-center bg-disabled-L1 text-lg text-white rounded-xl"
                  }, "총 0건 주문하기"));
}

var MO$1 = {
  make: Cart_Payment_Info_Buyer$MO
};

var Form;

export {
  Form ,
  PlaceHolder ,
  PC$1 as PC,
  MO$1 as MO,
}
/* react Not a pure module */
