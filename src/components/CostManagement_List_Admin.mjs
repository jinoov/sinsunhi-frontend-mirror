// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "@rescript/react/src/React.mjs";
import * as React$1 from "react";
import * as Checkbox from "./common/Checkbox.mjs";
import * as Constants from "../constants/Constants.mjs";
import * as Cost_Admin from "./Cost_Admin.mjs";
import * as ErrorPanel from "./common/ErrorPanel.mjs";
import * as Pagination from "./common/Pagination.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as EmptyOrders from "./common/EmptyOrders.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as Settlement_Admin from "./Settlement_Admin.mjs";

function CostManagement_List_Admin$Header(props) {
  return React$1.createElement("div", {
              className: "grid grid-cols-14-admin-cost bg-gray-100 text-gray-500 h-12"
            }, React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, React$1.createElement(Checkbox.make, {
                      id: "check-all",
                      checked: props.checked,
                      onChange: props.onChange,
                      disabled: props.disabled
                    })), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "생산자명"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "상품번호·단품번호"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "상품명·단품명"), React$1.createElement("div", {
                  className: "h-full pr-4 flex items-center whitespace-nowrap"
                }, "현재원매가시작일"), React$1.createElement("div", {
                  className: "h-full px-4 justify-center flex items-center whitespace-nowrap text-center"
                }, "현재 총원가·원물원가·포장작업비·택배비"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "바이어판매가"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "원가타입"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "변경원가시작일"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "변경후 바이어판매가"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap text-center"
                }, "변경후 총원가"), React$1.createElement("div", {
                  className: "h-full pl-2 flex items-center whitespace-nowrap"
                }, "변경후 원물원가"), React$1.createElement("div", {
                  className: "h-full flex items-center whitespace-nowrap"
                }, "변경후 포장작업비"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "변경후 택배비"));
}

var Header = {
  make: CostManagement_List_Admin$Header
};

function CostManagement_List_Admin$Loading(props) {
  return React$1.createElement("div", {
              className: "w-full overflow-x-scroll"
            }, React$1.createElement("div", {
                  className: "min-w-max text-sm divide-y divide-gray-100"
                }, React$1.createElement(CostManagement_List_Admin$Header, {}), React$1.createElement("ol", {
                      className: "divide-y divide-gray-100 lg:list-height-admin-buyer lg:overflow-y-scroll"
                    }, Garter_Array.map(Garter_Array.make(5, 0), (function (param) {
                            return React$1.createElement(Settlement_Admin.Item.Table.Loading.make, {});
                          })))));
}

var Loading = {
  make: CostManagement_List_Admin$Loading
};

function CostManagement_List_Admin(props) {
  var onChangeContractType = props.onChangeContractType;
  var onCheckCost = props.onCheckCost;
  var check = props.check;
  var onChangeWorkingCost = props.onChangeWorkingCost;
  var onChangeDeliveryCost = props.onChangeDeliveryCost;
  var onChangeRawCost = props.onChangeRawCost;
  var onChangePrice = props.onChangePrice;
  var onChangeEffectiveDate = props.onChangeEffectiveDate;
  var newCosts = props.newCosts;
  var status = props.status;
  if (typeof status === "number") {
    return React$1.createElement(CostManagement_List_Admin$Loading, {});
  }
  if (status.TAG !== /* Loaded */0) {
    return React$1.createElement(ErrorPanel.make, {
                error: status._0,
                renderOnRetry: Caml_option.some(React$1.createElement(CostManagement_List_Admin$Loading, {}))
              });
  }
  var costs = status._0;
  var costs$p = CustomHooks.Costs.costs_decode(costs);
  var countOfCostsToCheck;
  countOfCostsToCheck = costs$p.TAG === /* Ok */0 ? costs$p._0.data.length : 0;
  var isCheckAll = countOfCostsToCheck !== 0 && countOfCostsToCheck === props.countOfChecked;
  var isDisabledCheckAll;
  if (typeof status === "number" || status.TAG !== /* Loaded */0) {
    isDisabledCheckAll = true;
  } else {
    var costs$p$1 = CustomHooks.Costs.costs_decode(status._0);
    isDisabledCheckAll = costs$p$1.TAG === /* Ok */0 ? costs$p$1._0.data.length === 0 : true;
  }
  var costs$p$2 = CustomHooks.Costs.costs_decode(costs);
  var tmp;
  if (costs$p$2.TAG === /* Ok */0) {
    var costs$p$3 = costs$p$2._0;
    tmp = React$1.createElement("ol", {
          className: "divide-y divide-gray-100 lg:list-height-admin-buyer lg:overflow-y-scroll"
        }, costs$p$3.data.length !== 0 ? Garter_Array.map(costs$p$3.data, (function (cost) {
                  return Belt_Option.mapWithDefault(Belt_MapString.get(newCosts, cost.sku), null, (function (newCost) {
                                return React.createElementWithKey(Cost_Admin.make, {
                                            cost: cost,
                                            newCost: newCost,
                                            check: check,
                                            onCheckCost: onCheckCost,
                                            onChangeEffectiveDate: Curry._1(onChangeEffectiveDate, cost.sku),
                                            onChangePrice: Curry._1(onChangePrice, cost.sku),
                                            onChangeRawCost: Curry._1(onChangeRawCost, cost.sku),
                                            onChangeDeliveryCost: Curry._1(onChangeDeliveryCost, cost.sku),
                                            onChangeWorkingCost: Curry._1(onChangeWorkingCost, cost.sku),
                                            onChangeContractType: Curry._1(onChangeContractType, cost.sku)
                                          }, cost.sku);
                              }));
                })) : React$1.createElement(EmptyOrders.make, {}));
  } else {
    console.log(costs$p$2._0);
    tmp = null;
  }
  var tmp$1;
  if (typeof status === "number" || status.TAG !== /* Loaded */0) {
    tmp$1 = null;
  } else {
    var costs$p$4 = CustomHooks.Costs.costs_decode(status._0);
    if (costs$p$4.TAG === /* Ok */0) {
      var costs$p$5 = costs$p$4._0;
      tmp$1 = React$1.createElement("div", {
            className: "flex justify-center pt-5"
          }, React$1.createElement(Pagination.make, {
                pageDisplySize: Constants.pageDisplySize,
                itemPerPage: costs$p$5.limit,
                total: costs$p$5.count
              }));
    } else {
      tmp$1 = null;
    }
  }
  return React$1.createElement(React$1.Fragment, undefined, React$1.createElement("div", {
                  className: "w-full overflow-x-scroll"
                }, React$1.createElement("div", {
                      className: "min-w-max text-sm divide-y divide-gray-100"
                    }, React$1.createElement(CostManagement_List_Admin$Header, {
                          checked: isCheckAll,
                          onChange: props.onCheckAll,
                          disabled: isDisabledCheckAll
                        }), tmp)), tmp$1);
}

var make = CostManagement_List_Admin;

export {
  Header ,
  Loading ,
  make ,
}
/* React Not a pure module */
