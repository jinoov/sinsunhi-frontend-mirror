// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Swr from "swr";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as IconCheck from "./svgs/IconCheck.mjs";
import * as IconClose from "./svgs/IconClose.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as FetchHelper from "../utils/FetchHelper.mjs";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import Async from "react-select/async";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.mjs";
import * as ReactDialog from "@radix-ui/react-dialog";
import * as ReactToastNotifications from "react-toast-notifications";
import EditSvg from "../../public/assets/edit.svg";

var editIcon = EditSvg;

function User_MD_Update_Button_Admin_Farmer(Props) {
  var user = Props.user;
  var router = Router.useRouter();
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = React.useState(function () {
        return /* NotSelected */0;
      });
  var setSelectedUser = match$2[1];
  var selectedUser = match$2[0];
  var close = function (param) {
    var buttonClose = document.getElementById("btn-close");
    Belt_Option.forEach(Belt_Option.flatMap((buttonClose == null) ? undefined : Caml_option.some(buttonClose), Webapi__Dom__Element.asHtmlElement), (function (buttonClose$p) {
            buttonClose$p.click();
          }));
  };
  var save = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  Belt_Option.map(JSON.stringify({
                            "farmer-id": user.id,
                            "md-id": selectedUser ? Belt_Int.fromString(selectedUser.value) : undefined
                          }), (function (body) {
                          return FetchHelper.requestWithRetry(FetchHelper.putWithToken, "" + Env.restApiUrl + "/user/farmer", body, 3, (function (param) {
                                        close(undefined);
                                        addToast(React.createElement("div", {
                                                  className: "flex items-center"
                                                }, React.createElement(IconCheck.make, {
                                                      height: "24",
                                                      width: "24",
                                                      fill: "#12B564",
                                                      className: "mr-2"
                                                    }), "저장되었습니다."), {
                                              appearance: "success"
                                            });
                                        var rq = router.query;
                                        mutate("" + Env.restApiUrl + "/user?" + (rq["role"] = "farmer", new URLSearchParams(rq).toString()) + "", undefined, true);
                                      }), (function (param) {
                                        addToast(React.createElement("div", {
                                                  className: "flex items-center"
                                                }, React.createElement(IconError.make, {
                                                      width: "24",
                                                      height: "24",
                                                      className: "mr-2"
                                                    }), "오류가 발생하였습니다."), {
                                              appearance: "error"
                                            });
                                      }));
                        }));
                }), param);
  };
  var handleLoadOptions = function (inputValue) {
    return Js_promise.then_((function (result) {
                  var users$p = Curry._1(CustomHooks.QueryUser.Admin.users_decode, result);
                  if (users$p.TAG !== /* Ok */0) {
                    return Promise.reject(Js_exn.raiseError("유저 검색 에러"));
                  }
                  var users$p$1 = users$p._0;
                  if (users$p$1.data.length === 0) {
                    return Promise.reject(Js_exn.raiseError("유저 검색 에러"));
                  }
                  var users$p$p = Garter_Array.map(users$p$1.data, (function (user) {
                          return /* Selected */{
                                  value: String(user.id),
                                  label: "" + user.name + "(" + Belt_Option.getWithDefault(user.email, "") + ")\n            "
                                };
                        }));
                  return Promise.resolve(users$p$p);
                }), FetchHelper.fetchWithRetry(FetchHelper.getWithToken, "" + Env.restApiUrl + "/user?name=" + inputValue + "&role=admin", "", 3));
  };
  var handleChangeUser = function (selection) {
    setSelectedUser(function (param) {
          return selection;
        });
  };
  return React.createElement(ReactDialog.Root, {
              children: null
            }, React.createElement(ReactDialog.Overlay, {
                  className: "dialog-overlay"
                }), React.createElement(ReactDialog.Trigger, {
                  children: React.createElement("img", {
                        src: editIcon
                      }),
                  className: "block text-left mb-1 underline focus:outline-none"
                }), React.createElement(ReactDialog.Content, {
                  children: React.createElement("div", {
                        className: "p-5"
                      }, React.createElement("section", {
                            className: "flex"
                          }, React.createElement("h2", {
                                className: "text-xl font-bold"
                              }, "담당소싱MD"), React.createElement(ReactDialog.Close, {
                                children: React.createElement(IconClose.make, {
                                      height: "24",
                                      width: "24",
                                      fill: "#262626"
                                    }),
                                className: "inline-block p-1 focus:outline-none ml-auto"
                              })), React.createElement("section", {
                            className: "mt-7"
                          }, React.createElement("h3", undefined, "담당자"), React.createElement("div", {
                                className: "mt-2"
                              }, React.createElement(Async, {
                                    value: selectedUser,
                                    cacheOptions: true,
                                    defaultOptions: false,
                                    loadOptions: handleLoadOptions,
                                    onChange: handleChangeUser,
                                    placeholder: "담당MD 이름으로 찾기",
                                    noOptionsMessage: (function (param) {
                                        return "검색 결과가 없습니다.";
                                      }),
                                    isClearable: true,
                                    styles: {
                                      menu: (function (provide, param) {
                                          return Object.assign(Object.assign({}, provide), {
                                                      position: "inherit"
                                                    });
                                        })
                                    }
                                  }))), React.createElement("section", {
                            className: "flex justify-center items-center mt-5"
                          }, React.createElement(ReactDialog.Close, {
                                children: React.createElement("span", {
                                      className: "btn-level6 py-3 px-5",
                                      id: "btn-close"
                                    }, "닫기"),
                                className: "flex mr-2"
                              }), React.createElement("span", {
                                className: "flex mr-2"
                              }, React.createElement("button", {
                                    className: "btn-level1 py-3 px-5",
                                    onClick: save
                                  }, "저장")))),
                  className: "dialog-content overflow-y-auto"
                }));
}

var make = User_MD_Update_Button_Admin_Farmer;

export {
  editIcon ,
  make ,
}
/* editIcon Not a pure module */
