// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as React from "react";
import * as Dialog from "./common/Dialog.mjs";
import * as IconCheck from "./svgs/IconCheck.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as FetchHelper from "../utils/FetchHelper.mjs";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.mjs";
import * as ReactDialog from "@radix-ui/react-dialog";
import * as ReactToastNotifications from "react-toast-notifications";
import * as Buyer_Cash_Refund_Form_Admin from "./Buyer_Cash_Refund_Form_Admin.mjs";

function Buyer_Cash_Refund_Button_Admin(Props) {
  var buyerId = Props.buyerId;
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var close = function (param) {
    var buttonClose = document.getElementById("btn-close");
    Belt_Option.forEach(Belt_Option.flatMap((buttonClose == null) ? undefined : Caml_option.some(buttonClose), Webapi__Dom__Element.asHtmlElement), (function (buttonClose$p) {
            buttonClose$p.click();
            
          }));
    
  };
  var onSubmit = function (param) {
    var state = param.state;
    var tid = Buyer_Cash_Refund_Form_Admin.FormFields.get(state.values, /* Tid */0);
    var amount = Buyer_Cash_Refund_Form_Admin.FormFields.get(state.values, /* Amount */1);
    var reason = Buyer_Cash_Refund_Form_Admin.FormFields.get(state.values, /* Reason */2);
    Belt_Option.forEach(Belt_Option.flatMap(Belt_Float.fromString(amount), (function (amount$p) {
                return JSON.stringify({
                            uid: buyerId,
                            tid: tid,
                            amount: amount$p,
                            reason: reason
                          });
              })), (function (body) {
            FetchHelper.requestWithRetry(FetchHelper.postWithToken, Env.restApiUrl + "/cash/refund", body, 3, (function (param) {
                    addToast(React.createElement("div", {
                              className: "flex items-center"
                            }, React.createElement(IconCheck.make, {
                                  height: "24",
                                  width: "24",
                                  fill: "#12B564",
                                  className: "mr-2"
                                }), "잔액환불 요청 성공하였습니다."), {
                          appearance: "success"
                        });
                    return close(undefined);
                  }), (function (err) {
                    return addToast(React.createElement("div", {
                                    className: "flex items-center"
                                  }, React.createElement(IconError.make, {
                                        width: "24",
                                        height: "24",
                                        className: "mr-2"
                                      }), Belt_Option.getWithDefault(err.message, "잔액환불 요청에 에러가 발생하였습니다.")), {
                                appearance: "error"
                              });
                  }));
            
          }));
    
  };
  var form = Curry._7(Buyer_Cash_Refund_Form_Admin.Form.use, Buyer_Cash_Refund_Form_Admin.initialState, /* Schema */{
        _0: Belt_Array.concatMany([
              Curry._3(Buyer_Cash_Refund_Form_Admin.Form.ReSchema.Validation.nonEmpty, "TID를 입력해주세요.", undefined, /* Tid */0),
              Curry._3(Buyer_Cash_Refund_Form_Admin.Form.ReSchema.Validation.nonEmpty, "금액을 입력해주세요.", undefined, /* Amount */1),
              Curry._3(Buyer_Cash_Refund_Form_Admin.Form.ReSchema.Validation.nonEmpty, "사유를 입력해주세요.", undefined, /* Reason */2)
            ])
      }, onSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleOnSubmit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return Curry._1(form.submit, undefined);
                }), param);
  };
  var partial_arg = Curry._1(form.handleChange, /* Tid */0);
  var partial_arg$1 = Curry._1(form.handleChange, /* Amount */1);
  var partial_arg$2 = Curry._1(form.handleChange, /* Reason */2);
  return React.createElement(ReactDialog.Root, {
              children: null
            }, React.createElement(ReactDialog.Overlay, {
                  className: "dialog-overlay"
                }), React.createElement("div", {
                  className: "text-right"
                }, React.createElement(ReactDialog.Trigger, {
                      children: "잔액환불",
                      className: "mb-1 underline focus:outline-none"
                    })), React.createElement(ReactDialog.Content, {
                  children: null,
                  className: "dialog-content overflow-y-auto text-text-L1"
                }, React.createElement("div", {
                      className: "flex p-5"
                    }, React.createElement(ReactDialog.Close, {
                          children: "",
                          className: "focus:outline-none ml-auto",
                          id: "btn-close"
                        })), React.createElement("div", {
                      className: "p-5 pb-0"
                    }, React.createElement("h3", {
                          className: "text-center font-bold"
                        }, "잔액 환불을 진행하시겠어요?"), React.createElement("ul", {
                          className: "list-inside list-disc px-2 mt-5"
                        }, React.createElement("li", {
                              className: "py-0.5"
                            }, "신중히 작업 부탁드립니다. [확인]버튼 클릭 이후 수정 및 취소가 불가능합니다."), React.createElement("li", {
                              className: "py-0.5"
                            }, "KG이니시스를 사용해 잔액환불 완료 후 작업부탁드립니다."), React.createElement("li", {
                              className: "py-0.5"
                            }, "입금내역TID는 KG이니시스에서 확인 가능합니다."), React.createElement("li", {
                              className: "py-0.5"
                            }, "단위는 1원입니다.")), React.createElement("div", {
                          className: "mt-5"
                        }, React.createElement("span", {
                              className: "block mt-4 mb-1 text-sm"
                            }, "입금내역 TID"), React.createElement(Input.make, {
                              type_: "text",
                              name: "refund-tid",
                              placeholder: "TID 입력",
                              value: Buyer_Cash_Refund_Form_Admin.FormFields.get(form.values, /* Tid */0),
                              onChange: (function (param) {
                                  return ReForm__Helpers.handleChange(partial_arg, param);
                                }),
                              error: Curry._1(form.getFieldError, /* Field */{
                                    _0: /* Tid */0
                                  })
                            }), React.createElement("span", {
                              className: "block mt-4 mb-1 text-sm"
                            }, "금액"), React.createElement("span", {
                              className: "block relative"
                            }, React.createElement(Input.make, {
                                  type_: "number",
                                  name: "refund-amount",
                                  placeholder: "환불 금액 입력(단위 1원)",
                                  value: Buyer_Cash_Refund_Form_Admin.FormFields.get(form.values, /* Amount */1),
                                  onChange: (function (param) {
                                      return ReForm__Helpers.handleChange(partial_arg$1, param);
                                    }),
                                  error: Curry._1(form.getFieldError, /* Field */{
                                        _0: /* Amount */1
                                      })
                                }), React.createElement("span", {
                                  className: "absolute top-2 right-3 bg-white"
                                }, "원")), React.createElement("span", {
                              className: "block mt-4 mb-1 text-sm"
                            }, "잔액환불사유"), React.createElement(Input.make, {
                              type_: "text",
                              name: "refund-reason",
                              placeholder: "사유 입력",
                              value: Buyer_Cash_Refund_Form_Admin.FormFields.get(form.values, /* Reason */2),
                              onChange: (function (param) {
                                  return ReForm__Helpers.handleChange(partial_arg$2, param);
                                }),
                              error: Curry._1(form.getFieldError, /* Field */{
                                    _0: /* Reason */2
                                  })
                            }))), React.createElement(Dialog.ButtonBox.make, {
                      onCancel: (function (param) {
                          return close(undefined);
                        }),
                      onConfirm: handleOnSubmit,
                      textOnCancel: "닫기",
                      textOnConfirm: "확인"
                    })));
}

var FormFields;

var Form;

var make = Buyer_Cash_Refund_Button_Admin;

export {
  FormFields ,
  Form ,
  make ,
  
}
/* Env Not a pure module */
