// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Locale from "../utils/Locale.mjs";
import Link from "next/link";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Product_Badge from "./Product_Badge.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ProductOptionAdminFragment_graphql from "../__generated__/ProductOptionAdminFragment_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(ProductOptionAdminFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(ProductOptionAdminFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(ProductOptionAdminFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return ProductOptionAdminFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_productOptionStatus_decode = ProductOptionAdminFragment_graphql.Utils.productOptionStatus_decode;

var Fragment_productOptionStatus_fromString = ProductOptionAdminFragment_graphql.Utils.productOptionStatus_fromString;

var Fragment_sizeUnit_decode = ProductOptionAdminFragment_graphql.Utils.sizeUnit_decode;

var Fragment_sizeUnit_fromString = ProductOptionAdminFragment_graphql.Utils.sizeUnit_fromString;

var Fragment_weightUnit_decode = ProductOptionAdminFragment_graphql.Utils.weightUnit_decode;

var Fragment_weightUnit_fromString = ProductOptionAdminFragment_graphql.Utils.weightUnit_fromString;

var Fragment = {
  productOptionStatus_decode: Fragment_productOptionStatus_decode,
  productOptionStatus_fromString: Fragment_productOptionStatus_fromString,
  sizeUnit_decode: Fragment_sizeUnit_decode,
  sizeUnit_fromString: Fragment_sizeUnit_fromString,
  weightUnit_decode: Fragment_weightUnit_decode,
  weightUnit_fromString: Fragment_weightUnit_fromString,
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function Product_Option_Admin$Item$Table(Props) {
  var query = Props.query;
  var productOption = use(query);
  var weightUnitToString = function (unit) {
    if (unit === "G") {
      return "g";
    } else if (unit === "T") {
      return "t";
    } else if (unit === "KG") {
      return "kg";
    } else {
      return "g";
    }
  };
  var sizeUnitToString = function (unit) {
    if (unit === "M") {
      return "m";
    } else if (unit === "CM") {
      return "cm";
    } else {
      return "mm";
    }
  };
  var match = productOption.status;
  var match$1 = productOption.countPerPackageMin;
  var match$2 = productOption.countPerPackageMax;
  var unit = Belt_Option.mapWithDefault(productOption.perWeightUnit, "", weightUnitToString);
  var match$3 = productOption.perWeightMin;
  var match$4 = productOption.perWeightMax;
  var unit$1 = Belt_Option.mapWithDefault(productOption.perSizeUnit, "", sizeUnitToString);
  var match$5 = productOption.perSizeMin;
  var match$6 = productOption.perSizeMax;
  return React.createElement(React.Fragment, undefined, React.createElement("li", {
                  className: "grid grid-cols-15-admin-product text-gray-700"
                }, React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement(Product_Badge.V2.make, {
                          status: match === "NOSALE" ? /* NOSALE */3 : (
                              match === "SOLDOUT" ? /* SOLDOUT */1 : (
                                  match === "HIDDEN_SALE" ? /* HIDDEN_SALE */2 : (
                                      match === "SALE" || match !== "RETIRE" ? /* SALE */0 : /* RETIRE */4
                                    )
                                )
                            )
                        })), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("span", {
                          className: "block"
                        }, productOption.product.producer.name)), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("span", {
                          className: "block"
                        }, String(productOption.product.productId)), React.createElement("span", {
                          className: "block text-gray-500"
                        }, productOption.stockSku)), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("span", {
                          className: "block truncate underline"
                        }, React.createElement(Link, {
                              href: "/admin/products/" + productOption.product.id,
                              children: React.createElement("a", undefined, productOption.product.name)
                            })), React.createElement("span", {
                          className: "block text-gray-500 truncate underline"
                        }, React.createElement(Link, {
                              href: "/admin/products/" + productOption.product.id + "/options",
                              children: React.createElement("a", undefined, productOption.optionName)
                            }))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 ml-4"
                    }, React.createElement("span", {
                          className: "whitespace-nowrap"
                        }, Belt_Option.getWithDefault(Belt_Option.map(productOption.price, (function (p) {
                                    return Locale.Float.show(undefined, p, 0);
                                  })), "-") + "Ïõê")), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 ml-4"
                    }, React.createElement("span", {
                          className: "block"
                        }, Belt_Option.getWithDefault(productOption.product.category.item, "")), React.createElement("span", {
                          className: "block text-gray-500"
                        }, Belt_Option.getWithDefault(productOption.product.category.kind, ""))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 ml-4"
                    }, React.createElement("span", {
                          className: "block"
                        }, Belt_Option.mapWithDefault(productOption.weight, "", (function (w) {
                                return String(w) + Belt_Option.mapWithDefault(productOption.weightUnit, "", weightUnitToString);
                              }))), React.createElement("span", {
                          className: "block"
                        }, match$1 !== undefined ? (
                            match$2 !== undefined ? String(match$1) + " ~ " + String(match$2) : String(match$1) + " ~"
                          ) : (
                            match$2 !== undefined ? "~ " + String(match$2) : ""
                          ))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 ml-4"
                    }, React.createElement("span", {
                          className: "block"
                        }, match$3 !== undefined ? (
                            match$4 !== undefined ? String(match$3) + " ~ " + String(match$4) + unit : String(match$3) + " ~ " + unit
                          ) : (
                            match$4 !== undefined ? "~ " + String(match$4) + unit : ""
                          )), React.createElement("span", {
                          className: "block"
                        }, match$5 !== undefined ? (
                            match$6 !== undefined ? String(match$5) + " ~ " + String(match$6) + unit$1 : String(match$5) + " ~ " + unit$1
                          ) : (
                            match$6 !== undefined ? "~ " + String(match$6) + unit$1 : ""
                          ))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 ml-4"
                    }, React.createElement("span", {
                          className: "block"
                        }, Belt_Option.getWithDefault(productOption.grade, "")), React.createElement("span", {
                          className: "block"
                        }, Belt_Option.getWithDefault(productOption.packageType, ""))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 ml-4"
                    }, React.createElement("span", {
                          className: "block"
                        }, Belt_Option.mapWithDefault(productOption.product.md, "", (function (md) {
                                return md.name;
                              })))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 ml-4 "
                    }, React.createElement("span", {
                          className: "block truncate"
                        }, Belt_Option.getWithDefault(productOption.cutOffTime, ""))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 ml-4"
                    }, React.createElement("span", {
                          className: "block"
                        }, Belt_Option.getWithDefault(productOption.memo, "")))));
}

var Table = {
  make: Product_Option_Admin$Item$Table
};

var Item = {
  Table: Table
};

function Product_Option_Admin(Props) {
  var query = Props.query;
  return React.createElement(Product_Option_Admin$Item$Table, {
              query: query
            });
}

var make = Product_Option_Admin;

export {
  Fragment ,
  Item ,
  make ,
  
}
/* react Not a pure module */
