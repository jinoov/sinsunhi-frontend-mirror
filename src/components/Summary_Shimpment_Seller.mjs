// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Helper from "../utils/Helper.mjs";
import * as Locale from "../utils/Locale.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as DatePicker from "./DatePicker.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as ReactSelect from "./common/ReactSelect.mjs";
import * as Router from "next/router";
import * as Select_Market from "./Select_Market.mjs";
import * as PeriodSelector from "./common/PeriodSelector.mjs";
import Parse from "date-fns/parse";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import Format from "date-fns/format";
import SetDate from "date-fns/setDate";
import SubDays from "date-fns/subDays";
import * as Search_Crop_Cultivar from "./Search_Crop_Cultivar.mjs";
import * as Select_Crop_Search_Std from "./Select_Crop_Search_Std.mjs";
import * as Query_Shipment_Form_Seller from "./Query_Shipment_Form_Seller.mjs";

function Summary_Shimpment_Seller$StatusBoard(Props) {
  var router = Router.useRouter();
  var status = CustomHooks.ShipmentSummary.use(new URLSearchParams(Js_dict.fromArray([
                  [
                    "to",
                    Belt_Option.getWithDefault(Js_dict.get(router.query, "to"), "")
                  ],
                  [
                    "from",
                    Belt_Option.getWithDefault(Js_dict.get(router.query, "from"), "")
                  ]
                ])).toString());
  var montly = CustomHooks.ShipmentMontlyAmount.use(undefined);
  var firstDayOfMonth = Format(SetDate(new Date(), 1), "yyyy-MM-dd");
  var today = Format(new Date(), "yyyy-MM-dd");
  var tmp;
  if (typeof status === "number" || status.TAG !== /* Loaded */0) {
    tmp = null;
  } else {
    var response = CustomHooks.ShipmentSummary.response_decode(status._0);
    if (response.TAG === /* Ok */0) {
      tmp = React.createElement("div", {
            className: "mr-20 w-full sm:w-auto"
          }, React.createElement("div", {
                className: "text-sm text-gray-800"
              }, "누적출하", React.createElement("span", {
                    className: "text-gray-gl"
                  }, "(검색기간 내)")), React.createElement("div", {
                className: "font-bold"
              }, Locale.Float.show(undefined, response._0.price, 0) + " 원"));
    } else {
      console.log(response._0);
      tmp = null;
    }
  }
  var tmp$1;
  if (typeof montly === "number" || montly.TAG !== /* Loaded */0) {
    tmp$1 = null;
  } else {
    var response$1 = CustomHooks.ShipmentMontlyAmount.response_decode(montly._0);
    if (response$1.TAG === /* Ok */0) {
      tmp$1 = React.createElement("div", {
            className: "flex-1"
          }, React.createElement("div", {
                className: "text-sm text-gray-800"
              }, Format(new Date(), "MM") + "월 출하", React.createElement("span", {
                    className: "text-gray-gl"
                  }, "(" + firstDayOfMonth + "~" + today + ")")), React.createElement("div", {
                className: "font-bold"
              }, Locale.Float.show(undefined, response$1._0.price, 0) + " 원"));
    } else {
      console.log(response$1._0);
      tmp$1 = null;
    }
  }
  return React.createElement("div", {
              className: "py-4 lg:px-5 flex flex-wrap"
            }, tmp, React.createElement("span", {
                  className: "border-gray-200 border-t my-3 w-full sm:w-auto sm:mr-5 sm:my-2 sm:border-r"
                }), tmp$1);
}

var StatusBoard = {
  make: Summary_Shimpment_Seller$StatusBoard
};

function getProps(queryParms) {
  return {
          std: Js_dict.get(queryParms, "crop-search-std"),
          market: Js_dict.get(queryParms, "market-type"),
          from: Js_dict.get(queryParms, "from"),
          to_: Js_dict.get(queryParms, "to"),
          crop: Js_dict.get(queryParms, "category-id"),
          label: Js_dict.get(queryParms, "label")
        };
}

function Summary_Shimpment_Seller(Props) {
  var defaults = Props.defaults;
  var router = Router.useRouter();
  var match = React.useState(function () {
        return Belt_Option.getWithDefault(Helper.$$Option.map2(defaults.crop, defaults.label, (function (v, l) {
                          if (v === "" || l === "") {
                            return /* NotSelected */0;
                          } else {
                            return /* Selected */{
                                    value: v,
                                    label: l
                                  };
                          }
                        })), /* NotSelected */0);
      });
  var setSelectedCrop = match[1];
  var selectedCrop = match[0];
  var match$1 = React.useState(function () {
        return {
                from: Belt_Option.mapWithDefault(defaults.from, SubDays(new Date(), 7), (function (f) {
                        return Parse(f, "yyyy-MM-dd", new Date());
                      })),
                to_: Belt_Option.mapWithDefault(defaults.to_, new Date(), (function (t) {
                        return Parse(t, "yyyy-MM-dd", new Date());
                      }))
              };
      });
  var setQuery = match$1[1];
  var query = match$1[0];
  var onSubmit = function (param) {
    var state = param.state;
    var market = Query_Shipment_Form_Seller.FormFields.get(state.values, /* Market */0);
    var std = Query_Shipment_Form_Seller.FormFields.get(state.values, /* Std */1);
    router.query["crop-search-std"] = std;
    router.query["market-type"] = market;
    router.query["from"] = Format(query.from, "yyyy-MM-dd");
    router.query["to"] = Format(query.to_, "yyyy-MM-dd");
    var match = Belt_Option.mapWithDefault(ReactSelect.toOption(selectedCrop), [
          "",
          ""
        ], (function (v) {
            return [
                    v.value,
                    v.label
                  ];
          }));
    router.query["category-id"] = match[0];
    router.query["label"] = match[1];
    router.push(router.pathname + "?" + new URLSearchParams(router.query).toString());
    
  };
  var form = Curry._7(Query_Shipment_Form_Seller.Form.use, {
        market: Belt_Option.getWithDefault(defaults.market, ""),
        std: Belt_Option.getWithDefault(defaults.std, "Crop")
      }, /* Schema */{
        _0: Belt_Array.concatMany([])
      }, onSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleOnSubmit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return Curry._1(form.submit, undefined);
                }), param);
  };
  var handleOnChangeCropOrCultivar = function (e) {
    ReForm__Helpers.handleChange(Curry._1(form.handleChange, /* Std */1), e);
    return setSelectedCrop(function (param) {
                return /* NotSelected */0;
              });
  };
  var handleChangeCrop = function (selection) {
    return setSelectedCrop(function (param) {
                return selection;
              });
  };
  var handleOnChangeDate = function (t, e) {
    var newDate = e.detail.valueAsDate;
    if (t) {
      if (newDate === undefined) {
        return ;
      }
      var newDate$p = Caml_option.valFromOption(newDate);
      return setQuery(function (prev) {
                  return {
                          from: prev.from,
                          to_: newDate$p
                        };
                });
    }
    if (newDate === undefined) {
      return ;
    }
    var newDate$p$1 = Caml_option.valFromOption(newDate);
    return setQuery(function (prev) {
                return {
                        from: newDate$p$1,
                        to_: prev.to_
                      };
              });
  };
  var handleOnChangePeriod = function (d) {
    return setQuery(function (prev) {
                return {
                        from: d,
                        to_: prev.to_
                      };
              });
  };
  var handleOnReset = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  Curry._4(form.setFieldValue, /* Market */0, "", false, undefined);
                  Curry._4(form.setFieldValue, /* Std */1, "Crop", false, undefined);
                  setQuery(function (param) {
                        return {
                                from: SubDays(new Date(), 7),
                                to_: new Date()
                              };
                      });
                  return setSelectedCrop(function (param) {
                              return /* NotSelected */0;
                            });
                }), param);
  };
  var partial_arg = Curry._1(form.handleChange, /* Market */0);
  return React.createElement("div", {
              className: "py-3 px-4 pb-7 shadow-gl sm:mt-4"
            }, React.createElement("h3", {
                  className: "py-4 lg:px-5 font-bold text-xl whitespace-nowrap"
                }, "출하내역"), React.createElement(Summary_Shimpment_Seller$StatusBoard, {}), React.createElement("form", {
                  className: "lg:px-4 mt-7",
                  onSubmit: handleOnSubmit
                }, React.createElement("div", {
                      className: "py-3 flex flex-col text-sm bg-gray-gl rounded-xl"
                    }, React.createElement("div", {
                          className: "flex flex-col lg:flex-row"
                        }, React.createElement("div", {
                              className: "w-32 font-bold pl-3 whitespace-nowrap lg:pl-7 lg:pt-3"
                            }, "검색"), React.createElement("div", {
                              className: "flex-1 px-3 lg:px-0"
                            }, React.createElement("div", {
                                  className: "flex mt-2 w-full flex-wrap sm:flex-nowrap sm:w-auto"
                                }, React.createElement("div", {
                                      className: "flex flex-col justify-between w-full sm:w-64 sm:flex-initial sm:flex-row sm:items-center mr-2"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-7",
                                          htmlFor: "crop-kind"
                                        }, "작물품종"), React.createElement(Select_Crop_Search_Std.make, {
                                          std: Belt_Option.getWithDefault(Select_Crop_Search_Std.decodeStd(Query_Shipment_Form_Seller.FormFields.get(form.values, /* Std */1)), "Crop"),
                                          onChange: handleOnChangeCropOrCultivar
                                        })), React.createElement("div", {
                                      className: "relative w-full mt-2 sm:mt-0"
                                    }, React.createElement("div", {
                                          className: "sm:absolute sm:w-96"
                                        }, React.createElement(Search_Crop_Cultivar.make, {
                                              type_: Belt_Option.getWithDefault(Select_Crop_Search_Std.decodeStd(Query_Shipment_Form_Seller.FormFields.get(form.values, /* Std */1)), "Crop"),
                                              value: selectedCrop,
                                              onChange: handleChangeCrop
                                            })))), React.createElement("div", {
                                  className: "flex mt-5 w-full sm:w-auto sm:mt-3"
                                }, React.createElement("div", {
                                      className: "flex flex-col justify-between w-full sm:w-64 sm:flex-initial sm:flex-row sm:items-center sm:mr-16"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "order-product-no"
                                        }, "판로유형"), React.createElement(Select_Market.make, {
                                          market: Select_Market.decodeMarket(Query_Shipment_Form_Seller.FormFields.get(form.values, /* Market */0)),
                                          onChange: (function (param) {
                                              return ReForm__Helpers.handleChange(partial_arg, param);
                                            })
                                        }))))), React.createElement("div", {
                          className: "flex flex-col lg:flex-row mt-4 mb-2"
                        }, React.createElement("div", {
                              className: "w-32 font-bold pl-3 whitespace-nowrap lg:pl-7 lg:pt-3"
                            }, "기간"), React.createElement("div", {
                              className: "flex flex-col px-3 sm:flex-row lg:px-0"
                            }, React.createElement("div", {
                                  className: "flex mb-2 sm:mb-0 sm:mr-8"
                                }, React.createElement(PeriodSelector.make, {
                                      from: query.from,
                                      to_: query.to_,
                                      onSelect: handleOnChangePeriod
                                    })), React.createElement("div", {
                                  className: "flex"
                                }, React.createElement(DatePicker.make, {
                                      id: "from",
                                      onChange: (function (param) {
                                          return handleOnChangeDate(/* From */0, param);
                                        }),
                                      date: query.from,
                                      maxDate: Format(new Date(), "yyyy-MM-dd"),
                                      minDate: "2021-01-01",
                                      firstDayOfWeek: 0
                                    }), React.createElement("span", {
                                      className: "flex items-center mr-1"
                                    }, "~"), React.createElement(DatePicker.make, {
                                      id: "to",
                                      onChange: (function (param) {
                                          return handleOnChangeDate(/* To */1, param);
                                        }),
                                      date: query.to_,
                                      maxDate: Format(new Date(), "yyyy-MM-dd"),
                                      minDate: Format(query.from, "yyyy-MM-dd"),
                                      firstDayOfWeek: 0
                                    }))))), React.createElement("div", {
                      className: "flex justify-center mt-5"
                    }, React.createElement("span", {
                          className: "w-20 h-11 flex mr-2"
                        }, React.createElement("input", {
                              className: "btn-level6",
                              tabIndex: 6,
                              type: "button",
                              value: "초기화",
                              onClick: handleOnReset
                            })), React.createElement("span", {
                          className: "w-20 h-11 flex"
                        }, React.createElement("input", {
                              className: "btn-level1",
                              tabIndex: 5,
                              type: "submit",
                              value: "검색"
                            })))));
}

var FormFields;

var Form;

var Select_Crop_Std;

var make = Summary_Shimpment_Seller;

export {
  StatusBoard ,
  FormFields ,
  Form ,
  Select_Crop_Std ,
  getProps ,
  make ,
  
}
/* react Not a pure module */
