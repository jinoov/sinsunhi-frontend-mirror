// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Checkbox from "./common/Checkbox.mjs";
import * as IconArrow from "./svgs/IconArrow.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as ReactRelay from "react-relay";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as ReactHookForm from "../bindings/ReactHookForm/ReactHookForm.mjs";
import Format from "date-fns/format";
import * as ReactHookForm$1 from "react-hook-form";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ErrorMessage from "@hookform/error-message";
import * as Add_ProductOption_Admin from "./Add_ProductOption_Admin.mjs";
import * as Product_Option_Each_Admin from "./Product_Option_Each_Admin.mjs";
import * as Select_Product_Option_Unit from "./Select_Product_Option_Unit.mjs";
import * as ReactCollapsible from "@radix-ui/react-collapsible";
import * as Select_Product_Shipping_Type from "./Select_Product_Shipping_Type.mjs";
import * as Select_ProductOption_Operation_Status from "./Select_ProductOption_Operation_Status.mjs";
import CheckboxCheckedSvg from "../../public/assets/checkbox-checked.svg";
import * as UpdateProductOptionAdminFragment_graphql from "../__generated__/UpdateProductOptionAdminFragment_graphql.mjs";
import CheckboxUncheckedSvg from "../../public/assets/checkbox-unchecked.svg";
import * as UpdateProductOptionAdminAutoGenNameFragment_graphql from "../__generated__/UpdateProductOptionAdminAutoGenNameFragment_graphql.mjs";

var checkboxCheckedIcon = CheckboxCheckedSvg;

var checkboxUncheckedIcon = CheckboxUncheckedSvg;

function use(fRef) {
  var data = ReactRelay.useFragment(UpdateProductOptionAdminFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(UpdateProductOptionAdminFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(UpdateProductOptionAdminFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return UpdateProductOptionAdminFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_amountUnit_decode = UpdateProductOptionAdminFragment_graphql.Utils.amountUnit_decode;

var Fragment_amountUnit_fromString = UpdateProductOptionAdminFragment_graphql.Utils.amountUnit_fromString;

var Fragment_productOptionStatus_decode = UpdateProductOptionAdminFragment_graphql.Utils.productOptionStatus_decode;

var Fragment_productOptionStatus_fromString = UpdateProductOptionAdminFragment_graphql.Utils.productOptionStatus_fromString;

var Fragment_sizeUnit_decode = UpdateProductOptionAdminFragment_graphql.Utils.sizeUnit_decode;

var Fragment_sizeUnit_fromString = UpdateProductOptionAdminFragment_graphql.Utils.sizeUnit_fromString;

var Fragment = {
  amountUnit_decode: Fragment_amountUnit_decode,
  amountUnit_fromString: Fragment_amountUnit_fromString,
  productOptionStatus_decode: Fragment_productOptionStatus_decode,
  productOptionStatus_fromString: Fragment_productOptionStatus_fromString,
  sizeUnit_decode: Fragment_sizeUnit_decode,
  sizeUnit_fromString: Fragment_sizeUnit_fromString,
  Types: undefined,
  Operation: undefined,
  use: use,
  useOpt: useOpt
};

function amountUnit(unit) {
  if (unit === "G") {
    return /* G */0;
  } else if (unit === "L") {
    return /* L */4;
  } else if (unit === "T") {
    return /* T */2;
  } else if (unit === "EA") {
    return /* EA */5;
  } else if (unit === "KG") {
    return /* KG */1;
  } else if (unit === "ML") {
    return /* ML */3;
  } else {
    return /* G */0;
  }
}

function perAmountUnit(unit) {
  if (unit === "G") {
    return /* G */0;
  } else if (unit === "L") {
    return /* L */4;
  } else if (unit === "T") {
    return /* T */2;
  } else if (unit === "EA") {
    return /* EA */5;
  } else if (unit === "KG") {
    return /* KG */1;
  } else if (unit === "ML") {
    return /* ML */3;
  } else {
    return /* G */0;
  }
}

function perSizeUnit(unit) {
  if (unit === "M") {
    return /* M */2;
  } else if (unit === "CM") {
    return /* CM */1;
  } else {
    return /* MM */0;
  }
}

function status(statusFromApi) {
  if (statusFromApi === "NOSALE") {
    return /* NOSALE */2;
  } else if (statusFromApi === "SOLDOUT") {
    return /* SOLDOUT */1;
  } else if (statusFromApi === "SALE" || statusFromApi !== "RETIRE") {
    return /* SALE */0;
  } else {
    return /* RETIRE */3;
  }
}

function stringifyStatus(statusFromApi) {
  if (statusFromApi === "NOSALE") {
    return "NOSALE";
  } else if (statusFromApi === "SOLDOUT") {
    return "SOLDOUT";
  } else if (statusFromApi === "SALE" || statusFromApi !== "RETIRE") {
    return "SALE";
  } else {
    return "RETIRE";
  }
}

function hasEach(countPerPackageMax, countPerPackageMin, perSizeMax, perSizeMin, perSizeUnit, perAmountUnit) {
  if (countPerPackageMax !== undefined || countPerPackageMin !== undefined || perSizeMax !== undefined || perSizeMin !== undefined || perSizeUnit !== undefined) {
    return true;
  } else {
    return perAmountUnit !== undefined;
  }
}

var DecodeProductOption = {
  amountUnit: amountUnit,
  perAmountUnit: perAmountUnit,
  perSizeUnit: perSizeUnit,
  status: status,
  stringifyStatus: stringifyStatus,
  hasEach: hasEach
};

function Update_ProductOption_Admin$Each(Props) {
  var minNum = Props.minNum;
  var maxNum = Props.maxNum;
  var amount = Props.amount;
  var amountUnit = Props.amountUnit;
  var perAmountMin = Props.perAmountMin;
  var perAmountMax = Props.perAmountMax;
  var perAmountUnit = Props.perAmountUnit;
  var minSize = Props.minSize;
  var maxSize = Props.maxSize;
  var sizeUnit = Props.sizeUnit;
  return React.createElement("div", {
              className: "py-6 flex flex-col gap-2"
            }, React.createElement("div", {
                  className: "flex gap-2 items-center"
                }, React.createElement("label", {
                      className: "block"
                    }, "입수 정보"), React.createElement("div", {
                      className: "px-3 py-2 border border-border-default-L1 rounded-lg h-9 bg-disabled-L3 w-36 leading-4.5"
                    }, "" + Belt_Option.mapWithDefault(amount, "", (function (prim) {
                            return String(prim);
                          })) + "\n          " + Belt_Option.mapWithDefault(amountUnit, "", Select_Product_Option_Unit.Amount.toString) + ""), React.createElement("div", undefined, React.createElement("div", {
                          className: "px-3 py-2 border border-border-default-L1 rounded-lg h-9 focus:outline-none bg-disabled-L3 w-36"
                        }, Belt_Option.mapWithDefault(minNum, "", (function (prim) {
                                return String(prim);
                              })))), React.createElement("span", undefined, "~"), React.createElement("div", undefined, React.createElement("div", {
                          className: "px-3 py-2 border border-border-default-L1 rounded-lg h-9 focus:outline-none bg-disabled-L3 w-36"
                        }, Belt_Option.mapWithDefault(maxNum, "", (function (prim) {
                                return String(prim);
                              }))))), React.createElement("div", {
                  className: "flex gap-4 flex-wrap"
                }, React.createElement("div", {
                      className: "flex gap-2 items-center pr-4 border-r border-div-border-L2"
                    }, React.createElement("label", {
                          className: "block shrink-0"
                        }, "개당 무게"), React.createElement("div", {
                          className: "px-3 py-2 border border-border-default-L1 rounded-lg h-9 bg-disabled-L3 w-36 text-disabled-L1 leading-4.5 focus:outline-none"
                        }, Belt_Option.mapWithDefault(perAmountMin, "", (function (prim) {
                                return String(prim);
                              }))), React.createElement("span", undefined, "~"), React.createElement("div", {
                          className: "px-3 py-2 border border-border-default-L1 rounded-lg h-9 bg-disabled-L3 w-36 text-disabled-L1 leading-4.5 focus:outline-none"
                        }, Belt_Option.mapWithDefault(perAmountMax, "", (function (prim) {
                                return String(prim);
                              }))), React.createElement(Select_Product_Option_Unit.Amount.make, {
                          status: Belt_Option.getWithDefault(perAmountUnit, /* G */0),
                          onChange: (function (param) {
                              
                            }),
                          disabled: true
                        })), React.createElement("div", {
                      className: "flex gap-2 items-center"
                    }, React.createElement("label", {
                          className: "block shrink-0"
                        }, "개당 크기"), React.createElement("div", undefined, React.createElement("div", {
                              className: "px-3 py-2 border border-border-default-L1 rounded-lg h-9 focus:outline-none shrink bg-disabled-L3 w-36"
                            }, Belt_Option.mapWithDefault(minSize, "", (function (prim) {
                                    return String(prim);
                                  })))), React.createElement("span", undefined, "~"), React.createElement("div", undefined, React.createElement("div", {
                              className: "px-3 py-2 border border-border-default-L1 rounded-lg h-9 focus:outline-none shrink bg-disabled-L3 w-36"
                            }, Belt_Option.mapWithDefault(maxSize, "", (function (prim) {
                                    return String(prim);
                                  })))), React.createElement(Select_Product_Option_Unit.Size.make, {
                          status: Belt_Option.getWithDefault(sizeUnit, /* MM */0),
                          onChange: (function (param) {
                              
                            }),
                          disabled: true
                        }))));
}

var Each = {
  make: Update_ProductOption_Admin$Each
};

function submit_encode(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.stringToJson(v.id)
              ],
              [
                "name",
                Spice.optionToJson(Spice.stringToJson, v.name)
              ],
              [
                "operation-status",
                Select_ProductOption_Operation_Status.Base.status_encode(v.operationStatus)
              ],
              [
                "cut-off-time",
                Spice.optionToJson(Spice.stringToJson, v.cutOffTime)
              ],
              [
                "memo",
                Spice.optionToJson(Spice.stringToJson, v.memo)
              ],
              [
                "auto-generated-name",
                Spice.stringToJson(v.autoGenName)
              ],
              [
                "is-free-shipping",
                Select_Product_Shipping_Type.status_encode(v.isFreeShipping)
              ],
              [
                "shipping-unit-quantity",
                Spice.intToJson(v.shippingUnitQuantity)
              ],
              [
                "adhoc-stock-is-limited",
                Spice.boolToJson(v.adhocStockIsLimited)
              ],
              [
                "adhoc-stock-num-limit",
                Spice.optionToJson(Spice.intToJson, v.adhocStockNumLimit)
              ],
              [
                "adhoc-stock-is-num-remaining-visible",
                Spice.boolToJson(v.adhocStockIsNumRemainingVisible)
              ]
            ]);
}

function submit_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var name = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
    if (name.TAG === /* Ok */0) {
      var operationStatus = Select_ProductOption_Operation_Status.Base.status_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "operation-status"), null));
      if (operationStatus.TAG === /* Ok */0) {
        var cutOffTime = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "cut-off-time"), null));
        if (cutOffTime.TAG === /* Ok */0) {
          var memo = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "memo"), null));
          if (memo.TAG === /* Ok */0) {
            var autoGenName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "auto-generated-name"), null));
            if (autoGenName.TAG === /* Ok */0) {
              var isFreeShipping = Select_Product_Shipping_Type.status_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "is-free-shipping"), null));
              if (isFreeShipping.TAG === /* Ok */0) {
                var shippingUnitQuantity = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "shipping-unit-quantity"), null));
                if (shippingUnitQuantity.TAG === /* Ok */0) {
                  var adhocStockIsLimited = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "adhoc-stock-is-limited"), null));
                  if (adhocStockIsLimited.TAG === /* Ok */0) {
                    var adhocStockNumLimit = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "adhoc-stock-num-limit"), null));
                    if (adhocStockNumLimit.TAG === /* Ok */0) {
                      var adhocStockIsNumRemainingVisible = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "adhoc-stock-is-num-remaining-visible"), null));
                      if (adhocStockIsNumRemainingVisible.TAG === /* Ok */0) {
                        return {
                                TAG: /* Ok */0,
                                _0: {
                                  id: id._0,
                                  name: name._0,
                                  operationStatus: operationStatus._0,
                                  cutOffTime: cutOffTime._0,
                                  memo: memo._0,
                                  autoGenName: autoGenName._0,
                                  isFreeShipping: isFreeShipping._0,
                                  shippingUnitQuantity: shippingUnitQuantity._0,
                                  adhocStockIsLimited: adhocStockIsLimited._0,
                                  adhocStockNumLimit: adhocStockNumLimit._0,
                                  adhocStockIsNumRemainingVisible: adhocStockIsNumRemainingVisible._0
                                }
                              };
                      }
                      var e = adhocStockIsNumRemainingVisible._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".adhoc-stock-is-num-remaining-visible" + e.path,
                                message: e.message,
                                value: e.value
                              }
                            };
                    }
                    var e$1 = adhocStockNumLimit._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".adhoc-stock-num-limit" + e$1.path,
                              message: e$1.message,
                              value: e$1.value
                            }
                          };
                  }
                  var e$2 = adhocStockIsLimited._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".adhoc-stock-is-limited" + e$2.path,
                            message: e$2.message,
                            value: e$2.value
                          }
                        };
                }
                var e$3 = shippingUnitQuantity._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".shipping-unit-quantity" + e$3.path,
                          message: e$3.message,
                          value: e$3.value
                        }
                      };
              }
              var e$4 = isFreeShipping._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".is-free-shipping" + e$4.path,
                        message: e$4.message,
                        value: e$4.value
                      }
                    };
            }
            var e$5 = autoGenName._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".auto-generated-name" + e$5.path,
                      message: e$5.message,
                      value: e$5.value
                    }
                  };
          }
          var e$6 = memo._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".memo" + e$6.path,
                    message: e$6.message,
                    value: e$6.value
                  }
                };
        }
        var e$7 = cutOffTime._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".cut-off-time" + e$7.path,
                  message: e$7.message,
                  value: e$7.value
                }
              };
      }
      var e$8 = operationStatus._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".operation-status" + e$8.path,
                message: e$8.message,
                value: e$8.value
              }
            };
    }
    var e$9 = name._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".name" + e$9.path,
              message: e$9.message,
              value: e$9.value
            }
          };
  }
  var e$10 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$10.path,
            message: e$10.message,
            value: e$10.value
          }
        };
}

function makeInputNames(prefix) {
  return {
          id: "" + prefix + ".id",
          name: "" + prefix + ".name",
          operationStatus: "" + prefix + ".operation-status",
          cutOffTime: "" + prefix + ".cut-off-time",
          memo: "" + prefix + ".memo",
          autoGenName: "" + prefix + ".auto-generated-name",
          isFreeShipping: "" + prefix + ".is-free-shipping",
          shippingUnitQuantity: "" + prefix + ".shipping-unit-quantity",
          adhocStockIsLimited: "" + prefix + ".adhoc-stock-is-limited",
          adhocStockNumLimit: "" + prefix + ".adhoc-stock-num-limit",
          adhocStockIsNumRemainingVisible: "" + prefix + ".adhoc-stock-is-num-remaining-visible"
        };
}

function makeAddProductOptionDefaultValue(values, grade, packageType, countPerPackageMax, countPerPackageMin, perSizeMax, perSizeMin, perSizeUnit, perAmountUnit, amount, amountUnit) {
  var names = Add_ProductOption_Admin.Form.names;
  var fields = [
    [
      names.name,
      Belt_Option.mapWithDefault(values.name, null, (function (prim) {
              return prim;
            }))
    ],
    [
      names.grade,
      Belt_Option.mapWithDefault(grade, null, (function (prim) {
              return prim;
            }))
    ],
    [
      names.package,
      Belt_Option.mapWithDefault(packageType, null, (function (prim) {
              return prim;
            }))
    ],
    [
      names.amount,
      Belt_Option.mapWithDefault(amount, null, (function (prim) {
              return prim;
            }))
    ],
    [
      names.amountUnit,
      Belt_Option.mapWithDefault(amountUnit, null, Select_Product_Option_Unit.Amount.status_encode)
    ],
    [
      names.operationStatus,
      Select_ProductOption_Operation_Status.Base.status_encode(values.operationStatus)
    ],
    [
      names.isFreeShipping,
      Select_Product_Shipping_Type.status_encode(values.isFreeShipping)
    ],
    [
      names.buyerPrice,
      null
    ],
    [
      "cost",
      Js_dict.fromArray([
            [
              "effective-date",
              Format(new Date(), "yyyy-MM-dd")
            ],
            [
              "raw-cost",
              null
            ],
            [
              "working-cost",
              null
            ],
            [
              "delivery-cost",
              null
            ],
            [
              "buyer-price",
              null
            ]
          ])
    ],
    [
      names.cutOffTime,
      Belt_Option.mapWithDefault(values.cutOffTime, null, (function (prim) {
              return prim;
            }))
    ],
    [
      names.memo,
      Belt_Option.mapWithDefault(values.memo, null, (function (prim) {
              return prim;
            }))
    ],
    [
      names.adhocStockIsLimited,
      values.adhocStockIsLimited
    ],
    [
      names.adhocStockNumLimit,
      Belt_Option.mapWithDefault(values.adhocStockNumLimit, null, (function (x) {
              return x;
            }))
    ],
    [
      names.adhocStockIsNumRemainingVisible,
      values.adhocStockIsNumRemainingVisible
    ]
  ];
  var each;
  if (hasEach(countPerPackageMax, countPerPackageMin, perSizeMax, perSizeMin, perSizeUnit, perAmountUnit)) {
    var names$1 = Product_Option_Each_Admin.Form.names;
    each = [
      [
        Add_ProductOption_Admin.Form.names.showEach,
        true
      ],
      [
        "each",
        Js_dict.fromArray([
              [
                names$1.unitAmount,
                Select_Product_Option_Unit.Amount.status_encode(Belt_Option.getWithDefault(perAmountUnit, /* KG */1))
              ],
              [
                names$1.minSize,
                Belt_Option.mapWithDefault(perSizeMin, null, (function (prim) {
                        return prim;
                      }))
              ],
              [
                names$1.maxSize,
                Belt_Option.mapWithDefault(perSizeMax, null, (function (prim) {
                        return prim;
                      }))
              ],
              [
                names$1.unitSize,
                Select_Product_Option_Unit.Size.status_encode(Belt_Option.getWithDefault(perSizeUnit, /* MM */0))
              ],
              [
                names$1.minNum,
                Belt_Option.mapWithDefault(countPerPackageMin, null, (function (i) {
                        return i;
                      }))
              ],
              [
                names$1.maxNum,
                Belt_Option.mapWithDefault(countPerPackageMax, null, (function (i) {
                        return i;
                      }))
              ]
            ])
      ]
    ];
  } else {
    each = [];
  }
  return Js_dict.fromArray(Belt_Array.concat(fields, each));
}

var Form = {
  submit_encode: submit_encode,
  submit_decode: submit_decode,
  makeInputNames: makeInputNames,
  makeAddProductOptionDefaultValue: makeAddProductOptionDefaultValue
};

function Update_ProductOption_Admin$ReadOnlyOptionId(Props) {
  var inputName = Props.inputName;
  var value = Props.value;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, undefined);
  var name = match$1.name;
  return React.createElement("input", {
              ref: match$1.ref,
              defaultValue: value,
              id: name,
              name: name,
              type: "hidden"
            });
}

var ReadOnlyOptionId = {
  make: Update_ProductOption_Admin$ReadOnlyOptionId
};

function Update_ProductOption_Admin$EditName(Props) {
  var inputName = Props.inputName;
  var defaultValue = Props.defaultValue;
  var disabled = Props.disabled;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, undefined);
  var name = match$1.name;
  var disabledStyle = disabled ? "bg-gray-100 focus:outline-none" : "";
  return React.createElement("input", {
              ref: match$1.ref,
              defaultValue: defaultValue,
              className: Cx.cx([
                    "px-3 py-2 border border-gray-300 rounded-lg h-9 w-1/3 max-w-sm",
                    disabledStyle
                  ]),
              id: name,
              name: name,
              placeholder: "단품명 입력(커스텀)",
              readOnly: disabled,
              onBlur: match$1.onBlur,
              onChange: match$1.onChange
            });
}

var EditName = {
  make: Update_ProductOption_Admin$EditName
};

function use$1(fRef) {
  var data = ReactRelay.useFragment(UpdateProductOptionAdminAutoGenNameFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(UpdateProductOptionAdminAutoGenNameFragment_graphql.Internal.convertFragment, data);
}

function useOpt$1(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(UpdateProductOptionAdminAutoGenNameFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return UpdateProductOptionAdminAutoGenNameFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_amountUnit_decode$1 = UpdateProductOptionAdminAutoGenNameFragment_graphql.Utils.amountUnit_decode;

var Fragment_amountUnit_fromString$1 = UpdateProductOptionAdminAutoGenNameFragment_graphql.Utils.amountUnit_fromString;

var Fragment_sizeUnit_decode$1 = UpdateProductOptionAdminAutoGenNameFragment_graphql.Utils.sizeUnit_decode;

var Fragment_sizeUnit_fromString$1 = UpdateProductOptionAdminAutoGenNameFragment_graphql.Utils.sizeUnit_fromString;

var Fragment$1 = {
  amountUnit_decode: Fragment_amountUnit_decode$1,
  amountUnit_fromString: Fragment_amountUnit_fromString$1,
  sizeUnit_decode: Fragment_sizeUnit_decode$1,
  sizeUnit_fromString: Fragment_sizeUnit_fromString$1,
  Types: undefined,
  Operation: undefined,
  use: use$1,
  useOpt: useOpt$1
};

function Update_ProductOption_Admin$ReadOnlyAutoGenName(Props) {
  var inputName = Props.inputName;
  var query = Props.query;
  var match = use$1(query);
  var match$1 = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$2 = match$1.register(inputName, undefined);
  var name = match$2.name;
  var parsedAmountUnit = amountUnit(match.amountUnit);
  var parsedPerAmountUnit = Belt_Option.map(match.perAmountUnit, perAmountUnit);
  var parsedPerSizeUnit = Belt_Option.map(match.perSizeUnit, perSizeUnit);
  var autoGenName = Add_ProductOption_Admin.makeAutoGeneratedName(match.grade, match.packageType, String(match.amount), Select_Product_Option_Unit.Amount.toString(parsedAmountUnit), Belt_Option.map(match.countPerPackageMin, (function (prim) {
              return String(prim);
            })), Belt_Option.map(match.countPerPackageMax, (function (prim) {
              return String(prim);
            })), Belt_Option.map(parsedPerAmountUnit, Select_Product_Option_Unit.Amount.toString), Belt_Option.map(match.perSizeMin, (function (prim) {
              return String(prim);
            })), Belt_Option.map(match.perSizeMax, (function (prim) {
              return String(prim);
            })), Belt_Option.map(parsedPerSizeUnit, Select_Product_Option_Unit.Size.toString), true, undefined);
  return React.createElement("input", {
              ref: match$2.ref,
              defaultValue: autoGenName,
              className: "px-3 py-2 border border-gray-300 bg-gray-100 rounded-lg h-9 w-1/3 max-w-sm text-gray-500",
              id: name,
              name: name,
              placeholder: "자동생성 단품명(자동으로 생성)",
              readOnly: true
            });
}

var ReadOnlyAutoGenName = {
  Fragment: Fragment$1,
  make: Update_ProductOption_Admin$ReadOnlyAutoGenName
};

function Update_ProductOption_Admin$ReadOnlyStockSku(Props) {
  var value = Props.value;
  return React.createElement("div", {
              className: "h-9 w-1/6 max-w-xs px-3 py-2 border border-gray-300 bg-gray-100 rounded-lg"
            }, React.createElement("span", {
                  className: "text-gray-500"
                }, value));
}

var ReadOnlyStockSku = {
  make: Update_ProductOption_Admin$ReadOnlyStockSku
};

function Update_ProductOption_Admin$ReadOnlyGrade(Props) {
  var value = Props.value;
  return React.createElement("div", {
              className: "flex flex-col gap-2  w-1/3 max-w-sm"
            }, React.createElement("label", {
                  className: "font-bold"
                }, "등급(용도)"), React.createElement("div", {
                  className: "px-3 py-2 border border-gray-300 text-gray-800 bg-gray-100 rounded-lg h-9"
                }, Belt_Option.getWithDefault(value, "")));
}

var ReadOnlyGrade = {
  make: Update_ProductOption_Admin$ReadOnlyGrade
};

function Update_ProductOption_Admin$ReadOnlyPackage(Props) {
  var value = Props.value;
  return React.createElement("div", {
              className: "flex flex-col gap-2  w-1/3 max-w-sm"
            }, React.createElement("span", {
                  className: "font-bold"
                }, "포장재질"), React.createElement("div", {
                  className: "px-3 py-2 border border-gray-300 text-gray-800 bg-gray-100 rounded-lg h-9"
                }, Belt_Option.getWithDefault(value, "")));
}

var ReadOnlyPackage = {
  make: Update_ProductOption_Admin$ReadOnlyPackage
};

function Update_ProductOption_Admin$ReadOnlyAmount(Props) {
  var value = Props.value;
  var unit = Props.unit;
  var showEach = Props.showEach;
  return React.createElement("div", {
              className: "py-6 flex flex-col gap-2"
            }, React.createElement("div", undefined, React.createElement("span", {
                      className: "font-bold"
                    }, "중량"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*")), React.createElement("div", {
                  className: "flex"
                }, React.createElement("div", {
                      className: "flex-nowrap flex gap-2"
                    }, React.createElement("div", undefined, React.createElement("div", {
                              className: "px-3 py-2 border border-gray-300 bg-gray-100 rounded-lg h-9 w-36"
                            }, Belt_Option.mapWithDefault(value, "", (function (prim) {
                                    return String(prim);
                                  })))), React.createElement(Select_Product_Option_Unit.Amount.make, {
                          status: Belt_Option.mapWithDefault(unit, /* G */0, amountUnit),
                          onChange: (function (param) {
                              
                            }),
                          disabled: true
                        }), React.createElement("div", {
                          className: "flex gap-2 items-center grow"
                        }, React.createElement(Checkbox.make, {
                              checked: showEach,
                              disabled: true
                            }), React.createElement("label", undefined, "입수 정보 확인")))));
}

var ReadOnlyAmount = {
  make: Update_ProductOption_Admin$ReadOnlyAmount
};

function Update_ProductOption_Admin$EditStatus(Props) {
  var inputName = Props.inputName;
  var defaultValue = Props.defaultValue;
  var disabled = Props.disabled;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var errors = match.formState.errors;
  var toStatus = function (statusFromSelect) {
    return Belt_Result.mapWithDefault(Select_ProductOption_Operation_Status.Base.status_decode(statusFromSelect), undefined, (function (v) {
                  return v;
                }));
  };
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("label", {
                  className: "block"
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "운영상태"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*")), React.createElement("span", {
                  className: "w-44 h-9"
                }, React.createElement(ReactHookForm$1.Controller, {
                      name: inputName,
                      control: match.control,
                      render: (function (param) {
                          var match = param.field;
                          var onChange = match.onChange;
                          return React.createElement("div", undefined, React.createElement(Select_ProductOption_Operation_Status.Base.make, {
                                          status: toStatus(match.value),
                                          onChange: (function (selected) {
                                              Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Select_ProductOption_Operation_Status.Base.status_encode(selected)));
                                            }),
                                          forwardRef: match.ref,
                                          disabled: disabled
                                        }), React.createElement(ErrorMessage.ErrorMessage, {
                                          name: match.name,
                                          errors: errors,
                                          render: (function (param) {
                                              return React.createElement("span", {
                                                          className: "flex"
                                                        }, React.createElement(IconError.make, {
                                                              width: "20",
                                                              height: "20"
                                                            }), React.createElement("span", {
                                                              className: "text-sm text-notice ml-1"
                                                            }, "운영상태를 입력해주세요."));
                                            })
                                        }));
                        }),
                      defaultValue: Select_ProductOption_Operation_Status.Base.status_encode(status(defaultValue)),
                      rules: ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)
                    })));
}

var EditStatus = {
  make: Update_ProductOption_Admin$EditStatus
};

function Update_ProductOption_Admin$EditIsFreeShipping(Props) {
  var inputName = Props.inputName;
  var defaultValue = Props.defaultValue;
  var disabled = Props.disabled;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var errors = match.formState.errors;
  var toStatus = function (statusFromSelect) {
    return Belt_Result.mapWithDefault(Select_Product_Shipping_Type.status_decode(statusFromSelect), undefined, (function (v) {
                  return v;
                }));
  };
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("label", {
                  className: "block"
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "배송비 타입"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*")), React.createElement("span", {
                  className: "w-44 h-9"
                }, React.createElement(ReactHookForm$1.Controller, {
                      name: inputName,
                      control: match.control,
                      render: (function (param) {
                          var match = param.field;
                          var onChange = match.onChange;
                          return React.createElement("div", undefined, React.createElement(Select_Product_Shipping_Type.make, {
                                          status: toStatus(match.value),
                                          onChange: (function (selected) {
                                              Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Select_Product_Shipping_Type.status_encode(selected)));
                                            }),
                                          forwardRef: match.ref,
                                          disabled: disabled
                                        }), React.createElement(ErrorMessage.ErrorMessage, {
                                          name: match.name,
                                          errors: errors,
                                          render: (function (param) {
                                              return React.createElement("span", {
                                                          className: "flex"
                                                        }, React.createElement(IconError.make, {
                                                              width: "20",
                                                              height: "20"
                                                            }), React.createElement("span", {
                                                              className: "text-sm text-notice ml-1"
                                                            }, "배송비 타입을 입력해주세요."));
                                            })
                                        }));
                        }),
                      defaultValue: Select_Product_Shipping_Type.status_encode(defaultValue),
                      rules: ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)
                    })));
}

var EditIsFreeShipping = {
  make: Update_ProductOption_Admin$EditIsFreeShipping
};

function Update_ProductOption_Admin$EditShippingUnitQuantity(Props) {
  var inputName = Props.inputName;
  var defaultValue = Props.defaultValue;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, {
        required: true,
        min: 1,
        valueAsNumber: true
      });
  var name = match$1.name;
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px]"
            }, React.createElement("label", {
                  className: "block",
                  htmlFor: name
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "배송 합포장 단위"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*")), React.createElement("input", {
                  ref: match$1.ref,
                  defaultValue: String(defaultValue),
                  className: "mt-2 w-full h-9 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none",
                  id: name,
                  name: name,
                  placeholder: "배송 합포장 단위 입력",
                  type: "number",
                  onBlur: match$1.onBlur,
                  onChange: match$1.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (e) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "합포장 단위를 입력해주세요. (1 미만 입력 불가)"));
                    })
                }));
}

var EditShippingUnitQuantity = {
  make: Update_ProductOption_Admin$EditShippingUnitQuantity
};

function Update_ProductOption_Admin$EditCutOffTime(Props) {
  var inputName = Props.inputName;
  var disabled = Props.disabled;
  var defaultValue = Props.defaultValue;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, {
        maxLength: 100
      });
  var name = match$1.name;
  var disabledStyle = disabled ? "bg-gray-100 focus:outline-none" : "";
  return React.createElement("div", {
              className: "flex flex-col gap-2 min-w-1/2 max-w-2xl"
            }, React.createElement("label", {
                  htmlFor: name
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "출고기준시간")), React.createElement("textarea", {
                  ref: match$1.ref,
                  defaultValue: Belt_Option.getWithDefault(defaultValue, ""),
                  className: Cx.cx([
                        "px-3 py-2 border border-gray-300 rounded-lg focus:outline-none h-9",
                        disabledStyle
                      ]),
                  id: name,
                  name: name,
                  placeholder: "출고기준시간 입력(최대 100자)",
                  readOnly: disabled,
                  onBlur: match$1.onBlur,
                  onChange: match$1.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "최대 100자까지 입력가능합니다."));
                    })
                }));
}

var EditCutOffTime = {
  make: Update_ProductOption_Admin$EditCutOffTime
};

function Update_ProductOption_Admin$AdhocStockIsLimitedCheckbox(Props) {
  var inputName = Props.inputName;
  var defaultValue = Props.defaultValue;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, undefined);
  var name = match$1.name;
  return React.createElement("div", {
              className: "flex flex-col gap-2 h-[125px] mr-10"
            }, React.createElement("div", {
                  className: "block"
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "공급 수량 설정")), React.createElement("div", {
                  className: "flex gap-2 items-center"
                }, React.createElement(Checkbox.Uncontrolled.make, {
                      id: name,
                      name: name,
                      defaultChecked: defaultValue,
                      onBlur: match$1.onBlur,
                      onChange: match$1.onChange,
                      inputRef: match$1.ref
                    }), React.createElement("label", {
                      className: "cursor-pointer",
                      htmlFor: name
                    }, "공급 수량 설정하기")));
}

var AdhocStockIsLimitedCheckbox = {
  make: Update_ProductOption_Admin$AdhocStockIsLimitedCheckbox
};

function Update_ProductOption_Admin$AdhocStockNumLimit(Props) {
  var inputName = Props.inputName;
  var adhocStockIsLimitedCheckboxName = Props.adhocStockIsLimitedCheckboxName;
  var defaultValue = Props.defaultValue;
  var defaultDisabled = Props.defaultDisabled;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var setValue = match.setValue;
  var quotableCheckboxValue = ReactHookForm$1.useWatch({
        name: adhocStockIsLimitedCheckboxName,
        defaultValue: defaultDisabled
      });
  var isDisabled = quotableCheckboxValue !== undefined && quotableCheckboxValue ? false : true;
  React.useEffect((function () {
          if (isDisabled) {
            setValue(inputName, String(Belt_Option.getWithDefault(defaultValue, 0)));
          }
          
        }), [isDisabled]);
  var match$1 = match.register(inputName, {
        required: !isDisabled,
        valueAsNumber: true
      });
  var name = match$1.name;
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px]"
            }, React.createElement("label", {
                  className: "block"
                }, React.createElement("span", {
                      className: isDisabled ? "font-bold text-gray-400" : "font-bold"
                    }, "공급 수량"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*")), React.createElement("input", {
                  ref: match$1.ref,
                  defaultValue: String(Belt_Option.getWithDefault(defaultValue, 0)),
                  className: "mt-2 w-full h-9 px-3 py-2 border border-gray-300 rounded-lg",
                  id: name,
                  disabled: isDisabled,
                  name: name,
                  placeholder: "공급 수량 입력",
                  readOnly: isDisabled,
                  type: "number",
                  onBlur: match$1.onBlur,
                  onChange: match$1.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "올바른 공급수량을 입력해주세요."));
                    })
                }));
}

var AdhocStockNumLimit = {
  make: Update_ProductOption_Admin$AdhocStockNumLimit
};

function Update_ProductOption_Admin$AdhocStockNumSold(Props) {
  var defaultValue = Props.defaultValue;
  var adhocStockIsLimitedCheckboxName = Props.adhocStockIsLimitedCheckboxName;
  var defaultDisabled = Props.defaultDisabled;
  var quotableCheckboxValue = ReactHookForm$1.useWatch({
        name: adhocStockIsLimitedCheckboxName,
        defaultValue: defaultDisabled
      });
  var isDisabled = quotableCheckboxValue !== undefined && quotableCheckboxValue ? false : true;
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px]"
            }, React.createElement("label", {
                  className: "whitespace-nowrap block"
                }, React.createElement("span", {
                      className: isDisabled ? "font-bold text-gray-400" : "font-bold"
                    }, "판매된 수량"), React.createElement("span", {
                      className: isDisabled ? "text-gray-400" : "text-gray-600"
                    }, " *자동계산")), React.createElement("div", {
                  className: "mt-2 h-9 w-full px-3 py-2 border border-gray-300 rounded-lg"
                }, defaultValue !== undefined ? String(defaultValue) : "-"));
}

var AdhocStockNumSold = {
  make: Update_ProductOption_Admin$AdhocStockNumSold
};

function Update_ProductOption_Admin$AdhocStockNumRemaining(Props) {
  var adhocStockNumLimitName = Props.adhocStockNumLimitName;
  var defaultAdhocStockNumLimit = Props.defaultAdhocStockNumLimit;
  var adhocStockIsLimitedCheckboxName = Props.adhocStockIsLimitedCheckboxName;
  var defaultValue = Props.defaultValue;
  var defaultDisabled = Props.defaultDisabled;
  var quotableCheckboxValue = ReactHookForm$1.useWatch({
        name: adhocStockIsLimitedCheckboxName,
        defaultValue: defaultDisabled
      });
  var isDisabled = quotableCheckboxValue !== undefined && quotableCheckboxValue ? false : true;
  var adhocStockNumLimitValue = ReactHookForm$1.useWatch({
        name: adhocStockNumLimitName,
        defaultValue: Belt_Option.mapWithDefault(defaultAdhocStockNumLimit, 0.0, (function (prim) {
                return prim;
              }))
      });
  var currenInputNumLimitValue = Belt_Option.getWithDefault(Belt_Option.flatMap(adhocStockNumLimitValue, Belt_Int.fromString), 0);
  var prevNumLimitValue = Belt_Option.getWithDefault(defaultAdhocStockNumLimit, 0);
  var remainingValue = Belt_Option.getWithDefault(defaultValue, 0);
  var calculatedDisplayRemainingValue = (remainingValue + currenInputNumLimitValue | 0) - prevNumLimitValue | 0;
  var isShowWarningMessage = 0 > calculatedDisplayRemainingValue;
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px]"
            }, React.createElement("label", {
                  className: "whitespace-nowrap block"
                }, React.createElement("span", {
                      className: isDisabled ? "font-bold text-gray-400" : "font-bold"
                    }, "판매 가능 수량"), React.createElement("span", {
                      className: isDisabled ? "text-gray-400" : "text-gray-600"
                    }, " *자동계산")), React.createElement("div", {
                  className: "mt-2 h-9 w-full px-3 py-2 border border-gray-300 rounded-lg"
                }, String(calculatedDisplayRemainingValue)), isShowWarningMessage ? React.createElement("span", {
                    className: "flex"
                  }, React.createElement(IconError.make, {
                        width: "20",
                        height: "20"
                      }), React.createElement("span", {
                        className: "text-sm text-notice ml-1"
                      }, "주문 취소가 필요합니다")) : null);
}

var AdhocStockNumRemaining = {
  make: Update_ProductOption_Admin$AdhocStockNumRemaining
};

function Update_ProductOption_Admin$AdhocStockIsNumRemainingVisibleCheckbox(Props) {
  var inputName = Props.inputName;
  var adhocStockIsLimitedCheckboxName = Props.adhocStockIsLimitedCheckboxName;
  var defaultValue = Props.defaultValue;
  var defaultDisabled = Props.defaultDisabled;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var setValue = match.setValue;
  var adhocStockIsLimitedCheckboxValue = ReactHookForm$1.useWatch({
        name: adhocStockIsLimitedCheckboxName,
        defaultValue: defaultDisabled
      });
  var isDisabled = adhocStockIsLimitedCheckboxValue !== undefined && adhocStockIsLimitedCheckboxValue ? false : true;
  React.useEffect((function () {
          if (isDisabled) {
            setValue(inputName, defaultValue);
          }
          
        }), [isDisabled]);
  var match$1 = match.register(inputName, undefined);
  var name = match$1.name;
  return React.createElement("div", {
              className: "flex flex-col gap-2 h-16"
            }, React.createElement("div", {
                  className: "block"
                }, React.createElement("span", {
                      className: isDisabled ? "font-bold text-gray-400" : "font-bold"
                    }, "판매 가능 수량 노출 설정")), React.createElement("div", {
                  className: "flex gap-2 items-center"
                }, React.createElement(Checkbox.Uncontrolled.make, {
                      id: name,
                      name: name,
                      defaultChecked: defaultValue,
                      onBlur: match$1.onBlur,
                      onChange: match$1.onChange,
                      disabled: isDisabled,
                      readOnly: isDisabled,
                      inputRef: match$1.ref
                    }), React.createElement("label", {
                      className: isDisabled ? "text-gray-400" : "cursor-pointer",
                      htmlFor: name
                    }, "판매 가능 수량 노출하기")));
}

var AdhocStockIsNumRemainingVisibleCheckbox = {
  make: Update_ProductOption_Admin$AdhocStockIsNumRemainingVisibleCheckbox
};

function Update_ProductOption_Admin$EditMemo(Props) {
  var inputName = Props.inputName;
  var disabled = Props.disabled;
  var defaultValue = Props.defaultValue;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, {
        maxLength: 100
      });
  var name = match$1.name;
  var disabledStyle = disabled ? "bg-gray-100 focus:outline-none" : "";
  return React.createElement("div", {
              className: "flex flex-col gap-2 min-w-1/2 max-w-2xl"
            }, React.createElement("label", {
                  htmlFor: name
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "메모")), React.createElement("textarea", {
                  ref: match$1.ref,
                  defaultValue: Belt_Option.getWithDefault(defaultValue, ""),
                  className: Cx.cx([
                        "px-3 py-2 border border-gray-300 rounded-lg focus:outline-none h-9",
                        disabledStyle
                      ]),
                  id: name,
                  name: name,
                  placeholder: "메모사항 입력(최대 100자)",
                  readOnly: disabled,
                  onBlur: match$1.onBlur,
                  onChange: match$1.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "최대 100자까지 입력가능합니다."));
                    })
                }));
}

var EditMemo = {
  make: Update_ProductOption_Admin$EditMemo
};

function Update_ProductOption_Admin(Props) {
  var prefix = Props.prefix;
  var index = Props.index;
  var prepend = Props.prepend;
  var productDisplayName = Props.productDisplayName;
  var applyAll = Props.applyAll;
  var setApplyAll = Props.setApplyAll;
  var query = Props.query;
  var productOption = use(query);
  var disabled = productOption.status === "RETIRE";
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var trigger = match.trigger;
  var getValues = match.getValues;
  var inputNames = makeInputNames(prefix);
  var amountUnit$1 = amountUnit(productOption.amountUnit);
  var perAmountUnit$1 = Belt_Option.map(productOption.perAmountUnit, perAmountUnit);
  var perSizeUnit$1 = Belt_Option.map(productOption.perSizeUnit, perSizeUnit);
  var showEach = hasEach(productOption.countPerPackageMax, productOption.countPerPackageMin, productOption.perSizeMax, productOption.perSizeMin, perSizeUnit$1, perAmountUnit$1);
  var onClickCopy = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  setApplyAll(function (param) {
                        return false;
                      });
                  var values = Belt_Option.flatMap(Js_json.decodeArray(getValues([prefix])), Garter_Array.first);
                  var match = Belt_Option.map(values, submit_decode);
                  if (match !== undefined && match.TAG === /* Ok */0) {
                    prepend(makeAddProductOptionDefaultValue(match._0, productOption.grade, productOption.packageType, productOption.countPerPackageMax, productOption.countPerPackageMin, productOption.perSizeMax, productOption.perSizeMin, perSizeUnit$1, perAmountUnit$1, productOption.amount, amountUnit$1), {
                          shouldFocus: true
                        }, undefined);
                  }
                  
                }), param);
  };
  var onClickApplyAll = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  setApplyAll(function (prev) {
                        return !prev;
                      });
                }), param);
  };
  React.useLayoutEffect((function () {
          trigger(inputNames.id);
        }), []);
  var tmp = {
    inputName: inputNames.cutOffTime,
    disabled: disabled,
    defaultValue: productOption.cutOffTime
  };
  if (productOption.cutOffTime !== undefined) {
    tmp.key = productOption.cutOffTime;
  }
  var tmp$1 = {
    inputName: inputNames.memo,
    disabled: disabled,
    defaultValue: productOption.memo
  };
  if (productOption.memo !== undefined) {
    tmp$1.key = productOption.memo;
  }
  var match$1 = productOption.status !== "RETIRE";
  return React.createElement(ReactCollapsible.Root, {
              children: React.createElement("div", {
                    className: "bg-bg-pressed-L1 border border-div-border-L2 px-3 py-7 rounded text-sm"
                  }, React.createElement("div", {
                        className: "flex flex-col gap-6 "
                      }, React.createElement("div", {
                            className: "flex flex-col gap-2"
                          }, React.createElement("div", {
                                className: "flex justify-between"
                              }, React.createElement("div", {
                                    className: "flex items-center"
                                  }, React.createElement("span", {
                                        className: "block font-bold"
                                      }, "단품 기본정보"), React.createElement("div", {
                                        className: "flex gap-2 ml-2"
                                      }, React.createElement("button", {
                                            className: "px-2 py-1 bg-primary text-white focus:outline-none rounded",
                                            onClick: onClickCopy
                                          }, "복사하기"))), React.createElement(ReactCollapsible.Trigger, {
                                    children: React.createElement("div", {
                                          className: "flex items-center cursor-pointer relative gap-1"
                                        }, React.createElement("span", {
                                              className: "underline"
                                            }, "단품정보 접기"), React.createElement(IconArrow.make, {
                                              height: "16",
                                              width: "16",
                                              fill: "#000000",
                                              className: "transform -rotate-90"
                                            })),
                                    className: "collabsible-trigger"
                                  })), React.createElement("div", {
                                className: "flex gap-2"
                              }, React.createElement(Update_ProductOption_Admin$ReadOnlyOptionId, {
                                    inputName: inputNames.id,
                                    value: productOption.id
                                  }), React.createElement(Update_ProductOption_Admin$EditName, {
                                    inputName: inputNames.name,
                                    defaultValue: productOption.optionName,
                                    disabled: disabled,
                                    key: productOption.optionName
                                  }), React.createElement(Update_ProductOption_Admin$ReadOnlyAutoGenName, {
                                    inputName: inputNames.autoGenName,
                                    query: productOption.fragmentRefs
                                  }), React.createElement(Update_ProductOption_Admin$ReadOnlyStockSku, {
                                    value: productOption.stockSku
                                  })))), React.createElement(ReactCollapsible.Content, {
                        children: React.createElement("div", {
                              className: "divide-y"
                            }, React.createElement("div", {
                                  className: "flex gap-4 py-6"
                                }, React.createElement(Update_ProductOption_Admin$ReadOnlyGrade, {
                                      value: productOption.grade
                                    }), React.createElement(Update_ProductOption_Admin$ReadOnlyPackage, {
                                      value: productOption.packageType
                                    })), React.createElement(Update_ProductOption_Admin$ReadOnlyAmount, {
                                  value: productOption.amount,
                                  unit: productOption.amountUnit,
                                  showEach: showEach
                                }), showEach ? React.createElement(Update_ProductOption_Admin$Each, {
                                    minNum: productOption.countPerPackageMin,
                                    maxNum: productOption.countPerPackageMax,
                                    amount: productOption.amount,
                                    amountUnit: amountUnit$1,
                                    perAmountMin: productOption.perAmountMin,
                                    perAmountMax: productOption.perAmountMax,
                                    perAmountUnit: perAmountUnit$1,
                                    minSize: productOption.perSizeMin,
                                    maxSize: productOption.perSizeMax,
                                    sizeUnit: perSizeUnit$1
                                  }) : null, React.createElement("div", {
                                  className: "flex flex-col gap-6 py-6 w-full"
                                }, React.createElement("span", {
                                      className: "text-text-L2"
                                    }, "*단품 가격정보는 단품 가격관리에서 수정이 가능합니다."), React.createElement("div", {
                                      className: "flex gap-4 w-2/3 max-w-2xl"
                                    }, React.createElement(Update_ProductOption_Admin$EditStatus, {
                                          inputName: inputNames.operationStatus,
                                          defaultValue: productOption.status,
                                          disabled: disabled,
                                          key: stringifyStatus(productOption.status)
                                        }), React.createElement(Update_ProductOption_Admin$EditIsFreeShipping, {
                                          inputName: inputNames.isFreeShipping,
                                          defaultValue: productOption.isFreeShipping ? /* FREE */1 : /* NOTFREE */0,
                                          disabled: disabled
                                        }), React.createElement(Update_ProductOption_Admin$EditShippingUnitQuantity, {
                                          inputName: inputNames.shippingUnitQuantity,
                                          defaultValue: productOption.shippingUnitQuantity
                                        }))), React.createElement("div", {
                                  className: "flex flex-col gap-6 py-6 w-full"
                                }, React.createElement("div", {
                                      className: "flex gap-4 items-center justify-start"
                                    }, React.createElement(Update_ProductOption_Admin$AdhocStockIsLimitedCheckbox, {
                                          inputName: inputNames.adhocStockIsLimited,
                                          defaultValue: productOption.adhocStockIsLimited
                                        }), React.createElement(Update_ProductOption_Admin$AdhocStockNumLimit, {
                                          inputName: inputNames.adhocStockNumLimit,
                                          adhocStockIsLimitedCheckboxName: inputNames.adhocStockIsLimited,
                                          defaultValue: productOption.adhocStockNumLimit,
                                          defaultDisabled: productOption.adhocStockIsLimited
                                        }), React.createElement(Update_ProductOption_Admin$AdhocStockNumSold, {
                                          defaultValue: productOption.adhocStockNumSold,
                                          adhocStockIsLimitedCheckboxName: inputNames.adhocStockIsLimited,
                                          defaultDisabled: productOption.adhocStockIsLimited
                                        }), React.createElement(Update_ProductOption_Admin$AdhocStockNumRemaining, {
                                          adhocStockNumLimitName: inputNames.adhocStockNumLimit,
                                          defaultAdhocStockNumLimit: productOption.adhocStockNumLimit,
                                          adhocStockIsLimitedCheckboxName: inputNames.adhocStockIsLimited,
                                          defaultValue: productOption.adhocStockNumRemaining,
                                          defaultDisabled: productOption.adhocStockIsLimited
                                        }), React.createElement(Update_ProductOption_Admin$AdhocStockIsNumRemainingVisibleCheckbox, {
                                          inputName: inputNames.adhocStockIsNumRemainingVisible,
                                          adhocStockIsLimitedCheckboxName: inputNames.adhocStockIsLimited,
                                          defaultValue: productOption.adhocStockIsNumRemainingVisible,
                                          defaultDisabled: productOption.adhocStockIsLimited
                                        }))), React.createElement("div", {
                                  className: "flex flex-col gap-6 py-6 w-full"
                                }, React.createElement(Update_ProductOption_Admin$EditCutOffTime, tmp), React.createElement(Update_ProductOption_Admin$EditMemo, tmp$1), index !== 0 || !match$1 ? null : React.createElement("div", {
                                        className: "flex gap-2 items-center"
                                      }, React.createElement("button", {
                                            onClick: onClickApplyAll
                                          }, React.createElement("img", {
                                                src: applyAll ? checkboxCheckedIcon : checkboxUncheckedIcon
                                              })), React.createElement("span", undefined, "[" + productDisplayName + "] 전체 단품에 출고기준시간과 메모 동일하게 적용하기")))),
                        className: "collabsible-content"
                      })),
              defaultOpen: true
            });
}

var Select_Unit;

var make = Update_ProductOption_Admin;

export {
  checkboxCheckedIcon ,
  checkboxUncheckedIcon ,
  Select_Unit ,
  Fragment ,
  DecodeProductOption ,
  Each ,
  Form ,
  ReadOnlyOptionId ,
  EditName ,
  ReadOnlyAutoGenName ,
  ReadOnlyStockSku ,
  ReadOnlyGrade ,
  ReadOnlyPackage ,
  ReadOnlyAmount ,
  EditStatus ,
  EditIsFreeShipping ,
  EditShippingUnitQuantity ,
  EditCutOffTime ,
  AdhocStockIsLimitedCheckbox ,
  AdhocStockNumLimit ,
  AdhocStockNumSold ,
  AdhocStockNumRemaining ,
  AdhocStockIsNumRemainingVisibleCheckbox ,
  EditMemo ,
  make ,
}
/* checkboxCheckedIcon Not a pure module */
