// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as IconArrowSelect from "./svgs/IconArrowSelect.mjs";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as SelectBulkSaleProductGradeQuery_graphql from "../__generated__/SelectBulkSaleProductGradeQuery_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(SelectBulkSaleProductGradeQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(SelectBulkSaleProductGradeQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(SelectBulkSaleProductGradeQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(SelectBulkSaleProductGradeQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, SelectBulkSaleProductGradeQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, SelectBulkSaleProductGradeQuery_graphql.node, SelectBulkSaleProductGradeQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: SelectBulkSaleProductGradeQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, SelectBulkSaleProductGradeQuery_graphql.node, SelectBulkSaleProductGradeQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(SelectBulkSaleProductGradeQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(SelectBulkSaleProductGradeQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(SelectBulkSaleProductGradeQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(SelectBulkSaleProductGradeQuery_graphql.node, SelectBulkSaleProductGradeQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_productPackageMassUnit_decode = SelectBulkSaleProductGradeQuery_graphql.Utils.productPackageMassUnit_decode;

var Query_productPackageMassUnit_fromString = SelectBulkSaleProductGradeQuery_graphql.Utils.productPackageMassUnit_fromString;

var Query_makeVariables = SelectBulkSaleProductGradeQuery_graphql.Utils.makeVariables;

var Query = {
  productPackageMassUnit_decode: Query_productPackageMassUnit_decode,
  productPackageMassUnit_fromString: Query_productPackageMassUnit_fromString,
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

var normalStyle = "flex items-center border border-border-default-L1 rounded-lg h-9 px-3 text-enabled-L1";

var errorStyle = "flex items-center border border-border-default-L1 rounded-lg h-9 px-3 text-enabled-L1 outline-none ring-2 ring-opacity-100 ring-notice remove-spin-button";

var disabledStyle = "flex items-center border border-border-default-L1 rounded-lg h-9 px-3 text-enabled-L1 bg-disabled-L3";

function style(error, disabled) {
  if (disabled !== undefined) {
    if (disabled) {
      return disabledStyle;
    } else if (error !== undefined) {
      return errorStyle;
    } else {
      return normalStyle;
    }
  } else if (error !== undefined) {
    return errorStyle;
  } else {
    return normalStyle;
  }
}

function Select_BulkSale_ProductGrade(Props) {
  var productCategoryId = Props.productCategoryId;
  var preferredGrade = Props.preferredGrade;
  var onChange = Props.onChange;
  var error = Props.error;
  var disabled = Props.disabled;
  var queryData = use({
        ids: productCategoryId ? [productCategoryId.value] : undefined,
        count: productCategoryId ? 1000 : 0,
        cursor: undefined
      }, undefined, undefined, undefined, undefined);
  return React.createElement("article", {
              className: "mt-5"
            }, React.createElement("h3", undefined, "등급"), React.createElement("label", {
                  className: "block relative mt-2"
                }, React.createElement("span", {
                      className: style(error, disabled)
                    }, Belt_Option.getWithDefault(preferredGrade, "등급 선택")), React.createElement("span", {
                      className: "absolute top-1.5 right-2"
                    }, React.createElement(IconArrowSelect.make, {
                          height: "24",
                          width: "24",
                          fill: "#121212"
                        })), React.createElement("select", {
                      className: "block w-full h-full absolute top-0 opacity-0",
                      value: Belt_Option.getWithDefault(preferredGrade, ""),
                      onChange: onChange
                    }, React.createElement("option", {
                          key: "0",
                          value: ""
                        }, "등급 선택"), Belt_Option.mapWithDefault(Belt_Array.get(queryData.productCategories.edges, 0), null, (function (edge) {
                            return Belt_Array.map(edge.node.grades, (function (grade) {
                                          return React.createElement("option", {
                                                      key: grade,
                                                      value: grade
                                                    }, grade);
                                        }));
                          })))), React.createElement("div", undefined, Belt_Option.mapWithDefault(error, null, (function (msg) {
                        return React.createElement("span", {
                                    className: "flex mt-2"
                                  }, React.createElement(IconError.make, {
                                        width: "20",
                                        height: "20"
                                      }), React.createElement("span", {
                                        className: "text-sm text-notice ml-1"
                                      }, msg));
                      }))));
}

var make = Select_BulkSale_ProductGrade;

export {
  Query ,
  normalStyle ,
  errorStyle ,
  disabledStyle ,
  style ,
  make ,
  
}
/* react Not a pure module */
