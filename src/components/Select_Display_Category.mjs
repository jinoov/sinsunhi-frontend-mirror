// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_module from "rescript/lib/es6/caml_module.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactSelect from "./common/ReactSelect.mjs";
import * as ReactRelay from "react-relay";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import ReactSelect$1 from "react-select";
import * as ReactHookForm from "../bindings/ReactHookForm/ReactHookForm.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as ReactHookForm$1 from "react-hook-form";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as SelectDisplayCategoryQuery_graphql from "../__generated__/SelectDisplayCategoryQuery_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(SelectDisplayCategoryQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(SelectDisplayCategoryQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(SelectDisplayCategoryQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(SelectDisplayCategoryQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, SelectDisplayCategoryQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, SelectDisplayCategoryQuery_graphql.node, SelectDisplayCategoryQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: SelectDisplayCategoryQuery_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, SelectDisplayCategoryQuery_graphql.node, SelectDisplayCategoryQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(SelectDisplayCategoryQuery_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(SelectDisplayCategoryQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(SelectDisplayCategoryQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(SelectDisplayCategoryQuery_graphql.node, SelectDisplayCategoryQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_displayCategoryType_decode = SelectDisplayCategoryQuery_graphql.Utils.displayCategoryType_decode;

var Query_displayCategoryType_fromString = SelectDisplayCategoryQuery_graphql.Utils.displayCategoryType_fromString;

var Query = {
  displayCategoryType_decode: Query_displayCategoryType_decode,
  displayCategoryType_fromString: Query_displayCategoryType_fromString,
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

var Category = Caml_module.init_mod([
      "Select_Display_Category.res",
      42,
      32
    ], {
      TAG: /* Module */0,
      _0: [[
          /* Function */0,
          "make"
        ]]
    });

var $$Selection = Caml_module.init_mod([
      "Select_Display_Category.res",
      81,
      27
    ], {
      TAG: /* Module */0,
      _0: [[
          /* Function */0,
          "make"
        ]]
    });

function Select_Display_Category$Category(Props) {
  var parentId = Props.parentId;
  var control = Props.control;
  var name = Props.name;
  var categoryNamePrefixes = Props.categoryNamePrefixes;
  var disabled = Props.disabled;
  var required = Props.required;
  var isClearable = Props.isClearable;
  var prefix = Garter_Array.first(categoryNamePrefixes);
  if (prefix !== undefined) {
    if (parentId !== undefined) {
      return React.createElement(React.Suspense, {
                  children: React.createElement($$Selection.make, {
                        parentId: parentId,
                        control: control,
                        name: name,
                        prefix: prefix,
                        categoryNamePrefixes: categoryNamePrefixes,
                        disabled: disabled,
                        required: required,
                        isClearable: isClearable
                      }),
                  fallback: React.createElement("div", undefined)
                });
    } else if (prefix === "c1") {
      return React.createElement(React.Suspense, {
                  children: React.createElement($$Selection.make, {
                        parentId: undefined,
                        control: control,
                        name: name,
                        prefix: prefix,
                        categoryNamePrefixes: categoryNamePrefixes,
                        disabled: disabled,
                        required: required,
                        isClearable: isClearable
                      }),
                  fallback: React.createElement("div", undefined)
                });
    } else {
      return null;
    }
  } else {
    return null;
  }
}

Caml_module.update_mod({
      TAG: /* Module */0,
      _0: [[
          /* Function */0,
          "make"
        ]]
    }, Category, {
      make: Select_Display_Category$Category
    });

function Select_Display_Category$Selection(Props) {
  var parentId = Props.parentId;
  var control = Props.control;
  var name = Props.name;
  var prefix = Props.prefix;
  var categoryNamePrefixes = Props.categoryNamePrefixes;
  var disabled = Props.disabled;
  var required = Props.required;
  var isClearable = Props.isClearable;
  var categoryType = Belt_Option.getWithDefault(ReactHookForm$1.useWatch({
            name: "" + name + ".categoryType.value",
            control: control
          }), "");
  var tmp;
  switch (categoryType) {
    case "normal" :
        tmp = ["NORMAL"];
        break;
    case "showcase" :
        tmp = ["SHOWCASE"];
        break;
    default:
      tmp = [
        "NORMAL",
        "SHOWCASE"
      ];
  }
  var match = use({
        parentId: parentId,
        types: tmp
      }, undefined, undefined, undefined, undefined);
  var displayCategories = match.displayCategories;
  var selectedId = ReactHookForm$1.useWatch({
        name: "" + name + "." + prefix + ".value",
        control: control
      });
  var match$1 = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var unregister = match$1.unregister;
  var setValue = match$1.setValue;
  React.useEffect((function () {
          var isStillSameCategory = Belt_Option.flatMap(selectedId, (function (selectedIdNull) {
                  return Belt_Option.map((selectedIdNull == null) ? undefined : Caml_option.some(selectedIdNull), (function (selectedId$p) {
                                return Belt_Array.some(displayCategories, (function (d) {
                                              return d.id === selectedId$p;
                                            }));
                              }));
                }));
          var exit = 0;
          if (!(isStillSameCategory !== undefined && isStillSameCategory)) {
            exit = 1;
          }
          if (exit === 1) {
            setValue("" + name + "." + prefix + "", ReactSelect.encoderRule(/* NotSelected */0));
          }
          return (function (param) {
                    unregister("" + name + "." + prefix + "");
                  });
        }), [
        parentId,
        categoryType
      ]);
  if (displayCategories.length !== 0) {
    return React.createElement(React.Fragment, undefined, React.createElement("div", {
                    className: "relative w-48"
                  }, React.createElement("div", {
                        className: "absolute w-full"
                      }, React.createElement(ReactHookForm$1.Controller, {
                            name: "" + name + "." + prefix + "",
                            control: control,
                            render: (function (param) {
                                var match = param.field;
                                var onChange = match.onChange;
                                return React.createElement(ReactSelect$1, {
                                            value: Belt_Result.getWithDefault(ReactSelect.decoderRule(match.value), /* NotSelected */0),
                                            options: Belt_Array.map(displayCategories, (function (o) {
                                                    return /* Selected */{
                                                            value: o.id,
                                                            label: o.name
                                                          };
                                                  })),
                                            onChange: (function (param) {
                                                return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, ReactSelect.encoderRule(param)));
                                              }),
                                            placeholder: "부류선택",
                                            noOptionsMessage: (function (param) {
                                                return "검색 결과가 없습니다.";
                                              }),
                                            isClearable: isClearable,
                                            isDisabled: disabled,
                                            styles: {
                                              control: (function (provide, param) {
                                                  return Object.assign(Object.assign({}, provide), {
                                                              minHeight: "unset",
                                                              height: "2.25rem"
                                                            });
                                                })
                                            },
                                            ref: match.ref
                                          });
                              }),
                            defaultValue: ReactSelect.encoderRule(/* NotSelected */0),
                            rules: ReactHookForm.Rules.make(required, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)
                          }))), React.createElement(Category.make, {
                    parentId: Belt_Option.flatMap(selectedId, (function (prim) {
                            if (prim == null) {
                              return ;
                            } else {
                              return Caml_option.some(prim);
                            }
                          })),
                    control: control,
                    name: name,
                    categoryNamePrefixes: Garter_Array.sliceToEnd(categoryNamePrefixes, 1),
                    disabled: disabled,
                    required: required,
                    isClearable: isClearable
                  }));
  } else {
    return null;
  }
}

Caml_module.update_mod({
      TAG: /* Module */0,
      _0: [[
          /* Function */0,
          "make"
        ]]
    }, $$Selection, {
      make: Select_Display_Category$Selection
    });

function Select_Display_Category(Props) {
  var control = Props.control;
  var name = Props.name;
  var disabled = Props.disabled;
  var required = Props.required;
  var isClearableOpt = Props.isClearable;
  var isClearable = isClearableOpt !== undefined ? isClearableOpt : false;
  var categoryNamePrefixes = [
    "c1",
    "c2",
    "c3",
    "c4",
    "c5"
  ];
  return React.createElement(Category.make, {
              parentId: undefined,
              control: control,
              name: name,
              categoryNamePrefixes: categoryNamePrefixes,
              disabled: disabled,
              required: required,
              isClearable: isClearable
            });
}

var make = Select_Display_Category;

export {
  Query ,
  Category ,
  $$Selection ,
  make ,
}
/* Category Not a pure module */
