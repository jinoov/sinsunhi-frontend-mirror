// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Locale from "../utils/Locale.mjs";
import * as Checkbox from "./common/Checkbox.mjs";
import * as Skeleton from "./Skeleton.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactRelay from "react-relay";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import Format from "date-fns/format";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as BulkSale_Product_Update_Button from "./BulkSale_Product_Update_Button.mjs";
import * as Select_BulkSale_Campaign_Status from "./Select_BulkSale_Campaign_Status.mjs";
import * as BulkSaleProductAdminRefetchQuery_graphql from "../__generated__/BulkSaleProductAdminRefetchQuery_graphql.mjs";
import * as BulkSaleProductAdminFragment_bulkSaleCampaign_graphql from "../__generated__/BulkSaleProductAdminFragment_bulkSaleCampaign_graphql.mjs";

function internal_makeRefetchableFnOpts(fetchPolicy, onComplete, param) {
  var tmp = {};
  var tmp$1 = RescriptRelay.mapFetchPolicy(fetchPolicy);
  if (tmp$1 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = RescriptRelay_Internal.internal_nullableToOptionalExnHandler(onComplete);
  if (tmp$2 !== undefined) {
    tmp.onComplete = Caml_option.valFromOption(tmp$2);
  }
  return tmp;
}

function useRefetchable(fRef) {
  var match = ReactRelay.useRefetchableFragment(BulkSaleProductAdminFragment_bulkSaleCampaign_graphql.node, fRef);
  var refetchFn = match[1];
  var data = RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProductAdminFragment_bulkSaleCampaign_graphql.Internal.convertFragment, match[0]);
  return [
          data,
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return Curry._2(refetchFn, RescriptRelay_Internal.internal_removeUndefinedAndConvertNullsRaw(BulkSaleProductAdminRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [refetchFn])
        ];
}

function use(fRef) {
  var data = ReactRelay.useFragment(BulkSaleProductAdminFragment_bulkSaleCampaign_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProductAdminFragment_bulkSaleCampaign_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(BulkSaleProductAdminFragment_bulkSaleCampaign_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return BulkSaleProductAdminFragment_bulkSaleCampaign_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var makeRefetchVariables = BulkSaleProductAdminRefetchQuery_graphql.Types.makeRefetchVariables;

var Fragment_productPackageMassUnit_decode = BulkSaleProductAdminFragment_bulkSaleCampaign_graphql.Utils.productPackageMassUnit_decode;

var Fragment_productPackageMassUnit_fromString = BulkSaleProductAdminFragment_bulkSaleCampaign_graphql.Utils.productPackageMassUnit_fromString;

var Fragment = {
  productPackageMassUnit_decode: Fragment_productPackageMassUnit_decode,
  productPackageMassUnit_fromString: Fragment_productPackageMassUnit_fromString,
  Types: undefined,
  internal_makeRefetchableFnOpts: internal_makeRefetchableFnOpts,
  useRefetchable: useRefetchable,
  Operation: undefined,
  use: use,
  useOpt: useOpt,
  makeRefetchVariables: makeRefetchVariables
};

function formatDate(d) {
  return Format(new Date(d), "yyyy/MM/dd HH:mm");
}

function BulkSale_Product_Admin$Item$Table(Props) {
  var node = Props.node;
  var refetchSummary = Props.refetchSummary;
  var product = use(node.fragmentRefs);
  return React.createElement(React.Fragment, undefined, React.createElement("li", {
                  className: "grid grid-cols-7-admin-bulk-sale-product"
                }, React.createElement("div", {
                      className: "h-full flex flex-col justify-center px-4 py-2"
                    }, Format(new Date(product.createdAt), "yyyy/MM/dd HH:mm")), React.createElement("div", {
                      className: "h-full flex flex-col justify-center px-4 py-2"
                    }, React.createElement(Select_BulkSale_Campaign_Status.make, {
                          product: product,
                          refetchSummary: refetchSummary
                        })), React.createElement("div", {
                      className: "h-full flex flex-col justify-center px-4 py-2"
                    }, "" + product.productCategory.crop.name + " > " + product.productCategory.name + ""), React.createElement("div", {
                      className: "h-full flex flex-col justify-center px-4 py-2"
                    }, "" + Locale.Float.show(undefined, product.estimatedPurchasePriceMin, 0) + "원~" + Locale.Float.show(undefined, product.estimatedPurchasePriceMax, 0) + "원"), React.createElement("div", {
                      className: "h-full flex flex-col justify-center px-4 py-2"
                    }, "" + product.preferredGrade + " " + product.preferredQuantity.display + ""), React.createElement("div", {
                      className: "h-full flex flex-col justify-center px-4 py-2"
                    }, "" + String(product.estimatedSellerEarningRate) + "%"), React.createElement("div", {
                      className: "h-full flex justify-center items-center px-4 py-1"
                    }, React.createElement(BulkSale_Product_Update_Button.make, {
                          product: product,
                          key: product.id
                        }))));
}

function BulkSale_Product_Admin$Item$Table$Loading(Props) {
  return React.createElement("li", {
              className: "grid grid-cols-7-admin-bulk-sale-product"
            }, React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Checkbox.make, {})), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {
                      className: "w-20"
                    }), React.createElement(Skeleton.Box.make, {}), React.createElement(Skeleton.Box.make, {
                      className: "w-12"
                    })), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {}), React.createElement(Skeleton.Box.make, {})), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {}), React.createElement(Skeleton.Box.make, {
                      className: "w-2/3"
                    }), React.createElement(Skeleton.Box.make, {
                      className: "w-8"
                    })), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {})), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {})), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {}), React.createElement(Skeleton.Box.make, {})));
}

var Loading = {
  make: BulkSale_Product_Admin$Item$Table$Loading
};

var Table = {
  make: BulkSale_Product_Admin$Item$Table,
  Loading: Loading
};

var Item = {
  Table: Table
};

function BulkSale_Product_Admin(Props) {
  var node = Props.node;
  var refetchSummary = Props.refetchSummary;
  return React.createElement(BulkSale_Product_Admin$Item$Table, {
              node: node,
              refetchSummary: refetchSummary
            });
}

var make = BulkSale_Product_Admin;

export {
  Fragment ,
  formatDate ,
  Item ,
  make ,
}
/* react Not a pure module */
