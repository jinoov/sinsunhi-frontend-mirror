// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as React from "react";
import * as Status from "./common/Status.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as DatePicker from "./DatePicker.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as PeriodSelector from "./common/PeriodSelector.mjs";
import Parse from "date-fns/parse";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import Format from "date-fns/format";
import SubDays from "date-fns/subDays";
import * as Query_Order_Form_Admin from "./Query_Order_Form_Admin.mjs";

function Summary_Order_Admin$StatusFilter(Props) {
  return React.createElement("ol", {
              className: "grid grid-cols-2 pt-3 sm:grid-cols-4 lg:grid-cols-6 lg:justify-between lg:w-full lg:py-4"
            }, React.createElement(Status.Total.make, {}), React.createElement(Status.Item.make, {
                  kind: /* CREATE */0
                }), React.createElement(Status.Item.make, {
                  kind: /* PACKING */1
                }), React.createElement(Status.Item.make, {
                  kind: /* DEPARTURE */2
                }), React.createElement("div", {
                  className: "hidden sm:grid sm:grid-row-border-4 lg:hidden"
                }), React.createElement(Status.Item.make, {
                  kind: /* DELIVERING */3
                }), React.createElement(Status.Item.make, {
                  kind: /* COMPLETE */4
                }), React.createElement("div", {
                  className: "hidden lg:grid lg:grid-row-border-6"
                }), React.createElement(Status.Item.make, {
                  kind: /* CANCEL */5
                }), React.createElement(Status.Item.make, {
                  kind: /* REFUND */7
                }), React.createElement("div", {
                  className: "hidden sm:grid sm:grid-row-border-4 lg:hidden"
                }), React.createElement(Status.Item.make, {
                  kind: /* ERROR */6
                }), React.createElement(Status.Item.make, {
                  kind: /* NEGOTIATING */8
                }));
}

var StatusFilter = {
  make: Summary_Order_Admin$StatusFilter
};

function Summary_Order_Admin(Props) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        return {
                from: SubDays(new Date(), 7),
                to_: new Date()
              };
      });
  var setQuery = match[1];
  var query = match[0];
  var onSubmit = function (param) {
    var state = param.state;
    var buyerName = Query_Order_Form_Admin.FormFields.get(state.values, /* BuyerName */0);
    var orderProductNo = Query_Order_Form_Admin.FormFields.get(state.values, /* OrderProductNo */1);
    var productId = Query_Order_Form_Admin.FormFields.get(state.values, /* ProductId */2);
    var ordererName = Query_Order_Form_Admin.FormFields.get(state.values, /* OrdererName */3);
    var receiverName = Query_Order_Form_Admin.FormFields.get(state.values, /* ReceiverName */4);
    var sku = Query_Order_Form_Admin.FormFields.get(state.values, /* Sku */5);
    router.query["buyer-name"] = buyerName;
    router.query["orderer-name"] = ordererName;
    router.query["receiver-name"] = receiverName;
    router.query["order-product-no"] = orderProductNo;
    router.query["product-id"] = productId;
    router.query["sku"] = sku;
    router.query["from"] = Format(query.from, "yyyyMMdd");
    router.query["to"] = Format(query.to_, "yyyyMMdd");
    router.push(router.pathname + "?" + new URLSearchParams(router.query).toString());
    
  };
  var form = Curry._7(Query_Order_Form_Admin.Form.use, Query_Order_Form_Admin.initialState, /* Schema */{
        _0: Belt_Array.concatMany([
              Curry._4(Query_Order_Form_Admin.Form.ReSchema.Validation.regExp, "최소 2글자를 입력해주세요.", "^(?:.{2,}|)$", undefined, /* OrdererName */3),
              Curry._4(Query_Order_Form_Admin.Form.ReSchema.Validation.regExp, "최소 2글자를 입력해주세요.", "^(?:.{2,}|)$", undefined, /* ReceiverName */4)
            ])
      }, onSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleOnSubmit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return Curry._1(form.submit, undefined);
                }), param);
  };
  React.useEffect((function () {
          Curry._1(form.resetForm, undefined);
          Garter_Array.forEach(Js_dict.entries(router.query), (function (entry) {
                  var v = entry[1];
                  var k = entry[0];
                  if (k === "buyer-name") {
                    return Curry._4(form.setFieldValue, /* BuyerName */0, v, true, undefined);
                  } else if (k === "order-product-no") {
                    return Curry._4(form.setFieldValue, /* OrderProductNo */1, v, true, undefined);
                  } else if (k === "product-id") {
                    return Curry._4(form.setFieldValue, /* ProductId */2, v, true, undefined);
                  } else if (k === "orderer-name") {
                    return Curry._4(form.setFieldValue, /* OrdererName */3, v, true, undefined);
                  } else if (k === "receiver-name") {
                    return Curry._4(form.setFieldValue, /* ReceiverName */4, v, true, undefined);
                  } else if (k === "sku") {
                    return Curry._4(form.setFieldValue, /* Sku */5, v, true, undefined);
                  } else if (k === "from") {
                    return setQuery(function (prev) {
                                return {
                                        from: Parse(v, "yyyyMMdd", new Date()),
                                        to_: prev.to_
                                      };
                              });
                  } else if (k === "to") {
                    return setQuery(function (prev) {
                                return {
                                        from: prev.from,
                                        to_: Parse(v, "yyyyMMdd", new Date())
                                      };
                              });
                  } else {
                    return ;
                  }
                }));
          
        }), [router.query]);
  var handleOnChangeDate = function (t, e) {
    var newDate = e.detail.valueAsDate;
    if (t) {
      if (newDate === undefined) {
        return ;
      }
      var newDate$p = Caml_option.valFromOption(newDate);
      return setQuery(function (prev) {
                  return {
                          from: prev.from,
                          to_: newDate$p
                        };
                });
    }
    if (newDate === undefined) {
      return ;
    }
    var newDate$p$1 = Caml_option.valFromOption(newDate);
    return setQuery(function (prev) {
                return {
                        from: newDate$p$1,
                        to_: prev.to_
                      };
              });
  };
  var handleOnChangePeriod = function (d) {
    return setQuery(function (prev) {
                return {
                        from: d,
                        to_: prev.to_
                      };
              });
  };
  var handleOnReset = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  Curry._4(form.setFieldValue, /* BuyerName */0, "", true, undefined);
                  Curry._4(form.setFieldValue, /* OrderProductNo */1, "", true, undefined);
                  Curry._4(form.setFieldValue, /* ProductId */2, "", true, undefined);
                  Curry._4(form.setFieldValue, /* OrdererName */3, "", true, undefined);
                  Curry._4(form.setFieldValue, /* ReceiverName */4, "", true, undefined);
                  Curry._4(form.setFieldValue, /* Sku */5, "", true, undefined);
                  return setQuery(function (param) {
                              return {
                                      from: SubDays(new Date(), 7),
                                      to_: new Date()
                                    };
                            });
                }), param);
  };
  var partial_arg = Curry._1(form.handleChange, /* BuyerName */0);
  var partial_arg$1 = Curry._1(form.handleChange, /* OrdererName */3);
  var partial_arg$2 = Curry._1(form.handleChange, /* ReceiverName */4);
  var partial_arg$3 = Curry._1(form.handleChange, /* OrderProductNo */1);
  var partial_arg$4 = Curry._1(form.handleChange, /* ProductId */2);
  var partial_arg$5 = Curry._1(form.handleChange, /* Sku */5);
  return React.createElement("div", {
              className: "py-3 px-7 pb-7 mt-4 mx-4 shadow-gl bg-white rounded"
            }, React.createElement(Summary_Order_Admin$StatusFilter, {}), React.createElement("form", {
                  onSubmit: handleOnSubmit
                }, React.createElement("div", {
                      className: "py-3 flex flex-col text-sm bg-gray-gl rounded-xl"
                    }, React.createElement("div", {
                          className: "flex"
                        }, React.createElement("div", {
                              className: "w-32 font-bold mt-2 pl-7 whitespace-nowrap"
                            }, "검색"), React.createElement("div", {
                              className: "flex-1"
                            }, React.createElement("div", {
                                  className: "flex"
                                }, React.createElement("div", {
                                      className: "flex-1 flex flex-col sm:flex-initial sm:w-64 sm:flex-row sm:items-center mr-16"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "buyer-name"
                                        }, "바이어명"), React.createElement(Input.make, {
                                          type_: "text",
                                          name: "buyer-name",
                                          placeholder: "바이어명 입력",
                                          value: Query_Order_Form_Admin.FormFields.get(form.values, /* BuyerName */0),
                                          onChange: (function (param) {
                                              return ReForm__Helpers.handleChange(partial_arg, param);
                                            }),
                                          error: Curry._1(form.getFieldError, /* Field */{
                                                _0: /* BuyerName */0
                                              }),
                                          tabIndex: 1
                                        })), React.createElement("div", {
                                      className: "flex-1 flex flex-col sm:flex-initial sm:w-64 sm:flex-row sm:items-center mr-16"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "orderer-name"
                                        }, "주문자명"), React.createElement(Input.make, {
                                          type_: "text",
                                          name: "orderer-name",
                                          placeholder: "주문자명 입력",
                                          value: Query_Order_Form_Admin.FormFields.get(form.values, /* OrdererName */3),
                                          onChange: (function (param) {
                                              return ReForm__Helpers.handleChange(partial_arg$1, param);
                                            }),
                                          error: Curry._1(form.getFieldError, /* Field */{
                                                _0: /* OrdererName */3
                                              }),
                                          tabIndex: 2
                                        })), React.createElement("div", {
                                      className: "flex-1 flex flex-col sm:flex-initial sm:w-64 sm:flex-row sm:items-center"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "receiver-name"
                                        }, "수취인명"), React.createElement(Input.make, {
                                          type_: "text",
                                          name: "receiver-name",
                                          placeholder: "수취인명 입력",
                                          value: Query_Order_Form_Admin.FormFields.get(form.values, /* ReceiverName */4),
                                          onChange: (function (param) {
                                              return ReForm__Helpers.handleChange(partial_arg$2, param);
                                            }),
                                          error: Curry._1(form.getFieldError, /* Field */{
                                                _0: /* ReceiverName */4
                                              }),
                                          tabIndex: 3
                                        }))), React.createElement("div", {
                                  className: "flex mt-3"
                                }, React.createElement("div", {
                                      className: "w-64 flex items-center mr-16"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "order-product-no"
                                        }, "주문번호"), React.createElement(Input.make, {
                                          type_: "text",
                                          name: "order-product-no",
                                          placeholder: "주문번호 입력",
                                          value: Query_Order_Form_Admin.FormFields.get(form.values, /* OrderProductNo */1),
                                          onChange: (function (param) {
                                              return ReForm__Helpers.handleChange(partial_arg$3, param);
                                            }),
                                          error: Curry._1(form.getFieldError, /* Field */{
                                                _0: /* OrderProductNo */1
                                              }),
                                          tabIndex: 4
                                        })), React.createElement("div", {
                                      className: "w-64 flex items-center mr-16"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "product-id"
                                        }, "상품번호"), React.createElement(Input.make, {
                                          type_: "text",
                                          name: "product-id",
                                          placeholder: "상품번호 입력",
                                          value: Query_Order_Form_Admin.FormFields.get(form.values, /* ProductId */2),
                                          onChange: (function (param) {
                                              return ReForm__Helpers.handleChange(partial_arg$4, param);
                                            }),
                                          error: Curry._1(form.getFieldError, /* Field */{
                                                _0: /* ProductId */2
                                              }),
                                          tabIndex: 5
                                        })), React.createElement("div", {
                                      className: "w-64 flex items-center"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "sku"
                                        }, "단품번호"), React.createElement(Input.make, {
                                          type_: "text",
                                          name: "sku",
                                          placeholder: "단품번호 입력",
                                          value: Query_Order_Form_Admin.FormFields.get(form.values, /* Sku */5),
                                          onChange: (function (param) {
                                              return ReForm__Helpers.handleChange(partial_arg$5, param);
                                            }),
                                          error: Curry._1(form.getFieldError, /* Field */{
                                                _0: /* Sku */5
                                              }),
                                          tabIndex: 6
                                        }))))), React.createElement("div", {
                          className: "flex mt-3"
                        }, React.createElement("div", {
                              className: "w-32 font-bold flex items-center pl-7"
                            }, "기간"), React.createElement("div", {
                              className: "flex"
                            }, React.createElement("div", {
                                  className: "flex mr-8"
                                }, React.createElement(PeriodSelector.make, {
                                      from: query.from,
                                      to_: query.to_,
                                      onSelect: handleOnChangePeriod
                                    })), React.createElement(DatePicker.make, {
                                  id: "from",
                                  onChange: (function (param) {
                                      return handleOnChangeDate(/* From */0, param);
                                    }),
                                  date: query.from,
                                  maxDate: Format(new Date(), "yyyy-MM-dd"),
                                  firstDayOfWeek: 0
                                }), React.createElement("span", {
                                  className: "flex items-center mr-1"
                                }, "~"), React.createElement(DatePicker.make, {
                                  id: "to",
                                  onChange: (function (param) {
                                      return handleOnChangeDate(/* To */1, param);
                                    }),
                                  date: query.to_,
                                  maxDate: Format(new Date(), "yyyy-MM-dd"),
                                  minDate: Format(query.from, "yyyy-MM-dd"),
                                  firstDayOfWeek: 0
                                })))), React.createElement("div", {
                      className: "flex justify-center mt-5"
                    }, React.createElement("input", {
                          className: "w-20 py-2 bg-gray-button-gl text-black-gl rounded-xl ml-2 hover:bg-gray-button-gl focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-gray-gl focus:ring-opacity-100",
                          tabIndex: 7,
                          type: "button",
                          value: "초기화",
                          onClick: handleOnReset
                        }), React.createElement("input", {
                          className: "w-20 py-2 bg-green-gl text-white font-bold rounded-xl ml-2 hover:bg-green-gl-dark focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-green-gl focus:ring-opacity-100",
                          tabIndex: 6,
                          type: "submit",
                          value: "검색"
                        }))));
}

var FormFields;

var Form;

var make = Summary_Order_Admin;

export {
  StatusFilter ,
  FormFields ,
  Form ,
  make ,
  
}
/* Input Not a pure module */
