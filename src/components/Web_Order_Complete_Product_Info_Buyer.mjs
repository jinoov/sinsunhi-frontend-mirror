// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Locale from "../utils/Locale.mjs";
import * as Skeleton from "./Skeleton.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as WebOrderCompleteProductInfoBuyerFragment_graphql from "../__generated__/WebOrderCompleteProductInfoBuyerFragment_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(WebOrderCompleteProductInfoBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(WebOrderCompleteProductInfoBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(WebOrderCompleteProductInfoBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return WebOrderCompleteProductInfoBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function Web_Order_Complete_Product_Info_Buyer$Placeholder(Props) {
  return React.createElement("section", {
              className: "flex flex-col gap-5 bg-white rounded-sm"
            }, React.createElement("span", {
                  className: "text-lg xl:text-xl text-enabled-L1 font-bold"
                }, "상품 정보"), React.createElement("div", {
                  className: "flex justify-between gap-3 h-18 xl:h-20"
                }, React.createElement(Skeleton.Box.make, {
                      className: "w-18 h-18 xl:w-20 xl:h-20 rounded-lg"
                    }), React.createElement("div", {
                      className: "flex-auto"
                    }, React.createElement(Skeleton.Box.make, {
                          className: "w-20 h-5 mb-2"
                        }), React.createElement(Skeleton.Box.make, {
                          className: "w-20 h-5 "
                        }), React.createElement(Skeleton.Box.make, {
                          className: "text-sm text-text-L2 h-6 w-16"
                        })), React.createElement(Skeleton.Box.make, {
                      className: "hidden xl:flex h-6 w-10"
                    })));
}

var Placeholder = {
  make: Web_Order_Complete_Product_Info_Buyer$Placeholder
};

function Web_Order_Complete_Product_Info_Buyer(Props) {
  var query = Props.query;
  var match = use(query);
  var match$1 = Belt_Option.flatMap(match.wosOrder, (function (wosOrder$p) {
          return Belt_Array.get(wosOrder$p.orderProducts, 0);
        }));
  if (match$1 === undefined) {
    return React.createElement(Web_Order_Complete_Product_Info_Buyer$Placeholder, {});
  }
  var match$2 = Caml_option.valFromOption(match$1);
  if (match$2 === undefined) {
    return React.createElement(Web_Order_Complete_Product_Info_Buyer$Placeholder, {});
  }
  var price = match$2.price;
  var quantity = match$2.quantity;
  return React.createElement("section", {
              className: "flex flex-col gap-5 bg-white rounded-sm w-full"
            }, React.createElement("span", {
                  className: "text-lg xl:text-xl text-enabled-L1 font-bold"
                }, "상품 정보"), React.createElement("div", {
                  className: "flex justify-between gap-3 text-sm w-full"
                }, React.createElement("img", {
                      className: "w-18 h-18 xl:w-20 xl:h-20 rounded-lg",
                      alt: "product-image",
                      src: Belt_Option.mapWithDefault(match$2.image, "", (function (image$p) {
                              return image$p.original;
                            }))
                    }), React.createElement("div", {
                      className: "flex-auto"
                    }, React.createElement("div", {
                          className: "xl:w-64 w-56 text-base whitespace-pre-wrap font-bold text-enabled-L1 mb-1"
                        }, match$2.productName), React.createElement("div", {
                          className: "xl:w-64 w-56 whitespace-pre-wrap text-text-L2 mb-2 xl:mb-3"
                        }, match$2.productOptionName), React.createElement("div", {
                          className: "text-text-L2"
                        }, Locale.Int.show(undefined, price) + "원 | 수량 " + String(quantity) + "개")), React.createElement("div", {
                      className: "hidden xl:flex font-bold text-text-L1 min-w-fit"
                    }, "총 " + Locale.Int.show(undefined, Math.imul(price, quantity)) + "원")));
}

var make = Web_Order_Complete_Product_Info_Buyer;

export {
  Fragment ,
  Placeholder ,
  make ,
  
}
/* react Not a pure module */
