// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as React from "@rescript/react/src/React.mjs";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React$1 from "react";
import * as Locale from "../utils/Locale.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Skeleton from "./Skeleton.mjs";
import * as Garter_Fn from "@greenlabs/garter/src/Garter_Fn.mjs";
import * as Garter_Id from "@greenlabs/garter/src/Garter_Id.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Garter_Math from "@greenlabs/garter/src/Garter_Math.mjs";
import * as ReactRelay from "react-relay";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as WebOrderCompleteProductInfoBuyerFragment_graphql from "../__generated__/WebOrderCompleteProductInfoBuyerFragment_graphql.mjs";

function use(fRef) {
  var data = ReactRelay.useFragment(WebOrderCompleteProductInfoBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(WebOrderCompleteProductInfoBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(WebOrderCompleteProductInfoBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return WebOrderCompleteProductInfoBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  use: use,
  useOpt: useOpt
};

function Web_Order_Complete_Product_Info_Buyer$Placeholder(props) {
  return React$1.createElement("section", {
              className: "flex flex-col gap-5 bg-white rounded-sm"
            }, React$1.createElement("span", {
                  className: "text-lg xl:text-xl text-enabled-L1 font-bold"
                }, "상품 정보"), React$1.createElement("div", {
                  className: "flex justify-between gap-3 h-18 xl:h-20"
                }, React$1.createElement(Skeleton.Box.make, {
                      className: "w-18 h-18 xl:w-20 xl:h-20 rounded-lg"
                    }), React$1.createElement("div", {
                      className: "flex-auto"
                    }, React$1.createElement(Skeleton.Box.make, {
                          className: "w-20 h-5 mb-2"
                        }), React$1.createElement(Skeleton.Box.make, {
                          className: "w-20 h-5 "
                        }), React$1.createElement(Skeleton.Box.make, {
                          className: "text-sm text-text-L2 h-6 w-16"
                        })), React$1.createElement(Skeleton.Box.make, {
                      className: "hidden xl:flex h-6 w-10"
                    })));
}

var Placeholder = {
  make: Web_Order_Complete_Product_Info_Buyer$Placeholder
};

function fixedData_encode(v) {
  return Js_dict.fromArray([
              [
                "price",
                Spice.intToJson(v.price)
              ],
              [
                "productId",
                Spice.intToJson(v.productId)
              ],
              [
                "productName",
                Spice.stringToJson(v.productName)
              ],
              [
                "imageUrl",
                Spice.stringToJson(v.imageUrl)
              ],
              [
                "productOptionName",
                Spice.stringToJson(v.productOptionName)
              ],
              [
                "quantity",
                Spice.intToJson(v.quantity)
              ]
            ]);
}

function fixedData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var price = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "price"), null));
  if (price.TAG === /* Ok */0) {
    var productId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "productId"), null));
    if (productId.TAG === /* Ok */0) {
      var productName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "productName"), null));
      if (productName.TAG === /* Ok */0) {
        var imageUrl = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "imageUrl"), null));
        if (imageUrl.TAG === /* Ok */0) {
          var productOptionName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "productOptionName"), null));
          if (productOptionName.TAG === /* Ok */0) {
            var quantity = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "quantity"), null));
            if (quantity.TAG === /* Ok */0) {
              return {
                      TAG: /* Ok */0,
                      _0: {
                        price: price._0,
                        productId: productId._0,
                        productName: productName._0,
                        imageUrl: imageUrl._0,
                        productOptionName: productOptionName._0,
                        quantity: quantity._0
                      }
                    };
            }
            var e = quantity._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".quantity" + e.path,
                      message: e.message,
                      value: e.value
                    }
                  };
          }
          var e$1 = productOptionName._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".productOptionName" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
        }
        var e$2 = imageUrl._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".imageUrl" + e$2.path,
                  message: e$2.message,
                  value: e$2.value
                }
              };
      }
      var e$3 = productName._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".productName" + e$3.path,
                message: e$3.message,
                value: e$3.value
              }
            };
    }
    var e$4 = productId._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".productId" + e$4.path,
              message: e$4.message,
              value: e$4.value
            }
          };
  }
  var e$5 = price._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".price" + e$5.path,
            message: e$5.message,
            value: e$5.value
          }
        };
}

function productInfo_encode(v) {
  return Js_dict.fromArray([
              [
                "imageUrl",
                Spice.stringToJson(v.imageUrl)
              ],
              [
                "productName",
                Spice.stringToJson(v.productName)
              ],
              [
                "totalPrice",
                Spice.intToJson(v.totalPrice)
              ],
              [
                "productOptions",
                Spice.arrayToJson(fixedData_encode, v.productOptions)
              ]
            ]);
}

function productInfo_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var imageUrl = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "imageUrl"), null));
  if (imageUrl.TAG === /* Ok */0) {
    var productName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "productName"), null));
    if (productName.TAG === /* Ok */0) {
      var totalPrice = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "totalPrice"), null));
      if (totalPrice.TAG === /* Ok */0) {
        var productOptions = Spice.arrayFromJson(fixedData_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "productOptions"), null));
        if (productOptions.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    imageUrl: imageUrl._0,
                    productName: productName._0,
                    totalPrice: totalPrice._0,
                    productOptions: productOptions._0
                  }
                };
        }
        var e = productOptions._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".productOptions" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = totalPrice._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".totalPrice" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = productName._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".productName" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = imageUrl._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".imageUrl" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function makeProductInfo(data) {
  var first = Belt_Array.get(data, 0);
  return Belt_Option.map(first, (function (first$p) {
                return {
                        imageUrl: Belt_Option.mapWithDefault(first$p.image, "", (function (image) {
                                return image.thumb100x100;
                              })),
                        productName: first$p.productName,
                        totalPrice: Garter_Math.sum_int(Belt_Array.map(data, (function (d) {
                                    return Math.imul(d.price, d.quantity);
                                  }))),
                        productOptions: Belt_Array.map(data, (function (param) {
                                return {
                                        price: param.price,
                                        productId: param.productId,
                                        productName: param.productName,
                                        imageUrl: Belt_Option.mapWithDefault(param.image, "", (function (image) {
                                                return image.thumb100x100;
                                              })),
                                        productOptionName: param.productOptionName,
                                        quantity: param.quantity
                                      };
                              }))
                      };
              }));
}

function Web_Order_Complete_Product_Info_Buyer$List(props) {
  return React$1.createElement("div", {
              className: "flex flex-col gap-2"
            }, Belt_Array.map(props.productOptions, (function (param) {
                    var productOptionName = param.productOptionName;
                    return React$1.createElement("div", {
                                key: productOptionName,
                                className: "flex flex-col p-3 gap-1 w-full bg-gray-50 rounded-md"
                              }, React$1.createElement("span", {
                                    className: "text-sm text-gray-800"
                                  }, productOptionName), React$1.createElement("span", {
                                    className: "text-sm text-gray-600"
                                  }, "수량 " + Locale.Int.show(undefined, param.quantity) + " | " + Locale.Int.show(undefined, param.price) + "원"));
                  })));
}

var List = {
  make: Web_Order_Complete_Product_Info_Buyer$List
};

function Web_Order_Complete_Product_Info_Buyer$ProductCard$PC(props) {
  var data = props.data;
  return React$1.createElement("div", {
              className: "w-full flex gap-3 pt-7"
            }, React$1.createElement("img", {
                  className: "w-20 h-20 rounded-lg",
                  alt: "product-image",
                  src: data.imageUrl
                }), React$1.createElement("div", {
                  className: Cx.cx([
                        "flex flex-col gap-2 w-full pb-7",
                        props.isLast ? "" : "border border-x-0 border-t-0"
                      ])
                }, React$1.createElement("div", {
                      className: "flex flex-row w-full justify-between items-center"
                    }, React$1.createElement("span", {
                          className: "text-gray-800 font-normal xl:font-bold"
                        }, data.productName), React$1.createElement("span", {
                          className: "text-gray-800 font-bold text-base"
                        }, "" + Locale.Int.show(undefined, data.totalPrice) + "원")), React$1.createElement(Web_Order_Complete_Product_Info_Buyer$List, {
                      productOptions: data.productOptions
                    })));
}

var PC = {
  make: Web_Order_Complete_Product_Info_Buyer$ProductCard$PC
};

function Web_Order_Complete_Product_Info_Buyer$ProductCard$MO(props) {
  var data = props.data;
  return React$1.createElement("div", {
              className: props.isLast ? "" : "border border-x-0 border-t-0 pb-5"
            }, React$1.createElement("div", {
                  className: "w-full flex gap-3 pt-5"
                }, React$1.createElement("img", {
                      className: "w-18 h-18 rounded-lg",
                      alt: "product-image",
                      src: data.imageUrl
                    }), React$1.createElement("div", {
                      className: "flex flex-col gap-2 w-full pb-7"
                    }, React$1.createElement("div", {
                          className: "flex flex-col w-full justify-between"
                        }, React$1.createElement("span", {
                              className: "text-gray-800 font-normal"
                            }, data.productName), React$1.createElement("span", {
                              className: "text-gray-800 font-bold text-lg"
                            }, "" + Locale.Int.show(undefined, data.totalPrice) + "원")))), React$1.createElement(Web_Order_Complete_Product_Info_Buyer$List, {
                  productOptions: data.productOptions
                }));
}

var MO = {
  make: Web_Order_Complete_Product_Info_Buyer$ProductCard$MO
};

function Web_Order_Complete_Product_Info_Buyer$ProductCard(props) {
  var isLast = props.isLast;
  var data = props.data;
  switch (props.deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React$1.createElement(Web_Order_Complete_Product_Info_Buyer$ProductCard$PC, {
                    data: data,
                    isLast: isLast
                  });
    case /* Mobile */2 :
        return React$1.createElement(Web_Order_Complete_Product_Info_Buyer$ProductCard$MO, {
                    data: data,
                    isLast: isLast
                  });
    
  }
}

var ProductCard = {
  PC: PC,
  MO: MO,
  make: Web_Order_Complete_Product_Info_Buyer$ProductCard
};

function Web_Order_Complete_Product_Info_Buyer(props) {
  var deviceType = props.deviceType;
  var match = use(props.query);
  var groupBy = function (orderProducts) {
    return Belt_Map.valuesToArray(Garter_Array.groupBy(orderProducts, (function (a) {
                      return a.productId;
                    }), Garter_Id.IntComparable));
  };
  var productInfos = Belt_Array.keepMap(groupBy(Belt_Option.mapWithDefault(match.wosOrder, [], (function (w) {
                  return Belt_Array.keepMap(w.orderProducts, Garter_Fn.identity);
                }))), makeProductInfo);
  if (productInfos.length !== 0) {
    return React$1.createElement("section", {
                className: "flex flex-col bg-white rounded-sm"
              }, React$1.createElement("span", {
                    className: "text-lg xl:text-xl text-enabled-L1 font-bold"
                  }, "상품 정보"), Belt_Array.mapWithIndex(productInfos, (function (index, data) {
                      return React.createElementWithKey(Web_Order_Complete_Product_Info_Buyer$ProductCard, {
                                  data: data,
                                  isLast: index === (productInfos.length - 1 | 0),
                                  deviceType: deviceType
                                }, data.productName);
                    })));
  } else {
    return React$1.createElement(Web_Order_Complete_Product_Info_Buyer$Placeholder, {});
  }
}

var make = Web_Order_Complete_Product_Info_Buyer;

export {
  Fragment ,
  Placeholder ,
  fixedData_encode ,
  fixedData_decode ,
  productInfo_encode ,
  productInfo_decode ,
  makeProductInfo ,
  List ,
  ProductCard ,
  make ,
}
/* React Not a pure module */
