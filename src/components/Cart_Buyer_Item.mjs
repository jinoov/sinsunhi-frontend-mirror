// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Skeleton from "./Skeleton.mjs";
import * as Garter_Fn from "@greenlabs/garter/src/Garter_Fn.mjs";
import Link from "next/link";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as Footer_Buyer from "./Footer_Buyer.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Header_Buyer from "./Header_Buyer.mjs";
import * as Cart_Buyer_Form from "./Cart_Buyer_Form.mjs";
import * as Cart_Buyer_Util from "./Cart_Buyer_Util.mjs";
import * as ReactHookForm from "react-hook-form";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Cart_Delete_Button from "./Cart_Delete_Button.mjs";
import * as FeatureFlagWrapper from "../pages/buyer/pc/FeatureFlagWrapper.mjs";
import * as Cart_Card_List_Buyer from "./Cart_Card_List_Buyer.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as Cart_Payment_Info_Buyer from "./Cart_Payment_Info_Buyer.mjs";
import * as CartBuyerItemFragment_graphql from "../__generated__/CartBuyerItemFragment_graphql.mjs";

function use(fRef) {
  var data = ReactRelay.useFragment(CartBuyerItemFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(CartBuyerItemFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(CartBuyerItemFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return CartBuyerItemFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_productOptionStatus_decode = CartBuyerItemFragment_graphql.Utils.productOptionStatus_decode;

var Fragment_productOptionStatus_fromString = CartBuyerItemFragment_graphql.Utils.productOptionStatus_fromString;

var Fragment_productStatus_decode = CartBuyerItemFragment_graphql.Utils.productStatus_decode;

var Fragment_productStatus_fromString = CartBuyerItemFragment_graphql.Utils.productStatus_fromString;

var Fragment = {
  productOptionStatus_decode: Fragment_productOptionStatus_decode,
  productOptionStatus_fromString: Fragment_productOptionStatus_fromString,
  productStatus_decode: Fragment_productStatus_decode,
  productStatus_fromString: Fragment_productStatus_fromString,
  Types: undefined,
  Operation: undefined,
  use: use,
  useOpt: useOpt
};

function Cart_Buyer_Item$NoItem(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  return React.createElement("div", {
              className: Cx.cx([
                    "flex flex-col items-center justify-center gap-1 xl:gap-7 h-[500px] xl:h-[700px]",
                    className
                  ])
            }, React.createElement("span", {
                  className: "text-text-L1 text-lg xl:text-3xl font-bold xl:font-normal"
                }, "장바구니에 담긴 상품이 없습니다."), React.createElement("span", {
                  className: "whitespace-pre-wrap text-center text-text-L2 text-[17px]"
                }, "원하는 상품을 장바구니에 담아보세요.\n\n*현재는 1개의 배송지로 가는 상품만 지원합니다.\n2개이상 배송지를 구매하고 싶은 경우에는 \n주문서 업로드를 이용해주세요."), React.createElement(Link, {
                  href: "/buyer",
                  children: React.createElement("a", {
                        className: "mt-12 xl:mt-0 px-4 xl:px-20 py-4 flex justify-center items-center border border-green-500 text-green-500 font-bold rounded-xl"
                      }, "상품 둘러보기")
                }));
}

var NoItem = {
  make: Cart_Buyer_Item$NoItem
};

function Cart_Buyer_Item$Notice$PC(Props) {
  return React.createElement("div", {
              className: "w-full px-0 bg-white pt-0 mb-7 mt-0"
            }, React.createElement("div", {
                  className: "w-full flex flex-col px-3 py-2.5 text-orange-500 text-sm rounded-[10px] bg-red-50"
                }, React.createElement("span", undefined, "- 산지 사정에 따라, 상품 상태(ex. 품절) 및 가격이 변동될 수 있습니다. 주문 전 반드시 확인해주세요."), React.createElement("span", undefined, "- 장바구니를 통한 주문은 오직 한 곳의 배송지로만 상품을 보낼 수 있습니다.")));
}

var PC = {
  make: Cart_Buyer_Item$Notice$PC
};

function Cart_Buyer_Item$Notice$MO(Props) {
  return React.createElement("div", {
              className: "w-full px-4 bg-white pt-7 mb-0 mt-12"
            }, React.createElement("div", {
                  className: "w-full flex flex-col px-3 py-2.5 text-orange-500 text-sm rounded-[10px] bg-red-50"
                }, React.createElement("span", undefined, "- 산지 사정에 따라, 상품 상태(ex. 품절) 및 가격이 변동될 수 있습니다. 주문 전 반드시 확인해주세요."), React.createElement("span", undefined, "- 장바구니를 통한 주문은 오직 한 곳의 배송지로만 상품을 보낼 수 있습니다.")));
}

var MO = {
  make: Cart_Buyer_Item$Notice$MO
};

var Notice = {
  PC: PC,
  MO: MO
};

function Cart_Buyer_Item$SelectAll$PlaceHolder$PC(Props) {
  return React.createElement("div", {
              className: "w-full"
            }, React.createElement("div", {
                  className: "flex w-full justify-around bg-white py-3 mb-5"
                }, React.createElement(Skeleton.Box.make, {
                      className: "w-1/3"
                    }), React.createElement(Skeleton.Box.make, {
                      className: "w-1/3"
                    })), React.createElement("div", {
                  className: "pb-5 mb-5 mt-0 px-0 w-full relative top-0 bg-white flex justify-between border border-x-0 border-t-0 border-div-border-L2"
                }, React.createElement("div", {
                      className: "flex gap-2 items-center"
                    }, React.createElement(Skeleton.Box.make, {
                          className: "w-6"
                        }), React.createElement(Skeleton.Box.make, {
                          className: "w-18"
                        })), React.createElement(Skeleton.Box.make, {
                      className: "w-12"
                    })));
}

var PC$1 = {
  make: Cart_Buyer_Item$SelectAll$PlaceHolder$PC
};

function Cart_Buyer_Item$SelectAll$PlaceHolder$MO(Props) {
  return React.createElement("div", {
              className: "w-full pb-5 mb-5 px-4 mt-16 fixed top-0 bg-white"
            }, React.createElement("div", {
                  className: "flex w-full justify-around bg-white py-3 mb-5"
                }, React.createElement(Skeleton.Box.make, {
                      className: "w-1/3"
                    }), React.createElement(Skeleton.Box.make, {
                      className: "w-1/3"
                    })));
}

var MO$1 = {
  make: Cart_Buyer_Item$SelectAll$PlaceHolder$MO
};

var PlaceHolder = {
  PC: PC$1,
  MO: MO$1
};

function Cart_Buyer_Item$SelectAll$PC(Props) {
  var prefix = Props.prefix;
  var refetchCart = Props.refetchCart;
  var availableNum = Props.availableNum;
  var unavailableNum = Props.unavailableNum;
  var classNameOpt = Props.className;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var formNames = Cart_Buyer_Form.names(prefix);
  var watchCart = ReactHookForm.useWatch({
        name: formNames.name
      });
  var match = ReactHookForm.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(Cart_Buyer_Form.names(Cart_Buyer_Form.name).orderType, {
        required: true
      });
  var name = match$1.name;
  var ref = match$1.ref;
  var onBlur = match$1.onBlur;
  var onChange = match$1.onChange;
  var watchOrderType = ReactHookForm.useWatch({
        name: Cart_Buyer_Form.names(Cart_Buyer_Form.name).orderType
      });
  var match$2 = Belt_Option.map(watchCart, Cart_Buyer_Form.cart_decode);
  var match$3;
  if (match$2 !== undefined) {
    if (match$2.TAG === /* Ok */0) {
      var filtered = Belt_Array.keepMap(Belt_Array.concatMany(Belt_Array.mapWithIndex(Belt_Array.map(Belt_Option.getWithDefault(match$2._0.cartItems, []), (function (cartItem) {
                          if (Cart_Buyer_Form.soldable(cartItem.productStatus)) {
                            return Belt_Array.map(cartItem.productOptions, (function (option) {
                                          if (Cart_Buyer_Form.soldable(option.optionStatus)) {
                                            return option;
                                          }
                                          
                                        }));
                          } else {
                            return [];
                          }
                        })), (function (i, c) {
                      var firstDepth = Cart_Buyer_Form.names("" + formNames.cartItems + "." + String(i) + "");
                      return Belt_Array.mapWithIndex(c, (function (j, option) {
                                    return Belt_Option.map(option, (function (option$p) {
                                                  var secondDepth = Cart_Buyer_Form.names("" + firstDepth.productOptions + "." + String(j) + "");
                                                  return [
                                                          secondDepth.checked,
                                                          option$p
                                                        ];
                                                }));
                                  }));
                    }))), Garter_Fn.identity);
      var match$4 = Garter_Array.unzip(filtered);
      match$3 = [
        Belt_Array.keep(match$4[1], (function (option) {
                return option.checked;
              })),
        filtered,
        match$4[0]
      ];
    } else {
      match$3 = [
        [],
        [],
        []
      ];
    }
  } else {
    match$3 = [
      [],
      [],
      []
    ];
  }
  var targetNames = match$3[2];
  var selectedItems = match$3[0];
  return React.createElement("div", {
              className: Cx.cx([
                    "pb-5 mb-5 mt-0 pt-0 w-full relative top-0 bg-white border border-x-0 border-t-0 border-div-border-L2",
                    className
                  ])
            }, React.createElement("div", {
                  className: "flex w-full justify-start bg-white"
                }, Belt_Array.map([
                      [
                        "courier-available",
                        "택배배송 가능 상품 " + String(availableNum) + ""
                      ],
                      [
                        "un-courier-available",
                        "택배배송 불가 상품 " + String(unavailableNum) + ""
                      ]
                    ], (function (param) {
                        var n = param[1];
                        var value = param[0];
                        return React.createElement("label", {
                                    key: n,
                                    className: "w-1/2"
                                  }, React.createElement("input", {
                                        ref: ref,
                                        className: "sr-only",
                                        id: name,
                                        name: name,
                                        type: "radio",
                                        value: value,
                                        onBlur: onBlur,
                                        onChange: onChange
                                      }), React.createElement(Cart_Buyer_Util.RadioButton.PC.make, {
                                        watchValue: watchOrderType,
                                        name: n,
                                        value: value
                                      }));
                      }))), React.createElement("div", {
                  className: "flex justify-between items-center px-0 mt-10"
                }, React.createElement("div", {
                      className: "flex gap-2 items-center"
                    }, React.createElement(Cart_Buyer_Util.Checkbox.make, {
                          name: formNames.checked,
                          watchNames: targetNames,
                          targetNames: targetNames,
                          status: "SALE"
                        }), React.createElement("span", {
                          className: "text-gray-800"
                        }, "전체 선택 (" + String(selectedItems.length) + "/" + String(match$3[1].length) + ")")), React.createElement(Cart_Delete_Button.make, {
                      productOptions: selectedItems,
                      refetchCart: refetchCart,
                      children: React.createElement("span", {
                            className: "text-gray-600 text-sm"
                          }, "선택 삭제"),
                      isIcon: false
                    })));
}

var PC$2 = {
  make: Cart_Buyer_Item$SelectAll$PC
};

function Cart_Buyer_Item$SelectAll$MO(Props) {
  var prefix = Props.prefix;
  var refetchCart = Props.refetchCart;
  var availableNum = Props.availableNum;
  var unavailableNum = Props.unavailableNum;
  var classNameOpt = Props.className;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var formNames = Cart_Buyer_Form.names(prefix);
  var watchCart = ReactHookForm.useWatch({
        name: formNames.name
      });
  var match = ReactHookForm.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(Cart_Buyer_Form.names(Cart_Buyer_Form.name).orderType, {
        required: true
      });
  var name = match$1.name;
  var ref = match$1.ref;
  var onBlur = match$1.onBlur;
  var onChange = match$1.onChange;
  var watchOrderType = ReactHookForm.useWatch({
        name: Cart_Buyer_Form.names(Cart_Buyer_Form.name).orderType
      });
  var match$2 = Belt_Option.map(watchCart, Cart_Buyer_Form.cart_decode);
  var match$3;
  if (match$2 !== undefined) {
    if (match$2.TAG === /* Ok */0) {
      var filtered = Belt_Array.keepMap(Belt_Array.concatMany(Belt_Array.mapWithIndex(Belt_Array.map(Belt_Option.getWithDefault(match$2._0.cartItems, []), (function (cartItem) {
                          if (Cart_Buyer_Form.soldable(cartItem.productStatus)) {
                            return Belt_Array.map(cartItem.productOptions, (function (option) {
                                          if (Cart_Buyer_Form.soldable(option.optionStatus)) {
                                            return option;
                                          }
                                          
                                        }));
                          } else {
                            return [];
                          }
                        })), (function (i, c) {
                      var firstDepth = Cart_Buyer_Form.names("" + formNames.cartItems + "." + String(i) + "");
                      return Belt_Array.mapWithIndex(c, (function (j, option) {
                                    return Belt_Option.map(option, (function (option$p) {
                                                  var secondDepth = Cart_Buyer_Form.names("" + firstDepth.productOptions + "." + String(j) + "");
                                                  return [
                                                          secondDepth.checked,
                                                          option$p
                                                        ];
                                                }));
                                  }));
                    }))), Garter_Fn.identity);
      var match$4 = Garter_Array.unzip(filtered);
      match$3 = [
        Belt_Array.keep(match$4[1], (function (option) {
                return option.checked;
              })),
        filtered,
        match$4[0]
      ];
    } else {
      match$3 = [
        [],
        [],
        []
      ];
    }
  } else {
    match$3 = [
      [],
      [],
      []
    ];
  }
  var targetNames = match$3[2];
  var selectedItems = match$3[0];
  return React.createElement("div", {
              className: Cx.cx([
                    "pb-3 mb-5 pt-2 w-full fixed top-12 mt-1 bg-white border border-x-0 border-t-0 border-div-border-L2",
                    className
                  ])
            }, React.createElement("div", {
                  className: "flex w-full justify-center bg-white"
                }, Belt_Array.map([
                      [
                        "courier-available",
                        "택배배송 가능 상품 " + String(availableNum) + ""
                      ],
                      [
                        "un-courier-available",
                        "택배배송 불가 상품 " + String(unavailableNum) + ""
                      ]
                    ], (function (param) {
                        var n = param[1];
                        var value = param[0];
                        return React.createElement("label", {
                                    key: n,
                                    className: "w-1/2"
                                  }, React.createElement("input", {
                                        ref: ref,
                                        className: "sr-only",
                                        id: name,
                                        name: name,
                                        type: "radio",
                                        value: value,
                                        onBlur: onBlur,
                                        onChange: onChange
                                      }), React.createElement(Cart_Buyer_Util.RadioButton.MO.make, {
                                        watchValue: watchOrderType,
                                        name: n,
                                        value: value
                                      }));
                      }))), React.createElement("div", {
                  className: "flex justify-between items-center px-4 mt-4"
                }, React.createElement("div", {
                      className: "flex gap-2 items-center"
                    }, React.createElement(Cart_Buyer_Util.Checkbox.make, {
                          name: formNames.checked,
                          watchNames: targetNames,
                          targetNames: targetNames,
                          status: "SALE"
                        }), React.createElement("span", {
                          className: "text-gray-800"
                        }, "전체 선택 (" + String(selectedItems.length) + "/" + String(match$3[1].length) + ")")), React.createElement(Cart_Delete_Button.make, {
                      productOptions: selectedItems,
                      refetchCart: refetchCart,
                      children: React.createElement("span", {
                            className: "text-gray-600 text-sm "
                          }, "선택 삭제"),
                      isIcon: false
                    })));
}

var MO$2 = {
  make: Cart_Buyer_Item$SelectAll$MO
};

var SelectAll = {
  PlaceHolder: PlaceHolder,
  PC: PC$2,
  MO: MO$2
};

function Cart_Buyer_Item$PlaceHolder$PC(Props) {
  var deviceType = Props.deviceType;
  var router = Router.useRouter();
  var oldUI = React.createElement(React.Fragment, undefined, React.createElement(Header_Buyer.PC_Old.make, {
            key: router.asPath
          }), React.createElement("main", {
            className: "flex flex-col gap-5 px-[14%] py-20 bg-surface pb-20"
          }, React.createElement("h1", {
                className: "flex ml-5 mb-3 text-3xl font-bold text-enabled-L1"
              }, "장바구니"), React.createElement("div", {
                className: "flex flex-row gap-4 xl:gap-5"
              }, React.createElement("div", {
                    className: "w-2/3 flex flex-col gap-5"
                  }, React.createElement("div", {
                        className: "flex flex-col pt-7 px-7 bg-white"
                      }, React.createElement("div", {
                            className: "flex flex-col items-center"
                          }, React.createElement(Cart_Buyer_Item$SelectAll$PlaceHolder$PC, {}), React.createElement(Skeleton.Box.make, {
                                className: "w-full px-0 min-h-[4rem] mt-0"
                              })), React.createElement("div", {
                            className: "flex flex-col gap-4 mt-7 mb-10 bg-white"
                          }, React.createElement(Cart_Card_List_Buyer.PlaceHolder.make, {
                                deviceType: deviceType
                              })))), React.createElement("div", {
                    className: "w-1/3 xl:min-h-full relative bottom-0"
                  }, React.createElement(Cart_Payment_Info_Buyer.PlaceHolder.PC.make, {})))), React.createElement(Footer_Buyer.PC.make, {}));
  return React.createElement(FeatureFlagWrapper.make, {
              children: React.createElement(React.Fragment, undefined, React.createElement(Header_Buyer.PC_Old.make, {
                        key: router.asPath
                      }), React.createElement("main", {
                        className: "flex flex-col gap-5 px-[14%] py-20 bg-[#FAFBFC] pb-20"
                      }, React.createElement("h1", {
                            className: "flex ml-5 mb-3 text-3xl font-bold text-enabled-L1"
                          }, "장바구니"), React.createElement("div", {
                            className: "flex flex-row gap-4 xl:gap-5"
                          }, React.createElement("div", {
                                className: "w-2/3 flex flex-col gap-5"
                              }, React.createElement("div", {
                                    className: "flex flex-col pt-7 px-7 bg-white"
                                  }, React.createElement("div", {
                                        className: "flex flex-col items-center"
                                      }, React.createElement(Cart_Buyer_Item$SelectAll$PlaceHolder$PC, {}), React.createElement(Skeleton.Box.make, {
                                            className: "w-full px-0 min-h-[4rem] mt-0"
                                          })), React.createElement("div", {
                                        className: "flex flex-col gap-4 mt-7 mb-10 bg-white"
                                      }, React.createElement(Cart_Card_List_Buyer.PlaceHolder.make, {
                                            deviceType: deviceType
                                          })))), React.createElement("div", {
                                className: "w-1/3 xl:min-h-full relative bottom-0"
                              }, React.createElement(Cart_Payment_Info_Buyer.PlaceHolder.PC.make, {})))), React.createElement(Footer_Buyer.PC.make, {})),
              fallback: oldUI,
              featureFlag: "HOME_UI_UX"
            });
}

var PC$3 = {
  make: Cart_Buyer_Item$PlaceHolder$PC
};

function Cart_Buyer_Item$PlaceHolder$MO(Props) {
  var deviceType = Props.deviceType;
  var router = Router.useRouter();
  return React.createElement(React.Fragment, undefined, React.createElement(Header_Buyer.Mobile.make, {
                  key: router.asPath
                }), React.createElement("main", {
                  className: "flex flex-col gap-5 bg-surface pb-[11rem]"
                }, React.createElement("div", {
                      className: "flex flex-col gap-4 xl:gap-5"
                    }, React.createElement("div", {
                          className: "w-full flex flex-col gap-5"
                        }, React.createElement("div", {
                              className: "flex flex-col pt-7 px-0 bg-white"
                            }, React.createElement("div", {
                                  className: "flex flex-col items-center"
                                }, React.createElement(Cart_Buyer_Item$SelectAll$PlaceHolder$MO, {}), React.createElement(Skeleton.Box.make, {
                                      className: "w-[92%] min-h-[4rem] mt-10"
                                    })), React.createElement("div", {
                                  className: "flex flex-col gap-4 bg-surface"
                                }, React.createElement(Cart_Card_List_Buyer.PlaceHolder.make, {
                                      deviceType: deviceType
                                    })))), React.createElement("div", {
                          className: "w-full fixed bottom-0"
                        }, React.createElement(Cart_Payment_Info_Buyer.PlaceHolder.MO.make, {})))), React.createElement(Footer_Buyer.MO.make, {}));
}

var MO$3 = {
  make: Cart_Buyer_Item$PlaceHolder$MO
};

function Cart_Buyer_Item$PlaceHolder(Props) {
  var deviceType = Props.deviceType;
  switch (deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React.createElement(Cart_Buyer_Item$PlaceHolder$PC, {
                    deviceType: deviceType
                  });
    case /* Mobile */2 :
        return React.createElement(Cart_Buyer_Item$PlaceHolder$MO, {
                    deviceType: deviceType
                  });
    
  }
}

var PlaceHolder$1 = {
  PC: PC$3,
  MO: MO$3,
  make: Cart_Buyer_Item$PlaceHolder
};

function Cart_Buyer_Item$RenderByOrderType$PC(Props) {
  var data = Props.data;
  var refetchCart = Props.refetchCart;
  var formNames = Props.formNames;
  var orderType = Props.orderType;
  var availableNum = Props.availableNum;
  var unavailableNum = Props.unavailableNum;
  var deviceType = Props.deviceType;
  var watchOrderType = ReactHookForm.useWatch({
        name: Cart_Buyer_Form.names(Cart_Buyer_Form.name).orderType
      });
  var isSelected = Belt_Option.mapWithDefault(watchOrderType, false, (function (watch) {
          return Caml_obj.equal(watch, Cart_Buyer_Form.orderType_encode(orderType));
        }));
  return React.createElement(React.Fragment, undefined, React.createElement(Cart_Buyer_Util.HiddenInputs.make, {
                  data: data,
                  prefix: formNames.name
                }), React.createElement("div", {
                  className: isSelected ? "flex flex-row gap-5" : "hidden"
                }, React.createElement("div", {
                      className: "w-2/3 flex flex-col gap-5 pt-0 min-w-[550px]"
                    }, React.createElement("div", {
                          className: "flex flex-col pt-0 px-7 bg-white"
                        }, React.createElement(Cart_Buyer_Item$SelectAll$PC, {
                              prefix: formNames.name,
                              refetchCart: refetchCart,
                              availableNum: availableNum,
                              unavailableNum: unavailableNum
                            }), React.createElement("div", {
                              className: "flex flex-col gap-4 mb-10 bg-white"
                            }, data.length !== 0 ? React.createElement("div", {
                                    className: "flex flex-col"
                                  }, React.createElement(Cart_Buyer_Item$Notice$PC, {}), React.createElement("div", {
                                        className: "flex flex-col gap-7"
                                      }, Belt_Array.mapWithIndex(data, (function (index, cartItem) {
                                              return React.createElement(Cart_Card_List_Buyer.make, {
                                                          cartItem: cartItem,
                                                          refetchCart: refetchCart,
                                                          prefix: "" + formNames.cartItems + "." + String(index) + "",
                                                          isLast: (index + 1 | 0) === data.length,
                                                          deviceType: deviceType,
                                                          key: "" + formNames.cartItems + "." + String(index) + ""
                                                        });
                                            })))) : React.createElement(Cart_Buyer_Item$NoItem, {
                                    className: "bg-white"
                                  })))), React.createElement("div", {
                      className: "w-1/3 min-h-full relative bottom-0"
                    }, React.createElement(Cart_Payment_Info_Buyer.PC.make, {
                          prefix: formNames.name
                        }))));
}

var PC$4 = {
  make: Cart_Buyer_Item$RenderByOrderType$PC
};

function Cart_Buyer_Item$RenderByOrderType$MO(Props) {
  var data = Props.data;
  var refetchCart = Props.refetchCart;
  var formNames = Props.formNames;
  var orderType = Props.orderType;
  var availableNum = Props.availableNum;
  var unavailableNum = Props.unavailableNum;
  var deviceType = Props.deviceType;
  var watchOrderType = ReactHookForm.useWatch({
        name: Cart_Buyer_Form.names(Cart_Buyer_Form.name).orderType
      });
  var isSelected = Belt_Option.mapWithDefault(watchOrderType, false, (function (watch) {
          return Caml_obj.equal(watch, Cart_Buyer_Form.orderType_encode(orderType));
        }));
  return React.createElement(React.Fragment, undefined, React.createElement(Cart_Buyer_Util.HiddenInputs.make, {
                  data: data,
                  prefix: formNames.name
                }), React.createElement("div", {
                  className: isSelected ? "flex flex-col gap-4" : "hidden"
                }, React.createElement("div", {
                      className: "w-full flex flex-col gap-5 pt-14"
                    }, React.createElement("div", {
                          className: "flex flex-col pt-0 px-0 bg-white"
                        }, React.createElement(Cart_Buyer_Item$SelectAll$MO, {
                              prefix: formNames.name,
                              refetchCart: refetchCart,
                              availableNum: availableNum,
                              unavailableNum: unavailableNum
                            }), React.createElement("div", {
                              className: "flex flex-col gap-2 bg-surface"
                            }, data.length !== 0 ? React.createElement("div", {
                                    className: "flex flex-col"
                                  }, React.createElement(Cart_Buyer_Item$Notice$MO, {}), React.createElement("div", {
                                        className: "flex flex-col gap-3"
                                      }, Belt_Array.mapWithIndex(data, (function (index, cartItem) {
                                              return React.createElement(Cart_Card_List_Buyer.make, {
                                                          cartItem: cartItem,
                                                          refetchCart: refetchCart,
                                                          prefix: "" + formNames.cartItems + "." + String(index) + "",
                                                          isLast: (index + 1 | 0) === data.length,
                                                          deviceType: deviceType,
                                                          key: "" + formNames.cartItems + "." + String(index) + ""
                                                        });
                                            })))) : React.createElement(Cart_Buyer_Item$NoItem, {
                                    className: "bg-white"
                                  })))), React.createElement("div", {
                      className: "w-full fixed bottom-0"
                    }, React.createElement(Cart_Payment_Info_Buyer.MO.make, {
                          prefix: formNames.name
                        }))));
}

var MO$4 = {
  make: Cart_Buyer_Item$RenderByOrderType$MO
};

function Cart_Buyer_Item$RenderByOrderType(Props) {
  var data = Props.data;
  var refetchCart = Props.refetchCart;
  var formNames = Props.formNames;
  var orderType = Props.orderType;
  var availableNum = Props.availableNum;
  var unavailableNum = Props.unavailableNum;
  var deviceType = Props.deviceType;
  switch (deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React.createElement(Cart_Buyer_Item$RenderByOrderType$PC, {
                    data: data,
                    refetchCart: refetchCart,
                    formNames: formNames,
                    orderType: orderType,
                    availableNum: availableNum,
                    unavailableNum: unavailableNum,
                    deviceType: deviceType
                  });
    case /* Mobile */2 :
        return React.createElement(Cart_Buyer_Item$RenderByOrderType$MO, {
                    data: data,
                    refetchCart: refetchCart,
                    formNames: formNames,
                    orderType: orderType,
                    availableNum: availableNum,
                    unavailableNum: unavailableNum,
                    deviceType: deviceType
                  });
    
  }
}

var RenderByOrderType = {
  PC: PC$4,
  MO: MO$4,
  make: Cart_Buyer_Item$RenderByOrderType
};

function Cart_Buyer_Item$PC(Props) {
  var renderParams = Props.renderParams;
  var refetchCart = Props.refetchCart;
  var availableNum = Props.availableNum;
  var unavailableNum = Props.unavailableNum;
  var deviceType = Props.deviceType;
  var oldUI = React.createElement("main", {
        className: "w-full min-w-[1280px] flex flex-col gap-5 px-[14%] py-20 bg-surface pb-20"
      }, React.createElement("h1", {
            className: "flex ml-5 mb-3 text-3xl font-bold text-enabled-L1"
          }, "장바구니"), Belt_Array.map(renderParams, (function (param) {
              var formNames = param.formNames;
              return React.createElement(Cart_Buyer_Item$RenderByOrderType, {
                          data: param.data,
                          refetchCart: refetchCart,
                          formNames: formNames,
                          orderType: param.orderType,
                          availableNum: availableNum,
                          unavailableNum: unavailableNum,
                          deviceType: deviceType,
                          key: formNames.name
                        });
            })));
  return React.createElement(FeatureFlagWrapper.make, {
              children: React.createElement("main", {
                    className: "w-full min-w-[1280px] flex flex-col gap-5 px-[14%] py-20 bg-[#FAFBFC] pb-20"
                  }, React.createElement("h1", {
                        className: "flex ml-5 mb-3 text-3xl font-bold text-enabled-L1"
                      }, "장바구니"), Belt_Array.map(renderParams, (function (param) {
                          var formNames = param.formNames;
                          return React.createElement(Cart_Buyer_Item$RenderByOrderType, {
                                      data: param.data,
                                      refetchCart: refetchCart,
                                      formNames: formNames,
                                      orderType: param.orderType,
                                      availableNum: availableNum,
                                      unavailableNum: unavailableNum,
                                      deviceType: deviceType,
                                      key: formNames.name
                                    });
                        }))),
              fallback: oldUI,
              featureFlag: "HOME_UI_UX"
            });
}

var PC$5 = {
  make: Cart_Buyer_Item$PC
};

function Cart_Buyer_Item$MO(Props) {
  var renderParams = Props.renderParams;
  var refetchCart = Props.refetchCart;
  var availableNum = Props.availableNum;
  var unavailableNum = Props.unavailableNum;
  var deviceType = Props.deviceType;
  return React.createElement("main", {
              className: "w-full flex flex-col gap-3 bg-surface pb-44"
            }, Belt_Array.map(renderParams, (function (param) {
                    var formNames = param.formNames;
                    return React.createElement(Cart_Buyer_Item$RenderByOrderType, {
                                data: param.data,
                                refetchCart: refetchCart,
                                formNames: formNames,
                                orderType: param.orderType,
                                availableNum: availableNum,
                                unavailableNum: unavailableNum,
                                deviceType: deviceType,
                                key: formNames.name
                              });
                  })));
}

var MO$5 = {
  make: Cart_Buyer_Item$MO
};

function Cart_Buyer_Item$Container(Props) {
  var renderParams = Props.renderParams;
  var refetchCart = Props.refetchCart;
  var availableNum = Props.availableNum;
  var unavailableNum = Props.unavailableNum;
  var deviceType = Props.deviceType;
  switch (deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React.createElement(Cart_Buyer_Item$PC, {
                    renderParams: renderParams,
                    refetchCart: refetchCart,
                    availableNum: availableNum,
                    unavailableNum: unavailableNum,
                    deviceType: deviceType
                  });
    case /* Mobile */2 :
        return React.createElement(Cart_Buyer_Item$MO, {
                    renderParams: renderParams,
                    refetchCart: refetchCart,
                    availableNum: availableNum,
                    unavailableNum: unavailableNum,
                    deviceType: deviceType
                  });
    
  }
}

var Container = {
  make: Cart_Buyer_Item$Container
};

function Cart_Buyer_Item(Props) {
  var query = Props.query;
  var deviceType = Props.deviceType;
  var router = Router.useRouter();
  var match = ReactHookForm.useFormContext({
        mode: "onChange"
      }, undefined);
  var setValue = match.setValue;
  var formNames = Cart_Buyer_Form.names(Cart_Buyer_Form.name);
  var queryData = use(query);
  var refetchCart = function (param) {
    router.reload(router.pathname);
  };
  var data = Belt_Array.keepMap(Cart_Buyer_Form.groupBy(queryData.cartItems), Cart_Buyer_Form.map);
  var match$1 = Belt_Array.partition(data, (function (cartItem) {
          return Belt_Option.getWithDefault(cartItem.isCourierAvailable, false);
        }));
  var unCourierAvailableData = match$1[1];
  var courierAvailableData = match$1[0];
  var itemLength = function (d) {
    return Belt_Array.concatMany(Belt_Array.map(Belt_Array.keep(d, (function (item) {
                          return Cart_Buyer_Form.soldable(item.productStatus);
                        })), (function (item) {
                      return Belt_Array.keep(item.productOptions, (function (option) {
                                    return Cart_Buyer_Form.soldable(option.optionStatus);
                                  }));
                    }))).length;
  };
  var availableNum = itemLength(courierAvailableData);
  var unavailableNum = itemLength(unCourierAvailableData);
  var renderParams = [
    {
      orderType: "CourierAvailable",
      data: Cart_Buyer_Form.orderByCartItem(courierAvailableData),
      formNames: Cart_Buyer_Form.names(formNames.courierAvailableItem)
    },
    {
      orderType: "UnCourierAvailable",
      data: Cart_Buyer_Form.orderByCartItem(unCourierAvailableData),
      formNames: Cart_Buyer_Form.names(formNames.unCourierAvailableItem)
    }
  ];
  var match$2 = courierAvailableData.length;
  var defaultOrderType = match$2 !== 0 ? "CourierAvailable" : "UnCourierAvailable";
  var cartIds = Belt_Array.concatMany(Belt_Array.map(data, (function (cartItem) {
              return Belt_Array.map(cartItem.productOptions, (function (option) {
                            return option.cartId;
                          }));
            })));
  React.useEffect((function () {
          setValue(formNames.orderType, Cart_Buyer_Form.orderType_encode(defaultOrderType));
          Cart_Buyer_Form.cartGtmPush(data, cartIds, "view_cart");
        }), []);
  return React.createElement(React.Fragment, undefined, data.length !== 0 ? React.createElement(Cart_Buyer_Item$Container, {
                    renderParams: renderParams,
                    refetchCart: refetchCart,
                    availableNum: availableNum,
                    unavailableNum: unavailableNum,
                    deviceType: deviceType
                  }) : React.createElement(Cart_Buyer_Item$NoItem, {}));
}

var Form;

var Util;

var Hidden;

var make = Cart_Buyer_Item;

export {
  Form ,
  Util ,
  Hidden ,
  Fragment ,
  NoItem ,
  Notice ,
  SelectAll ,
  PlaceHolder$1 as PlaceHolder,
  RenderByOrderType ,
  PC$5 as PC,
  MO$5 as MO,
  Container ,
  make ,
}
/* react Not a pure module */
