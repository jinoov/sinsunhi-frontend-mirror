// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Locale from "../utils/Locale.mjs";
import * as DS_Icon from "./svgs/DS_Icon.mjs";
import * as DataGtm from "../utils/DataGtm.mjs";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as DS_Toast from "./common/container/DS_Toast.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as DatePicker from "./DatePicker.mjs";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as ReactRelay from "react-relay";
import * as DS_InputField from "./common/container/DS_InputField.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import Format from "date-fns/format";
import AddDays from "date-fns/addDays";
import * as RfqShipping_Buyer from "../pages/buyer/rfq/CreateRequest/RfqShipping_Buyer.mjs";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as ReactRadioGroup from "@radix-ui/react-radio-group";
import * as Tradematch_SearchAddressDrawer_Buyer from "./Tradematch_SearchAddressDrawer_Buyer.mjs";
import * as TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql from "../__generated__/TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.mjs";
import * as TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql from "../__generated__/TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.mjs";
import * as TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql from "../__generated__/TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.node, TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.node, TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.node, TradematchBuyAquaApplyStepsBuyer_TradematchDeliveryPolicy_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var TradematchDeliveryPolicy = {
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

var Query = {
  TradematchDeliveryPolicy: TradematchDeliveryPolicy,
  TradematchTerms: undefined
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.node,
              variables: TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    Curry._2(updater, store, TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$1(param) {
  var match = ReactRelay.useMutation(TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      Curry._2(param$1, TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      Curry._2(param$5, store, TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var CreateTradematchDemand_errorCode_decode = TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.errorCode_decode;

var CreateTradematchDemand_errorCode_fromString = TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.errorCode_fromString;

var CreateTradematchDemand_tradematchDemandStatus_decode = TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.tradematchDemandStatus_decode;

var CreateTradematchDemand_tradematchDemandStatus_fromString = TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.tradematchDemandStatus_fromString;

var CreateTradematchDemand_tradematchPackageQuantityUnit_decode = TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.tradematchPackageQuantityUnit_decode;

var CreateTradematchDemand_tradematchPackageQuantityUnit_fromString = TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.tradematchPackageQuantityUnit_fromString;

var CreateTradematchDemand_tradematchProductType_decode = TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.tradematchProductType_decode;

var CreateTradematchDemand_tradematchProductType_fromString = TradematchBuyAquaApplyStepsBuyer_CreateTradematchDemand_Mutation_graphql.Utils.tradematchProductType_fromString;

var CreateTradematchDemand = {
  errorCode_decode: CreateTradematchDemand_errorCode_decode,
  errorCode_fromString: CreateTradematchDemand_errorCode_fromString,
  tradematchDemandStatus_decode: CreateTradematchDemand_tradematchDemandStatus_decode,
  tradematchDemandStatus_fromString: CreateTradematchDemand_tradematchDemandStatus_fromString,
  tradematchPackageQuantityUnit_decode: CreateTradematchDemand_tradematchPackageQuantityUnit_decode,
  tradematchPackageQuantityUnit_fromString: CreateTradematchDemand_tradematchPackageQuantityUnit_fromString,
  tradematchProductType_decode: CreateTradematchDemand_tradematchProductType_decode,
  tradematchProductType_fromString: CreateTradematchDemand_tradematchProductType_fromString,
  Operation: undefined,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$1
};

function commitMutation$1(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.node,
              variables: TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    Curry._2(updater, store, TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$2(param) {
  var match = ReactRelay.useMutation(TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      Curry._2(param$1, TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      Curry._2(param$5, store, TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var PartialUpdateTradematchDemand_errorCode_decode = TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.errorCode_decode;

var PartialUpdateTradematchDemand_errorCode_fromString = TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.errorCode_fromString;

var PartialUpdateTradematchDemand_tradematchDemandStatus_decode = TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.tradematchDemandStatus_decode;

var PartialUpdateTradematchDemand_tradematchDemandStatus_fromString = TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.tradematchDemandStatus_fromString;

var PartialUpdateTradematchDemand_tradematchPackageQuantityUnit_decode = TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.tradematchPackageQuantityUnit_decode;

var PartialUpdateTradematchDemand_tradematchPackageQuantityUnit_fromString = TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.tradematchPackageQuantityUnit_fromString;

var PartialUpdateTradematchDemand_tradematchProductType_decode = TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.tradematchProductType_decode;

var PartialUpdateTradematchDemand_tradematchProductType_fromString = TradematchBuyAquaApplyStepsBuyer_PartialUpdateTradematchDemand_Mutation_graphql.Utils.tradematchProductType_fromString;

var PartialUpdateTradematchDemand = {
  errorCode_decode: PartialUpdateTradematchDemand_errorCode_decode,
  errorCode_fromString: PartialUpdateTradematchDemand_errorCode_fromString,
  tradematchDemandStatus_decode: PartialUpdateTradematchDemand_tradematchDemandStatus_decode,
  tradematchDemandStatus_fromString: PartialUpdateTradematchDemand_tradematchDemandStatus_fromString,
  tradematchPackageQuantityUnit_decode: PartialUpdateTradematchDemand_tradematchPackageQuantityUnit_decode,
  tradematchPackageQuantityUnit_fromString: PartialUpdateTradematchDemand_tradematchPackageQuantityUnit_fromString,
  tradematchProductType_decode: PartialUpdateTradematchDemand_tradematchProductType_decode,
  tradematchProductType_fromString: PartialUpdateTradematchDemand_tradematchProductType_fromString,
  Operation: undefined,
  Types: undefined,
  commitMutation: commitMutation$1,
  use: use$2
};

var Mutation = {
  CreateTradematchDemand: CreateTradematchDemand,
  PartialUpdateTradematchDemand: PartialUpdateTradematchDemand,
  UpdateTermAgreement: undefined
};

function Tradematch_Buy_Aqua_Apply_Steps_Buyer$Title(props) {
  var subText = props.subText;
  return React.createElement("div", {
              className: "px-5 py-9"
            }, Belt_Option.mapWithDefault(props.label, null, (function (x) {
                    return x;
                  })), React.createElement("h2", {
                  className: "text-2xl font-bold whitespace-pre-line"
                }, props.text), subText !== undefined ? React.createElement("h3", {
                    className: "text-gray-600 whitespace-pre-line text-sm mt-3"
                  }, subText) : null);
}

var Title = {
  make: Tradematch_Buy_Aqua_Apply_Steps_Buyer$Title
};

function Tradematch_Buy_Aqua_Apply_Steps_Buyer$FloatingButton(props) {
  var disabled = props.disabled;
  var disabled$1 = disabled !== undefined ? disabled : false;
  var match = CustomHooks.FarmTradematchStep.use(undefined);
  var buttonText = match.isLast ? "견적 신청 완료" : "다음";
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "fixed bottom-0 max-w-3xl w-full gradient-cta-t tab-highlight-color"
                }, React.createElement("div", {
                      className: "w-full max-w-[768px] px-4 py-5 mx-auto"
                    }, React.createElement("button", {
                          className: Cx.cx([
                                "h-14 w-full rounded-xl bg-primary text-white text-lg font-bold",
                                "disabled:bg-disabled-L2 disabled:text-inverted disabled:text-opacity-50"
                              ]),
                          disabled: disabled$1,
                          onClick: props.handleClickButton
                        }, buttonText))), React.createElement("div", {
                  className: "h-24"
                }));
}

var FloatingButton = {
  make: Tradematch_Buy_Aqua_Apply_Steps_Buyer$FloatingButton
};

function Tradematch_Buy_Aqua_Apply_Steps_Buyer$CalendarListitem(props) {
  var handleChangeDate = props.handleChangeDate;
  return React.createElement("li", {
              className: "flex items-center min-h-[56px] mx-5 cursor-pointer border-b-2 border-b-border-disabled"
            }, React.createElement("div", {
                  className: "flex flex-col justify-between truncate"
                }, React.createElement("span", {
                      className: "block text-base truncate"
                    }, props.leftText)), React.createElement("div", {
                  className: "ml-auto pl-2"
                }, React.createElement(DatePicker.make, {
                      id: "date",
                      onChange: (function (e) {
                          var newDate = e.detail.valueAsDate;
                          handleChangeDate(function (param) {
                                return newDate;
                              });
                        }),
                      date: props.currentDate,
                      maxDate: Format(props.maxDate, "yyyy-MM-dd"),
                      minDate: Format(props.minDate, "yyyy-MM-dd"),
                      firstDayOfWeek: 0,
                      isDateDisabled: (function (e) {
                          if (e.getDay() === 0) {
                            return true;
                          } else {
                            return e.getDay() === 6;
                          }
                        }),
                      onFocus: (function (param) {
                          Belt_Option.forEach(Belt_Option.flatMap(Caml_option.nullable_to_opt(document.getElementById("date")), Webapi__Dom__Element.asHtmlElement), (function (inputEl$p) {
                                  inputEl$p.blur();
                                }));
                        })
                    })));
}

var CalendarListitem = {
  make: Tradematch_Buy_Aqua_Apply_Steps_Buyer$CalendarListitem
};

function fromString(str) {
  if (str === "") {
    return ;
  } else if (str === "국산") {
    return /* Domestic */0;
  } else {
    return /* Imported */{
            _0: str.replace("수입산-", "")
          };
  }
}

function toString(origin) {
  if (origin) {
    return "수입산-" + origin._0 + "";
  } else {
    return "국산";
  }
}

function Tradematch_Buy_Aqua_Apply_Steps_Buyer$Origin(props) {
  var demandId = props.demandId;
  var defaultOrigin = props.defaultOrigin;
  var productId = props.productId;
  var connectionId = props.connectionId;
  var match = CustomHooks.AquaTradematchStep.use(undefined);
  var toNext = match.router.toNext;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = use$1(undefined);
  var createMutate = match$2[0];
  var match$3 = use$2(undefined);
  var updateMutate = match$3[0];
  var match$4 = React.useState(function () {
        return Belt_Option.flatMap(defaultOrigin, fromString);
      });
  var setOrigin = match$4[1];
  var origin = match$4[0];
  var toastError = function (str) {
    addToast(DS_Toast.getToastComponent(str, "error"), {
          appearance: "error"
        });
  };
  var pushEvent = function (demandId, origin) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_intention_seafood_origin",
              tradematch_demand_id: demandId,
              origin: origin
            }));
  };
  var handleClickButton = function (param) {
    if (demandId !== undefined) {
      var tmp = {};
      var tmp$1 = Belt_Option.map(origin, toString);
      if (tmp$1 !== undefined) {
        tmp.productOrigin = tmp$1;
      }
      Curry.app(updateMutate, [
            (function (param) {
                toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
              }),
            (function (param, param$1) {
                var partialUpdateTradematchDemand = param.partialUpdateTradematchDemand;
                if (typeof partialUpdateTradematchDemand === "object" && partialUpdateTradematchDemand.NAME === "TradematchDemandMutationPayload") {
                  Belt_Option.map(partialUpdateTradematchDemand.VAL.result, (function (demand) {
                          pushEvent(demand.id, demand.productOrigin);
                        }));
                  return Curry._1(toNext, undefined);
                } else {
                  return toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
                }
              }),
            undefined,
            undefined,
            undefined,
            undefined,
            {
              id: demandId,
              input: tmp
            },
            undefined,
            undefined
          ]);
      return ;
    }
    var tmp$2 = {
      productId: productId,
      productType: "AQUATIC"
    };
    var tmp$3 = Belt_Option.map(origin, toString);
    if (tmp$3 !== undefined) {
      tmp$2.productOrigin = tmp$3;
    }
    Curry.app(createMutate, [
          (function (param) {
              toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
            }),
          (function (param, param$1) {
              var createTradematchDemand = param.createTradematchDemand;
              if (typeof createTradematchDemand === "object" && createTradematchDemand.NAME === "TradematchDemandMutationPayload") {
                Belt_Option.map(createTradematchDemand.VAL.result, (function (demand) {
                        pushEvent(demand.id, demand.productOrigin);
                      }));
                return Curry._1(toNext, undefined);
              } else {
                return toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
              }
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          {
            connections: [connectionId],
            input: tmp$2
          },
          undefined,
          undefined
        ]);
  };
  return React.createElement("div", undefined, React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$Title, {
                  text: "원하시는 원산지를\n선택해주세요."
                }), React.createElement("form", undefined, React.createElement(ReactRadioGroup.Root, {
                      children: null,
                      value: origin !== undefined ? (
                          origin ? "imported" : "domestic"
                        ) : "",
                      onValueChange: (function (v) {
                          var origin;
                          switch (v) {
                            case "domestic" :
                                origin = /* Domestic */0;
                                break;
                            case "imported" :
                                origin = /* Imported */{
                                  _0: ""
                                };
                                break;
                            default:
                              origin = undefined;
                          }
                          setOrigin(function (param) {
                                return origin;
                              });
                        }),
                      name: "tradematch-origin",
                      className: "flex flex-col"
                    }, React.createElement("div", {
                          className: "flex items-center justify-between px-5"
                        }, React.createElement("label", {
                              htmlFor: "domestic"
                            }, "국산"), React.createElement(ReactRadioGroup.Item, {
                              children: React.createElement(ReactRadioGroup.Indicator, {
                                    className: Cx.cx([
                                          "relative flex items-center justify-center h-full w-full ",
                                          "after:block after:content-[''] after:rounded-full after:border-green-500 after:border-[7px] after:bg-transparent after:min-w-[22px] after:h-[22px]"
                                        ])
                                  }),
                              value: "domestic",
                              className: Cx.cx([
                                    "relative flex items-center justify-center ml-[25px] min-w-[22px] min-h-[22px] max-w-[22px] max-h-[22px] border-[1.5px] rounded-full border-enabled-L4 ",
                                    "after:content-[''] after:w-[7px] after:h-[7px] after:bg-enabled-L4 after:bg-opacity-30 after:rounded-full after:absolute "
                                  ]),
                              id: "domestic"
                            })), React.createElement("div", {
                          className: "flex items-center justify-between px-5 mt-10"
                        }, React.createElement("label", {
                              htmlFor: "imported"
                            }, "수입산"), React.createElement(ReactRadioGroup.Item, {
                              children: React.createElement(ReactRadioGroup.Indicator, {
                                    className: Cx.cx([
                                          "relative flex items-center justify-center h-full w-full ",
                                          "after:block after:content-[''] after:rounded-full after:border-green-500 after:border-[7px] after:bg-transparent after:min-w-[22px] after:h-[22px]"
                                        ])
                                  }),
                              value: "imported",
                              className: Cx.cx([
                                    "relative flex items-center justify-center ml-[25px] min-w-[22px] min-h-[22px] max-w-[22px] max-h-[22px] border-[1.5px] rounded-full border-enabled-L4 ",
                                    "after:content-[''] after:w-[7px] after:h-[7px] after:bg-enabled-L4 after:bg-opacity-30 after:rounded-full after:absolute "
                                  ]),
                              id: "imported"
                            }))), origin !== undefined && origin ? React.createElement(React.Fragment, undefined, React.createElement("div", {
                            className: "px-5 text-gray-500 mt-5 text-sm"
                          }, "희망국가"), React.createElement(DS_InputField.Line1.Root.make, {
                            children: React.createElement(DS_InputField.Line1.Input.make, {
                                  type_: "text",
                                  placeholder: "희망 국가를 입력해 주세요",
                                  value: origin._0,
                                  onChange: (function (e) {
                                      var value = e.target.value;
                                      setOrigin(function (param) {
                                            return /* Imported */{
                                                    _0: value
                                                  };
                                          });
                                    }),
                                  autoFocus: true,
                                  inputMode: "text",
                                  isClear: true,
                                  fnClear: (function (param) {
                                      setOrigin(function (param) {
                                            return /* Imported */{
                                                    _0: ""
                                                  };
                                          });
                                    }),
                                  maxLength: 50
                                }),
                            className: "mt-4"
                          })) : null, React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$FloatingButton, {
                      handleClickButton: handleClickButton,
                      disabled: match$2[1] || match$3[1] || (
                        origin !== undefined ? (
                            origin ? origin._0 === "" : false
                          ) : true
                      )
                    })));
}

var Origin = {
  fromString: fromString,
  toString: toString,
  make: Tradematch_Buy_Aqua_Apply_Steps_Buyer$Origin
};

function convertNumberInputValue(value) {
  return value.replace(/[^0-9]/g, "").replace(/^[0]/g, "");
}

function Tradematch_Buy_Aqua_Apply_Steps_Buyer$Weight(props) {
  var defaultWeight = props.defaultWeight;
  var demandId = props.demandId;
  var match = CustomHooks.AquaTradematchStep.use(undefined);
  var toNext = match.router.toNext;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = React.useState(function () {
        return Belt_Option.getWithDefault(defaultWeight, "");
      });
  var setWeight = match$2[1];
  var weight = match$2[0];
  var match$3 = React.useState(function () {
        
      });
  var setInputError = match$3[1];
  var match$4 = use$2(undefined);
  var updateMutate = match$4[0];
  var toastError = function (str) {
    addToast(DS_Toast.getToastComponent(str, "error"), {
          appearance: "error"
        });
  };
  var pushEvent = function (demandId, weight) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_intention_seafood_quantity",
              tradematch_demand_id: demandId,
              quantity_per_trade: weight
            }));
  };
  var handleClickButton = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  pushEvent(demandId, weight);
                  var weight$p = Belt_Int.fromString(weight);
                  if (weight$p !== undefined) {
                    Curry.app(updateMutate, [
                          (function (param) {
                              toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
                            }),
                          (function (param, param$1) {
                              var partialUpdateTradematchDemand = param.partialUpdateTradematchDemand;
                              if (typeof partialUpdateTradematchDemand === "object" && partialUpdateTradematchDemand.NAME === "TradematchDemandMutationPayload") {
                                return Curry._1(toNext, undefined);
                              } else {
                                return toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
                              }
                            }),
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          {
                            id: demandId,
                            input: {
                              numberOfPackagesPerTrade: weight$p,
                              packageQuantityUnit: "KG",
                              quantityPerPackage: 1
                            }
                          },
                          undefined,
                          undefined
                        ]);
                  } else {
                    setInputError(function (param) {
                          return "숫자를 입력해 주세요.";
                        });
                  }
                }), param);
  };
  var func = Locale.Float.show;
  return React.createElement("div", undefined, React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$Title, {
                  text: "총 구매 중량을\n입력해주세요."
                }), React.createElement(DS_InputField.Line1.Root.make, {
                  children: React.createElement(DS_InputField.Line1.Input.make, {
                        type_: "text",
                        placeholder: "총 구매 중량",
                        value: Belt_Option.getWithDefault(Belt_Option.map(Belt_Float.fromString(weight), (function (eta) {
                                    return Curry._3(func, undefined, eta, 0);
                                  })), ""),
                        onChange: (function (e) {
                            var value = e.target.value;
                            setWeight(function (param) {
                                  return convertNumberInputValue(value);
                                });
                            setInputError(function (param) {
                                  
                                });
                          }),
                        autoFocus: true,
                        inputMode: "decimal",
                        isClear: true,
                        fnClear: (function (param) {
                            setWeight(function (param) {
                                  return "";
                                });
                          }),
                        unit: "Kg",
                        errorMessage: Caml_option.some(match$3[0]),
                        maxLength: 11
                      }),
                  className: "mt-4"
                }), React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$FloatingButton, {
                  handleClickButton: handleClickButton,
                  disabled: weight === "" || match$4[1]
                }));
}

var Weight = {
  convertNumberInputValue: convertNumberInputValue,
  make: Tradematch_Buy_Aqua_Apply_Steps_Buyer$Weight
};

function convertNumberInputValue$1(value) {
  return value.replace(/[^0-9]/g, "").replace(/^[0]/g, "");
}

function Tradematch_Buy_Aqua_Apply_Steps_Buyer$Price(props) {
  var defaultPrice = props.defaultPrice;
  var currentWeight = props.currentWeight;
  var demandId = props.demandId;
  var match = CustomHooks.AquaTradematchStep.use(undefined);
  var toNext = match.router.toNext;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = React.useState(function () {
        return Belt_Option.getWithDefault(defaultPrice, "");
      });
  var setPrice = match$2[1];
  var price = match$2[0];
  var match$3 = React.useState(function () {
        
      });
  var setInputError = match$3[1];
  var match$4 = use$2(undefined);
  var updateMutate = match$4[0];
  var totalPrice = Belt_Option.mapWithDefault(Belt_Float.fromString(price), 0, (function (f) {
          return f * currentWeight;
        }));
  var toastError = function (str) {
    addToast(DS_Toast.getToastComponent(str, "error"), {
          appearance: "error"
        });
  };
  var pushEvent = function (demandId, price) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_intention_seafood_beforeprice",
              tradematch_demand_id: demandId,
              beforeprice_per_trade: price
            }));
  };
  var handleClickButton = function (param) {
    pushEvent(demandId, price);
    var price$p = Belt_Int.fromString(price);
    if (price$p !== undefined) {
      Curry.app(updateMutate, [
            (function (param) {
                toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
              }),
            (function (param, param$1) {
                var partialUpdateTradematchDemand = param.partialUpdateTradematchDemand;
                if (typeof partialUpdateTradematchDemand === "object" && partialUpdateTradematchDemand.NAME === "TradematchDemandMutationPayload") {
                  return Curry._1(toNext, undefined);
                } else {
                  return toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
                }
              }),
            undefined,
            undefined,
            undefined,
            undefined,
            {
              id: demandId,
              input: {
                wantedPricePerPackage: price$p
              }
            },
            undefined,
            undefined
          ]);
      return ;
    } else {
      return setInputError(function (param) {
                  return "숫자를 입력해 주세요.";
                });
    }
  };
  var func = Locale.Float.show;
  return React.createElement("div", undefined, React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$Title, {
                  text: "기존에 kg당\n얼마에 구매하셨어요?"
                }), React.createElement(DS_InputField.Line1.Root.make, {
                  children: React.createElement(DS_InputField.Line1.Input.make, {
                        type_: "text",
                        placeholder: "기존 구매 단가",
                        value: Belt_Option.getWithDefault(Belt_Option.map(Belt_Float.fromString(price), (function (eta) {
                                    return Curry._3(func, undefined, eta, 0);
                                  })), ""),
                        onChange: (function (e) {
                            var value = e.target.value;
                            setPrice(function (param) {
                                  return convertNumberInputValue$1(value);
                                });
                            setInputError(function (param) {
                                  
                                });
                          }),
                        autoFocus: true,
                        inputMode: "decimal",
                        isClear: true,
                        fnClear: (function (param) {
                            setPrice(function (param) {
                                  return "";
                                });
                          }),
                        unit: "원/Kg",
                        errorMessage: Caml_option.some(match$3[0]),
                        maxLength: 11
                      }),
                  className: "mt-4"
                }), React.createElement("div", {
                  className: "mt-9 mx-5"
                }, React.createElement("div", {
                      className: "relative flex justify-between items-center border-border-default-L2 px-4 h-[72px] border-[1px] border-solid rounded-lg mb-3"
                    }, React.createElement("div", {
                          className: "w-[26%] mr-[30px]"
                        }, React.createElement("span", {
                              className: "break-all font-bold"
                            }, "총 " + Locale.Float.show(undefined, currentWeight, 0) + "kg")), React.createElement("div", {
                          className: "w-[46%] flex justify-end"
                        }, React.createElement("span", {
                              className: "break-all font-bold"
                            }, "" + Locale.Float.show(undefined, totalPrice, 0) + "원")))), React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$FloatingButton, {
                  handleClickButton: handleClickButton,
                  disabled: price === "" || match$4[1]
                }));
}

var Price = {
  convertNumberInputValue: convertNumberInputValue$1,
  make: Tradematch_Buy_Aqua_Apply_Steps_Buyer$Price
};

function status_encode(v) {
  switch (v) {
    case /* ROOM */0 :
        return "상온";
    case /* COLD */1 :
        return "냉장";
    case /* FROZEN */2 :
        return "냉동";
    
  }
}

function status_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("상온" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ROOM */0
          };
  } else if ("냉장" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* COLD */1
          };
  } else if ("냉동" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* FROZEN */2
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function toString$1(opt) {
  return Belt_Option.getWithDefault(Js_json.decodeString(status_encode(opt)), "");
}

function fromString$1(str) {
  if (str === "상온") {
    return /* ROOM */0;
  } else if (str === "냉장") {
    return /* COLD */1;
  } else if (str === "냉동") {
    return /* FROZEN */2;
  } else {
    return ;
  }
}

function Tradematch_Buy_Aqua_Apply_Steps_Buyer$StorageMethod(props) {
  var defaultStorageMethod = props.defaultStorageMethod;
  var demandId = props.demandId;
  var match = CustomHooks.AquaTradematchStep.use(undefined);
  var toNext = match.router.toNext;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = use$2(undefined);
  var updateMutate = match$2[0];
  var match$3 = React.useState(function () {
        return defaultStorageMethod;
      });
  var setStatus = match$3[1];
  var status = match$3[0];
  var toastError = function (str) {
    addToast(DS_Toast.getToastComponent(str, "error"), {
          appearance: "error"
        });
  };
  var pushEvent = function (demandId, storageMehtod) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_intention_seafood_storage",
              tradematch_demand_id: demandId,
              storage_method: storageMehtod
            }));
  };
  var handleClickButton = function (param) {
    pushEvent(demandId, Belt_Option.mapWithDefault(status, "", toString$1));
    if (status !== undefined) {
      Curry.app(updateMutate, [
            (function (param) {
                toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
              }),
            (function (param, param$1) {
                var partialUpdateTradematchDemand = param.partialUpdateTradematchDemand;
                if (typeof partialUpdateTradematchDemand === "object" && partialUpdateTradematchDemand.NAME === "TradematchDemandMutationPayload") {
                  return Curry._1(toNext, undefined);
                } else {
                  return toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
                }
              }),
            undefined,
            undefined,
            undefined,
            undefined,
            {
              id: demandId,
              input: {
                productStorageMethod: toString$1(status)
              }
            },
            undefined,
            undefined
          ]);
      return ;
    }
    
  };
  return React.createElement("div", undefined, React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$Title, {
                  text: "원하시는 보관상태를\n선택해주세요"
                }), React.createElement("form", undefined, React.createElement(ReactRadioGroup.Root, {
                      children: Belt_Array.map([
                            /* ROOM */0,
                            /* COLD */1,
                            /* FROZEN */2
                          ], (function (opt) {
                              return React.createElement("li", {
                                          key: toString$1(opt),
                                          className: "flex w-full items-center h-[60px]"
                                        }, React.createElement("label", {
                                              className: "flex items-center justify-between w-full h-full px-5 cursor-pointer"
                                            }, React.createElement("div", {
                                                  className: "text-text-L1"
                                                }, toString$1(opt)), React.createElement(ReactRadioGroup.Item, {
                                                  children: React.createElement(ReactRadioGroup.Indicator, {
                                                        className: Cx.cx([
                                                              "relative flex items-center justify-center h-full w-full ",
                                                              "after:block after:content-[''] after:rounded-full after:border-green-500 after:border-[7px] after:bg-transparent after:min-w-[22px] after:h-[22px]"
                                                            ])
                                                      }),
                                                  value: toString$1(opt),
                                                  className: Cx.cx([
                                                        "relative flex items-center justify-center ml-[25px] min-w-[22px] min-h-[22px] max-w-[22px] max-h-[22px] border-[1.5px] rounded-full border-enabled-L4 ",
                                                        "after:content-[''] after:w-[7px] after:h-[7px] after:bg-enabled-L4 after:bg-opacity-30 after:rounded-full after:absolute "
                                                      ]),
                                                  id: toString$1(opt)
                                                })));
                            })),
                      value: status !== undefined ? toString$1(status) : "",
                      onValueChange: (function (v) {
                          var status$p = status_decode(v);
                          var status;
                          status = status$p.TAG === /* Ok */0 ? status$p._0 : undefined;
                          setStatus(function (param) {
                                return status;
                              });
                        }),
                      name: "tradematch-temperature"
                    }), React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$FloatingButton, {
                      handleClickButton: handleClickButton,
                      disabled: Belt_Option.isNone(status) || match$2[1]
                    })));
}

var StorageMethod = {
  status_encode: status_encode,
  status_decode: status_decode,
  toString: toString$1,
  fromString: fromString$1,
  make: Tradematch_Buy_Aqua_Apply_Steps_Buyer$StorageMethod
};

function cycle_encode(v) {
  switch (v) {
    case /* EVERYDAY */0 :
        return "매일";
    case /* WEEK35 */1 :
        return "주 3~5회";
    case /* WEEK12 */2 :
        return "주 1~2회";
    case /* MONTH12 */3 :
        return "월 1~2회";
    case /* ONCE */4 :
        return "일회성 주문";
    
  }
}

function cycle_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("매일" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* EVERYDAY */0
          };
  } else if ("주 3~5회" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* WEEK35 */1
          };
  } else if ("주 1~2회" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* WEEK12 */2
          };
  } else if ("월 1~2회" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* MONTH12 */3
          };
  } else if ("일회성 주문" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ONCE */4
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function toString$2(opt) {
  return Belt_Option.getWithDefault(Js_json.decodeString(cycle_encode(opt)), "");
}

function fromString$2(str) {
  if (str === "매일") {
    return /* EVERYDAY */0;
  } else if (str === "주 3~5회") {
    return /* WEEK35 */1;
  } else if (str === "주 1~2회") {
    return /* WEEK12 */2;
  } else if (str === "월 1~2회") {
    return /* MONTH12 */3;
  } else if (str === "일회성 주문") {
    return /* ONCE */4;
  } else {
    return ;
  }
}

function Tradematch_Buy_Aqua_Apply_Steps_Buyer$Cycle(props) {
  var defaultCycle = props.defaultCycle;
  var demandId = props.demandId;
  var match = CustomHooks.AquaTradematchStep.use(undefined);
  var toNext = match.router.toNext;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = use$2(undefined);
  var updateMutate = match$2[0];
  var match$3 = React.useState(function () {
        return defaultCycle;
      });
  var setCycle = match$3[1];
  var cycle = match$3[0];
  var toastError = function (str) {
    addToast(DS_Toast.getToastComponent(str, "error"), {
          appearance: "error"
        });
  };
  var pushEvent = function (demandId, cycle) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_intention_seafood_cycle",
              tradematch_demand_id: demandId,
              trade_cycle: cycle
            }));
  };
  var handleClickButton = function (param) {
    pushEvent(demandId, Belt_Option.mapWithDefault(cycle, "", toString$2));
    if (cycle !== undefined) {
      Curry.app(updateMutate, [
            (function (param) {
                toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
              }),
            (function (param, param$1) {
                var partialUpdateTradematchDemand = param.partialUpdateTradematchDemand;
                if (typeof partialUpdateTradematchDemand === "object" && partialUpdateTradematchDemand.NAME === "TradematchDemandMutationPayload") {
                  return Curry._1(toNext, undefined);
                } else {
                  return toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
                }
              }),
            undefined,
            undefined,
            undefined,
            undefined,
            {
              id: demandId,
              input: {
                tradeCycle: toString$2(cycle)
              }
            },
            undefined,
            undefined
          ]);
      return ;
    }
    
  };
  return React.createElement("div", undefined, React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$Title, {
                  text: "원하시는 납품주기를\n선택해주세요"
                }), React.createElement("form", undefined, React.createElement(ReactRadioGroup.Root, {
                      children: Belt_Array.map([
                            /* EVERYDAY */0,
                            /* WEEK35 */1,
                            /* WEEK12 */2,
                            /* MONTH12 */3,
                            /* ONCE */4
                          ], (function (opt) {
                              return React.createElement("li", {
                                          key: toString$2(opt),
                                          className: "flex w-full items-center h-[60px]"
                                        }, React.createElement("label", {
                                              className: "flex items-center justify-between w-full h-full px-5 cursor-pointer"
                                            }, React.createElement("div", {
                                                  className: "text-text-L1"
                                                }, toString$2(opt)), React.createElement(ReactRadioGroup.Item, {
                                                  children: React.createElement(ReactRadioGroup.Indicator, {
                                                        className: Cx.cx([
                                                              "relative flex items-center justify-center h-full w-full ",
                                                              "after:block after:content-[''] after:rounded-full after:border-green-500 after:border-[7px] after:bg-transparent after:min-w-[22px] after:h-[22px]"
                                                            ])
                                                      }),
                                                  value: toString$2(opt),
                                                  className: Cx.cx([
                                                        "relative flex items-center justify-center ml-[25px] min-w-[22px] min-h-[22px] max-w-[22px] max-h-[22px] border-[1.5px] rounded-full border-enabled-L4 ",
                                                        "after:content-[''] after:w-[7px] after:h-[7px] after:bg-enabled-L4 after:bg-opacity-30 after:rounded-full after:absolute "
                                                      ]),
                                                  id: toString$2(opt)
                                                })));
                            })),
                      value: cycle !== undefined ? toString$2(cycle) : "",
                      onValueChange: (function (v) {
                          var cycle$p = cycle_decode(v);
                          var cycle;
                          cycle = cycle$p.TAG === /* Ok */0 ? cycle$p._0 : undefined;
                          setCycle(function (param) {
                                return cycle;
                              });
                        }),
                      name: "tradematch-cycle"
                    }), React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$FloatingButton, {
                      handleClickButton: handleClickButton,
                      disabled: Belt_Option.isNone(cycle) || match$2[1]
                    })));
}

var Cycle = {
  cycle_encode: cycle_encode,
  cycle_decode: cycle_decode,
  toString: toString$2,
  fromString: fromString$2,
  make: Tradematch_Buy_Aqua_Apply_Steps_Buyer$Cycle
};

function Tradematch_Buy_Aqua_Apply_Steps_Buyer$Requirement(props) {
  var defaultRequirements = props.defaultRequirements;
  var defaultProcess = props.defaultProcess;
  var defaultSize = props.defaultSize;
  var demandId = props.demandId;
  var match = CustomHooks.AquaTradematchStep.use(undefined);
  var toNext = match.router.toNext;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = React.useState(function () {
        return Belt_Option.getWithDefault(defaultSize, "");
      });
  var setSize = match$2[1];
  var size = match$2[0];
  var match$3 = React.useState(function () {
        return Belt_Option.getWithDefault(defaultProcess, "");
      });
  var setProcess = match$3[1];
  var $$process = match$3[0];
  var match$4 = React.useState(function () {
        return Belt_Option.getWithDefault(defaultRequirements, "");
      });
  var setRequirements = match$4[1];
  var requirements = match$4[0];
  var match$5 = use$2(undefined);
  var updateMutate = match$5[0];
  var toastError = function (str) {
    addToast(DS_Toast.getToastComponent(str, "error"), {
          appearance: "error"
        });
  };
  var pushEvent = function (demandId, size, $$process, requirements) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_intention_seafood_requirements",
              tradematch_demand_id: demandId,
              product_size: size,
              product_process: $$process,
              product_requirements: requirements
            }));
  };
  var handleClickButton = function (param) {
    pushEvent(demandId, size, $$process, requirements);
    Curry.app(updateMutate, [
          (function (param) {
              toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
            }),
          (function (param, param$1) {
              var partialUpdateTradematchDemand = param.partialUpdateTradematchDemand;
              if (typeof partialUpdateTradematchDemand === "object" && partialUpdateTradematchDemand.NAME === "TradematchDemandMutationPayload") {
                return Curry._1(toNext, undefined);
              } else {
                return toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
              }
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          {
            id: demandId,
            input: {
              productProcess: $$process,
              productRequirements: requirements,
              productSize: size
            }
          },
          undefined,
          undefined
        ]);
  };
  return React.createElement("div", undefined, React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$Title, {
                  text: "기타 요청사항을\n남겨주세요"
                }), React.createElement("div", undefined, React.createElement(DS_InputField.Line1.Root.make, {
                      children: null,
                      className: "mt-4"
                    }, React.createElement("div", {
                          className: "mb-2 text-sm"
                        }, "사이즈"), React.createElement(DS_InputField.Line1.Input.make, {
                          type_: "text",
                          placeholder: "고등어 20kg 30미 내외",
                          value: size,
                          onChange: (function (e) {
                              var value = e.target.value;
                              setSize(function (param) {
                                    return value;
                                  });
                            }),
                          autoFocus: true,
                          maxLength: 1000
                        })), React.createElement(DS_InputField.Line1.Root.make, {
                      children: null,
                      className: "mt-4"
                    }, React.createElement("div", {
                          className: "mb-2 text-sm"
                        }, "상품 가공"), React.createElement(DS_InputField.Line1.Input.make, {
                          type_: "text",
                          placeholder: "절단, 건조 등",
                          value: $$process,
                          onChange: (function (e) {
                              var value = e.target.value;
                              setProcess(function (param) {
                                    return value;
                                  });
                            }),
                          maxLength: 1000
                        })), React.createElement(DS_InputField.Line1.Root.make, {
                      children: null,
                      className: "mt-4"
                    }, React.createElement("div", {
                          className: "mb-2 text-sm"
                        }, "기타"), React.createElement(DS_InputField.Line1.Input.make, {
                          type_: "text",
                          placeholder: "선별수준 등",
                          value: requirements,
                          onChange: (function (e) {
                              var value = e.target.value;
                              setRequirements(function (param) {
                                    return value;
                                  });
                            }),
                          maxLength: 1000
                        }))), React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$FloatingButton, {
                  handleClickButton: handleClickButton,
                  disabled: match$5[1]
                }));
}

var Requirement = {
  make: Tradematch_Buy_Aqua_Apply_Steps_Buyer$Requirement
};

function Tradematch_Buy_Aqua_Apply_Steps_Buyer$Shipping(props) {
  var demandId = props.demandId;
  var match = use(undefined, undefined, undefined, undefined, undefined);
  var tradematchDeliveryPolicy = match.tradematchDeliveryPolicy;
  var match$1 = Curry._5(RfqShipping_Buyer.Query.RfqTerms.use, undefined, undefined, undefined, undefined, undefined);
  var match$2 = use$2(undefined);
  var updateMutate = match$2[0];
  var match$3 = Curry._1(RfqShipping_Buyer.Mutation.UpdateTermAgreement.use, undefined);
  var updateTermAgreement = match$3[0];
  var match$4 = CustomHooks.AquaTradematchStep.use(undefined);
  var toNext = match$4.router.toNext;
  var match$5 = ReactToastNotifications.useToasts();
  var addToast = match$5.addToast;
  var isTermAgree = Belt_Array.keep(Belt_Array.map(match$1.terms.edges, (function (x) {
              return x.node.agreement;
            })), (function (x) {
          return x === "rfq";
        })).length !== 0;
  var match$6 = React.useState(function () {
        return isTermAgree;
      });
  var setIsAgreedPrivacyPolicy = match$6[1];
  var isAgreedPrivacyPolicy = match$6[0];
  var match$7 = React.useState(function () {
        
      });
  var selectedDeliveryDate = match$7[0];
  var toastError = function (str) {
    addToast(DS_Toast.getToastComponent(str, "error"), {
          appearance: "error"
        });
  };
  var pushEvent = function (demandId) {
    DataGtm.push(DataGtm.mergeUserIdUnsafe({
              event: "click_intention_seafood_address",
              tradematch_demand_id: demandId
            }));
  };
  var minDateString = tradematchDeliveryPolicy !== undefined ? tradematchDeliveryPolicy.acceptableDeliveryDate : Format(AddDays(new Date(), 7), "yyyy-MM-dd");
  var minDate = new Date(minDateString);
  var maxDate = AddDays(minDate, 30);
  var deliveryAddressDetailInput = React.useRef(null);
  var match$8 = React.useState(function () {
        return false;
      });
  var setIsAddressDrawerShow = match$8[1];
  var match$9 = React.useState(function () {
        return "";
      });
  var setDeliveryRegion = match$9[1];
  var deliveryRegion = match$9[0];
  var match$10 = React.useState(function () {
        return "";
      });
  var setDeliveryAddress = match$10[1];
  var deliveryAddress = match$10[0];
  var match$11 = React.useState(function () {
        return "";
      });
  var setDeliveryAddressDetail = match$11[1];
  var deliveryAddressDetail = match$11[0];
  var match$12 = React.useState(function () {
        return "";
      });
  var setDeliveryAddressZipcode = match$12[1];
  var deliveryAddressZipcode = match$12[0];
  var toggleDrawer = function (param) {
    setIsAddressDrawerShow(function (prev) {
          return !prev;
        });
  };
  var onCompleteAddressDrawer = function (data) {
    var zonecode = data.zonecode;
    var autoRoadAddress = data.autoRoadAddress;
    var address = data.address;
    var deliveryAddress = data.addressType === "R" || autoRoadAddress.length <= 0 ? address : autoRoadAddress;
    var deliveryRegion = ("" + data.sido + " " + data.sigungu + " " + data.bname + "").replace(/[ ]{2,}/, " ").trim();
    setDeliveryRegion(function (param) {
          return deliveryRegion;
        });
    setDeliveryAddress(function (param) {
          return deliveryAddress;
        });
    setDeliveryAddressZipcode(function (param) {
          return zonecode;
        });
    setIsAddressDrawerShow(function (prev) {
          return !prev;
        });
  };
  var updateDemand = function (param) {
    var deliveryDate = Belt_Option.mapWithDefault(selectedDeliveryDate, undefined, (function (date) {
            return date.toISOString();
          }));
    var tmp = {
      deliveryAddress1: deliveryAddress,
      deliveryAddress2: deliveryAddressDetail.trim(),
      deliveryRegion: deliveryRegion,
      deliveryZipCode: deliveryAddressZipcode,
      status: "REQUESTED"
    };
    if (deliveryDate !== undefined) {
      tmp.deliveryDate = deliveryDate;
    }
    Curry.app(updateMutate, [
          (function (err) {
              toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
            }),
          (function (param, param$1) {
              var variant = param.partialUpdateTradematchDemand.NAME;
              if (variant === "UnselectedUnionMember" || variant === "Error") {
                toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
              } else {
                Curry._1(toNext, undefined);
              }
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          {
            id: demandId,
            input: tmp
          },
          undefined,
          undefined
        ]);
  };
  var handleClickButton = function (param) {
    pushEvent(demandId);
    if (isTermAgree) {
      return updateDemand(undefined);
    } else {
      Curry.app(updateTermAgreement, [
            (function (param) {
                toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
              }),
            (function (param, param$1) {
                var variant = param.createTerm.NAME;
                if (variant === "UnselectedUnionMember" || variant === "Error") {
                  return toastError("요청 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.");
                } else {
                  return updateDemand(undefined);
                }
              }),
            undefined,
            undefined,
            undefined,
            undefined,
            {
              agreement: "rfq"
            },
            undefined,
            undefined
          ]);
      return ;
    }
  };
  var match$13 = deliveryRegion !== "";
  var match$14 = deliveryAddress !== "";
  var match$15 = deliveryAddressZipcode !== "";
  var isValidItems = selectedDeliveryDate !== undefined && match$13 && match$14 && match$15 && isAgreedPrivacyPolicy ? true : false;
  React.useEffect((function () {
          setDeliveryAddressDetail(function (param) {
                return "";
              });
          Belt_Option.forEach(Caml_option.nullable_to_opt(deliveryAddressDetailInput.current), (function (input) {
                  input.focus();
                }));
        }), [deliveryAddress]);
  return React.createElement(React.Fragment, undefined, React.createElement("div", undefined, React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$Title, {
                      text: "마지막으로\n배송정보를 알려주세요"
                    }), React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$CalendarListitem, {
                      leftText: "배송 희망일",
                      currentDate: selectedDeliveryDate,
                      handleChangeDate: match$7[1],
                      minDate: minDate,
                      maxDate: maxDate
                    }), React.createElement("div", {
                      className: "mx-5 mb-[30px]"
                    }, React.createElement("div", {
                          className: "my-4"
                        }, "배송지"), React.createElement("div", {
                          className: "flex mb-[13px]"
                        }, React.createElement("input", {
                              className: Cx.cx([
                                    "w-full px-[14px] py-[13px] rounded-[10px] border-border-default-L1 border-[1px]",
                                    "disabled:bg-disabled-L3"
                                  ]),
                              disabled: true,
                              placeholder: "우편번호",
                              value: deliveryAddressZipcode
                            }), React.createElement("button", {
                              className: "ml-2 min-w-[92px] bg-blue-gray-700 px-[14px] py-[13px] rounded-[10px] text-inverted font-bold",
                              onClick: toggleDrawer
                            }, "주소 검색")), React.createElement("div", {
                          className: "mb-[13px]"
                        }, React.createElement("input", {
                              className: Cx.cx([
                                    "w-full px-[14px] py-[13px] rounded-[10px] border-border-default-L1 border-[1px]",
                                    "disabled:bg-disabled-L3"
                                  ]),
                              disabled: true,
                              placeholder: "주소",
                              value: deliveryAddress
                            })), React.createElement("div", undefined, React.createElement("input", {
                              ref: deliveryAddressDetailInput,
                              className: Cx.cx([
                                    "w-full px-[14px] py-[13px] rounded-[10px] border-border-default-L1 border-[1px]",
                                    "disabled:bg-disabled-L3 disabled:text-inverted disabled:text-opacity-50"
                                  ]),
                              disabled: deliveryAddress.length === 0,
                              placeholder: "상세주소를 입력해주세요.",
                              value: deliveryAddressDetail,
                              onChange: (function (e) {
                                  var value = e.target.value;
                                  setDeliveryAddressDetail(function (param) {
                                        return value;
                                      });
                                })
                            }))), isTermAgree ? null : React.createElement(React.Fragment, undefined, React.createElement("div", {
                            className: "h-3 bg-border-default-L2"
                          }), React.createElement("div", {
                            className: "my-7 mx-5"
                          }, React.createElement("button", {
                                onClick: (function (param) {
                                    setIsAgreedPrivacyPolicy(function (prev) {
                                          return !prev;
                                        });
                                  })
                              }, React.createElement("div", undefined, React.createElement("div", {
                                        className: "flex items-center space-x-2 mb-3"
                                      }, isAgreedPrivacyPolicy ? React.createElement(DS_Icon.Common.CheckedLarge1.make, {
                                              height: "24",
                                              width: "24",
                                              fill: "#12B564"
                                            }) : React.createElement(DS_Icon.Common.UncheckedLarge1.make, {
                                              height: "24",
                                              width: "24"
                                            }), React.createElement("span", {
                                            className: "font-bold leading-7 tracking-tight text-enabled-L1"
                                          }, "개인정보 제공에 동의해주세요")), React.createElement("div", {
                                        className: "pl-8 text-left"
                                      }, React.createElement("p", {
                                            className: "text-[13px] text-enabled-L2 leading-5 tracking-tight"
                                          }, React.createElement("div", undefined, "(주)그린랩스는 다음과 같은 목적으로 개인정보를 수집합니다."), React.createElement("div", undefined, "1. 개인정보 수집 항목 : 주소"), React.createElement("div", undefined, "2. 개인정보 수집 목적 : 견적 매칭 서비스 및 구매상품 배송"), React.createElement("div", undefined, "3. 개인정보의 보유 및 이용 기간 : ", React.createElement("span", {
                                                    className: "font-bold"
                                                  }, "회원탈퇴 시 즉시 파기"), " 이용자는 개인정보 수집 및 이용 동의를 거부할 권리가 있습니다. 다만, 이에 동의하지 않을 경우 신선매칭 서비스 이용이 어려울 수 있습니다.")))))))), React.createElement(Tradematch_Buy_Aqua_Apply_Steps_Buyer$FloatingButton, {
                  handleClickButton: handleClickButton,
                  disabled: !isValidItems || match$2[1]
                }), React.createElement(Tradematch_SearchAddressDrawer_Buyer.make, {
                  onComplete: onCompleteAddressDrawer,
                  closeDrawer: toggleDrawer,
                  isShow: match$8[0]
                }));
}

var Shipping = {
  make: Tradematch_Buy_Aqua_Apply_Steps_Buyer$Shipping
};

export {
  Query ,
  Mutation ,
  Title ,
  FloatingButton ,
  CalendarListitem ,
  Origin ,
  Weight ,
  Price ,
  StorageMethod ,
  Cycle ,
  Requirement ,
  Shipping ,
}
/* react Not a pure module */
