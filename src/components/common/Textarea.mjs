// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as React from "react";
import * as IconError from "../svgs/IconError.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var normalStyle = "border border-border-default-L1 focus:outline-none focus:ring-1-gl focus:border-border-active focus:ring-opacity-100 remove-spin-button ";

var errorStyle = "border outline-none ring-2 ring-opacity-100 ring-notice remove-spin-button";

var disabledStyle = "bg-disabled-L3 border border-border-default-L1 focus:outline-none focus:ring-1-gl remove-spin-button focus:border-border-active";

function style(error, disabled) {
  if (disabled !== undefined) {
    if (disabled) {
      return disabledStyle;
    } else if (error !== undefined) {
      return errorStyle;
    } else {
      return normalStyle;
    }
  } else if (error !== undefined) {
    return errorStyle;
  } else {
    return normalStyle;
  }
}

function heightBySize(size) {
  if (size === undefined) {
    return "h-9";
  }
  switch (size) {
    case /* XLarge */0 :
        return "h-[110px]";
    case /* Large */1 :
        return "h-13";
    case /* Medium */2 :
        return "h-9";
    case /* Small */3 :
        return "h-8";
    
  }
}

var defaultStyle = "flex-1 flex px-3 h-full w-full";

function styleBySize(style, size) {
  if (size !== undefined) {
    if (size !== 2) {
      if (size >= 3) {
        return Cx.cx([
                    defaultStyle,
                    style,
                    "rounded-md py-1"
                  ]);
      } else {
        return Cx.cx([
                    defaultStyle,
                    style,
                    "rounded-xl py-3"
                  ]);
      }
    } else {
      return Cx.cx([
                  defaultStyle,
                  style,
                  "rounded-lg py-2"
                ]);
    }
  } else {
    return Cx.cx([
                defaultStyle,
                style,
                "rounded-lg py-2"
              ]);
  }
}

function Textarea(Props) {
  var type_ = Props.type_;
  var name = Props.name;
  var placeholder = Props.placeholder;
  var className = Props.className;
  var value = Props.value;
  var onChange = Props.onChange;
  var defaultValue = Props.defaultValue;
  var size = Props.size;
  var error = Props.error;
  var disabled = Props.disabled;
  var tabIndex = Props.tabIndex;
  var rows = Props.rows;
  var maxLength = Props.maxLength;
  var onKeyDown = Props.onKeyDown;
  var tmp = {
    className: styleBySize(style(error, disabled), size),
    name: name,
    placeholder: placeholder,
    type: type_
  };
  if (defaultValue !== undefined) {
    tmp.defaultValue = Caml_option.valFromOption(defaultValue);
  }
  if (tabIndex !== undefined) {
    tmp.tabIndex = Caml_option.valFromOption(tabIndex);
  }
  if (disabled !== undefined) {
    tmp.disabled = Caml_option.valFromOption(disabled);
  }
  if (maxLength !== undefined) {
    tmp.maxLength = Caml_option.valFromOption(maxLength);
  }
  if (rows !== undefined) {
    tmp.rows = Caml_option.valFromOption(rows);
  }
  if (value !== undefined) {
    tmp.value = Caml_option.valFromOption(value);
  }
  if (onKeyDown !== undefined) {
    tmp.onKeyDown = Caml_option.valFromOption(onKeyDown);
  }
  if (onChange !== undefined) {
    tmp.onChange = Caml_option.valFromOption(onChange);
  }
  return React.createElement("label", {
              className: Belt_Option.mapWithDefault(className, "flex flex-col", (function (className$p) {
                      return Cx.cx([
                                  "flex flex-col",
                                  className$p
                                ]);
                    }))
            }, React.createElement("span", {
                  className: heightBySize(size)
                }, React.createElement("textarea", tmp)), Belt_Option.getWithDefault(Belt_Option.map(error, (function (err) {
                        return React.createElement("span", {
                                    className: "flex mt-2"
                                  }, React.createElement(IconError.make, {
                                        width: "20",
                                        height: "20"
                                      }), React.createElement("span", {
                                        className: "text-sm text-notice ml-1"
                                      }, err));
                      })), null));
}

var make = Textarea;

export {
  normalStyle ,
  errorStyle ,
  disabledStyle ,
  style ,
  heightBySize ,
  defaultStyle ,
  styleBySize ,
  make ,
}
/* react Not a pure module */
