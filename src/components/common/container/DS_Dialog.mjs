// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as React from "react";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactDialog from "@radix-ui/react-dialog";

function DS_Dialog$Popup$Root(props) {
  return React.createElement(ReactDialog.Root, {
              children: props.children,
              defaultOpen: props.defaultOpen,
              _open: props._open,
              onOpenChange: props.onOpenChange,
              className: props.className
            });
}

var Root = {
  make: DS_Dialog$Popup$Root
};

var make = React.forwardRef(function (props, ref) {
      return React.createElement(ReactDialog.Trigger, {
                  children: props.children,
                  className: props.className,
                  asChild: props.asChild,
                  ref: Belt_Option.map((ref == null) ? undefined : Caml_option.some(ref), (function (prim) {
                          return prim;
                        }))
                });
    });

var Trigger = {
  make: make
};

function DS_Dialog$Popup$Portal(props) {
  return React.createElement(ReactDialog.Portal, {
              children: props.children,
              className: props.className
            });
}

var Portal = {
  make: DS_Dialog$Popup$Portal
};

var make$1 = React.forwardRef(function (props, ref) {
      var defaultStyle = "dialog-overlay";
      return React.createElement(ReactDialog.Overlay, {
                  className: Belt_Option.mapWithDefault(props.className, defaultStyle, (function (className$p) {
                          return Cx.cx([
                                      defaultStyle,
                                      className$p
                                    ]);
                        })),
                  ref: Belt_Option.map((ref == null) ? undefined : Caml_option.some(ref), (function (prim) {
                          return prim;
                        }))
                });
    });

var Overlay = {
  make: make$1
};

var make$2 = React.forwardRef(function (props, ref) {
      var defaultStyle = "dialog-content p-6 rounded-xl";
      return React.createElement(ReactDialog.Content, {
                  children: props.children,
                  className: Belt_Option.mapWithDefault(props.className, defaultStyle, (function (className$p) {
                          return Cx.cx([
                                      defaultStyle,
                                      className$p
                                    ]);
                        })),
                  ref: Belt_Option.map((ref == null) ? undefined : Caml_option.some(ref), (function (prim) {
                          return prim;
                        }))
                });
    });

var Content = {
  make: make$2
};

var make$3 = React.forwardRef(function (props, ref) {
      var defaultStyle = "font-bold text-lg text-center mb-2";
      return React.createElement(ReactDialog.Title, {
                  children: props.children,
                  className: Belt_Option.mapWithDefault(props.className, defaultStyle, (function (className$p) {
                          return Cx.cx([
                                      defaultStyle,
                                      className$p
                                    ]);
                        })),
                  ref: Belt_Option.map((ref == null) ? undefined : Caml_option.some(ref), (function (prim) {
                          return prim;
                        }))
                });
    });

var Title = {
  make: make$3
};

var make$4 = React.forwardRef(function (props, ref) {
      var defaultStyle = "text-center text-enabled-L2 font-normal";
      return React.createElement(ReactDialog.Description, {
                  children: props.children,
                  className: Belt_Option.mapWithDefault(props.className, defaultStyle, (function (className$p) {
                          return Cx.cx([
                                      defaultStyle,
                                      className$p
                                    ]);
                        })),
                  ref: Belt_Option.map((ref == null) ? undefined : Caml_option.some(ref), (function (prim) {
                          return prim;
                        }))
                });
    });

var Description = {
  make: make$4
};

function DS_Dialog$Popup$Buttons(props) {
  var defaultStyle = "flex justify-between mt-6 gap-[7px]";
  return React.createElement("div", {
              className: Belt_Option.mapWithDefault(props.className, defaultStyle, (function (className$p) {
                      return Cx.cx([
                                  defaultStyle,
                                  className$p
                                ]);
                    }))
            }, props.children);
}

var Buttons = {
  make: DS_Dialog$Popup$Buttons
};

function DS_Dialog$Popup$Close(props) {
  return React.createElement(ReactDialog.Close, {
              children: props.children,
              className: props.className,
              asChild: props.asChild
            });
}

var Close = {
  make: DS_Dialog$Popup$Close
};

var Popup = {
  Root: Root,
  Trigger: Trigger,
  Portal: Portal,
  Overlay: Overlay,
  Content: Content,
  Title: Title,
  Description: Description,
  Buttons: Buttons,
  Close: Close
};

export {
  Popup ,
}
/* make Not a pure module */
