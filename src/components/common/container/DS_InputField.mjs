// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as DS_Input from "../element/DS_Input.mjs";
import * as Garter_Fn from "@greenlabs/garter/src/Garter_Fn.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as KoreanNumeral from "@greenlabs/re-korean-numeral/src/KoreanNumeral.mjs";
import SearchbarClearSvg from "../../../../public/assets/searchbar-clear.svg";

var searchBarClear = SearchbarClearSvg;

function toOnlyNumber(value) {
  return value.replace(/[^0-9]/g, "").replace(/^[0]/g, "");
}

function toTon(v) {
  if (v.slice(-2) !== "00") {
    return "" + v + "kg";
  }
  var ton = v.slice(0, v.length - 3 | 0);
  if (v.slice(-3) === "000") {
    return "" + ton + "톤";
  } else {
    return "" + ton + "." + v.slice(-3, -2) + "톤";
  }
}

function convertNumber(labelType, value) {
  if (labelType === "won") {
    return "" + KoreanNumeral.fromInt64(Caml_format.int64_of_string(value), undefined, undefined) + " 원";
  } else if (value.length > 3) {
    return toTon(value);
  } else {
    return "" + value + "kg";
  }
}

var Convert = {
  toOnlyNumber: toOnlyNumber,
  toTon: toTon,
  convertNumber: convertNumber
};

function lineStyle(errorMessage, disabled, focused) {
  if (disabled !== undefined && disabled) {
    return "bg-border-disabled h-0.5 mt-1.5";
  }
  if (errorMessage !== undefined) {
    return "bg-emphasis h-0.5 mt-1.5";
  } else if (focused) {
    return "bg-primary h-0.5 mt-1.5";
  } else {
    return "bg-border-disabled h-0.5 mt-1.5";
  }
}

function DS_InputField$Line1$Root(Props) {
  var children = Props.children;
  var className = Props.className;
  var defaultStyle = "relative flex flex-col min-w-0 mx-5";
  return React.createElement("label", {
              className: Belt_Option.mapWithDefault(className, defaultStyle, (function (className$p) {
                      return Cx.cx([
                                  defaultStyle,
                                  className$p
                                ]);
                    }))
            }, children);
}

var Root = {
  make: DS_InputField$Line1$Root
};

function DS_InputField$Line1$Input(Props) {
  var type_ = Props.type_;
  var className = Props.className;
  var placeholder = Props.placeholder;
  var value = Props.value;
  var onChange = Props.onChange;
  var disabled = Props.disabled;
  var autoFocus = Props.autoFocus;
  var inputMode = Props.inputMode;
  var isClearOpt = Props.isClear;
  var fnClear = Props.fnClear;
  var unit = Props.unit;
  var errorMessage = Props.errorMessage;
  var underLabel = Props.underLabel;
  var underLabelType = Props.underLabelType;
  var maxLength = Props.maxLength;
  var isClear = isClearOpt !== undefined ? isClearOpt : false;
  var match = React.useState(function () {
        return false;
      });
  var setFocused = match[1];
  var tmp = {
    type_: type_,
    onFocus: (function (param) {
        setFocused(function (param) {
              return true;
            });
      }),
    onBlur: (function (param) {
        setFocused(function (param) {
              return false;
            });
      })
  };
  if (className !== undefined) {
    tmp.className = Caml_option.valFromOption(className);
  }
  if (placeholder !== undefined) {
    tmp.placeholder = Caml_option.valFromOption(placeholder);
  }
  if (value !== undefined) {
    tmp.value = Caml_option.valFromOption(value);
  }
  if (onChange !== undefined) {
    tmp.onChange = Caml_option.valFromOption(onChange);
  }
  if (disabled !== undefined) {
    tmp.disabled = Caml_option.valFromOption(disabled);
  }
  if (autoFocus !== undefined) {
    tmp.autoFocus = Caml_option.valFromOption(autoFocus);
  }
  if (inputMode !== undefined) {
    tmp.inputMode = Caml_option.valFromOption(inputMode);
  }
  if (maxLength !== undefined) {
    tmp.maxLength = Caml_option.valFromOption(maxLength);
  }
  var match$1 = Belt_Option.mapWithDefault(value, false, (function (x) {
          return x.trim() !== "";
        }));
  var getUnderLabel = React.createElement("span", {
        className: "text-gray-400 text-sm leading-5 mt-3"
      }, value !== undefined && match$1 && underLabelType !== undefined ? convertNumber(underLabelType, toOnlyNumber(value)) : Belt_Option.getWithDefault(underLabel, ""));
  var tmp$1;
  var exit = 0;
  if (disabled !== undefined && disabled) {
    tmp$1 = getUnderLabel;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    var errorMessage$p = Belt_Option.flatMap(errorMessage, Garter_Fn.identity);
    tmp$1 = errorMessage$p !== undefined ? React.createElement("span", {
            className: "text-emphasis text-sm leading-5 mt-3"
          }, errorMessage$p) : getUnderLabel;
  }
  return React.createElement(React.Fragment, undefined, React.createElement(DS_Input.InputText1.make, tmp), React.createElement("div", {
                  className: "absolute top-0 right-0 flex justify-end items-center"
                }, React.createElement("div", {
                      className: "absolute top-0 right-0 flex justify-end items-center"
                    }, Belt_Option.mapWithDefault(unit, null, (function (x) {
                            return React.createElement("span", {
                                        className: "mr-2.5 text-xl w-20 text-right"
                                      }, x);
                          })), isClear && Belt_Option.isSome(value) && Belt_Option.mapWithDefault(value, false, (function (x) {
                            return x.trim() !== "";
                          })) ? React.createElement("button", {
                            className: "h-[30px]",
                            onClick: (function (param) {
                                Belt_Option.mapWithDefault(fnClear, undefined, (function (fn) {
                                        Curry._1(fn, undefined);
                                      }));
                              })
                          }, React.createElement("img", {
                                src: searchBarClear
                              })) : null)), React.createElement("div", {
                  className: lineStyle(errorMessage, disabled, match[0])
                }), tmp$1);
}

var Input = {
  make: DS_InputField$Line1$Input
};

var Line1 = {
  normalStyle: "border border-border-default-L1 focus:outline-none focus:ring-1-gl focus:border-border-active focus:ring-opacity-100 remove-spin-button ",
  errorStyle: "border outline-none ring-2 ring-opacity-100 ring-notice remove-spin-button",
  disabledStyle: "bg-disabled-L3 border border-border-default-L1 focus:outline-none focus:ring-1-gl remove-spin-button focus:border-border-active",
  lineStyle: lineStyle,
  Root: Root,
  Input: Input
};

export {
  searchBarClear ,
  Convert ,
  Line1 ,
}
/* searchBarClear Not a pure module */
