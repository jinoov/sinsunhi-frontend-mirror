// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as IconClose from "../../svgs/IconClose.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactPortal from "@radix-ui/react-portal";

function toStyle(isShow, show, hide, style) {
  return Cx.cx([
              isShow ? show : hide,
              style
            ]);
}

function useLockBodyScroll(isLock) {
  var bodyElement = document.querySelector("body");
  React.useEffect((function () {
          if (isLock) {
            if (!(bodyElement == null)) {
              bodyElement.className = "overflow-hidden";
              return (function (param) {
                        bodyElement.className = "";
                      });
            } else {
              return ;
            }
          } else if (!(bodyElement == null)) {
            bodyElement.className = "";
            return ;
          } else {
            return ;
          }
        }), [isLock]);
}

var context = React.createContext(function (param) {
      
    });

var provider = context.Provider;

function DS_BottomDrawer$BottomDrawerContext$Provider(props) {
  return React.createElement(provider, {
              value: props.value,
              children: props.children
            });
}

var Provider = {
  provider: provider,
  make: DS_BottomDrawer$BottomDrawerContext$Provider
};

var BottomDrawerContext = {
  context: context,
  Provider: Provider
};

function DS_BottomDrawer$Overlay(props) {
  var isShow = props.isShow;
  var overlayStyle = function (param) {
    return toStyle(isShow, "opacity-100", "opacity-0 pointer-events-none", param);
  };
  var handleClose = React.useContext(context);
  return React.createElement("div", {
              className: overlayStyle("fixed top-0 left-0 w-full h-full bg-dim transition-opacity z-[12]"),
              onClick: (function (param) {
                  Curry._1(handleClose, undefined);
                })
            });
}

var Overlay = {
  make: DS_BottomDrawer$Overlay
};

function DS_BottomDrawer$Header(props) {
  var handleClose = React.useContext(context);
  return React.createElement("header", {
              className: "flex justify-between items-center"
            }, React.createElement("div", {
                  className: "m-4"
                }, Belt_Option.getWithDefault(props.children, null)), React.createElement("span", {
                  className: "cursor-pointer p-4",
                  onClick: (function (param) {
                      Curry._1(handleClose, undefined);
                    })
                }, React.createElement(IconClose.make, {
                      height: "24",
                      width: "24"
                    })));
}

var Header = {
  make: DS_BottomDrawer$Header
};

function DS_BottomDrawer$Body(props) {
  return React.createElement("div", {
              className: "flex flex-col overflow-hidden"
            }, props.children);
}

var Body = {
  make: DS_BottomDrawer$Body
};

function DS_BottomDrawer$Root(props) {
  var dimLocation = props.dimLocation;
  var full = props.full;
  var isShow = props.isShow;
  var dimLocation$1 = dimLocation !== undefined ? dimLocation : /* Declared */1;
  var full$1 = full !== undefined ? full : false;
  useLockBodyScroll(isShow);
  var showStyle = function (param) {
    return toStyle(isShow, "bottom-0", "-bottom-full", param);
  };
  var content = React.createElement(DS_BottomDrawer$BottomDrawerContext$Provider, {
        value: props.onClose,
        children: null
      }, React.createElement(DS_BottomDrawer$Overlay, {
            isShow: isShow
          }), React.createElement("div", {
            "aria-hidden": !isShow,
            className: showStyle(Cx.cx([
                      full$1 ? "h-full" : "max-h-[85vh]",
                      "flex flex-col fixed w-full z-[13] left-1/2 -translate-x-1/2 max-w-3xl mx-auto bg-white rounded-t-2xl drawer-tarnsition"
                    ]))
          }, props.children));
  if (dimLocation$1) {
    return content;
  } else {
    return React.createElement(ReactPortal.Root, {
                children: Caml_option.some(content)
              });
  }
}

var Root = {
  make: DS_BottomDrawer$Root
};

export {
  toStyle ,
  useLockBodyScroll ,
  BottomDrawerContext ,
  Overlay ,
  Header ,
  Body ,
  Root ,
}
/* context Not a pure module */
