// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Skeleton from "../Skeleton.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as ReactEvents from "../../utils/ReactEvents.mjs";
import * as Router from "next/router";

function status_encode(v) {
  switch (v) {
    case /* RESERVED */0 :
        return "reserved";
    case /* OPEN */1 :
        return "open";
    case /* ENDED */2 :
        return "ended";
    case /* CANCELED */3 :
        return "canceled";
    
  }
}

function status_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("reserved" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* RESERVED */0
          };
  } else if ("open" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* OPEN */1
          };
  } else if ("ended" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ENDED */2
          };
  } else if ("canceled" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CANCELED */3
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function stringifyStatus(s) {
  return Belt_Option.getWithDefault(Js_json.decodeString(status_encode(s)), "");
}

function displayStatus(s) {
  switch (s) {
    case /* RESERVED */0 :
        return "모집예정";
    case /* OPEN */1 :
        return "모집중";
    case /* ENDED */2 :
        return "모집종료";
    case /* CANCELED */3 :
        return "모집취소";
    
  }
}

function clearQueries(q) {
  return Js_dict.fromArray(Js_dict.entries(q));
}

function handleOnClickStatus(router, status, param) {
  return function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  var newQueries = Js_dict.fromArray(Js_dict.entries(router.query));
                  if (status !== undefined) {
                    newQueries["status"] = stringifyStatus(status);
                  } else {
                    Js_dict.unsafeDeleteKey(newQueries, "status");
                  }
                  var newQueryString = new URLSearchParams(newQueries).toString();
                  router.push(router.pathname + "?" + newQueryString);
                  
                }), param);
  };
}

function queriedStyle(router, status, param) {
  var queried = Belt_Option.flatMap(Belt_Option.map(Belt_Option.map(Js_dict.get(router.query, "status"), (function (prim) {
                  return prim;
                })), status_decode), (function (s) {
          return Belt_Result.mapWithDefault(s, undefined, (function (s$p) {
                        return s$p;
                      }));
        }));
  var match = Caml_obj.caml_equal(status, queried);
  if (match) {
    return "py-1 px-2 flex justify-between border border-green-gl text-green-gl sm:border-0 sm:flex-1 sm:flex-col sm:p-4 bg-green-gl-light sm:rounded-lg";
  }
  if (status === undefined) {
    return "py-1 px-2 flex justify-between border border-gray-200 border-b-0 text-gray-700 sm:flex-1 sm:flex-col sm:border-0 sm:p-4";
  }
  if (status === 0) {
    return "py-1 px-2 flex justify-between border border-gray-200 border-b-0 text-gray-700 sm:flex-1 sm:flex-col sm:border-0 sm:p-4";
  }
  switch (status) {
    case /* OPEN */1 :
        return "py-1 px-2 flex justify-between border border-gray-200 border-t-0 border-l-0 text-gray-700 sm:flex-1 sm:flex-col sm:border-0 sm:p-4";
    case /* ENDED */2 :
        return "py-1 px-2 flex justify-between border border-gray-200 border-t-0 text-gray-700 sm:flex-1 sm:flex-col sm:border-0 sm:p-4";
    case /* CANCELED */3 :
        return "py-1 px-2 flex justify-between border border-gray-200 border-b-0 text-gray-700 sm:flex-1 sm:flex-col sm:border-0 sm:p-4";
    
  }
}

function queriedFill(router, status, param) {
  var queried = Belt_Option.flatMap(Js_dict.get(router.query, "status"), (function (status$p) {
          var status$p$p = status_decode(status$p);
          if (status$p$p.TAG === /* Ok */0) {
            return status$p$p._0;
          }
          
        }));
  if (status === queried) {
    return "#12b564";
  } else {
    return "#262626";
  }
}

function displayCount(status, data) {
  if (status === 0) {
    return "";
  }
  switch (status) {
    case /* OPEN */1 :
        return String(data.openCount) + "건";
    case /* ENDED */2 :
        return String(data.notOpenCount) + "건";
    case /* CANCELED */3 :
        return "";
    
  }
}

function Status_BulkSale_Product$Total$Skeleton(Props) {
  var router = Router.useRouter();
  return React.createElement("li", {
              className: queriedStyle(router, undefined, undefined)
            }, React.createElement("span", {
                  className: "flex justify-center items-center pb-1 text-sm"
                }, "전체"), React.createElement(Skeleton.Box.make, {}));
}

var Skeleton$1 = {
  make: Status_BulkSale_Product$Total$Skeleton
};

function Status_BulkSale_Product$Total(Props) {
  var data = Props.data;
  var router = Router.useRouter();
  return React.createElement("li", {
              className: queriedStyle(router, undefined, undefined),
              onClick: handleOnClickStatus(router, undefined, undefined)
            }, React.createElement("span", {
                  className: "flex justify-center items-center pb-1 text-sm"
                }, "전체"), React.createElement("span", {
                  className: "block font-bold sm:text-center"
                }, String(data.count) + "건"));
}

var Total = {
  Skeleton: Skeleton$1,
  make: Status_BulkSale_Product$Total
};

function Status_BulkSale_Product$Item$Skeleton(Props) {
  var kind = Props.kind;
  var router = Router.useRouter();
  return React.createElement("li", {
              className: queriedStyle(router, kind, undefined)
            }, React.createElement("span", {
                  className: "flex justify-center items-center pb-1 text-sm"
                }, displayStatus(kind)), React.createElement(Skeleton.Box.make, {}));
}

var Skeleton$2 = {
  make: Status_BulkSale_Product$Item$Skeleton
};

function Status_BulkSale_Product$Item(Props) {
  var kind = Props.kind;
  var data = Props.data;
  var router = Router.useRouter();
  return React.createElement("li", {
              className: queriedStyle(router, kind, undefined),
              onClick: handleOnClickStatus(router, kind, undefined)
            }, React.createElement("span", {
                  className: "flex justify-center items-center pb-1 text-sm"
                }, displayStatus(kind)), React.createElement("span", {
                  className: "block font-bold sm:text-center"
                }, displayCount(kind, data)));
}

var Item = {
  Skeleton: Skeleton$2,
  make: Status_BulkSale_Product$Item
};

export {
  status_encode ,
  status_decode ,
  stringifyStatus ,
  displayStatus ,
  clearQueries ,
  handleOnClickStatus ,
  queriedStyle ,
  queriedFill ,
  displayCount ,
  Total ,
  Item ,
  
}
/* react Not a pure module */
