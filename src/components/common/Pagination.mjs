// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_math from "rescript/lib/es6/js_math.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as IconArrow from "../svgs/IconArrow.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";

function Pagination$Template(Props) {
  var cur = Props.cur;
  var pageDisplySize = Props.pageDisplySize;
  var itemPerPage = Props.itemPerPage;
  var total = Props.total;
  var handleOnChangePage = Props.handleOnChangePage;
  var totalPage = Js_math.ceil_int(total / itemPerPage);
  var nth = Caml_int32.div(cur - 1 | 0, pageDisplySize);
  var start = Math.imul(pageDisplySize, nth) + 1 | 0;
  var end = Math.min((start + pageDisplySize | 0) - 1 | 0, totalPage);
  var isDisabledLeft = start <= 1;
  var isDisabledRight = end >= totalPage;
  var buttonStyle = function (i) {
    if (cur === i) {
      return "w-10 h-12 text-center font-bold";
    } else {
      return "w-10 h-12 text-center";
    }
  };
  var tmp = {
    className: Cx.cx([
          "transform rotate-180 w-12 h-12 rounded-full bg-gray-100 flex justify-center items-center mr-4",
          isDisabledLeft ? "cursor-not-allowed" : "cursor-pointer"
        ]),
    disabled: isDisabledLeft,
    value: String(start - 1 | 0)
  };
  if (handleOnChangePage !== undefined) {
    tmp.onClick = Caml_option.valFromOption(handleOnChangePage);
  }
  var tmp$1 = {
    className: Cx.cx([
          "w-12 h-12 rounded-full bg-gray-100 flex justify-center items-center ml-4",
          isDisabledRight ? "cursor-not-allowed" : "cursor-pointer"
        ]),
    disabled: isDisabledRight,
    value: String(end + 1 | 0)
  };
  if (handleOnChangePage !== undefined) {
    tmp$1.onClick = Caml_option.valFromOption(handleOnChangePage);
  }
  return React.createElement("ol", {
              className: "flex"
            }, React.createElement("button", tmp, React.createElement(IconArrow.make, {
                      height: "20",
                      width: "20",
                      fill: isDisabledLeft ? "#CCCCCC" : "#727272",
                      className: "relative -right-0.5"
                    })), Belt_Array.map(Belt_Array.range(start, end), (function (i) {
                    var tmp = {
                      className: buttonStyle(i),
                      value: String(i)
                    };
                    if (handleOnChangePage !== undefined) {
                      tmp.onClick = Caml_option.valFromOption(handleOnChangePage);
                    }
                    return React.createElement("li", {
                                key: String(i)
                              }, React.createElement("button", tmp, String(i)));
                  })), React.createElement("button", tmp$1, React.createElement(IconArrow.make, {
                      height: "20",
                      width: "20",
                      fill: isDisabledRight ? "#CCCCCC" : "#727272",
                      className: "relative -right-0.5"
                    })));
}

var Template = {
  make: Pagination$Template
};

function Pagination(Props) {
  var pageDisplySize = Props.pageDisplySize;
  var itemPerPage = Props.itemPerPage;
  var total = Props.total;
  var onChangePage = Props.onChangePage;
  var router = Router.useRouter();
  var cur = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(router.query, "offset"), (function (offset$p) {
              return Belt_Option.map(Belt_Int.fromString(offset$p), (function (offset$p$p) {
                            return Caml_int32.div(offset$p$p, itemPerPage) + 1 | 0;
                          }));
            })), 1);
  var handleOnChangePage = function (e) {
    e.preventDefault();
    e.stopPropagation();
    var value = e.currentTarget.value;
    router.query["offset"] = String(Math.imul(value - 1 | 0, itemPerPage));
    var newQueryString = new URLSearchParams(router.query).toString();
    if (onChangePage !== undefined) {
      return Curry._1(onChangePage, newQueryString);
    } else {
      router.push(router.pathname + "?" + newQueryString);
      return ;
    }
  };
  return React.createElement(Pagination$Template, {
              cur: cur,
              pageDisplySize: pageDisplySize,
              itemPerPage: itemPerPage,
              total: total,
              handleOnChangePage: handleOnChangePage
            });
}

var make = Pagination;

export {
  Template ,
  make ,
  
}
/* react Not a pure module */
