// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Locale from "../utils/Locale.mjs";
import * as Skeleton from "./Skeleton.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Garter_Math from "@greenlabs/garter/src/Garter_Math.mjs";
import * as ReactHookForm from "react-hook-form";
import * as Web_Order_Buyer_Form from "./Web_Order_Buyer_Form.mjs";

function Web_Order_Payment_Info_Buyer$PlaceHolder$PC(Props) {
  return React.createElement("div", {
              className: "rounded-sm bg-white p-7 w-full sticky top-64"
            }, React.createElement("span", {
                  className: "text-xl text-enabled-L1 font-bold"
                }, "결제 정보"), React.createElement("ul", {
                  className: "text-sm flex flex-col gap-4 py-7 border border-x-0 border-t-0 border-div-border-L2"
                }, React.createElement("li", {
                      key: "product-price",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 상품금액"), React.createElement(Skeleton.Box.make, {
                          className: "w-20"
                        })), React.createElement("li", {
                      key: "delivery-cost",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "배송비"), React.createElement(Skeleton.Box.make, {
                          className: "w-20"
                        })), React.createElement("li", {
                      key: "total-price",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 결제금액"), React.createElement(Skeleton.Box.make, {
                          className: "w-24"
                        }))), React.createElement("div", {
                  className: "mt-7 mb-10 flex justify-center items-center text-text-L1"
                }, React.createElement(Skeleton.Box.make, {
                      className: "w-44"
                    })), React.createElement(Skeleton.Box.make, {
                  className: "w-full min-h-[3.5rem] rounded-xl"
                }));
}

var PC = {
  make: Web_Order_Payment_Info_Buyer$PlaceHolder$PC
};

function Web_Order_Payment_Info_Buyer$PlaceHolder$MO(Props) {
  return React.createElement("div", {
              className: "rounded-sm bg-white p-5 w-full"
            }, React.createElement("span", {
                  className: "text-lg text-enabled-L1 font-bold"
                }, "결제 정보"), React.createElement("ul", {
                  className: "text-sm flex flex-col gap-4 py-7 border border-x-0 border-t-0 border-div-border-L2"
                }, React.createElement("li", {
                      key: "product-price",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 상품금액"), React.createElement(Skeleton.Box.make, {
                          className: "w-20"
                        })), React.createElement("li", {
                      key: "delivery-cost",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "배송비"), React.createElement(Skeleton.Box.make, {
                          className: "w-20"
                        })), React.createElement("li", {
                      key: "total-price",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 결제금액"), React.createElement(Skeleton.Box.make, {
                          className: "w-24"
                        }))), React.createElement("div", {
                  className: "mt-7 mb-10 flex justify-center items-center text-text-L1"
                }, React.createElement(Skeleton.Box.make, {
                      className: "w-44"
                    })), React.createElement(Skeleton.Box.make, {
                  className: "w-full min-h-[3.5rem] rounded-xl"
                }));
}

var MO = {
  make: Web_Order_Payment_Info_Buyer$PlaceHolder$MO
};

var PlaceHolder = {
  PC: PC,
  MO: MO
};

function Web_Order_Payment_Info_Buyer$PC(Props) {
  var renderProductPrice = Props.renderProductPrice;
  var renderDeliveryPrice = Props.renderDeliveryPrice;
  var totalOrderPrice = Props.totalOrderPrice;
  return React.createElement("div", {
              className: "rounded-sm bg-white p-7 w-fit sticky top-64"
            }, React.createElement("span", {
                  className: "text-xl text-enabled-L1 font-bold"
                }, "결제 정보"), React.createElement("ul", {
                  className: "text-sm flex flex-col gap-5 py-7 border border-x-0 border-t-0 border-div-border-L2 w-[440px]"
                }, React.createElement("li", {
                      key: "product-price",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 상품금액"), React.createElement("span", {
                          className: "text-sm font-normal"
                        }, "" + Locale.Int.show(undefined, renderProductPrice) + "원")), React.createElement("li", {
                      key: "delivery-cost",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "배송비"), React.createElement("span", {
                          className: "text-sm font-normal"
                        }, renderDeliveryPrice)), React.createElement("li", {
                      key: "total-price",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 결제금액"), React.createElement("span", {
                          className: "text-lg text-primary font-bold"
                        }, "" + Locale.Int.show(undefined, totalOrderPrice) + "원"))), React.createElement("div", {
                  className: "mt-7 mb-10 text-center text-text-L1"
                }, React.createElement("span", undefined, "주문 내용을 확인했으며, 정보 제공에 동의합니다.")), React.createElement("button", {
                  className: "w-full h-14 flex justify-center items-center bg-primary text-lg text-white rounded-xl",
                  type: "submit"
                }, "결제하기"));
}

var PC$1 = {
  make: Web_Order_Payment_Info_Buyer$PC
};

function Web_Order_Payment_Info_Buyer$MO(Props) {
  var renderProductPrice = Props.renderProductPrice;
  var renderDeliveryPrice = Props.renderDeliveryPrice;
  var totalOrderPrice = Props.totalOrderPrice;
  return React.createElement("div", {
              className: "rounded-sm bg-white p-5 w-full"
            }, React.createElement("span", {
                  className: "text-lg text-enabled-L1 font-bold"
                }, "결제 정보"), React.createElement("ul", {
                  className: "text-sm flex flex-col gap-5 py-7 border border-x-0 border-t-0 border-div-border-L2"
                }, React.createElement("li", {
                      key: "product-price",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 상품금액"), React.createElement("span", {
                          className: "text-base font-bold"
                        }, "" + Locale.Int.show(undefined, renderProductPrice) + "원")), React.createElement("li", {
                      key: "delivery-cost",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "배송비"), React.createElement("span", {
                          className: "text-base font-bold"
                        }, renderDeliveryPrice)), React.createElement("li", {
                      key: "total-price",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 결제금액"), React.createElement("span", {
                          className: "text-xl text-primary font-bold"
                        }, "" + Locale.Int.show(undefined, totalOrderPrice) + "원"))), React.createElement("div", {
                  className: "mt-7 mb-10 text-center text-text-L1"
                }, React.createElement("span", undefined, "주문 내용을 확인했으며, 정보 제공에 동의합니다.")), React.createElement("button", {
                  className: "w-full h-14 flex justify-center items-center bg-primary text-lg text-white rounded-xl",
                  type: "submit"
                }, "결제하기"));
}

var MO$1 = {
  make: Web_Order_Payment_Info_Buyer$MO
};

function Web_Order_Payment_Info_Buyer(Props) {
  var prefix = Props.prefix;
  var productInfos = Props.productInfos;
  var deviceType = Props.deviceType;
  var formNames = Web_Order_Buyer_Form.names(prefix);
  var totalOrderPrice = Garter_Math.sum_int(Belt_Array.map(productInfos, (function (info) {
              return info.totalPrice;
            })));
  var totalDeliveryCost = Garter_Math.sum_int(Belt_Array.concatMany(Belt_Array.map(productInfos, (function (info) {
                  return Belt_Array.map(info.productOptions, (function (option) {
                                if (option.isFreeShipping) {
                                  return 0;
                                } else {
                                  return Math.imul(option.deliveryCost, option.quantity);
                                }
                              }));
                }))));
  var deliveryType = ReactHookForm.useWatch({
        name: formNames.deliveryType
      });
  var match;
  if (deliveryType !== undefined) {
    var decode = Web_Order_Buyer_Form.deliveryType_decode(deliveryType);
    if (decode.TAG === /* Ok */0) {
      var decode$1 = decode._0;
      match = decode$1 === "PARCEL" ? [
          totalOrderPrice - totalDeliveryCost | 0,
          "" + Locale.Int.show(undefined, totalDeliveryCost) + "원"
        ] : (
          decode$1 === "SELF" ? [
              totalOrderPrice,
              "0원"
            ] : [
              totalOrderPrice,
              "협의"
            ]
        );
    } else {
      match = [
        0,
        "0"
      ];
    }
  } else {
    match = [
      0,
      ""
    ];
  }
  var renderDeliveryPrice = match[1];
  var renderProductPrice = match[0];
  switch (deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React.createElement(Web_Order_Payment_Info_Buyer$PC, {
                    renderProductPrice: renderProductPrice,
                    renderDeliveryPrice: renderDeliveryPrice,
                    totalOrderPrice: totalOrderPrice
                  });
    case /* Mobile */2 :
        return React.createElement(Web_Order_Payment_Info_Buyer$MO, {
                    renderProductPrice: renderProductPrice,
                    renderDeliveryPrice: renderDeliveryPrice,
                    totalOrderPrice: totalOrderPrice
                  });
    
  }
}

var Form;

var make = Web_Order_Payment_Info_Buyer;

export {
  Form ,
  PlaceHolder ,
  PC$1 as PC,
  MO$1 as MO,
  make ,
}
/* react Not a pure module */
