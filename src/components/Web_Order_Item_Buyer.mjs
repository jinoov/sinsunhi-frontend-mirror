// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Garter_Id from "@greenlabs/garter/src/Garter_Id.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Router from "next/router";
import * as Footer_Buyer from "./Footer_Buyer.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Header_Buyer from "./Header_Buyer.mjs";
import * as ReactHookForm from "react-hook-form";
import * as Web_Order_Buyer_Form from "./Web_Order_Buyer_Form.mjs";
import * as Web_Order_Delivery_Form from "./Web_Order_Delivery_Form.mjs";
import * as Web_Order_Util_Component from "./Web_Order_Util_Component.mjs";
import * as Web_Order_Orderer_Info_Buyer from "./Web_Order_Orderer_Info_Buyer.mjs";
import * as Web_Order_Payment_Info_Buyer from "./Web_Order_Payment_Info_Buyer.mjs";
import * as Web_Order_Product_Info_Buyer from "./Web_Order_Product_Info_Buyer.mjs";
import * as Web_Order_Delivery_Method_Selection_Buyer from "./Web_Order_Delivery_Method_Selection_Buyer.mjs";

function Web_Order_Item_Buyer$PlaceHolder$PC(Props) {
  var deviceType = Props.deviceType;
  var router = Router.useRouter();
  return React.createElement(React.Fragment, undefined, React.createElement(Header_Buyer.PC_Old.make, {
                  key: router.asPath
                }), React.createElement("main", {
                  className: "flex flex-col gap-5 px-[16%] py-20 bg-surface"
                }, React.createElement("h1", {
                      className: "flex ml-5 mb-3 text-3xl font-bold text-enabled-L1"
                    }, "주문·결제"), React.createElement("div", {
                      className: "flex flex-col xl:flex-row gap-5"
                    }, React.createElement("article", {
                          className: "w-3/5 flex flex-col gap-5 min-w-[550px]"
                        }, React.createElement("div", {
                              className: "flex flex-col gap-7 p-7 bg-white"
                            }, React.createElement(Web_Order_Product_Info_Buyer.PlaceHolder.PC.make, {}), React.createElement("div", {
                                  className: "h-px bg-border-default-L2"
                                }), React.createElement(Web_Order_Orderer_Info_Buyer.PlaceHolder.make, {
                                  deviceType: deviceType
                                })), React.createElement(Web_Order_Delivery_Method_Selection_Buyer.PlaceHoder.PC.make, {})), React.createElement("aside", {
                          className: "w-2/5"
                        }, React.createElement(Web_Order_Payment_Info_Buyer.PlaceHolder.PC.make, {})))), React.createElement(Footer_Buyer.PC.make, {}));
}

var PC = {
  make: Web_Order_Item_Buyer$PlaceHolder$PC
};

function Web_Order_Item_Buyer$PlaceHolder$MO(Props) {
  var deviceType = Props.deviceType;
  var router = Router.useRouter();
  return React.createElement(React.Fragment, undefined, React.createElement(Header_Buyer.Mobile.make, {
                  key: router.asPath
                }), React.createElement("main", {
                  className: "flex flex-col gap-3 bg-surface"
                }, React.createElement("div", {
                      className: "flex flex-col gap-4"
                    }, React.createElement("article", {
                          className: "w-full flex flex-col gap-5"
                        }, React.createElement("div", {
                              className: "flex flex-col gap-7 p-7 bg-white"
                            }, React.createElement(Web_Order_Product_Info_Buyer.PlaceHolder.MO.make, {}), React.createElement("div", {
                                  className: "h-px bg-border-default-L2"
                                }), React.createElement(Web_Order_Orderer_Info_Buyer.PlaceHolder.make, {
                                  deviceType: deviceType
                                })), React.createElement(Web_Order_Delivery_Method_Selection_Buyer.PlaceHoder.MO.make, {})), React.createElement("aside", {
                          className: "w-full"
                        }, React.createElement(Web_Order_Payment_Info_Buyer.PlaceHolder.MO.make, {})))), React.createElement(Footer_Buyer.MO.make, {}));
}

var MO = {
  make: Web_Order_Item_Buyer$PlaceHolder$MO
};

function Web_Order_Item_Buyer$PlaceHolder(Props) {
  var deviceType = Props.deviceType;
  switch (deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React.createElement(Web_Order_Item_Buyer$PlaceHolder$PC, {
                    deviceType: deviceType
                  });
    case /* Mobile */2 :
        return React.createElement(Web_Order_Item_Buyer$PlaceHolder$MO, {
                    deviceType: deviceType
                  });
    
  }
}

var PlaceHolder = {
  PC: PC,
  MO: MO,
  make: Web_Order_Item_Buyer$PlaceHolder
};

function Web_Order_Item_Buyer$PC(Props) {
  var productInfos = Props.productInfos;
  var firstIsCourierAvailable = Props.firstIsCourierAvailable;
  var isSameCourierAvailable = Props.isSameCourierAvailable;
  var formNames = Props.formNames;
  var watchValue = Props.watchValue;
  var deviceType = Props.deviceType;
  return React.createElement("main", {
              className: "min-w-[1280px] flex flex-col gap-5 px-[16%] py-20 bg-surface"
            }, React.createElement("h1", {
                  className: "flex ml-5 mb-3 text-3xl font-bold text-enabled-L1"
                }, "주문·결제"), React.createElement("div", {
                  className: "flex flex-row gap-5"
                }, React.createElement("article", {
                      className: "w-2/3 flex flex-col gap-5 min-w-[550px]"
                    }, React.createElement("div", {
                          className: "flex flex-col gap-7 p-7 bg-white"
                        }, React.createElement(Web_Order_Product_Info_Buyer.PC.make, {
                              productInfos: productInfos
                            }), React.createElement(Web_Order_Orderer_Info_Buyer.make, {
                              deviceType: deviceType
                            })), React.createElement("section", {
                          className: "flex flex-col gap-5 p-7 bg-white rounded-sm"
                        }, React.createElement("span", {
                              className: "flex items-center gap-1 text-xl text-enabled-L1 font-bold"
                            }, "배송 방식 선택", React.createElement(Web_Order_Util_Component.Tooltip.PC.make, {
                                  children: "선택하신 배송 방식에 따라 배송비 부과 정책이 달라집니다.",
                                  className: "flex"
                                })), React.createElement(Web_Order_Delivery_Method_Selection_Buyer.make, {
                              isSameCourierAvailable: isSameCourierAvailable,
                              isCourierAvailable: firstIsCourierAvailable,
                              prefix: formNames.name,
                              deviceType: deviceType
                            }), React.createElement(Web_Order_Delivery_Form.make, {
                              watchValue: watchValue,
                              prefix: formNames.name,
                              deviceType: deviceType
                            }))), React.createElement("aside", {
                      className: "w-1/3 min-h-full relative bottom-0"
                    }, React.createElement(Web_Order_Payment_Info_Buyer.make, {
                          prefix: formNames.name,
                          productInfos: productInfos,
                          deviceType: deviceType
                        }))));
}

var PC$1 = {
  make: Web_Order_Item_Buyer$PC
};

function Web_Order_Item_Buyer$MO(Props) {
  var productInfos = Props.productInfos;
  var firstIsCourierAvailable = Props.firstIsCourierAvailable;
  var isSameCourierAvailable = Props.isSameCourierAvailable;
  var formNames = Props.formNames;
  var watchValue = Props.watchValue;
  var deviceType = Props.deviceType;
  return React.createElement("main", {
              className: "flex flex-col gap-5 bg-surface"
            }, React.createElement("div", {
                  className: "flex flex-col gap-4"
                }, React.createElement("article", {
                      className: "w-full flex flex-col gap-5"
                    }, React.createElement("div", {
                          className: "flex flex-col gap-2 p-5 pb-7 bg-white"
                        }, React.createElement(Web_Order_Product_Info_Buyer.MO.make, {
                              productInfos: productInfos
                            }), React.createElement("div", {
                              className: "h-px bg-div-border-L2"
                            }), React.createElement(Web_Order_Orderer_Info_Buyer.make, {
                              deviceType: deviceType
                            })), React.createElement("section", {
                          className: "flex flex-col gap-5 p-5 pb-7 bg-white rounded-sm"
                        }, React.createElement("span", {
                              className: "flex items-center gap-1 text-lg text-enabled-L1 font-bold"
                            }, "배송 방식 선택", React.createElement(Web_Order_Util_Component.Tooltip.Mobile.make, {
                                  children: "선택하신 배송 방식에 따라 배송비 부과 정책이 달라집니다.",
                                  className: "flex"
                                })), React.createElement(Web_Order_Delivery_Method_Selection_Buyer.make, {
                              isSameCourierAvailable: isSameCourierAvailable,
                              isCourierAvailable: firstIsCourierAvailable,
                              prefix: formNames.name,
                              deviceType: deviceType
                            }), React.createElement(Web_Order_Delivery_Form.make, {
                              watchValue: watchValue,
                              prefix: formNames.name,
                              deviceType: deviceType
                            }))), React.createElement("aside", {
                      className: "w-full relative bottom-0"
                    }, React.createElement(Web_Order_Payment_Info_Buyer.make, {
                          prefix: formNames.name,
                          productInfos: productInfos,
                          deviceType: deviceType
                        }))));
}

var MO$1 = {
  make: Web_Order_Item_Buyer$MO
};

function Web_Order_Item_Buyer(Props) {
  var deviceType = Props.deviceType;
  var productOptions = Props.productOptions;
  var match = ReactHookForm.useFormContext({
        mode: "onChange"
      }, undefined);
  var setValue = match.setValue;
  var router = Router.useRouter();
  var formNames = Web_Order_Buyer_Form.names(Web_Order_Buyer_Form.name);
  var productInfos = Web_Order_Buyer_Form.productInfoSort(Belt_Array.keepMap(Belt_Map.toArray(Garter_Array.groupBy(Belt_Array.keepMap(productOptions, Web_Order_Buyer_Form.toFixedData), (function (a) {
                      return a.productId;
                    }), Garter_Id.IntComparable)), (function (param) {
              return Web_Order_Buyer_Form.concat(param[1]);
            })));
  var firstIsCourierAvailable = Belt_Option.map(Belt_Array.get(productInfos, 0), (function (first) {
          return first.isCourierAvailable;
        }));
  var isSameCourierAvailable = Belt_Option.map(firstIsCourierAvailable, (function (first$p) {
          return Belt_Array.every(Belt_Array.map(productInfos, (function (t) {
                            return t.isCourierAvailable;
                          })), (function (c) {
                        return c === first$p;
                      }));
        }));
  var watchValue = ReactHookForm.useWatch({
        name: formNames.deliveryType
      });
  React.useEffect((function () {
          Web_Order_Buyer_Form.gtmDataPush(productInfos);
          setValue(formNames.productInfos, Web_Order_Buyer_Form.productInfos_encode(productInfos));
        }), []);
  switch (deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React.createElement(React.Fragment, undefined, React.createElement(Header_Buyer.PC_Old.make, {
                        key: router.asPath
                      }), React.createElement(Web_Order_Item_Buyer$PC, {
                        productInfos: productInfos,
                        firstIsCourierAvailable: firstIsCourierAvailable,
                        isSameCourierAvailable: isSameCourierAvailable,
                        formNames: formNames,
                        watchValue: watchValue,
                        deviceType: deviceType
                      }), React.createElement(Footer_Buyer.PC.make, {}));
    case /* Mobile */2 :
        return React.createElement(React.Fragment, undefined, React.createElement(Header_Buyer.Mobile.make, {
                        key: router.asPath
                      }), React.createElement(Web_Order_Item_Buyer$MO, {
                        productInfos: productInfos,
                        firstIsCourierAvailable: firstIsCourierAvailable,
                        isSameCourierAvailable: isSameCourierAvailable,
                        formNames: formNames,
                        watchValue: watchValue,
                        deviceType: deviceType
                      }), React.createElement(Footer_Buyer.MO.make, {}));
    
  }
}

var Form;

var make = Web_Order_Item_Buyer;

export {
  Form ,
  PlaceHolder ,
  PC$1 as PC,
  MO$1 as MO,
  make ,
}
/* react Not a pure module */
