// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Garter_Fn from "@greenlabs/garter/src/Garter_Fn.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactRelay from "react-relay";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import Format from "date-fns/format";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as OrderCancelAdmin_Query_graphql from "../__generated__/OrderCancelAdmin_Query_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(OrderCancelAdmin_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(OrderCancelAdmin_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(OrderCancelAdmin_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(OrderCancelAdmin_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, OrderCancelAdmin_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, OrderCancelAdmin_Query_graphql.node, OrderCancelAdmin_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: OrderCancelAdmin_Query_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, OrderCancelAdmin_Query_graphql.node, OrderCancelAdmin_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(OrderCancelAdmin_Query_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(OrderCancelAdmin_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(OrderCancelAdmin_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(OrderCancelAdmin_Query_graphql.node, OrderCancelAdmin_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_wosOrderEventLogType_decode = OrderCancelAdmin_Query_graphql.Utils.wosOrderEventLogType_decode;

var Query_wosOrderEventLogType_fromString = OrderCancelAdmin_Query_graphql.Utils.wosOrderEventLogType_fromString;

var Query = {
  wosOrderEventLogType_decode: Query_wosOrderEventLogType_decode,
  wosOrderEventLogType_fromString: Query_wosOrderEventLogType_fromString,
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function auth_encode(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.intToJson(v.id)
              ],
              [
                "email",
                Spice.optionToJson(Spice.stringToJson, v.email)
              ],
              [
                "name",
                Spice.optionToJson(Spice.stringToJson, v.name)
              ]
            ]);
}

function auth_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var email = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "email"), null));
    if (email.TAG === /* Ok */0) {
      var name = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
      if (name.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  id: id._0,
                  email: email._0,
                  name: name._0
                }
              };
      }
      var e = name._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".name" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = email._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".email" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function reasonType_encode(v) {
  switch (v) {
    case /* DELIVERY_NOT_POSSIBLE */0 :
        return "DELIVERY_NOT_POSSIBLE";
    case /* DELIVERY_ACCIDENT */1 :
        return "DELIVERY_ACCIDENT";
    case /* DELIVERY_DELAY */2 :
        return "DELIVERY_DELAY";
    case /* CHANGED_MIND */3 :
        return "CHANGED_MIND";
    case /* PRODUCT_SOLDOUT */4 :
        return "PRODUCT_SOLDOUT";
    case /* DUPLICATED_ORDER */5 :
        return "DUPLICATED_ORDER";
    case /* ETC */6 :
        return "ETC";
    
  }
}

function reasonType_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("DELIVERY_NOT_POSSIBLE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DELIVERY_NOT_POSSIBLE */0
          };
  } else if ("DELIVERY_ACCIDENT" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DELIVERY_ACCIDENT */1
          };
  } else if ("DELIVERY_DELAY" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DELIVERY_DELAY */2
          };
  } else if ("CHANGED_MIND" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CHANGED_MIND */3
          };
  } else if ("PRODUCT_SOLDOUT" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PRODUCT_SOLDOUT */4
          };
  } else if ("DUPLICATED_ORDER" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DUPLICATED_ORDER */5
          };
  } else if ("ETC" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ETC */6
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function toString(r) {
  switch (r) {
    case /* DELIVERY_NOT_POSSIBLE */0 :
        return "배송불가";
    case /* DELIVERY_ACCIDENT */1 :
        return "배송사고";
    case /* DELIVERY_DELAY */2 :
        return "배송지연";
    case /* CHANGED_MIND */3 :
        return "단순변심";
    case /* PRODUCT_SOLDOUT */4 :
        return "상품품절";
    case /* DUPLICATED_ORDER */5 :
        return "중복주문";
    case /* ETC */6 :
        return "기타";
    
  }
}

function reason_encode(v) {
  return Js_dict.fromArray([
              [
                "email",
                Spice.stringToJson(v.email)
              ],
              [
                "reason_type",
                Spice.optionToJson(reasonType_encode, v.reasonType)
              ],
              [
                "reason_desc",
                Spice.optionToJson(Spice.stringToJson, v.reasonDesc)
              ]
            ]);
}

function reason_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var email = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "email"), null));
  if (email.TAG === /* Ok */0) {
    var reasonType = Spice.optionFromJson(reasonType_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "reason_type"), null));
    if (reasonType.TAG === /* Ok */0) {
      var reasonDesc = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "reason_desc"), null));
      if (reasonDesc.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  email: email._0,
                  reasonType: reasonType._0,
                  reasonDesc: reasonDesc._0
                }
              };
      }
      var e = reasonDesc._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: "." + ("reason_desc" + e.path),
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = reasonType._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: "." + ("reason_type" + e$1.path),
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = email._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".email" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function detail_encode(v) {
  return Js_dict.fromArray([
              [
                "auth",
                Spice.optionToJson(auth_encode, v.auth)
              ],
              [
                "reason",
                Spice.optionToJson(reason_encode, v.reason)
              ]
            ]);
}

function detail_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var auth = Spice.optionFromJson(auth_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "auth"), null));
  if (auth.TAG === /* Ok */0) {
    var reason = Spice.optionFromJson(reason_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "reason"), null));
    if (reason.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                auth: auth._0,
                reason: reason._0
              }
            };
    }
    var e = reason._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".reason" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = auth._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".auth" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function detailJson_encode(v) {
  return Js_dict.fromArray([[
                "detail",
                detail_encode(v.detail)
              ]]);
}

function detailJson_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var detail = detail_decode(Belt_Option.getWithDefault(Js_dict.get(dict._0, "detail"), null));
  if (detail.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              detail: detail._0
            }
          };
  }
  var e = detail._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".detail" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function Order_Cancel_Admin(props) {
  var match = use({
        orderNo: props.orderNo,
        orderProductNo: props.orderProductNo
      }, undefined, undefined, undefined, undefined);
  var decoded = Belt_Option.flatMap(Belt_Option.flatMap(match.wosOrder, (function (wosOrder$p) {
              return Belt_Array.get(Belt_Array.keepMap(wosOrder$p.eventLogs, Garter_Fn.identity), 0);
            })), (function (log) {
          var detailJson = log.detailJson;
          var json;
          if (detailJson !== undefined) {
            try {
              json = JSON.parse(detailJson);
            }
            catch (exn){
              json = Pervasives.failwith("Expected an object");
            }
          } else {
            json = null;
          }
          var decode = detailJson_decode(json);
          if (decode.TAG === /* Ok */0) {
            return {
                    eventType: log.eventType,
                    createdAt: log.createdAt,
                    detailJson: decode._0
                  };
          }
          
        }));
  if (decoded === undefined) {
    return null;
  }
  var match$1 = decoded.detailJson.detail;
  var reason = match$1.reason;
  return React.createElement(React.Fragment, undefined, React.createElement("h3", {
                  className: "mt-10 font-bold"
                }, "주문취소 정보"), React.createElement("section", {
                  className: "divide-y text-sm text-text-L2 mt-2 border-t border-b"
                }, React.createElement("div", {
                      className: "grid grid-cols-2-detail"
                    }, React.createElement("div", {
                          className: "p-3 bg-div-shape-L2"
                        }, "처리자"), React.createElement("div", {
                          className: "p-3"
                        }, Belt_Option.getWithDefault(Belt_Option.flatMap(match$1.auth, (function (auth$p) {
                                    return auth$p.email;
                                  })), "-"))), React.createElement("div", {
                      className: "grid grid-cols-2-detail"
                    }, React.createElement("div", {
                          className: "p-3 bg-div-shape-L2"
                        }, "취소일시"), React.createElement("div", {
                          className: "p-3"
                        }, Format(new Date(decoded.createdAt), "yyyy/MM/dd HH:mm"))), React.createElement("div", {
                      className: "grid grid-cols-2-detail"
                    }, React.createElement("div", {
                          className: "p-3 bg-div-shape-L2"
                        }, "취소사유"), React.createElement("div", {
                          className: "p-3"
                        }, Belt_Option.mapWithDefault(Belt_Option.flatMap(reason, (function (r) {
                                    return r.reasonType;
                                  })), "-", toString))), React.createElement("div", {
                      className: "grid grid-cols-2-detail w-full"
                    }, React.createElement("div", {
                          className: "p-3 bg-div-shape-L2"
                        }, "취소상세사유"), React.createElement("div", {
                          className: "p-3 whitespace-pre-wrap break-all"
                        }, Belt_Option.getWithDefault(Belt_Option.flatMap(reason, (function (r) {
                                    return r.reasonDesc;
                                  })), "-")))));
}

var make = Order_Cancel_Admin;

export {
  Query ,
  auth_encode ,
  auth_decode ,
  reasonType_encode ,
  reasonType_decode ,
  toString ,
  reason_encode ,
  reason_decode ,
  detail_encode ,
  detail_decode ,
  detailJson_encode ,
  detailJson_decode ,
  make ,
}
/* react Not a pure module */
