// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactRelay from "react-relay";
import * as ReactHookForm from "react-hook-form";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Web_Order_Buyer_Form from "./Web_Order_Buyer_Form.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ErrorMessage from "@hookform/error-message";
import * as Web_Order_Util_Component from "./Web_Order_Util_Component.mjs";
import * as WebOrderDeliveryMethodSelectionBuyerFragment_graphql from "../__generated__/WebOrderDeliveryMethodSelectionBuyerFragment_graphql.mjs";

function use(fRef) {
  var data = ReactRelay.useFragment(WebOrderDeliveryMethodSelectionBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(WebOrderDeliveryMethodSelectionBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(WebOrderDeliveryMethodSelectionBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return WebOrderDeliveryMethodSelectionBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  use: use,
  useOpt: useOpt
};

function Web_Order_Delivery_Method_Selection_Buyer$PlaceHoder$PC(Props) {
  return React.createElement("section", {
              className: "flex flex-col p-7 gap-5 bg-white rounded-sm"
            }, React.createElement("span", {
                  className: "flex items-center gap-1 text-xl text-enabled-L1 font-bold"
                }, "배송 방식 선택", React.createElement(Web_Order_Util_Component.Tooltip.PC.make, {
                      children: "선택하신 배송 방식에 따라 배송비 부과 정책이 달라집니다."
                    })), React.createElement("div", {
                  className: "flex gap-2"
                }, React.createElement(Web_Order_Util_Component.RadioButton.PlaceHolder.PC.make, {}), React.createElement(Web_Order_Util_Component.RadioButton.PlaceHolder.PC.make, {}), React.createElement(Web_Order_Util_Component.RadioButton.PlaceHolder.PC.make, {})));
}

var PC = {
  make: Web_Order_Delivery_Method_Selection_Buyer$PlaceHoder$PC
};

function Web_Order_Delivery_Method_Selection_Buyer$PlaceHoder$MO(Props) {
  return React.createElement("section", {
              className: "flex flex-col p-7 gap-5 bg-white rounded-sm"
            }, React.createElement("span", {
                  className: "flex items-center gap-1 text-lg text-enabled-L1 font-bold"
                }, "배송 방식 선택", React.createElement(Web_Order_Util_Component.Tooltip.Mobile.make, {
                      children: "선택하신 배송 방식에 따라 배송비 부과 정책이 달라집니다."
                    })), React.createElement("div", {
                  className: "flex gap-2"
                }, React.createElement(Web_Order_Util_Component.RadioButton.PlaceHolder.MO.make, {}), React.createElement(Web_Order_Util_Component.RadioButton.PlaceHolder.MO.make, {}), React.createElement(Web_Order_Util_Component.RadioButton.PlaceHolder.MO.make, {})));
}

var MO = {
  make: Web_Order_Delivery_Method_Selection_Buyer$PlaceHoder$MO
};

var PlaceHoder = {
  PC: PC,
  MO: MO
};

function Web_Order_Delivery_Method_Selection_Buyer(Props) {
  var isSameCourierAvailable = Props.isSameCourierAvailable;
  var isCourierAvailable = Props.isCourierAvailable;
  var prefix = Props.prefix;
  var deviceType = Props.deviceType;
  var formNames = Web_Order_Buyer_Form.names(prefix);
  var match = ReactHookForm.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(formNames.deliveryType, {
        required: true
      });
  var name = match$1.name;
  var ref = match$1.ref;
  var onBlur = match$1.onBlur;
  var onChange = match$1.onChange;
  var watchValue = ReactHookForm.useWatch({
        name: formNames.deliveryType
      });
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "flex gap-2"
                }, Belt_Array.map(isSameCourierAvailable !== undefined ? (
                        isSameCourierAvailable ? (
                            isCourierAvailable !== undefined ? (
                                isCourierAvailable ? [
                                    [
                                      "parcel",
                                      "택배배송"
                                    ],
                                    [
                                      "freight",
                                      "화물배송"
                                    ],
                                    [
                                      "self",
                                      "직접수령"
                                    ]
                                  ] : [
                                    [
                                      "freight",
                                      "화물배송"
                                    ],
                                    [
                                      "self",
                                      "직접수령"
                                    ]
                                  ]
                              ) : []
                          ) : []
                      ) : [], (function (param) {
                        var n = param[1];
                        var value = param[0];
                        return React.createElement("label", {
                                    key: n,
                                    className: "focus:outline-none focus-within:bg-primary-light focus-within:outline-none focus-within:rounded-xl"
                                  }, React.createElement("input", {
                                        ref: ref,
                                        className: "sr-only",
                                        id: name,
                                        name: name,
                                        type: "radio",
                                        value: value,
                                        onBlur: onBlur,
                                        onChange: onChange
                                      }), React.createElement(Web_Order_Util_Component.RadioButton.make, {
                                        watchValue: watchValue,
                                        name: n,
                                        value: value,
                                        deviceType: deviceType
                                      }));
                      }))), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "배송 방식을 선택해주세요"));
                    })
                }));
}

var Form;

var make = Web_Order_Delivery_Method_Selection_Buyer;

export {
  Form ,
  Fragment ,
  PlaceHoder ,
  make ,
}
/* react Not a pure module */
