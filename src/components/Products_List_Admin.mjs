// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "@rescript/react/src/React.mjs";
import * as React$1 from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Skeleton from "./Skeleton.mjs";
import * as Constants from "../constants/Constants.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Pagination from "./common/Pagination.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as Product_Admin from "./Product_Admin.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ProductsListAdminFragment_graphql from "../__generated__/ProductsListAdminFragment_graphql.mjs";

function use(fRef) {
  var data = ReactRelay.useFragment(ProductsListAdminFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(ProductsListAdminFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(ProductsListAdminFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return ProductsListAdminFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  Operation: undefined,
  use: use,
  useOpt: useOpt
};

function Products_List_Admin$Skeleton(props) {
  return React$1.createElement(React$1.Fragment, undefined, React$1.createElement("div", {
                  className: "md:flex md:justify-between pb-4"
                }, React$1.createElement("div", {
                      className: "flex flex-auto items-center justify-between h-8"
                    }, React$1.createElement("h3", {
                          className: "text-lg font-bold"
                        }, "내역"), React$1.createElement(Skeleton.Box.make, {
                          className: "w-32"
                        }))), React$1.createElement("div", {
                  className: "w-full overflow-x-scroll"
                }, React$1.createElement("div", {
                      className: "min-w-max text-sm"
                    }, React$1.createElement("div", {
                          className: "bg-gray-50 h-12 divide-y divide-gray-100"
                        }), React$1.createElement("span", {
                          className: "w-full h-[500px] flex items-center justify-center"
                        }, "로딩중.."))));
}

var Skeleton$1 = {
  make: Products_List_Admin$Skeleton
};

function Products_List_Admin(props) {
  var router = Router.useRouter();
  var match = use(props.query);
  var products = match.products;
  var limit = Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(router.query, "limit"), Belt_Int.fromString), 25);
  return React$1.createElement(React$1.Fragment, undefined, React$1.createElement("div", {
                  className: "w-full overflow-x-scroll"
                }, React$1.createElement("div", {
                      className: "min-w-max text-sm divide-y divide-gray-100"
                    }, React$1.createElement("div", {
                          className: "grid grid-cols-9-admin-product bg-gray-100 text-gray-500 h-12"
                        }, React$1.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap"
                            }, "판매상태"), React$1.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap"
                            }, "상품 유형"), React$1.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap"
                            }, "상품명·상품번호"), React$1.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap"
                            }, "단품정보"), React$1.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap"
                            }, "생산자·생산자번호"), React$1.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap"
                            }, "표준카테고리"), React$1.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap"
                            }, "전시카테고리"), React$1.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap"
                            }, "바이어판매가"), React$1.createElement("div", {
                              className: "h-full px-4 flex items-center whitespace-nowrap"
                            }, "택배여부")), React$1.createElement("ol", {
                          className: "divide-y divide-gray-100 lg:list-height-admin-buyer lg:overflow-y-scroll"
                        }, Belt_Array.map(products.edges, (function (param) {
                                var product = param.node;
                                return React.createElementWithKey(Product_Admin.make, {
                                            query: product.fragmentRefs
                                          }, product.id);
                              }))))), React$1.createElement("div", {
                  className: "flex justify-center pt-5"
                }, null, React$1.createElement(Pagination.make, {
                      pageDisplySize: Constants.pageDisplySize,
                      itemPerPage: limit,
                      total: products.totalCount
                    })));
}

var make = Products_List_Admin;

export {
  Fragment ,
  Skeleton$1 as Skeleton,
  make ,
}
/* React Not a pure module */
