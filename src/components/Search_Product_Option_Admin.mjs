// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as React from "react";
import * as Helper from "../utils/Helper.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as ReactSelect from "./common/ReactSelect.mjs";
import * as Router from "next/router";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as ReForm__Helpers from "@rescriptbr/reform/src/ReForm__Helpers.mjs";
import * as Search_Crop_Cultivar from "./Search_Crop_Cultivar.mjs";
import * as Select_Crop_Search_Std from "./Select_Crop_Search_Std.mjs";
import * as Query_Product_Form_Admin from "./Query_Product_Form_Admin.mjs";
import * as Select_Product_Option_Status from "./Select_Product_Option_Status.mjs";

function Search_Product_Option_Admin(Props) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        return Select_Product_Option_Status.parseStatus(router.query);
      });
  var setStatus = match[1];
  var status = match[0];
  var match$1 = React.useState(function () {
        return /* NotSelected */0;
      });
  var setSelectedCrop = match$1[1];
  var selectedCrop = match$1[0];
  var handleOnChageStatus = function (e) {
    var newStatus = e.target.value;
    return setStatus(function (param) {
                return Belt_Option.getWithDefault(Select_Product_Option_Status.decodeStatus(newStatus), /* ALL */0);
              });
  };
  var onSubmit = function (param) {
    var state = param.state;
    var producerName = Query_Product_Form_Admin.FormFields.get(state.values, /* ProducerName */0);
    var productName = Query_Product_Form_Admin.FormFields.get(state.values, /* ProductName */1);
    var std = Query_Product_Form_Admin.FormFields.get(state.values, /* Std */2);
    router.query["producer-name"] = producerName;
    router.query["product-name"] = productName;
    router.query["status"] = Select_Product_Option_Status.encodeStatus(status);
    router.query["crop-search-std"] = std;
    var match = Belt_Option.mapWithDefault(ReactSelect.toOption(selectedCrop), [
          "",
          ""
        ], (function (v) {
            return [
                    v.value,
                    v.label
                  ];
          }));
    router.query["category-id"] = match[0];
    router.query["label"] = match[1];
    router.query["offset"] = "0";
    router.push(router.pathname + "?" + new URLSearchParams(router.query).toString());
    
  };
  var form = Curry._7(Query_Product_Form_Admin.Form.use, Query_Product_Form_Admin.initialState, /* Schema */{
        _0: Belt_Array.concatMany([])
      }, onSubmit, undefined, undefined, /* OnChange */0, undefined);
  var handleOnChangeCropOrCultivar = function (e) {
    ReForm__Helpers.handleChange(Curry._1(form.handleChange, /* Std */2), e);
    return setSelectedCrop(function (param) {
                return /* NotSelected */0;
              });
  };
  var handleOnSubmit = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return Curry._1(form.submit, undefined);
                }), param);
  };
  React.useEffect((function () {
          Curry._1(form.resetForm, undefined);
          Garter_Array.forEach(Js_dict.entries(router.query), (function (entry) {
                  var v = entry[1];
                  var k = entry[0];
                  if (k === "producer-name") {
                    return Curry._4(form.setFieldValue, /* ProducerName */0, v, false, undefined);
                  } else if (k === "product-name") {
                    return Curry._4(form.setFieldValue, /* ProductName */1, v, false, undefined);
                  } else if (k === "status") {
                    return setStatus(function (param) {
                                return Belt_Option.getWithDefault(Select_Product_Option_Status.decodeStatus(v), /* ALL */0);
                              });
                  } else if (k === "crop-search-std") {
                    return Curry._4(form.setFieldValue, /* Std */2, v, false, undefined);
                  } else {
                    return ;
                  }
                }));
          Helper.$$Option.map2(Js_dict.get(router.query, "crop"), Js_dict.get(router.query, "label"), (function (value, label) {
                  if (value !== "" && label !== "") {
                    return setSelectedCrop(function (param) {
                                return /* Selected */{
                                        value: value,
                                        label: label
                                      };
                              });
                  }
                  
                }));
          
        }), [router.query]);
  var handleOnReset = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  Curry._4(form.setFieldValue, /* ProducerName */0, "", false, undefined);
                  Curry._4(form.setFieldValue, /* ProductName */1, "", false, undefined);
                  Curry._4(form.setFieldValue, /* Std */2, "Crop", false, undefined);
                  setStatus(function (param) {
                        return /* ALL */0;
                      });
                  return setSelectedCrop(function (param) {
                              return /* NotSelected */0;
                            });
                }), param);
  };
  var handleChangeCrop = function (selection) {
    return setSelectedCrop(function (param) {
                return selection;
              });
  };
  var partial_arg = Curry._1(form.handleChange, /* ProducerName */0);
  var partial_arg$1 = Curry._1(form.handleChange, /* ProductName */1);
  return React.createElement("div", {
              className: "p-7 mt-4 mx-4 bg-white rounded shadow-gl"
            }, React.createElement("form", {
                  onSubmit: handleOnSubmit
                }, React.createElement("div", {
                      className: "py-3 flex flex-col text-sm bg-gray-gl rounded-xl"
                    }, React.createElement("div", {
                          className: "flex"
                        }, React.createElement("div", {
                              className: "w-32 font-bold mt-2 pl-7 whitespace-nowrap"
                            }, "검색"), React.createElement("div", {
                              className: "flex-1"
                            }, React.createElement("div", {
                                  className: "flex"
                                }, React.createElement("div", {
                                      className: "flex-1 flex flex-col sm:flex-initial sm:w-64 sm:flex-row sm:items-center mr-16"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "producer-name"
                                        }, "생산자명"), React.createElement(Input.make, {
                                          type_: "text",
                                          name: "producer-name",
                                          placeholder: "생산자명 입력",
                                          value: Query_Product_Form_Admin.FormFields.get(form.values, /* ProducerName */0),
                                          onChange: (function (param) {
                                              return ReForm__Helpers.handleChange(partial_arg, param);
                                            }),
                                          error: Curry._1(form.getFieldError, /* Field */{
                                                _0: /* ProducerName */0
                                              }),
                                          tabIndex: 1
                                        })), React.createElement("div", {
                                      className: "min-w-1/2 flex items-center"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "product-name"
                                        }, "상품명"), React.createElement("span", {
                                          className: "flex-1"
                                        }, React.createElement(Input.make, {
                                              type_: "text",
                                              name: "product-name",
                                              placeholder: "상품명 입력",
                                              value: Query_Product_Form_Admin.FormFields.get(form.values, /* ProductName */1),
                                              onChange: (function (param) {
                                                  return ReForm__Helpers.handleChange(partial_arg$1, param);
                                                }),
                                              error: Curry._1(form.getFieldError, /* Field */{
                                                    _0: /* ProductName */1
                                                  }),
                                              tabIndex: 2
                                            })))), React.createElement("div", {
                                  className: "flex mt-3"
                                }, React.createElement("div", {
                                      className: "w-64 flex items-center"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "crop-kind"
                                        }, "작물품종"), React.createElement(Select_Crop_Search_Std.make, {
                                          std: Belt_Option.getWithDefault(Select_Crop_Search_Std.decodeStd(Query_Product_Form_Admin.FormFields.get(form.values, /* Std */2)), "Crop"),
                                          onChange: handleOnChangeCropOrCultivar
                                        })), React.createElement("div", {
                                      className: "relative"
                                    }, React.createElement("div", {
                                          className: "absolute w-96"
                                        }, React.createElement(Search_Crop_Cultivar.make, {
                                              type_: Belt_Option.getWithDefault(Select_Crop_Search_Std.decodeStd(Query_Product_Form_Admin.FormFields.get(form.values, /* Std */2)), "Crop"),
                                              value: selectedCrop,
                                              onChange: handleChangeCrop
                                            })))), React.createElement("div", {
                                  className: "flex mt-3"
                                }, React.createElement("div", {
                                      className: "w-64 flex items-center mr-16"
                                    }, React.createElement("label", {
                                          className: "whitespace-nowrap mr-2",
                                          htmlFor: "product-status"
                                        }, "판매상태"), React.createElement(Select_Product_Option_Status.make, {
                                          status: status,
                                          onChange: handleOnChageStatus
                                        })))))), React.createElement("div", {
                      className: "flex justify-center mt-5"
                    }, React.createElement("input", {
                          className: "w-20 py-2 bg-gray-button-gl text-black-gl rounded-xl ml-2 hover:bg-gray-button-gl focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-gray-gl focus:ring-opacity-100",
                          tabIndex: 5,
                          type: "button",
                          value: "초기화",
                          onClick: handleOnReset
                        }), React.createElement("input", {
                          className: "w-20 py-2 bg-green-gl text-white font-bold rounded-xl ml-2 hover:bg-green-gl-dark focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-green-gl focus:ring-opacity-100",
                          tabIndex: 4,
                          type: "submit",
                          value: "검색"
                        }))));
}

var FormFields;

var Form;

var Select;

var Select_Crop_Std;

var make = Search_Product_Option_Admin;

export {
  FormFields ,
  Form ,
  Select ,
  Select_Crop_Std ,
  make ,
  
}
/* Input Not a pure module */
