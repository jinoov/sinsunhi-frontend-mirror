// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as IconArrowSelect from "./svgs/IconArrowSelect.mjs";

function Select(Status) {
  var status_encode = Status.status_encode;
  var status_decode = Status.status_decode;
  var toString = function (status) {
    return Js_json.decodeString(Curry._1(status_encode, status));
  };
  var defaultStyle = "flex px-3 py-2 border items-center border-border-default-L1 rounded-lg h-9 text-enabled-L1 focus:outline";
  var Select_Product_NotationType_Admin$Select = function (Props) {
    var status = Props.status;
    var onChange = Props.onChange;
    var forwardRef = Props.forwardRef;
    var disabled = Props.disabled;
    var displayStatus = Belt_Option.getWithDefault(Belt_Option.map(status, Status.toDisplay), "필수 표기정보 유형 선택");
    var value = Belt_Option.getWithDefault(Belt_Option.flatMap(status, toString), "");
    var handleProductOperationStatus = function (e) {
      var status = e.target.value;
      var status$p = Curry._1(status_decode, status);
      if (status$p.TAG === /* Ok */0) {
        return Curry._1(onChange, status$p._0);
      }
      
    };
    var tmp = {
      ref: forwardRef,
      className: "block w-full h-full absolute top-0 opacity-0",
      value: value,
      onChange: handleProductOperationStatus
    };
    if (disabled !== undefined) {
      tmp.disabled = Caml_option.valFromOption(disabled);
    }
    return React.createElement("span", undefined, React.createElement("label", {
                    className: "block relative"
                  }, React.createElement("span", {
                        className: Belt_Option.mapWithDefault(disabled, Cx.cx([
                                  defaultStyle,
                                  "bg-white"
                                ]), (function (d) {
                                if (d) {
                                  return Cx.cx([
                                              defaultStyle,
                                              "bg-disabled-L3"
                                            ]);
                                } else {
                                  return Cx.cx([
                                              defaultStyle,
                                              "bg-white"
                                            ]);
                                }
                              }))
                      }, displayStatus), React.createElement("span", {
                        className: "absolute top-1.5 right-2"
                      }, React.createElement(IconArrowSelect.make, {
                            height: "24",
                            width: "24",
                            fill: "#121212"
                          })), React.createElement("select", tmp, React.createElement("option", {
                            hidden: value !== "",
                            disabled: true,
                            value: ""
                          }, "필수 표기정보 유형 선택"), Belt_Array.map(Status.options, (function (s) {
                              var value = Belt_Option.getWithDefault(Js_json.decodeString(Curry._1(status_encode, s)), "");
                              return React.createElement("option", {
                                          key: value,
                                          value: value
                                        }, Curry._1(Status.toDisplay, s));
                            })))));
  };
  return {
          options: Status.options,
          toDisplay: Status.toDisplay,
          status_encode: status_encode,
          status_decode: status_decode,
          toString: toString,
          defaultStyle: defaultStyle,
          make: Select_Product_NotationType_Admin$Select
        };
}

function status_encode(v) {
  if (v) {
    return "WHOLE_FOOD";
  } else {
    return "PROCESSED_FOOD";
  }
}

function status_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("PROCESSED_FOOD" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PROCESSED_FOOD */0
          };
  } else if ("WHOLE_FOOD" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* WHOLE_FOOD */1
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function toDisplay(status) {
  if (status) {
    return "농축수산물";
  } else {
    return "가공식품";
  }
}

var options = [
  /* PROCESSED_FOOD */0,
  /* WHOLE_FOOD */1
];

var NotationStatus = {
  status_encode: status_encode,
  status_decode: status_decode,
  toDisplay: toDisplay,
  options: options
};

function toString(status) {
  return Js_json.decodeString(status ? "WHOLE_FOOD" : "PROCESSED_FOOD");
}

var defaultStyle = "flex px-3 py-2 border items-center border-border-default-L1 rounded-lg h-9 text-enabled-L1 focus:outline";

function Select_Product_NotationType_Admin$Select(Props) {
  var status = Props.status;
  var onChange = Props.onChange;
  var forwardRef = Props.forwardRef;
  var disabled = Props.disabled;
  var displayStatus = Belt_Option.getWithDefault(Belt_Option.map(status, toDisplay), "필수 표기정보 유형 선택");
  var value = Belt_Option.getWithDefault(Belt_Option.flatMap(status, toString), "");
  var handleProductOperationStatus = function (e) {
    var status = e.target.value;
    var status$p = status_decode(status);
    if (status$p.TAG === /* Ok */0) {
      return Curry._1(onChange, status$p._0);
    }
    
  };
  var tmp = {
    ref: forwardRef,
    className: "block w-full h-full absolute top-0 opacity-0",
    value: value,
    onChange: handleProductOperationStatus
  };
  if (disabled !== undefined) {
    tmp.disabled = Caml_option.valFromOption(disabled);
  }
  return React.createElement("span", undefined, React.createElement("label", {
                  className: "block relative"
                }, React.createElement("span", {
                      className: Belt_Option.mapWithDefault(disabled, Cx.cx([
                                defaultStyle,
                                "bg-white"
                              ]), (function (d) {
                              if (d) {
                                return Cx.cx([
                                            defaultStyle,
                                            "bg-disabled-L3"
                                          ]);
                              } else {
                                return Cx.cx([
                                            defaultStyle,
                                            "bg-white"
                                          ]);
                              }
                            }))
                    }, displayStatus), React.createElement("span", {
                      className: "absolute top-1.5 right-2"
                    }, React.createElement(IconArrowSelect.make, {
                          height: "24",
                          width: "24",
                          fill: "#121212"
                        })), React.createElement("select", tmp, React.createElement("option", {
                          hidden: value !== "",
                          disabled: true,
                          value: ""
                        }, "필수 표기정보 유형 선택"), Belt_Array.map(options, (function (s) {
                            var value = Belt_Option.getWithDefault(Js_json.decodeString(s ? "WHOLE_FOOD" : "PROCESSED_FOOD"), "");
                            return React.createElement("option", {
                                        key: value,
                                        value: value
                                      }, s ? "농축수산물" : "가공식품");
                          })))));
}

var Notation = {
  options: options,
  toDisplay: toDisplay,
  status_encode: status_encode,
  status_decode: status_decode,
  toString: toString,
  defaultStyle: defaultStyle,
  make: Select_Product_NotationType_Admin$Select
};

export {
  Select ,
  NotationStatus ,
  Notation ,
}
/* react Not a pure module */
