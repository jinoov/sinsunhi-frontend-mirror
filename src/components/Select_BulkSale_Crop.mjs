// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Helper from "../utils/Helper.mjs";
import * as RelayEnv from "../constants/RelayEnv.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Hooks from "react-relay/hooks";
import Async from "react-select/async";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as SelectBulkSaleCropQuery_graphql from "../__generated__/SelectBulkSaleCropQuery_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(SelectBulkSaleCropQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(SelectBulkSaleCropQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(SelectBulkSaleCropQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(SelectBulkSaleCropQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, SelectBulkSaleCropQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, SelectBulkSaleCropQuery_graphql.node, SelectBulkSaleCropQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: SelectBulkSaleCropQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, SelectBulkSaleCropQuery_graphql.node, SelectBulkSaleCropQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(SelectBulkSaleCropQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(SelectBulkSaleCropQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(SelectBulkSaleCropQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(SelectBulkSaleCropQuery_graphql.node, SelectBulkSaleCropQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_cropCategory_decode = SelectBulkSaleCropQuery_graphql.Utils.cropCategory_decode;

var Query_cropCategory_fromString = SelectBulkSaleCropQuery_graphql.Utils.cropCategory_fromString;

var Query_cropOrderBy_decode = SelectBulkSaleCropQuery_graphql.Utils.cropOrderBy_decode;

var Query_cropOrderBy_fromString = SelectBulkSaleCropQuery_graphql.Utils.cropOrderBy_fromString;

var Query_orderDirection_decode = SelectBulkSaleCropQuery_graphql.Utils.orderDirection_decode;

var Query_orderDirection_fromString = SelectBulkSaleCropQuery_graphql.Utils.orderDirection_fromString;

var Query_makeVariables = SelectBulkSaleCropQuery_graphql.Utils.makeVariables;

var Query = {
  cropCategory_decode: Query_cropCategory_decode,
  cropCategory_fromString: Query_cropCategory_fromString,
  cropOrderBy_decode: Query_cropOrderBy_decode,
  cropOrderBy_fromString: Query_cropOrderBy_fromString,
  orderDirection_decode: Query_orderDirection_decode,
  orderDirection_fromString: Query_orderDirection_fromString,
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

var normalStyle = "flex items-center border border-border-default-L1 rounded-lg h-9 px-3 text-enabled-L1";

var errorStyle = "flex items-center border border-border-default-L1 rounded-lg h-9 px-3 text-enabled-L1 outline-none ring-2 ring-opacity-100 ring-notice remove-spin-button";

var disabledStyle = "flex items-center border border-border-default-L1 rounded-lg h-9 px-3 text-enabled-L1 bg-disabled-L3";

function style(error, disabled) {
  if (disabled !== undefined) {
    if (disabled) {
      return disabledStyle;
    } else if (error !== undefined) {
      return errorStyle;
    } else {
      return normalStyle;
    }
  } else if (error !== undefined) {
    return errorStyle;
  } else {
    return normalStyle;
  }
}

function Select_BulkSale_Crop(Props) {
  var cropId = Props.cropId;
  var onChange = Props.onChange;
  var disabled = Props.disabled;
  var error = Props.error;
  var handleLoadOptions = function (inputValue) {
    return fetchPromised(RelayEnv.envFMBridge, {
                  count: 1000,
                  cursor: undefined,
                  nameMatch: inputValue,
                  orderBy: "NAME",
                  orderDirection: "ASC"
                }, undefined, undefined, undefined).then(function (result) {
                var result$p = Garter_Array.map(result.crops.edges, (function (edge) {
                        return /* Selected */{
                                value: edge.node.id,
                                label: edge.node.name
                              };
                      }));
                return Promise.resolve(result$p);
              });
  };
  return React.createElement("article", {
              className: "mt-7"
            }, React.createElement("h3", {
                  className: "mb-2"
                }, "품목"), React.createElement(Async, {
                  value: cropId,
                  cacheOptions: false,
                  defaultOptions: true,
                  loadOptions: Helper.Debounce.make1(handleLoadOptions, 500),
                  onChange: onChange,
                  placeholder: "품목 검색",
                  noOptionsMessage: (function (param) {
                      return "검색 결과가 없습니다.";
                    }),
                  isClearable: true,
                  isDisabled: Belt_Option.getWithDefault(disabled, false),
                  styles: {
                    menu: (function (provide, param) {
                        return Object.assign(Object.assign({}, provide), {
                                    position: "inherit"
                                  });
                      })
                  }
                }), React.createElement("div", undefined, Belt_Option.mapWithDefault(error, null, (function (msg) {
                        return React.createElement("span", {
                                    className: "flex mt-2"
                                  }, React.createElement(IconError.make, {
                                        width: "20",
                                        height: "20"
                                      }), React.createElement("span", {
                                        className: "text-sm text-notice ml-1"
                                      }, msg));
                      }))));
}

var make = Select_BulkSale_Crop;

export {
  Query ,
  normalStyle ,
  errorStyle ,
  disabledStyle ,
  style ,
  make ,
  
}
/* react Not a pure module */
