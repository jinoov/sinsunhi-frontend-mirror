// Generated by ReScript, PLEASE EDIT WITH CARE

import * as V from "../utils/V.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as React from "react";
import * as IconCheck from "./svgs/IconCheck.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as IconCloseInput from "./svgs/IconCloseInput.mjs";
import GetTime from "date-fns/getTime";
import IsValid from "date-fns/isValid";
import * as Hooks from "react-relay/hooks";
import * as IconDownloadCenter from "./svgs/IconDownloadCenter.mjs";
import * as ReactDialog from "@radix-ui/react-dialog";
import * as Select_WholesalerMarket from "./Select_WholesalerMarket.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as UploadFileToS3PresignedUrl from "../utils/UploadFileToS3PresignedUrl.mjs";
import * as BulkSale_ProductSaleLedgers_Button_FormEntry_Admin from "./BulkSale_ProductSaleLedgers_Button_FormEntry_Admin.mjs";
import * as BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql from "../__generated__/BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.mjs";

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.node,
              variables: BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use(param) {
  var match = Hooks.useMutation(BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var MutationUpdate_productPackageMassUnit_decode = BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Utils.productPackageMassUnit_decode;

var MutationUpdate_productPackageMassUnit_fromString = BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Utils.productPackageMassUnit_fromString;

var MutationUpdate_make_bulkSaleProductSaleLedgerUpdateInput = BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Utils.make_bulkSaleProductSaleLedgerUpdateInput;

var MutationUpdate_make_bulkSaleProductSaleLedgerEntryCreateInput = BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Utils.make_bulkSaleProductSaleLedgerEntryCreateInput;

var MutationUpdate_make_productPackageMassInput = BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Utils.make_productPackageMassInput;

var MutationUpdate_makeVariables = BulkSaleProductSaleLedgersButtonUpdateAdminMutation_graphql.Utils.makeVariables;

var MutationUpdate = {
  productPackageMassUnit_decode: MutationUpdate_productPackageMassUnit_decode,
  productPackageMassUnit_fromString: MutationUpdate_productPackageMassUnit_fromString,
  make_bulkSaleProductSaleLedgerUpdateInput: MutationUpdate_make_bulkSaleProductSaleLedgerUpdateInput,
  make_bulkSaleProductSaleLedgerEntryCreateInput: MutationUpdate_make_bulkSaleProductSaleLedgerEntryCreateInput,
  make_productPackageMassInput: MutationUpdate_make_productPackageMassInput,
  makeVariables: MutationUpdate_makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use
};

function BulkSale_ProductSaleLedgers_Button_Update_Admin$LedgerFile(Props) {
  var path = Props.path;
  var status = CustomHooks.BulkSaleLedger.use(path);
  var match;
  if (typeof status === "number") {
    match = [
      undefined,
      "로딩 중"
    ];
  } else if (status.TAG === /* Loaded */0) {
    var resource$p = CustomHooks.BulkSaleLedger.response_decode(status._0);
    if (resource$p.TAG === /* Ok */0) {
      var resource$p$1 = resource$p._0;
      match = [
        resource$p$1.url,
        Belt_Option.getWithDefault(Garter_Array.last(resource$p$1.path.split("/")), "알 수 없는 파일명")
      ];
    } else {
      match = [
        undefined,
        "에러 발생"
      ];
    }
  } else {
    match = [
      undefined,
      "에러 발생"
    ];
  }
  return React.createElement("span", {
              className: "w-full inline-flex justify-center items-center border border-border-default-L1 rounded-lg p-2 mt-2 text-sm text-text-L1 bg-white"
            }, React.createElement("a", {
                  className: "mr-1",
                  download: "",
                  href: Belt_Option.getWithDefault(match[0], "#")
                }, React.createElement(IconDownloadCenter.make, {
                      width: "20",
                      height: "20",
                      fill: "#262626"
                    })), React.createElement("span", {
                  className: "truncate"
                }, match[1]));
}

var LedgerFile = {
  make: BulkSale_ProductSaleLedgers_Button_Update_Admin$LedgerFile
};

function makeInputUpdate(path, date, wholesalerId, ledgers) {
  return {
          bulkSaleProductSaleLedgerEntries: ledgers,
          date: date,
          path: path,
          wholesalerId: wholesalerId
        };
}

function makeEntryInputUpdate(grade, price, amount, unit, volume) {
  return {
          grade: grade,
          price: price,
          quantity: {
            amount: amount,
            unit: unit
          },
          volume: volume
        };
}

function convertPackageUnit(s) {
  if (s === "G") {
    return "G";
  } else if (s === "KG" || s !== "MG") {
    return "KG";
  } else {
    return "MG";
  }
}

function BulkSale_ProductSaleLedgers_Button_Update_Admin(Props) {
  var farmmorningUserId = Props.farmmorningUserId;
  var ledger = Props.ledger;
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var match$1 = use(undefined);
  var isMutating = match$1[1];
  var mutate = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setFiles = match$2[1];
  var file = Belt_Option.flatMap(match$2[0], Garter_Array.first);
  var match$3 = React.useState(function () {
        return ledger.path;
      });
  var setPath = match$3[1];
  var path = match$3[0];
  var match$4 = React.useState(function () {
        return ledger.date;
      });
  var setDate = match$4[1];
  var date = match$4[0];
  var match$5 = React.useState(function () {
        return Belt_Option.map(ledger.wholesaler, (function (w) {
                      return w.wholesalerMarket.id;
                    }));
      });
  var setWholesalerMarketId = match$5[1];
  var match$6 = React.useState(function () {
        return Belt_Option.map(ledger.wholesaler, (function (w) {
                      return w.id;
                    }));
      });
  var setWholesalerId = match$6[1];
  var wholesalerId = match$6[0];
  var match$7 = React.useState(function () {
        return Belt_MapString.fromArray(Belt_Array.map(ledger.bulkSaleProductSaleLedgerEntries.edges, (function (edge) {
                          return [
                                  edge.node.id,
                                  {
                                    id: edge.node.id,
                                    grade: edge.node.grade,
                                    price: String(edge.node.price),
                                    quantity: {
                                      amount: String(edge.node.quantity.amount),
                                      unit: convertPackageUnit(edge.node.quantity.unit)
                                    },
                                    volume: String(edge.node.volume)
                                  }
                                ];
                        })));
      });
  var setEntries = match$7[1];
  var entries = match$7[0];
  var match$8 = React.useState(function () {
        return Belt_MapString.set(undefined, String(GetTime(new Date())), {
                    id: String(GetTime(new Date())),
                    grade: "",
                    price: "",
                    quantity: {
                      amount: "",
                      unit: "KG"
                    },
                    volume: ""
                  });
      });
  var setNewEntries = match$8[1];
  var newEntries = match$8[0];
  var match$9 = React.useState(function () {
        return [];
      });
  var setFormErrors = match$9[1];
  var formErrors = match$9[0];
  var match$10 = React.useState(function () {
        return false;
      });
  var setShowFileRequired = match$10[1];
  var handleOnChangeFiles = function (e) {
    var values = e.target.files;
    return setFiles(function (param) {
                return values;
              });
  };
  var handleResetFile = function (param) {
    var inputFile = document.getElementById("input-file");
    Belt_Option.map((inputFile == null) ? undefined : Caml_option.some(inputFile), (function (inputFile$p) {
            inputFile$p.value = "";
            
          }));
    return setFiles(function (param) {
                
              });
  };
  var handleOnChangeDate = function (e) {
    var newDate = e.target.value;
    return setDate(function (param) {
                return newDate;
              });
  };
  var handleOnChange = function (setFn, e) {
    var value = e.target.value;
    return setFn(function (param) {
                return value;
              });
  };
  return React.createElement(React.Fragment, undefined, React.createElement("article", {
                  className: "mb-5"
                }, React.createElement("label", {
                      className: "block text-text-L1"
                    }, "업로드 파일"), React.createElement(BulkSale_ProductSaleLedgers_Button_Update_Admin$LedgerFile, {
                      path: path
                    })), React.createElement("article", undefined, React.createElement("h3", {
                      className: "text-sm"
                    }, "판매원표 업로드"), React.createElement("div", {
                      className: "flex gap-2 mt-2"
                    }, React.createElement("div", {
                          className: file !== undefined ? "p-2 relative w-full flex items-center rounded-xl border border-gray-200 text-gray-400" : "p-2 relative w-full flex items-center rounded-xl border border-gray-200 text-gray-400 bg-gray-100"
                        }, React.createElement("span", undefined, Belt_Option.getWithDefault(Belt_Option.map(file, (function (file$p) {
                                        return file$p.name;
                                      })), "파일명.jpg")), Belt_Option.getWithDefault(Belt_Option.map(file, (function (param) {
                                    return React.createElement("span", {
                                                className: "absolute p-2 right-0",
                                                onClick: (function (param) {
                                                    return handleResetFile(undefined);
                                                  })
                                              }, React.createElement(IconCloseInput.make, {
                                                    height: "28",
                                                    width: "28",
                                                    fill: "#B2B2B2"
                                                  }));
                                  })), null)), React.createElement("label", {
                          className: "relative"
                        }, React.createElement("span", {
                              className: "inline-block text-center text-text-L1 p-3 w-28 bg-div-shape-L1 rounded-xl focus:outline-none hover:text-white hover:bg-primary whitespace-nowrap hover:cursor-pointer"
                            }, "파일 선택"), React.createElement("input", {
                              className: "sr-only",
                              id: "input-file",
                              accept: ".pdf,.png,.jpg,.gif",
                              type: "file",
                              onChange: handleOnChangeFiles
                            })), React.createElement("button", {
                          className: Belt_Option.isSome(file) ? "text-white font-bold p-3 w-28 bg-green-gl rounded-xl focus:outline-none hover:bg-green-gl-dark" : "text-white font-bold p-3 w-28 bg-gray-300 rounded-xl focus:outline-none",
                          disabled: Belt_Option.isNone(file),
                          onClick: (function (param) {
                              if (file !== undefined) {
                                UploadFileToS3PresignedUrl.uploadBulkSale(Caml_option.valFromOption(file), farmmorningUserId, (function (param) {
                                        handleResetFile(undefined);
                                        return setPath(function (param$1) {
                                                    return param;
                                                  });
                                      }), (function (param) {
                                        
                                      }), undefined);
                                return ;
                              } else {
                                return setShowFileRequired(function (param) {
                                            return true;
                                          });
                              }
                            })
                        }, "업로드"))), React.createElement("section", {
                  className: "flex gap-2 mt-4"
                }, React.createElement("article", {
                      className: "w-1/3"
                    }, React.createElement("h3", {
                          className: "text-sm"
                        }, "판매일자"), React.createElement(Input.make, {
                          type_: "date",
                          name: "ledger-date",
                          className: "mt-2",
                          value: date,
                          onChange: handleOnChangeDate,
                          size: /* Small */2,
                          error: undefined,
                          min: "2021-01-01"
                        })), React.createElement(Select_WholesalerMarket.make, {
                      label: "출하 시장",
                      wholesalerMarketId: match$5[0],
                      wholesalerId: wholesalerId,
                      onChangeWholesalerMarket: (function (param) {
                          return handleOnChange(setWholesalerMarketId, param);
                        }),
                      onChangeWholesaler: (function (param) {
                          return handleOnChange(setWholesalerId, param);
                        }),
                      error: Garter_Array.first(Belt_Array.keepMap(formErrors, (function (error) {
                                  var match = error[1];
                                  if (typeof match === "object" && match.NAME === "ErrorWholesalerId") {
                                    return match.VAL;
                                  }
                                  
                                })))
                    })), React.createElement("div", {
                  className: "bg-surface rounded-xl"
                }, React.createElement("section", {
                      className: "px-4 my-4 divide-y"
                    }, Belt_Array.map(Belt_MapString.valuesToArray(entries), (function (entry) {
                            return React.createElement(BulkSale_ProductSaleLedgers_Button_FormEntry_Admin.make, {
                                        id: entry.id,
                                        entries: entries,
                                        setEntries: setEntries,
                                        formErrors: formErrors,
                                        key: entry.id
                                      });
                          })), Belt_Array.map(Belt_MapString.toArray(newEntries), (function (param) {
                            var id = param[0];
                            return React.createElement(BulkSale_ProductSaleLedgers_Button_FormEntry_Admin.make, {
                                        id: id,
                                        entries: newEntries,
                                        setEntries: setNewEntries,
                                        formErrors: formErrors,
                                        key: id
                                      });
                          }))), React.createElement("section", {
                      className: "flex justify-center items-center py-2"
                    }, React.createElement("span", {
                          className: "w-[75px]"
                        }, React.createElement("button", {
                              className: "btn-level2-line-gray py-2 text-sm",
                              onClick: (function (param) {
                                  var entries = Belt_MapString.set(newEntries, String(GetTime(new Date())), {
                                        id: String(GetTime(new Date())),
                                        grade: "",
                                        price: "",
                                        quantity: {
                                          amount: "",
                                          unit: "KG"
                                        },
                                        volume: ""
                                      });
                                  return setNewEntries(function (param) {
                                              return entries;
                                            });
                                })
                            }, "등급추가")))), React.createElement("section", undefined, React.createElement("article", {
                      className: "flex justify-center items-center mt-5"
                    }, React.createElement(ReactDialog.Close, {
                          children: React.createElement("span", {
                                className: "btn-level6 py-3 px-5",
                                id: "btn-close"
                              }, "닫기"),
                          className: "flex mr-2"
                        }), React.createElement("span", {
                          className: "flex mr-2"
                        }, React.createElement("button", {
                              className: isMutating ? "btn-level1-disabled py-3 px-5" : "btn-level1 py-3 px-5",
                              disabled: isMutating,
                              onClick: (function (param) {
                                  var inputEntries = Belt_Array.keepMap(Belt_MapString.valuesToArray(entries), (function (entry) {
                                          var input = V.ap(V.ap(V.ap(V.ap(V.map(makeEntryInputUpdate, V.nonEmpty({
                                                                    NAME: "ErrorGrade",
                                                                    VAL: "등급을 입력해주세요"
                                                                  }, entry.grade)), V.$$int({
                                                                NAME: "ErrorPrice",
                                                                VAL: "경락단가를 입력해주세요"
                                                              }, entry.price)), V.$$float({
                                                            NAME: "ErrorAmount",
                                                            VAL: "중량을 입력해주세요"
                                                          }, entry.quantity.amount)), V.pure(entry.quantity.unit)), V.$$int({
                                                    NAME: "ErrorVolume",
                                                    VAL: "거래량을 입력해주세요"
                                                  }, entry.volume));
                                          if (input.TAG === /* Ok */0) {
                                            return input._0;
                                          }
                                          
                                        }));
                                  var inputNewEntries = Belt_Array.keepMap(Belt_MapString.valuesToArray(newEntries), (function (entry) {
                                          var input = V.ap(V.ap(V.ap(V.ap(V.map(makeEntryInputUpdate, V.nonEmpty({
                                                                    NAME: "ErrorGrade",
                                                                    VAL: "등급을 입력해주세요"
                                                                  }, entry.grade)), V.$$int({
                                                                NAME: "ErrorPrice",
                                                                VAL: "경락단가를 입력해주세요"
                                                              }, entry.price)), V.$$float({
                                                            NAME: "ErrorAmount",
                                                            VAL: "중량을 입력해주세요"
                                                          }, entry.quantity.amount)), V.pure(entry.quantity.unit)), V.$$int({
                                                    NAME: "ErrorVolume",
                                                    VAL: "거래량을 입력해주세요"
                                                  }, entry.volume));
                                          if (input.TAG === /* Ok */0) {
                                            return input._0;
                                          }
                                          
                                        }));
                                  var input = V.ap(V.ap(V.ap(V.map(makeInputUpdate, V.pure(path)), V.pure(IsValid(date) ? date : undefined)), V.pure(wholesalerId)), V.pure(Belt_Array.concatMany([
                                                inputEntries,
                                                inputNewEntries
                                              ])));
                                  if (input.TAG === /* Ok */0) {
                                    Curry.app(mutate, [
                                          (function (err) {
                                              console.log(err);
                                              return addToast(React.createElement("div", {
                                                              className: "flex items-center"
                                                            }, React.createElement(IconError.make, {
                                                                  width: "24",
                                                                  height: "24",
                                                                  className: "mr-2"
                                                                }), err.message), {
                                                          appearance: "error"
                                                        });
                                            }),
                                          (function (param, param$1) {
                                              return addToast(React.createElement("div", {
                                                              className: "flex items-center"
                                                            }, React.createElement(IconCheck.make, {
                                                                  height: "24",
                                                                  width: "24",
                                                                  fill: "#12B564",
                                                                  className: "mr-2"
                                                                }), "수정 요청에 성공하였습니다."), {
                                                          appearance: "success"
                                                        });
                                            }),
                                          undefined,
                                          undefined,
                                          undefined,
                                          undefined,
                                          {
                                            id: ledger.id,
                                            input: input._0
                                          },
                                          undefined,
                                          undefined
                                        ]);
                                    return ;
                                  }
                                  var errors = input._0;
                                  return setFormErrors(function (prev) {
                                              return Belt_Array.concat(prev, errors);
                                            });
                                })
                            }, "저장")))));
}

var FormEntry;

var make = BulkSale_ProductSaleLedgers_Button_Update_Admin;

export {
  FormEntry ,
  MutationUpdate ,
  LedgerFile ,
  makeInputUpdate ,
  makeEntryInputUpdate ,
  convertPackageUnit ,
  make ,
  
}
/* Input Not a pure module */
