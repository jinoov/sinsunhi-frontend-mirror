// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "@rescript/react/src/React.mjs";
import * as React$1 from "react";
import * as Hoverable from "./common/Hoverable.mjs";
import * as IconArrow from "./svgs/IconArrow.mjs";
import * as IconClose from "./svgs/IconClose.mjs";
import Link from "next/link";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as IconHamburger from "./svgs/IconHamburger.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as ReactRemoveScroll from "react-remove-scroll";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ShopCategorySelectBuyerQuery_graphql from "../__generated__/ShopCategorySelectBuyerQuery_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = ReactRelay.useLazyLoadQuery(ShopCategorySelectBuyerQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(ShopCategorySelectBuyerQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(ShopCategorySelectBuyerQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = ReactRelay.useQueryLoader(ShopCategorySelectBuyerQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React$1.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, ShopCategorySelectBuyerQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  ReactRelay.fetchQuery(environment, ShopCategorySelectBuyerQuery_graphql.node, ShopCategorySelectBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            Curry._1(onResult, {
                  TAG: /* Ok */0,
                  _0: ShopCategorySelectBuyerQuery_graphql.Internal.convertResponse(res)
                });
          }),
        error: (function (err) {
            Curry._1(onResult, {
                  TAG: /* Error */1,
                  _0: err
                });
          })
      });
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = ReactRelay.fetchQuery(environment, ShopCategorySelectBuyerQuery_graphql.node, ShopCategorySelectBuyerQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return Js_promise.then_((function (res) {
                return Promise.resolve(ShopCategorySelectBuyerQuery_graphql.Internal.convertResponse(res));
              }), __x);
}

function usePreloaded(queryRef, param) {
  var data = ReactRelay.usePreloadedQuery(ShopCategorySelectBuyerQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(ShopCategorySelectBuyerQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(ShopCategorySelectBuyerQuery_graphql.node, ShopCategorySelectBuyerQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_displayCategoryType_decode = ShopCategorySelectBuyerQuery_graphql.Utils.displayCategoryType_decode;

var Query_displayCategoryType_fromString = ShopCategorySelectBuyerQuery_graphql.Utils.displayCategoryType_fromString;

var Query = {
  displayCategoryType_decode: Query_displayCategoryType_decode,
  displayCategoryType_fromString: Query_displayCategoryType_fromString,
  Operation: undefined,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function ShopCategorySelect_Buyer$Mobile$Sub(props) {
  return React$1.createElement(React$1.Fragment, undefined, React$1.createElement(Link, {
                  href: "/categories/" + props.parentId + "",
                  children: React$1.createElement("button", {
                        className: "text-left px-5 py-3 bg-white flex justify-between items-center active:bg-bg-pressed-L2"
                      }, React$1.createElement("span", {
                            className: "font-bold"
                          }, "전체보기"), React$1.createElement(IconArrow.make, {
                            height: "16",
                            width: "16",
                            stroke: "#B2B2B2"
                          }))
                }), Belt_Array.map(props.displayCategories, (function (param) {
                    var id = param.id;
                    return React.createElementWithKey(Link, {
                                href: "/categories/" + id + "",
                                children: React$1.createElement("button", {
                                      className: "text-left px-5 py-3 bg-white flex justify-between items-center active:bg-bg-pressed-L2"
                                    }, param.name, React$1.createElement(IconArrow.make, {
                                          height: "16",
                                          width: "16",
                                          stroke: "#B2B2B2"
                                        }))
                              }, id);
                  })));
}

var Sub = {
  make: ShopCategorySelect_Buyer$Mobile$Sub
};

function ShopCategorySelect_Buyer$Mobile(props) {
  var displayCategories = props.displayCategories;
  var match = React$1.useState(function () {
        return false;
      });
  var setOpen = match[1];
  var defaultParentId = Belt_Option.map(Belt_Array.get(displayCategories, 0), (function (param) {
          return param.id;
        }));
  var match$1 = React$1.useState(function () {
        return defaultParentId;
      });
  var setParentId = match$1[1];
  var parentId = match$1[0];
  var clickedStyle = function (id) {
    if (parentId !== undefined && parentId === id) {
      return "bg-white text-primary font-bold";
    } else {
      return "";
    }
  };
  var makeOnClick = function (id) {
    return function (param) {
      return ReactEvents.interceptingHandler((function (param) {
                    setParentId(function (param) {
                          return id;
                        });
                  }), param);
    };
  };
  return React$1.createElement(React$1.Fragment, undefined, React$1.createElement("button", {
                  onClick: (function (param) {
                      setOpen(function (param) {
                            return true;
                          });
                    })
                }, React$1.createElement(IconHamburger.make, {
                      width: "24",
                      height: "24",
                      fill: "#12B564"
                    })), match[0] ? React$1.createElement(ReactRemoveScroll.RemoveScroll, {
                    children: React$1.createElement("div", {
                          className: Cx.cx(["w-full h-full fixed top-0 left-0 bg-gray-50 z-20 overflow-y-auto"])
                        }, React$1.createElement("div", {
                              className: "w-full max-w-3xl mx-auto bg-white min-h-full"
                            }, React$1.createElement("div", {
                                  className: "relative overflow-auto"
                                }, React$1.createElement("div", {
                                      className: "h-14 text-center py-4 px-5"
                                    }, React$1.createElement("span", {
                                          className: "font-bold text-xl"
                                        }, "카테고리"), React$1.createElement("button", {
                                          className: "float-right",
                                          onClick: (function (param) {
                                              setOpen(function (param) {
                                                    return false;
                                                  });
                                            })
                                        }, React$1.createElement(IconClose.make, {
                                              height: "24",
                                              width: "24",
                                              fill: "#262626"
                                            }))), React$1.createElement("div", {
                                      className: "flex flex-col"
                                    }, React$1.createElement("div", {
                                          className: "grid grid-cols-10 border-y min-h-[432px] text-[15px]"
                                        }, React$1.createElement("div", {
                                              className: "col-span-4 flex flex-col bg-surface"
                                            }, React$1.createElement(Link, {
                                                  href: "/products",
                                                  children: React$1.createElement("a", {
                                                        className: Cx.cx([
                                                              "text-left px-5 py-3 border-b last:border-none active:bg-bg-pressed-L2",
                                                              clickedStyle("buyer-products")
                                                            ])
                                                      }, "전체 상품")
                                                }), Belt_Array.map(displayCategories, (function (param) {
                                                    var id = param.id;
                                                    return React$1.createElement("button", {
                                                                key: id,
                                                                className: Cx.cx([
                                                                      "text-left px-5 py-3 border-b last:border-none active:bg-bg-pressed-L2",
                                                                      clickedStyle(id)
                                                                    ]),
                                                                onClick: makeOnClick(id)
                                                              }, param.name);
                                                  }))), React$1.createElement("div", {
                                              className: "col-span-6 flex flex-col border-none"
                                            }, Belt_Option.mapWithDefault(parentId, null, (function (parentId$p) {
                                                    return React$1.createElement(ShopCategorySelect_Buyer$Mobile$Sub, {
                                                                parentId: parentId$p,
                                                                displayCategories: Belt_Option.mapWithDefault(Garter_Array.first(Belt_Array.keep(displayCategories, (function (displayCategory) {
                                                                                return displayCategory.id === parentId$p;
                                                                              }))), [], (function (displayCategory) {
                                                                        return displayCategory.children;
                                                                      }))
                                                              });
                                                  })))), Belt_Array.map(props.gnbBanners, (function (param) {
                                            return React.createElementWithKey(Link, {
                                                        href: param.landingUrl,
                                                        children: React$1.createElement("a", {
                                                              className: "py-4 px-5 flex justify-between active:bg-bg-pressed-L2",
                                                              rel: "noopener noreferer",
                                                              target: param.isNewTabMobile ? "_blank" : ""
                                                            }, React$1.createElement("div", undefined, param.title), React$1.createElement(IconArrow.make, {
                                                                  height: "24",
                                                                  width: "24",
                                                                  stroke: "#B2B2B2"
                                                                }))
                                                      }, param.id);
                                          }))))))
                  }) : null);
}

var Mobile = {
  Sub: Sub,
  make: ShopCategorySelect_Buyer$Mobile
};

function ShopCategorySelect_Buyer$PC$Sub(props) {
  var displayCategories = props.displayCategories;
  var router = Router.useRouter();
  if (displayCategories.length !== 0) {
    return React$1.createElement(React$1.Fragment, undefined, React$1.createElement("div", {
                    className: "w-[222px] px-8 py-5 flex flex-col"
                  }, Belt_Array.map(displayCategories, (function (param) {
                          var id = param.id;
                          return React.createElementWithKey(Hoverable.make, {
                                      className: "mt-3",
                                      children: React$1.createElement("div", {
                                            className: "w-full flex items-center justify-between group cursor-pointer group",
                                            onClick: (function (param) {
                                                return ReactEvents.interceptingHandler((function (param) {
                                                              router.push("/categories/" + id + "");
                                                            }), param);
                                              })
                                          }, React$1.createElement("span", {
                                                className: "text-[15px] text-gray-800 group-hover:text-green-600 group-hover:font-bold"
                                              }, param.name), React$1.createElement("span", {
                                                className: "w-4 h-4"
                                              }, React$1.createElement(IconArrow.make, {
                                                    height: "16",
                                                    width: "16",
                                                    stroke: "#12B564",
                                                    className: "hidden group-hover:block"
                                                  })))
                                    }, id);
                        }))));
  } else {
    return null;
  }
}

var Sub$1 = {
  make: ShopCategorySelect_Buyer$PC$Sub
};

function ShopCategorySelect_Buyer$PC(props) {
  var displayCategories = props.displayCategories;
  var router = Router.useRouter();
  var match = React$1.useState(function () {
        return false;
      });
  var setIsHovered = match[1];
  var match$1 = React$1.useState(function () {
        
      });
  var setHoveredId = match$1[1];
  var makeHoverChange = function (id, children, param) {
    if (children.length !== 0) {
      return setHoveredId(function (param) {
                  return id;
                });
    } else {
      return setHoveredId(function (param) {
                  
                });
    }
  };
  var tmp;
  if (match[0]) {
    var partial_arg = [];
    tmp = React$1.createElement(React$1.Fragment, undefined, React$1.createElement("div", {
              className: "flex items-center w-56 h-[54px] px-7 whitespace-nowrap border-t border-x border-primary"
            }, React$1.createElement(IconHamburger.make, {
                  width: "24",
                  height: "24",
                  fill: "#12B564"
                }), React$1.createElement("span", {
                  className: "mx-2 text-lg font-bold text-primary"
                }, "전체 카테고리"), React$1.createElement(IconArrow.make, {
                  height: "20",
                  width: "20",
                  fill: "#12B564",
                  className: "-rotate-90"
                })), React$1.createElement("div", {
              className: "relative"
            }, React$1.createElement("div", {
                  className: "h-[434px] bg-white absolute top-0 border border-green-500 flex divide-x"
                }, React$1.createElement("div", {
                      className: "w-[222px] px-8 py-5 flex flex-col"
                    }, React$1.createElement(Hoverable.make, {
                          className: "mt-3",
                          children: React$1.createElement(Link, {
                                href: "/products",
                                children: React$1.createElement("a", {
                                      className: "w-full flex items-center justify-between group cursor-pointer group"
                                    }, React$1.createElement("span", {
                                          className: "text-[15px] text-gray-800 group-hover:text-green-600 group-hover:font-bold"
                                        }, "전체 상품"), React$1.createElement("span", {
                                          className: "w-4 h-4"
                                        }, React$1.createElement(IconArrow.make, {
                                              height: "16",
                                              width: "16",
                                              stroke: "#12B564",
                                              className: "hidden group-hover:block"
                                            })))
                              }),
                          onHoverChange: (function (param) {
                              return makeHoverChange("buyer-products", partial_arg, param);
                            })
                        }), Belt_Array.map(displayCategories, (function (param) {
                            var id = param.id;
                            var children = param.children;
                            return React.createElementWithKey(Hoverable.make, {
                                        className: "mt-3",
                                        children: React$1.createElement("div", {
                                              className: "w-full flex items-center justify-between group cursor-pointer group",
                                              onClick: (function (param) {
                                                  return ReactEvents.interceptingHandler((function (param) {
                                                                router.push("/categories/" + id + "");
                                                              }), param);
                                                })
                                            }, React$1.createElement("span", {
                                                  className: "text-[15px] text-gray-800 group-hover:text-green-600 group-hover:font-bold"
                                                }, param.name), React$1.createElement("span", {
                                                  className: "w-4 h-4"
                                                }, React$1.createElement(IconArrow.make, {
                                                      height: "16",
                                                      width: "16",
                                                      stroke: "#12B564",
                                                      className: "hidden group-hover:block"
                                                    }))),
                                        onHoverChange: (function (param) {
                                            return makeHoverChange(id, children, param);
                                          })
                                      }, id);
                          }))), Belt_Option.mapWithDefault(match$1[0], null, (function (hoveredId$p) {
                        return React.createElementWithKey(ShopCategorySelect_Buyer$PC$Sub, {
                                    displayCategories: Belt_Option.mapWithDefault(Garter_Array.first(Belt_Array.keep(displayCategories, (function (displayCategory) {
                                                    return displayCategory.id === hoveredId$p;
                                                  }))), [], (function (displayCategory) {
                                            return displayCategory.children;
                                          }))
                                  }, hoveredId$p);
                      }))), React$1.createElement("div", {
                  className: "w-[222px] bg-white absolute top-0 left-[1px] h-1"
                })));
  } else {
    tmp = React$1.createElement("div", {
          className: "flex items-center w-56 h-[54px] px-7 whitespace-nowrap border-t border-x border-transparent"
        }, React$1.createElement(IconHamburger.make, {
              width: "24",
              height: "24",
              fill: "#12B564"
            }), React$1.createElement("span", {
              className: "mx-2 text-lg font-bold text-text-L1"
            }, "전체 카테고리"), React$1.createElement(IconArrow.make, {
              height: "20",
              width: "20",
              fill: "#B2B2B2",
              className: "rotate-90"
            }));
  }
  return React$1.createElement("div", undefined, React$1.createElement(Hoverable.make, {
                  children: tmp,
                  onHoverChange: (function (to_) {
                      setIsHovered(function (param) {
                            return to_;
                          });
                    })
                }));
}

var PC = {
  Sub: Sub$1,
  make: ShopCategorySelect_Buyer$PC
};

export {
  Query ,
  Mobile ,
  PC ,
}
/* React Not a pure module */
