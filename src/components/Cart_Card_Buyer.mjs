// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Locale from "../utils/Locale.mjs";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Cart_Buyer_Form from "./Cart_Buyer_Form.mjs";
import * as Cart_Buyer_Util from "./Cart_Buyer_Util.mjs";
import * as ReactHookForm from "react-hook-form";
import * as Cart_Delete_Button from "./Cart_Delete_Button.mjs";
import * as Cart_QuantitySelector from "./Cart_QuantitySelector.mjs";
import CheckboxDisableSvg from "../../public/assets/checkbox-disable.svg";

var checkboxDisableIcon = CheckboxDisableSvg;

function Cart_Card_Buyer$SoldOut(Props) {
  var productOption = Props.productOption;
  var refetchCart = Props.refetchCart;
  var prefix = Props.prefix;
  var match = ReactHookForm.useFormContext({
        mode: "onChange"
      }, undefined);
  var formNames = Cart_Buyer_Form.names(prefix);
  return React.createElement("div", {
              className: "w-full p-3 flex flex-col gap-1 bg-gray-50 rounded-md"
            }, React.createElement("div", {
                  className: "w-full flex justify-between items-center"
                }, React.createElement("div", {
                      className: "flex items-center gap-2"
                    }, React.createElement("img", {
                          className: "w-6 h-6 min-w-max self-start",
                          alt: "check-disable-icon",
                          src: checkboxDisableIcon
                        }), React.createElement("span", {
                          className: "pr-5 text-sm text-gray-600"
                        }, Belt_Option.getWithDefault(productOption.productOptionName, ""))), React.createElement(ReactHookForm.Controller, {
                      name: formNames.checked,
                      control: match.control,
                      render: (function (param) {
                          return React.createElement(Cart_Delete_Button.make, {
                                      productOptions: [productOption],
                                      refetchCart: refetchCart
                                    });
                        }),
                      defaultValue: true
                    })), React.createElement("div", {
                  className: "flex justify-end items-center pl-8 mt-1 gap-2"
                }, React.createElement("span", {
                      className: "text-sm text-gray-800 bg-gray-200 rounded-[4px] px-2"
                    }, "품절"), React.createElement("span", {
                      className: "text-gray-400 font-bold text-sm"
                    }, "" + Locale.Int.show(undefined, productOption.price) + " 원")));
}

var SoldOut = {
  make: Cart_Card_Buyer$SoldOut
};

function Cart_Card_Buyer$Container(Props) {
  var productOption = Props.productOption;
  var prefix = Props.prefix;
  var refetchCart = Props.refetchCart;
  var quantity = productOption.quantity;
  var formNames = Cart_Buyer_Form.names(prefix);
  var watchQuantity = Belt_Option.getWithDefault(Belt_Option.flatMap(ReactHookForm.useWatch({
                name: formNames.quantity
              }), Belt_Int.fromString), quantity);
  return React.createElement("div", {
              className: "w-full p-3 flex flex-col gap-1 bg-gray-50 rounded-md"
            }, React.createElement("div", {
                  className: "w-full flex justify-between items-center"
                }, React.createElement("div", {
                      className: "flex items-center gap-2"
                    }, React.createElement(Cart_Buyer_Util.Checkbox.make, {
                          name: formNames.checked,
                          targetNames: [formNames.checked],
                          status: productOption.optionStatus
                        }), React.createElement("span", {
                          className: "pr-5 text-sm text-gray-800"
                        }, Belt_Option.getWithDefault(productOption.productOptionName, ""))), React.createElement(Cart_Delete_Button.make, {
                      productOptions: [productOption],
                      refetchCart: refetchCart
                    })), React.createElement("div", {
                  className: "flex justify-between items-center pl-8 mt-1"
                }, React.createElement(Cart_QuantitySelector.make, {
                      prefix: prefix,
                      quantity: quantity,
                      cartId: productOption.cartId
                    }), React.createElement("span", {
                      className: "text-text-L1 font-bold text-sm"
                    }, "" + Locale.Int.show(undefined, Math.imul(watchQuantity, productOption.price)) + " 원")));
}

var Container = {
  make: Cart_Card_Buyer$Container
};

function Cart_Card_Buyer(Props) {
  var productOption = Props.productOption;
  var refetchCart = Props.refetchCart;
  var prefix = Props.prefix;
  var productStatus = Props.productStatus;
  var match = Cart_Buyer_Form.soldable(productOption.optionStatus);
  var match$1 = Cart_Buyer_Form.soldable(productStatus);
  if (match && match$1) {
    return React.createElement(Cart_Card_Buyer$Container, {
                productOption: productOption,
                prefix: prefix,
                refetchCart: refetchCart
              });
  }
  return React.createElement(Cart_Card_Buyer$SoldOut, {
              productOption: productOption,
              refetchCart: refetchCart,
              prefix: prefix
            });
}

var Form;

var Util;

var make = Cart_Card_Buyer;

export {
  Form ,
  Util ,
  checkboxDisableIcon ,
  SoldOut ,
  Container ,
  make ,
}
/* checkboxDisableIcon Not a pure module */
