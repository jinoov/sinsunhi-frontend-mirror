// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as Product_Detail_Basic_Admin from "./Product_Detail_Basic_Admin.mjs";
import * as UpdateProductDetailBasicAdmin_graphql from "../__generated__/UpdateProductDetailBasicAdmin_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(UpdateProductDetailBasicAdmin_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(UpdateProductDetailBasicAdmin_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(UpdateProductDetailBasicAdmin_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return UpdateProductDetailBasicAdmin_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_productStatus_decode = UpdateProductDetailBasicAdmin_graphql.Utils.productStatus_decode;

var Fragment_productStatus_fromString = UpdateProductDetailBasicAdmin_graphql.Utils.productStatus_fromString;

var Fragment = {
  productStatus_decode: Fragment_productStatus_decode,
  productStatus_fromString: Fragment_productStatus_fromString,
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function statusDecode(s) {
  if (s === "NOSALE") {
    return /* NOSALE */2;
  } else if (s === "SOLDOUT") {
    return /* SOLDOUT */1;
  } else if (s === "HIDDEN_SALE") {
    return /* HIDDEN_SALE */4;
  } else if (s === "SALE") {
    return /* SALE */0;
  } else if (s === "RETIRE") {
    return /* RETIRE */3;
  } else {
    return ;
  }
}

function deliveryDecode(s) {
  if (s) {
    return /* AVAILABLE */0;
  } else {
    return /* UNAVAILABLE */1;
  }
}

function isVatDecode(s) {
  if (s) {
    return /* TAX */0;
  } else {
    return /* FREE */1;
  }
}

function producerToReactSelected(p) {
  return /* Selected */{
          value: p.id,
          label: p.name
        };
}

function UpdateProduct_Detail_Basic_Admin(Props) {
  var productId = Props.productId;
  var query = Props.query;
  var data = use(query);
  var allFieldsDisabled = data.status === "RETIRE";
  var tmp = {
    productId: productId,
    defaultProducer: producerToReactSelected(data.producer),
    defaultProducerName: data.name,
    defaultBuyerName: data.displayName,
    defaultBasePrice: Belt_Option.getWithDefault(data.price, -1),
    defaultOrigin: Belt_Option.getWithDefault(data.origin, ""),
    defaultDeliveryMethod: data.isCourierAvailable ? /* AVAILABLE */0 : /* UNAVAILABLE */1,
    defaultIsVat: data.isVat ? /* TAX */0 : /* FREE */1,
    producerNameDisabled: true,
    productCategoryDisabled: true,
    vatDisabled: true,
    allFieldsDisabled: allFieldsDisabled
  };
  var tmp$1 = statusDecode(data.status);
  if (tmp$1 !== undefined) {
    tmp.defaultOperationstatus = Caml_option.valFromOption(tmp$1);
  }
  return React.createElement(Product_Detail_Basic_Admin.make, tmp);
}

var make = UpdateProduct_Detail_Basic_Admin;

export {
  Fragment ,
  statusDecode ,
  deliveryDecode ,
  isVatDecode ,
  producerToReactSelected ,
  make ,
  
}
/* react Not a pure module */
