// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as IconCheck from "./svgs/IconCheck.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as RelayRuntime from "relay-runtime";
import * as IconArrowSelect from "./svgs/IconArrowSelect.mjs";
import * as Hooks from "react-relay/hooks";
import * as ReactToastNotifications from "react-toast-notifications";
import * as BulkSale_Producer_Application_Rejected_Button from "./BulkSale_Producer_Application_Rejected_Button.mjs";
import * as BulkSale_Producer_Application_Withdrawn_Button from "./BulkSale_Producer_Application_Withdrawn_Button.mjs";
import * as SelectBulkSaleApplicationStatusMutation_graphql from "../__generated__/SelectBulkSaleApplicationStatusMutation_graphql.mjs";

var make_bulkSaleApplicationProgressInput = SelectBulkSaleApplicationStatusMutation_graphql.Utils.make_bulkSaleApplicationProgressInput;

var makeVariables = SelectBulkSaleApplicationStatusMutation_graphql.Utils.makeVariables;

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: SelectBulkSaleApplicationStatusMutation_graphql.node,
              variables: SelectBulkSaleApplicationStatusMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, SelectBulkSaleApplicationStatusMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? SelectBulkSaleApplicationStatusMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, SelectBulkSaleApplicationStatusMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use(param) {
  var match = Hooks.useMutation(SelectBulkSaleApplicationStatusMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, SelectBulkSaleApplicationStatusMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? SelectBulkSaleApplicationStatusMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, SelectBulkSaleApplicationStatusMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: SelectBulkSaleApplicationStatusMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Mutation_bulkSaleApplicationProgress_decode = SelectBulkSaleApplicationStatusMutation_graphql.Utils.bulkSaleApplicationProgress_decode;

var Mutation_bulkSaleApplicationProgress_fromString = SelectBulkSaleApplicationStatusMutation_graphql.Utils.bulkSaleApplicationProgress_fromString;

var Mutation = {
  bulkSaleApplicationProgress_decode: Mutation_bulkSaleApplicationProgress_decode,
  bulkSaleApplicationProgress_fromString: Mutation_bulkSaleApplicationProgress_fromString,
  make_bulkSaleApplicationProgressInput: make_bulkSaleApplicationProgressInput,
  makeVariables: makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use
};

function decodeStatus(s) {
  if (s === "applied") {
    return {
            TAG: /* Ok */0,
            _0: "APPLIED"
          };
  } else if (s === "under-discussion") {
    return {
            TAG: /* Ok */0,
            _0: "UNDER_DISCUSSION"
          };
  } else if (s === "on-site-meeting-scheduled") {
    return {
            TAG: /* Ok */0,
            _0: "ON_SITE_MEETING_SCHEDULED"
          };
  } else if (s === "sample-requested") {
    return {
            TAG: /* Ok */0,
            _0: "SAMPLE_REQUESTED"
          };
  } else if (s === "sample-reviewing") {
    return {
            TAG: /* Ok */0,
            _0: "SAMPLE_REVIEWING"
          };
  } else if (s === "rejected") {
    return {
            TAG: /* Ok */0,
            _0: "REJECTED"
          };
  } else if (s === "confirmed") {
    return {
            TAG: /* Ok */0,
            _0: "CONFIRMED"
          };
  } else if (s === "withdrawn") {
    return {
            TAG: /* Ok */0,
            _0: "WITHDRAWN"
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: undefined
          };
  }
}

function stringifyStatus(s) {
  if (s === "CONFIRMED") {
    return "confirmed";
  } else if (s === "WITHDRAWN") {
    return "withdrawn";
  } else if (s === "APPLIED") {
    return "applied";
  } else if (s === "SAMPLE_REQUESTED") {
    return "sample-requested";
  } else if (s === "SAMPLE_REVIEWING") {
    return "sample-reviewing";
  } else if (s === "REJECTED") {
    return "rejected";
  } else if (s === "UNDER_DISCUSSION") {
    return "under-discussion";
  } else if (s === "ON_SITE_MEETING_SCHEDULED") {
    return "on-site-meeting-scheduled";
  } else {
    return "";
  }
}

function displayStatus(s) {
  if (s === "CONFIRMED") {
    return "판매 확정";
  } else if (s === "WITHDRAWN") {
    return "고객 취소";
  } else if (s === "APPLIED") {
    return "신청 접수 중";
  } else if (s === "SAMPLE_REQUESTED") {
    return "샘플 요청";
  } else if (s === "SAMPLE_REVIEWING") {
    return "품평회 진행 중";
  } else if (s === "REJECTED") {
    return "추후 판매";
  } else if (s === "UNDER_DISCUSSION") {
    return "판매 협의 중";
  } else if (s === "ON_SITE_MEETING_SCHEDULED") {
    return "현장 미팅 예정";
  } else {
    return "전량 구매 진행 상태 파싱 오류";
  }
}

function Select_BulkSale_Application_Status(Props) {
  var application = Props.application;
  var refetchSummary = Props.refetchSummary;
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var match$1 = use(undefined);
  var mutate = match$1[0];
  var match$2 = React.useState(function () {
        return false;
      });
  var setShowRejectedDialog = match$2[1];
  var handleOnChange = function (e) {
    var value = e.target.value;
    var progress = decodeStatus(value);
    if (progress.TAG === /* Ok */0) {
      var progress$1 = progress._0;
      if (progress$1 === "REJECTED") {
        return setShowRejectedDialog(function (param) {
                    return true;
                  });
      } else {
        Curry.app(mutate, [
              (function (err) {
                  return addToast(React.createElement("div", {
                                  className: "flex items-center"
                                }, React.createElement(IconError.make, {
                                      width: "24",
                                      height: "24",
                                      className: "mr-2"
                                    }), err.message), {
                              appearance: "error"
                            });
                }),
              (function (param, param$1) {
                  addToast(React.createElement("div", {
                            className: "flex items-center"
                          }, React.createElement(IconCheck.make, {
                                height: "24",
                                width: "24",
                                fill: "#12B564",
                                className: "mr-2"
                              }), "수정 요청에 성공하였습니다."), {
                        appearance: "success"
                      });
                  return Curry._1(refetchSummary, undefined);
                }),
              undefined,
              undefined,
              undefined,
              undefined,
              Curry._2(makeVariables, application.id, Curry._3(make_bulkSaleApplicationProgressInput, progress$1, undefined, undefined)),
              undefined,
              undefined
            ]);
        return ;
      }
    }
    console.log("알 수 없는 진행 상태");
    
  };
  return React.createElement("div", {
              className: "relative"
            }, React.createElement("label", {
                  className: "block relative"
                }, React.createElement("span", {
                      className: "flex items-center border border-border-default-L1 rounded-md h-9 px-3 text-enabled-L1"
                    }, displayStatus(application.progress)), React.createElement("span", {
                      className: "absolute top-1.5 right-2"
                    }, React.createElement(IconArrowSelect.make, {
                          height: "24",
                          width: "24",
                          fill: "#121212"
                        })), React.createElement("select", {
                      className: "block w-full h-full absolute top-0 opacity-0",
                      disabled: match$1[1],
                      value: stringifyStatus(application.progress),
                      onChange: handleOnChange
                    }, Garter_Array.map([
                          "APPLIED",
                          "UNDER_DISCUSSION",
                          "ON_SITE_MEETING_SCHEDULED",
                          "SAMPLE_REQUESTED",
                          "SAMPLE_REVIEWING",
                          "REJECTED",
                          "CONFIRMED",
                          "WITHDRAWN"
                        ], (function (s) {
                            return React.createElement("option", {
                                        key: stringifyStatus(s),
                                        value: stringifyStatus(s)
                                      }, displayStatus(s));
                          })))), application.progress === "WITHDRAWN" ? React.createElement(BulkSale_Producer_Application_Withdrawn_Button.make, {
                    applicationId: application.id
                  }) : null, React.createElement(BulkSale_Producer_Application_Rejected_Button.make, {
                  application: application,
                  isShow: match$2[0],
                  open: (function (param) {
                      return setShowRejectedDialog(function (param) {
                                  return true;
                                });
                    }),
                  close: (function (param) {
                      return setShowRejectedDialog(function (param) {
                                  return false;
                                });
                    }),
                  refetchSummary: refetchSummary
                }));
}

var make = Select_BulkSale_Application_Status;

export {
  Mutation ,
  decodeStatus ,
  stringifyStatus ,
  displayStatus ,
  make ,
  
}
/* react Not a pure module */
