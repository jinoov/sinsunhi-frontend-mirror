// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as DataGtm from "../utils/DataGtm.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as DS_Toast from "./common/container/DS_Toast.mjs";
import * as DS_Button from "./common/element/DS_Button.mjs";
import * as DS_Dialog from "./common/container/DS_Dialog.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as Router from "next/router";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as RfqCreateRequestButton_RfqRequests_Query_graphql from "../__generated__/RfqCreateRequestButton_RfqRequests_Query_graphql.mjs";
import * as RfqCreateRequestButton_RfqRequests_Fragment_graphql from "../__generated__/RfqCreateRequestButton_RfqRequests_Fragment_graphql.mjs";
import * as RfqCreateRequestButton_Create_Request_Mutation_graphql from "../__generated__/RfqCreateRequestButton_Create_Request_Mutation_graphql.mjs";
import * as RfqCreateRequestButton_Delete_Request_Mutation_graphql from "../__generated__/RfqCreateRequestButton_Delete_Request_Mutation_graphql.mjs";
import * as RfqCreateRequestButton_RfqRequests_Fragment_Query_graphql from "../__generated__/RfqCreateRequestButton_RfqRequests_Fragment_Query_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(RfqCreateRequestButton_RfqRequests_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqCreateRequestButton_RfqRequests_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(RfqCreateRequestButton_RfqRequests_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(RfqCreateRequestButton_RfqRequests_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, RfqCreateRequestButton_RfqRequests_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, RfqCreateRequestButton_RfqRequests_Query_graphql.node, RfqCreateRequestButton_RfqRequests_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: RfqCreateRequestButton_RfqRequests_Query_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, RfqCreateRequestButton_RfqRequests_Query_graphql.node, RfqCreateRequestButton_RfqRequests_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(RfqCreateRequestButton_RfqRequests_Query_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(RfqCreateRequestButton_RfqRequests_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqCreateRequestButton_RfqRequests_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(RfqCreateRequestButton_RfqRequests_Query_graphql.node, RfqCreateRequestButton_RfqRequests_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_makeVariables = RfqCreateRequestButton_RfqRequests_Query_graphql.Utils.makeVariables;

var Query = {
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

var getConnectionNodes = RfqCreateRequestButton_RfqRequests_Fragment_graphql.Utils.getConnectionNodes;

function internal_makeRefetchableFnOpts(fetchPolicy, onComplete, param) {
  var tmp = {};
  var tmp$1 = RescriptRelay.mapFetchPolicy(fetchPolicy);
  if (tmp$1 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = RescriptRelay_Internal.internal_nullableToOptionalExnHandler(onComplete);
  if (tmp$2 !== undefined) {
    tmp.onComplete = Caml_option.valFromOption(tmp$2);
  }
  return tmp;
}

function useRefetchable(fRef) {
  var match = Hooks.useRefetchableFragment(RfqCreateRequestButton_RfqRequests_Fragment_graphql.node, fRef);
  var refetchFn = match[1];
  var data = RescriptRelay_Internal.internal_useConvertedValue(RfqCreateRequestButton_RfqRequests_Fragment_graphql.Internal.convertFragment, match[0]);
  return [
          data,
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return Curry._2(refetchFn, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqCreateRequestButton_RfqRequests_Fragment_Query_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [refetchFn])
        ];
}

function use$1(fRef) {
  var data = Hooks.useFragment(RfqCreateRequestButton_RfqRequests_Fragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RfqCreateRequestButton_RfqRequests_Fragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(RfqCreateRequestButton_RfqRequests_Fragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return RfqCreateRequestButton_RfqRequests_Fragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

function usePagination(fr) {
  var p = Hooks.usePaginationFragment(RfqCreateRequestButton_RfqRequests_Fragment_graphql.node, fr);
  var data = RescriptRelay_Internal.internal_useConvertedValue(RfqCreateRequestButton_RfqRequests_Fragment_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          isLoadingNext: p.isLoadingNext,
          isLoadingPrevious: p.isLoadingPrevious,
          refetch: React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqCreateRequestButton_RfqRequests_Fragment_Query_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

function useBlockingPagination(fRef) {
  var p = Hooks.useBlockingPaginationFragment(RfqCreateRequestButton_RfqRequests_Fragment_graphql.node, fRef);
  var data = RescriptRelay_Internal.internal_useConvertedValue(RfqCreateRequestButton_RfqRequests_Fragment_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          refetch: React.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RfqCreateRequestButton_RfqRequests_Fragment_Query_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

var makeRefetchVariables = RfqCreateRequestButton_RfqRequests_Fragment_Query_graphql.Types.makeRefetchVariables;

var Fragment_rfqRequestStatus_decode = RfqCreateRequestButton_RfqRequests_Fragment_graphql.Utils.rfqRequestStatus_decode;

var Fragment_rfqRequestStatus_fromString = RfqCreateRequestButton_RfqRequests_Fragment_graphql.Utils.rfqRequestStatus_fromString;

var Fragment = {
  rfqRequestStatus_decode: Fragment_rfqRequestStatus_decode,
  rfqRequestStatus_fromString: Fragment_rfqRequestStatus_fromString,
  getConnectionNodes: getConnectionNodes,
  Types: undefined,
  internal_makeRefetchableFnOpts: internal_makeRefetchableFnOpts,
  useRefetchable: useRefetchable,
  use: use$1,
  useOpt: useOpt,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination,
  makeRefetchVariables: makeRefetchVariables
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RfqCreateRequestButton_Create_Request_Mutation_graphql.node,
              variables: RfqCreateRequestButton_Create_Request_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RfqCreateRequestButton_Create_Request_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RfqCreateRequestButton_Create_Request_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, RfqCreateRequestButton_Create_Request_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$2(param) {
  var match = Hooks.useMutation(RfqCreateRequestButton_Create_Request_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, RfqCreateRequestButton_Create_Request_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RfqCreateRequestButton_Create_Request_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, RfqCreateRequestButton_Create_Request_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RfqCreateRequestButton_Create_Request_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Create_rfqRequestStatus_decode = RfqCreateRequestButton_Create_Request_Mutation_graphql.Utils.rfqRequestStatus_decode;

var Create_rfqRequestStatus_fromString = RfqCreateRequestButton_Create_Request_Mutation_graphql.Utils.rfqRequestStatus_fromString;

var Create_makeVariables = RfqCreateRequestButton_Create_Request_Mutation_graphql.Utils.makeVariables;

var Create = {
  rfqRequestStatus_decode: Create_rfqRequestStatus_decode,
  rfqRequestStatus_fromString: Create_rfqRequestStatus_fromString,
  makeVariables: Create_makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$2
};

function commitMutation$1(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: RfqCreateRequestButton_Delete_Request_Mutation_graphql.node,
              variables: RfqCreateRequestButton_Delete_Request_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, RfqCreateRequestButton_Delete_Request_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? RfqCreateRequestButton_Delete_Request_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, RfqCreateRequestButton_Delete_Request_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$3(param) {
  var match = Hooks.useMutation(RfqCreateRequestButton_Delete_Request_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, RfqCreateRequestButton_Delete_Request_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? RfqCreateRequestButton_Delete_Request_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, RfqCreateRequestButton_Delete_Request_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: RfqCreateRequestButton_Delete_Request_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Delete_makeVariables = RfqCreateRequestButton_Delete_Request_Mutation_graphql.Utils.makeVariables;

var Delete = {
  makeVariables: Delete_makeVariables,
  Types: undefined,
  commitMutation: commitMutation$1,
  use: use$3
};

var Mutation = {
  Create: Create,
  Delete: Delete
};

function RfqCreateRequestButton$Button$Buyer(Props) {
  var className = Props.className;
  var buttonText = Props.buttonText;
  var position = Props.position;
  var router = Router.useRouter();
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var query = use(undefined, undefined, undefined, undefined, undefined);
  var match$1 = usePagination(query.fragmentRefs);
  var data = match$1.data;
  var firstRequest = Belt_Array.get(Curry._1(getConnectionNodes, data.rfqRequests), 0);
  var match$2 = use$2(undefined);
  var createRequest = match$2[0];
  var match$3 = use$3(undefined);
  var deleteRequest = match$3[0];
  var moveBasketWithRequestId = function (requestId) {
    router.push("/buyer/rfq/request/draft/basket?requestId=" + requestId);
    
  };
  var createToast = function (text) {
    return addToast(DS_Toast.getToastComponent(text, "error"), {
                appearance: "error"
              });
  };
  var createNewRequest = function (param) {
    Curry.app(createRequest, [
          (function (param) {
              return createToast("새로운 견적 생성에 실패했습니다.");
            }),
          (function (param, param$1) {
              var createRfqRequest = param.createRfqRequest;
              if (createRfqRequest.NAME === "UnselectedUnionMember") {
                return createToast("새로운 견적 생성에 실패했습니다.");
              }
              var request = createRfqRequest.VAL.result;
              if (request !== undefined) {
                return moveBasketWithRequestId(request.id);
              } else {
                return createToast("새로운 견적 생성에 실패했습니다.");
              }
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          {
            connections: [data.rfqRequests.__id]
          },
          undefined,
          undefined
        ]);
    
  };
  var btnComponent = React.createElement("button", {
        className: className,
        onClick: (function (param) {
            return createNewRequest(undefined);
          })
      }, buttonText);
  var dataGtm = Belt_Option.mapWithDefault(position, "", (function (p) {
          if (p === "top") {
            return "Click_Button1_RFQ_Livestock_Landing";
          } else {
            return "Click_Button2_RFQ_Livestock_Landing";
          }
        }));
  return Belt_Option.mapWithDefault(firstRequest, btnComponent, (function (request) {
                var match = request.status;
                if (match === "DRAFT") {
                  return React.createElement(DS_Dialog.Popup.Root.make, {
                              children: null
                            }, React.createElement(DS_Dialog.Popup.Trigger.make, {
                                  children: React.createElement("button", {
                                        className: className
                                      }, buttonText),
                                  asChild: true
                                }), React.createElement(DS_Dialog.Popup.Portal.make, {
                                  children: null
                                }, React.createElement(DS_Dialog.Popup.Overlay.make, {}), React.createElement(DS_Dialog.Popup.Content.make, {
                                      children: null
                                    }, React.createElement(DS_Dialog.Popup.Title.make, {
                                          children: "작성중인 견적서가 있습니다."
                                        }), React.createElement(DS_Dialog.Popup.Description.make, {
                                          children: "이어서 작성하시겠어요?"
                                        }), React.createElement(DS_Dialog.Popup.Buttons.make, {
                                          children: null
                                        }, React.createElement(DS_Dialog.Popup.Close.make, {
                                              children: React.createElement(DataGtm.make, {
                                                    children: React.createElement("a", {
                                                          className: "w-full",
                                                          onClick: (function (param) {
                                                              
                                                            })
                                                        }, React.createElement(DS_Button.Normal.Large1.make, {
                                                              label: "새로 작성하기",
                                                              onClick: (function (param) {
                                                                  var id = request.id;
                                                                  Curry.app(deleteRequest, [
                                                                        (function (param) {
                                                                            return createToast("작성 중이던 견적 삭제에 실패했습니다.");
                                                                          }),
                                                                        (function (param, param$1) {
                                                                            return createNewRequest(undefined);
                                                                          }),
                                                                        undefined,
                                                                        undefined,
                                                                        undefined,
                                                                        undefined,
                                                                        {
                                                                          id: id,
                                                                          connections: [data.rfqRequests.__id]
                                                                        },
                                                                        undefined,
                                                                        undefined
                                                                      ]);
                                                                  
                                                                }),
                                                              buttonType: "white"
                                                            })),
                                                    dataGtm: dataGtm
                                                  }),
                                              asChild: true
                                            }), React.createElement(DS_Dialog.Popup.Close.make, {
                                              children: React.createElement(DataGtm.make, {
                                                    children: React.createElement("a", {
                                                          className: "w-full",
                                                          onClick: (function (param) {
                                                              
                                                            })
                                                        }, React.createElement(DS_Button.Normal.Large1.make, {
                                                              label: "이어서 작성하기",
                                                              onClick: (function (param) {
                                                                  return moveBasketWithRequestId(request.id);
                                                                })
                                                            })),
                                                    dataGtm: dataGtm
                                                  }),
                                              asChild: true
                                            })))));
                } else {
                  return btnComponent;
                }
              }));
}

var Buyer = {
  make: RfqCreateRequestButton$Button$Buyer
};

function RfqCreateRequestButton$Button$UnauthorizedUser(Props) {
  var className = Props.className;
  var buttonText = Props.buttonText;
  return React.createElement(DS_Dialog.Popup.Root.make, {
              children: null
            }, React.createElement(DS_Dialog.Popup.Trigger.make, {
                  children: React.createElement("button", {
                        className: className
                      }, buttonText),
                  asChild: true
                }), React.createElement(DS_Dialog.Popup.Portal.make, {
                  children: null
                }, React.createElement(DS_Dialog.Popup.Overlay.make, {}), React.createElement(DS_Dialog.Popup.Content.make, {
                      children: null
                    }, React.createElement(DS_Dialog.Popup.Title.make, {
                          children: "바이어만 견적신청 서비스를 이용할 수 있어요."
                        }), React.createElement(DS_Dialog.Popup.Description.make, {
                          children: "이용중인 계정을 다시 한번 확인해주세요."
                        }), React.createElement(DS_Dialog.Popup.Buttons.make, {
                          children: React.createElement(DS_Dialog.Popup.Close.make, {
                                children: React.createElement(DS_Button.Normal.Large1.make, {
                                      label: "닫기"
                                    }),
                                asChild: true
                              })
                        }))));
}

var UnauthorizedUser = {
  make: RfqCreateRequestButton$Button$UnauthorizedUser
};

var Button = {
  Buyer: Buyer,
  UnauthorizedUser: UnauthorizedUser
};

function RfqCreateRequestButton(Props) {
  var className = Props.className;
  var buttonTextOpt = Props.buttonText;
  var position = Props.position;
  var buttonText = buttonTextOpt !== undefined ? buttonTextOpt : "최저가 견적받기";
  var router = Router.useRouter();
  var user = Curry._1(CustomHooks.User.Buyer.use2, undefined);
  if (typeof user === "number") {
    return React.createElement("button", {
                className: className,
                onClick: (function (param) {
                    var redirectUrl = new URLSearchParams(Js_dict.fromArray([[
                                  "redirect",
                                  router.asPath
                                ]])).toString();
                    router.push("/buyer/signin?" + redirectUrl);
                    
                  })
              }, buttonText);
  }
  var match = user._0.role;
  if (match !== 1) {
    return React.createElement(RfqCreateRequestButton$Button$UnauthorizedUser, {
                className: className,
                buttonText: buttonText
              });
  }
  var tmp = {
    className: className,
    buttonText: buttonText
  };
  if (position !== undefined) {
    tmp.position = Caml_option.valFromOption(position);
  }
  return React.createElement(RfqCreateRequestButton$Button$Buyer, tmp);
}

var make = RfqCreateRequestButton;

export {
  Query ,
  Fragment ,
  Mutation ,
  Button ,
  make ,
  
}
/* react Not a pure module */
