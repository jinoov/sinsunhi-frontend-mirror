// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Editor from "./Editor.mjs";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactRelay from "react-relay";
import * as ReactHookForm from "../bindings/ReactHookForm/ReactHookForm.mjs";
import * as RelayRuntime from "relay-runtime";
import * as ReactHookForm$1 from "react-hook-form";
import * as UploadFileToS3PresignedUrl from "../utils/UploadFileToS3PresignedUrl.mjs";
import * as ProductDetailEditorMutation_graphql from "../__generated__/ProductDetailEditorMutation_graphql.mjs";

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: ProductDetailEditorMutation_graphql.node,
              variables: ProductDetailEditorMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, ProductDetailEditorMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? ProductDetailEditorMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    Curry._2(updater, store, ProductDetailEditorMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use(param) {
  var match = ReactRelay.useMutation(ProductDetailEditorMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      Curry._2(param$1, ProductDetailEditorMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? ProductDetailEditorMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      Curry._2(param$5, store, ProductDetailEditorMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: ProductDetailEditorMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Mutation = {
  Operation: undefined,
  Types: undefined,
  commitMutation: commitMutation,
  use: use
};

function Product_Detail_Editor(props) {
  var disabled = props.disabled;
  var match = use(undefined);
  var mutate = match[0];
  var handleImageUpload = function (blobInfo, success, failure, _progress, param) {
    var onFailWithRemove = function (param) {
      failure("업로드 실패하였습니다.", {
            remove: true
          });
    };
    Curry.app(mutate, [
          (function (err) {
              console.log(err);
              onFailWithRemove(err);
            }),
          (function (param, param$1) {
              var res = param.createPresignedUrlForImage;
              if (typeof res !== "object") {
                return ;
              }
              if (res.NAME !== "CreatePresignedUrlForImageResult") {
                return ;
              }
              var res$p = res.VAL;
              var resizedImg = Belt_Option.getWithDefault(res$p.image.thumb800xall, res$p.image.thumb1920x1920);
              UploadFileToS3PresignedUrl.uploadImage(Curry._1(blobInfo.blob, undefined), res$p.url, resizedImg, (function (param) {
                      Curry._1(success, resizedImg);
                    }), onFailWithRemove, undefined);
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          {
            filename: Curry._1(blobInfo.filename, undefined)
          },
          undefined,
          undefined
        ]);
  };
  return React.createElement(ReactHookForm$1.Controller, {
              name: props.name,
              control: Caml_option.some(props.control),
              render: (function (param) {
                  var match = param.field;
                  var onChange = match.onChange;
                  return React.createElement(Editor.make, {
                              initOptions: {
                                menubar: [
                                  "file",
                                  "edit",
                                  "view",
                                  "insert",
                                  "format",
                                  "tools",
                                  "table",
                                  "help"
                                ],
                                toolbar: [
                                  [
                                    "undo",
                                    "redo"
                                  ],
                                  [
                                    "fontsizeselect",
                                    "formatselect",
                                    "bold",
                                    "italic",
                                    "underline",
                                    "forecolor",
                                    "backcolor"
                                  ],
                                  [
                                    "alignleft",
                                    "aligncenter",
                                    "alignright"
                                  ],
                                  [
                                    "outdent",
                                    "indent"
                                  ],
                                  [
                                    "numlist",
                                    "bullist"
                                  ],
                                  [
                                    "image",
                                    "charmap",
                                    "emoticons"
                                  ],
                                  [
                                    "preview",
                                    "fullscreen"
                                  ],
                                  ["media"]
                                ],
                                quickbars_insert_toolbar: false,
                                paste_data_images: true,
                                images_upload_handler: handleImageUpload
                              },
                              height: 800,
                              plugins: Editor.basicPlugins,
                              value: Belt_Option.getWithDefault(Js_json.decodeString(match.value), ""),
                              onEditorChange: (function (value, param) {
                                  Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, value));
                                }),
                              disabled: disabled
                            });
                }),
              defaultValue: Caml_option.some(Belt_Option.getWithDefault(props.defaultValue, "")),
              rules: Caml_option.some(ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined))
            });
}

var make = Product_Detail_Editor;

export {
  Mutation ,
  make ,
}
/* react Not a pure module */
