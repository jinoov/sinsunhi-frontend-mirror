// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Dialog from "./common/Dialog.mjs";
import * as Helper from "../utils/Helper.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Checkbox from "./common/Checkbox.mjs";
import * as IconArrow from "./svgs/IconArrow.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as ReactHookForm from "../bindings/ReactHookForm/ReactHookForm.mjs";
import * as ReactHookForm$1 from "react-hook-form";
import * as ErrorMessage from "@hookform/error-message";
import * as Product_Option_Each_Admin from "./Product_Option_Each_Admin.mjs";
import * as Select_Product_Option_Unit from "./Select_Product_Option_Unit.mjs";
import * as ReactCollapsible from "@radix-ui/react-collapsible";
import * as Select_Product_Shipping_Type from "./Select_Product_Shipping_Type.mjs";
import * as Select_Producer_Contract_Type from "./Select_Producer_Contract_Type.mjs";
import * as Select_Product_Operation_Status from "./Select_Product_Operation_Status.mjs";
import CheckboxCheckedSvg from "../../public/assets/checkbox-checked.svg";
import CheckboxUncheckedSvg from "../../public/assets/checkbox-unchecked.svg";

var checkboxCheckedIcon = CheckboxCheckedSvg;

var checkboxUncheckedIcon = CheckboxUncheckedSvg;

function cost_encode(v) {
  return Js_dict.fromArray([
              [
                "raw-cost",
                Spice.intToJson(v.rawCost)
              ],
              [
                "working-cost",
                Spice.intToJson(v.workingCost)
              ],
              [
                "delivery-cost",
                Spice.optionToJson(Spice.intToJson, v.deliveryCost)
              ],
              [
                "cost-type",
                Spice.stringToJson(v.costType)
              ],
              [
                "buyer-price",
                Spice.intToJson(v.buyerPrice)
              ]
            ]);
}

function cost_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var rawCost = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "raw-cost"), null));
  if (rawCost.TAG === /* Ok */0) {
    var workingCost = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "working-cost"), null));
    if (workingCost.TAG === /* Ok */0) {
      var deliveryCost = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "delivery-cost"), null));
      if (deliveryCost.TAG === /* Ok */0) {
        var costType = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "cost-type"), null));
        if (costType.TAG === /* Ok */0) {
          var buyerPrice = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyer-price"), null));
          if (buyerPrice.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      rawCost: rawCost._0,
                      workingCost: workingCost._0,
                      deliveryCost: deliveryCost._0,
                      costType: costType._0,
                      buyerPrice: buyerPrice._0
                    }
                  };
          }
          var e = buyerPrice._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".buyer-price" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = costType._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".cost-type" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = deliveryCost._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".delivery-cost" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = workingCost._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".working-cost" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = rawCost._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".raw-cost" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function submit_encode(v) {
  return Js_dict.fromArray([
              [
                "name",
                Spice.optionToJson(Spice.stringToJson, v.name)
              ],
              [
                "grade",
                Spice.optionToJson(Spice.stringToJson, v.grade)
              ],
              [
                "package",
                Spice.optionToJson(Spice.stringToJson, v.package)
              ],
              [
                "weight",
                Spice.floatToJson(v.weight)
              ],
              [
                "each",
                Spice.optionToJson(Product_Option_Each_Admin.Form.each_encode, v.each)
              ],
              [
                "weight-unit",
                Select_Product_Option_Unit.Weight.status_encode(v.weightUnit)
              ],
              [
                "operation-status",
                Spice.stringToJson(v.operationStatus)
              ],
              [
                "cost",
                cost_encode(v.cost)
              ],
              [
                "cut-off-time",
                Spice.optionToJson(Spice.stringToJson, v.cutOffTime)
              ],
              [
                "memo",
                Spice.optionToJson(Spice.stringToJson, v.memo)
              ],
              [
                "show-each",
                Spice.boolToJson(v.showEach)
              ],
              [
                "is-free-shipping",
                Select_Product_Shipping_Type.status_encode(v.isFreeShipping)
              ]
            ]);
}

function submit_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var name = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
  if (name.TAG === /* Ok */0) {
    var grade = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "grade"), null));
    if (grade.TAG === /* Ok */0) {
      var $$package = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "package"), null));
      if ($$package.TAG === /* Ok */0) {
        var weight = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "weight"), null));
        if (weight.TAG === /* Ok */0) {
          var each = Spice.optionFromJson(Product_Option_Each_Admin.Form.each_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "each"), null));
          if (each.TAG === /* Ok */0) {
            var weightUnit = Select_Product_Option_Unit.Weight.status_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "weight-unit"), null));
            if (weightUnit.TAG === /* Ok */0) {
              var operationStatus = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "operation-status"), null));
              if (operationStatus.TAG === /* Ok */0) {
                var cost = cost_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "cost"), null));
                if (cost.TAG === /* Ok */0) {
                  var cutOffTime = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "cut-off-time"), null));
                  if (cutOffTime.TAG === /* Ok */0) {
                    var memo = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "memo"), null));
                    if (memo.TAG === /* Ok */0) {
                      var showEach = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "show-each"), null));
                      if (showEach.TAG === /* Ok */0) {
                        var isFreeShipping = Select_Product_Shipping_Type.status_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "is-free-shipping"), null));
                        if (isFreeShipping.TAG === /* Ok */0) {
                          return {
                                  TAG: /* Ok */0,
                                  _0: {
                                    name: name._0,
                                    grade: grade._0,
                                    package: $$package._0,
                                    weight: weight._0,
                                    each: each._0,
                                    weightUnit: weightUnit._0,
                                    operationStatus: operationStatus._0,
                                    cost: cost._0,
                                    cutOffTime: cutOffTime._0,
                                    memo: memo._0,
                                    showEach: showEach._0,
                                    isFreeShipping: isFreeShipping._0
                                  }
                                };
                        }
                        var e = isFreeShipping._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".is-free-shipping" + e.path,
                                  message: e.message,
                                  value: e.value
                                }
                              };
                      }
                      var e$1 = showEach._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".show-each" + e$1.path,
                                message: e$1.message,
                                value: e$1.value
                              }
                            };
                    }
                    var e$2 = memo._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".memo" + e$2.path,
                              message: e$2.message,
                              value: e$2.value
                            }
                          };
                  }
                  var e$3 = cutOffTime._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".cut-off-time" + e$3.path,
                            message: e$3.message,
                            value: e$3.value
                          }
                        };
                }
                var e$4 = cost._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".cost" + e$4.path,
                          message: e$4.message,
                          value: e$4.value
                        }
                      };
              }
              var e$5 = operationStatus._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".operation-status" + e$5.path,
                        message: e$5.message,
                        value: e$5.value
                      }
                    };
            }
            var e$6 = weightUnit._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".weight-unit" + e$6.path,
                      message: e$6.message,
                      value: e$6.value
                    }
                  };
          }
          var e$7 = each._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".each" + e$7.path,
                    message: e$7.message,
                    value: e$7.value
                  }
                };
        }
        var e$8 = weight._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".weight" + e$8.path,
                  message: e$8.message,
                  value: e$8.value
                }
              };
      }
      var e$9 = $$package._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".package" + e$9.path,
                message: e$9.message,
                value: e$9.value
              }
            };
    }
    var e$10 = grade._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".grade" + e$10.path,
              message: e$10.message,
              value: e$10.value
            }
          };
  }
  var e$11 = name._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".name" + e$11.path,
            message: e$11.message,
            value: e$11.value
          }
        };
}

function makeNames(prefix) {
  return {
          name: prefix + ".name",
          autoCompleteName: prefix + ".autoCompleteName",
          grade: prefix + ".grade",
          package: prefix + ".package",
          weight: prefix + ".weight",
          weightUnit: prefix + ".weight-unit",
          operationStatus: prefix + ".operation-status",
          isFreeShipping: prefix + ".is-free-shipping",
          buyerPrice: prefix + ".cost.buyer-price",
          cost: prefix + ".cost.cost",
          rawCost: prefix + ".cost.raw-cost",
          workingCost: prefix + ".cost.working-cost",
          deliveryCost: prefix + ".cost.delivery-cost",
          costType: prefix + ".cost.cost-type",
          cutOffTime: prefix + ".cut-off-time",
          memo: prefix + ".memo",
          each: prefix + ".each",
          showEach: prefix + ".show-each"
        };
}

var defaultValue = Js_dict.fromArray([
      [
        "name",
        null
      ],
      [
        "autoCompleteName",
        null
      ],
      [
        "grade",
        null
      ],
      [
        "weight-unit",
        Select_Product_Option_Unit.Weight.status_encode(/* KG */1)
      ],
      [
        "operation-status",
        null
      ],
      [
        "is-free-shipping",
        null
      ],
      [
        "cost.buyer-price",
        null
      ],
      [
        "cost",
        Js_dict.fromArray([
              [
                "raw-cost",
                null
              ],
              [
                "working-cost",
                null
              ],
              [
                "delivery-cost",
                null
              ],
              [
                "buyer-price",
                null
              ]
            ])
      ],
      [
        "cut-off-time",
        "10시 이전 발주 완료건에 한해 당일 출고(단, 산지 상황에 따라 출고 일정은 변경 될 수 있습니다.)"
      ],
      [
        "memo",
        null
      ]
    ]);

var Form_names = {
  name: "name",
  autoCompleteName: "autoCompleteName",
  grade: "grade",
  package: "package",
  weight: "weight",
  weightUnit: "weight-unit",
  operationStatus: "operation-status",
  isFreeShipping: "is-free-shipping",
  buyerPrice: "cost.buyer-price",
  cost: "cost.cost",
  rawCost: "cost.raw-cost",
  workingCost: "cost.working-cost",
  deliveryCost: "cost.delivery-cost",
  costType: "cost.cost-type",
  cutOffTime: "cut-off-time",
  memo: "memo",
  each: "each",
  showEach: "show-each"
};

var Form = {
  cost_encode: cost_encode,
  cost_decode: cost_decode,
  submit_encode: submit_encode,
  submit_decode: submit_decode,
  makeNames: makeNames,
  names: Form_names,
  defaultValue: defaultValue
};

function makeAutoGeneratedName(grade, $$package, weight, weightUnit, numMin, numMax, perWeightUnit, sizeMin, sizeMax, sizeUnit, showEach, param) {
  var basicNames = [
    Helper.$$Option.map2(Belt_Option.flatMap(weight, Belt_Float.fromString), weightUnit, (function (w, wu) {
            return String(w) + wu;
          })),
    Belt_Option.flatMap(grade, (function (str) {
            if (str === "") {
              return ;
            } else {
              return str;
            }
          })),
    Belt_Option.flatMap($$package, (function (str) {
            if (str === "") {
              return ;
            } else {
              return str;
            }
          }))
  ];
  var additiveNames;
  if (showEach) {
    var tmp;
    if (weight !== undefined && weightUnit !== undefined && numMin !== undefined && numMax !== undefined && perWeightUnit !== undefined) {
      var match = Belt_Float.fromString(weight);
      var match$1 = Select_Product_Option_Unit.Weight.status_decode(weightUnit);
      var match$2 = Belt_Float.fromString(numMin);
      var match$3 = Belt_Float.fromString(numMax);
      var match$4 = Select_Product_Option_Unit.Weight.status_decode(perWeightUnit);
      if (match !== undefined && match$1.TAG === /* Ok */0 && match$2 !== undefined && match$3 !== undefined) {
        var weightUnit$p$p = match$1._0;
        if (match$4.TAG === /* Ok */0) {
          var unit$p$p = match$4._0;
          tmp = Product_Option_Each_Admin.getPerWeight(match, weightUnit$p$p, match$3, unit$p$p) + "~" + (Product_Option_Each_Admin.getPerWeight(match, weightUnit$p$p, match$2, unit$p$p) + perWeightUnit);
        } else {
          tmp = undefined;
        }
      } else {
        tmp = undefined;
      }
    } else {
      tmp = undefined;
    }
    additiveNames = [
      Helper.$$Option.map2(numMin, numMax, (function (min, max) {
              return "상자당 " + min + "~" + max;
            })),
      tmp,
      sizeMin !== undefined && sizeMax !== undefined && sizeUnit !== undefined ? sizeMin + "~" + sizeMax + sizeUnit : undefined
    ];
  } else {
    additiveNames = [];
  }
  return Belt_Array.keep(Belt_Array.concat(basicNames, additiveNames), Belt_Option.isSome).join("/");
}

function Add_ProductOption_Admin$NameInput(Props) {
  var inputName = Props.inputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, undefined);
  var name = match$1.name;
  return React.createElement("input", {
              ref: match$1.ref,
              className: "px-3 py-2 border border-border-default-L1 rounded-lg h-9 w-1/3 max-w-sm",
              id: name,
              name: name,
              placeholder: "단품명 입력(커스텀)",
              onBlur: match$1.onBlur,
              onChange: match$1.onChange
            });
}

var NameInput = {
  make: Add_ProductOption_Admin$NameInput
};

function Add_ProductOption_Admin$AutoGeneratedName(Props) {
  var inputNames = Props.inputNames;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var control = match.control;
  var watchValues = ReactHookForm$1.useWatch({
        name: [
          inputNames.grade,
          inputNames.package,
          inputNames.weight,
          inputNames.weightUnit,
          inputNames.each + "." + Product_Option_Each_Admin.Form.names.minNum,
          inputNames.each + "." + Product_Option_Each_Admin.Form.names.maxNum,
          inputNames.each + "." + Product_Option_Each_Admin.Form.names.unitWeight,
          inputNames.each + "." + Product_Option_Each_Admin.Form.names.minSize,
          inputNames.each + "." + Product_Option_Each_Admin.Form.names.maxSize,
          inputNames.each + "." + Product_Option_Each_Admin.Form.names.unitSize
        ],
        control: control
      });
  var showEach = ReactHookForm$1.useWatch({
        name: inputNames.showEach,
        control: control
      });
  var generatedName;
  if (watchValues !== undefined) {
    var match$1 = Belt_Array.map(watchValues, (function (prim) {
            if (prim == null) {
              return ;
            } else {
              return Caml_option.some(prim);
            }
          }));
    if (match$1.length !== 10) {
      generatedName = "";
    } else {
      var grade = match$1[0];
      var $$package = match$1[1];
      var weight = match$1[2];
      var weightUnit = match$1[3];
      var numMin = match$1[4];
      var numMax = match$1[5];
      var perWeightUnit = match$1[6];
      var sizeMin = match$1[7];
      var sizeMax = match$1[8];
      var sizeUnit = match$1[9];
      generatedName = makeAutoGeneratedName(grade, $$package, weight, weightUnit, numMin, numMax, perWeightUnit, sizeMin, sizeMax, sizeUnit, Belt_Option.getWithDefault(showEach, false), undefined);
    }
  } else {
    generatedName = "";
  }
  return React.createElement("div", {
              className: "w-1/3 max-w-[320px] h-9 px-3 py-2 border border-gray-300 bg-gray-100 rounded-lg "
            }, React.createElement("span", {
                  className: "whitespace-nowrap text-gray-500"
                }, generatedName === "" ? "자동생성 단품명(자동으로 생성)" : generatedName));
}

var AutoGeneratedName = {
  make: Add_ProductOption_Admin$AutoGeneratedName
};

function Add_ProductOption_Admin$OptionCode(Props) {
  return React.createElement("div", {
              className: "w-1/3 max-w-[162px] h-9  px-3 py-2 border border-gray-300 bg-gray-100 rounded-lg"
            }, React.createElement("span", {
                  className: "whitespace-nowrap text-gray-500"
                }, "단품코드(자동생성)"));
}

var OptionCode = {
  make: Add_ProductOption_Admin$OptionCode
};

function Add_ProductOption_Admin$GradeInput(Props) {
  var inputName = Props.inputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, undefined);
  var name = match$1.name;
  return React.createElement("div", {
              className: "w-1/3 max-w-[320px]"
            }, React.createElement("label", {
                  className: "block font-bold",
                  htmlFor: name
                }, "등급(용도)"), React.createElement("input", {
                  ref: match$1.ref,
                  className: "mt-2 w-full h-9 px-3 py-2 border border-gray-300 rounded-lg",
                  id: name,
                  name: name,
                  placeholder: "등급 또는 용도 입력(선택사항)",
                  onBlur: match$1.onBlur,
                  onChange: match$1.onChange
                }));
}

var GradeInput = {
  make: Add_ProductOption_Admin$GradeInput
};

function Add_ProductOption_Admin$PackageInput(Props) {
  var inputName = Props.inputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, undefined);
  var name = match$1.name;
  return React.createElement("div", {
              className: "w-1/3 max-w-[320px]"
            }, React.createElement("label", {
                  className: "block font-bold",
                  htmlFor: name
                }, "포장재질"), React.createElement("input", {
                  ref: match$1.ref,
                  className: "mt-2 w-full h-9 px-3 py-2 border border-gray-300 rounded-lg",
                  id: name,
                  name: name,
                  placeholder: "포장재질(선택사항)",
                  onBlur: match$1.onBlur,
                  onChange: match$1.onChange
                }));
}

var PackageInput = {
  make: Add_ProductOption_Admin$PackageInput
};

function Add_ProductOption_Admin$WeightInput(Props) {
  var showEachInputName = Props.showEachInputName;
  var weightInputName = Props.weightInputName;
  var unitInputName = Props.unitInputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var control = match.control;
  var match$1 = match.register(weightInputName, {
        required: true,
        min: 0,
        valueAsNumber: true
      });
  var name = match$1.name;
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "py-6 flex flex-col gap-2"
                }, React.createElement("label", {
                      htmlFor: name
                    }, React.createElement("span", {
                          className: "font-bold"
                        }, "중량"), React.createElement("span", {
                          className: "text-red-500"
                        }, "*")), React.createElement("div", {
                      className: "flex items-center gap-2"
                    }, React.createElement("input", {
                          ref: match$1.ref,
                          className: "px-3 py-2 border border-border-default-L1 rounded-lg h-9",
                          id: name,
                          name: name,
                          placeholder: "중량 입력",
                          step: 0.01,
                          type: "number",
                          onBlur: match$1.onBlur,
                          onChange: match$1.onChange
                        }), React.createElement(ReactHookForm$1.Controller, {
                          name: unitInputName,
                          control: control,
                          render: (function (param) {
                              var match = param.field;
                              var onChange = match.onChange;
                              return React.createElement(Select_Product_Option_Unit.Weight.make, {
                                          status: Belt_Result.getWithDefault(Select_Product_Option_Unit.Weight.status_decode(match.value), /* KG */1),
                                          onChange: (function (status) {
                                              return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Select_Product_Option_Unit.Weight.status_encode(status)));
                                            }),
                                          forwardRef: match.ref
                                        });
                            }),
                          defaultValue: Select_Product_Option_Unit.Weight.status_encode(/* KG */1)
                        }), React.createElement("div", {
                          className: "flex gap-2 items-center grow"
                        }, React.createElement(ReactHookForm$1.Controller, {
                              name: showEachInputName,
                              control: control,
                              render: (function (param) {
                                  var match = param.field;
                                  var onChange = match.onChange;
                                  var name = match.name;
                                  return React.createElement(React.Fragment, undefined, React.createElement(Checkbox.make, {
                                                  id: name,
                                                  checked: Belt_Option.getWithDefault(Js_json.decodeBoolean(match.value), false),
                                                  onChange: (function (e) {
                                                      return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.$$event, e));
                                                    })
                                                }), React.createElement("label", {
                                                  htmlFor: name
                                                }, "입수 정보 입력"));
                                }),
                              defaultValue: false
                            }))), React.createElement(ErrorMessage.ErrorMessage, {
                      name: name,
                      errors: match.formState.errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "중량을 입력해주세요.(음수입력 불가)"));
                        })
                    })));
}

var WeightInput = {
  make: Add_ProductOption_Admin$WeightInput
};

function Add_ProductOption_Admin$PriceInput(Props) {
  var inputName = Props.inputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, {
        required: true,
        min: 0,
        valueAsNumber: true
      });
  var name = match$1.name;
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px]"
            }, React.createElement("label", {
                  className: "block"
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "바이어판매가"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*")), React.createElement("input", {
                  ref: match$1.ref,
                  className: "mt-2 w-full h-9 px-3 py-2 border border-gray-300 rounded-lg",
                  id: name,
                  name: name,
                  placeholder: "가격입력",
                  type: "number",
                  onBlur: match$1.onBlur,
                  onChange: match$1.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "바이어판매가를 입력해주세요."));
                    })
                }));
}

var PriceInput = {
  make: Add_ProductOption_Admin$PriceInput
};

function Add_ProductOption_Admin$OptionStatusSelect(Props) {
  var inputName = Props.inputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var errors = match.formState.errors;
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px]"
            }, React.createElement("label", {
                  className: "block"
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "운영상태"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*")), React.createElement("div", {
                  className: "mt-2 w-full h-9"
                }, React.createElement(ReactHookForm$1.Controller, {
                      name: inputName,
                      control: match.control,
                      render: (function (param) {
                          var match = param.field;
                          var onChange = match.onChange;
                          return React.createElement("div", undefined, React.createElement(Select_Product_Operation_Status.Base.make, {
                                          status: Belt_Result.mapWithDefault(Select_Product_Operation_Status.Base.status_decode(match.value), undefined, (function (v) {
                                                  return v;
                                                })),
                                          onChange: (function (status) {
                                              return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Select_Product_Operation_Status.Base.status_encode(status)));
                                            }),
                                          forwardRef: match.ref
                                        }), React.createElement(ErrorMessage.ErrorMessage, {
                                          name: match.name,
                                          errors: errors,
                                          render: (function (param) {
                                              return React.createElement("span", {
                                                          className: "flex"
                                                        }, React.createElement(IconError.make, {
                                                              width: "20",
                                                              height: "20"
                                                            }), React.createElement("span", {
                                                              className: "text-sm text-notice ml-1"
                                                            }, "운영상태를 입력해주세요."));
                                            })
                                        }));
                        }),
                      rules: ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)
                    })));
}

var OptionStatusSelect = {
  make: Add_ProductOption_Admin$OptionStatusSelect
};

function Add_ProductOption_Admin$IsFreeShipping(Props) {
  var inputName = Props.inputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var errors = match.formState.errors;
  var toStatus = function (statusFromSelect) {
    return Belt_Result.mapWithDefault(Select_Product_Shipping_Type.status_decode(statusFromSelect), undefined, (function (v) {
                  return v;
                }));
  };
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px]"
            }, React.createElement("label", {
                  className: "block"
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "배송비 타입"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*")), React.createElement("span", {
                  className: "mt-2 w-full h-9"
                }, React.createElement(ReactHookForm$1.Controller, {
                      name: inputName,
                      control: match.control,
                      render: (function (param) {
                          var match = param.field;
                          var onChange = match.onChange;
                          return React.createElement("div", undefined, React.createElement(Select_Product_Shipping_Type.make, {
                                          status: toStatus(match.value),
                                          onChange: (function (selected) {
                                              return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Select_Product_Shipping_Type.status_encode(selected)));
                                            }),
                                          forwardRef: match.ref
                                        }), React.createElement(ErrorMessage.ErrorMessage, {
                                          name: match.name,
                                          errors: errors,
                                          render: (function (param) {
                                              return React.createElement("span", {
                                                          className: "flex"
                                                        }, React.createElement(IconError.make, {
                                                              width: "20",
                                                              height: "20"
                                                            }), React.createElement("span", {
                                                              className: "text-sm text-notice ml-1"
                                                            }, "배송비 타입을 입력해주세요."));
                                            })
                                        }));
                        }),
                      rules: ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)
                    })));
}

var IsFreeShipping = {
  make: Add_ProductOption_Admin$IsFreeShipping
};

function Add_ProductOption_Admin$RawCostInput(Props) {
  var inputName = Props.inputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, {
        required: true,
        min: 0,
        valueAsNumber: true
      });
  var name = match$1.name;
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px]"
            }, React.createElement("label", {
                  className: "block",
                  htmlFor: name
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "생산자 원물원가"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*")), React.createElement("input", {
                  ref: match$1.ref,
                  className: "mt-2 w-full h-9 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none",
                  id: name,
                  name: name,
                  placeholder: "가격입력",
                  type: "number",
                  onBlur: match$1.onBlur,
                  onChange: match$1.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "생산자원물원가를 입력해주세요."));
                    })
                }));
}

var RawCostInput = {
  make: Add_ProductOption_Admin$RawCostInput
};

function Add_ProductOption_Admin$WorkingCostInput(Props) {
  var inputName = Props.inputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, {
        required: true,
        min: 0,
        valueAsNumber: true
      });
  var name = match$1.name;
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px]"
            }, React.createElement("label", {
                  className: "block",
                  htmlFor: name
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "생산자 포장작업비"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*")), React.createElement("input", {
                  ref: match$1.ref,
                  className: "mt-2 w-full h-9 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none",
                  id: name,
                  name: name,
                  placeholder: "가격입력",
                  type: "number",
                  onBlur: match$1.onBlur,
                  onChange: match$1.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "생산자 포장작업비를 입력해주세요."));
                    })
                }));
}

var WorkingCostInput = {
  make: Add_ProductOption_Admin$WorkingCostInput
};

function Add_ProductOption_Admin$DeliveryCostInput$Disabled(Props) {
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px] gap-2"
            }, React.createElement("span", {
                  className: "font-bold block"
                }, "생산자 택배비"), React.createElement("div", {
                  className: "h-9 w-full px-3 py-2 border border-gray-300 bg-gray-100 rounded-lg"
                }, React.createElement("span", {
                      className: "text-disabled-L2"
                    }, "택배 불가능")));
}

var Disabled = {
  make: Add_ProductOption_Admin$DeliveryCostInput$Disabled
};

function Add_ProductOption_Admin$DeliveryCostInput(Props) {
  var inputName = Props.inputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, {
        required: true,
        min: 0,
        valueAsNumber: true
      });
  var name = match$1.name;
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px]"
            }, React.createElement("label", {
                  className: "block",
                  htmlFor: name
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "생산자 택배비"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*")), React.createElement("input", {
                  ref: match$1.ref,
                  className: "mt-2 w-full h-9 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none",
                  id: name,
                  name: name,
                  placeholder: "가격입력",
                  type: "number",
                  onBlur: match$1.onBlur,
                  onChange: match$1.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "생산자 택배비를 입력해주세요."));
                    })
                }));
}

var DeliveryCostInput = {
  Disabled: Disabled,
  make: Add_ProductOption_Admin$DeliveryCostInput
};

function Add_ProductOption_Admin$TotalRawCost(Props) {
  var inputNames = Props.inputNames;
  var watchCost = ReactHookForm$1.useWatch({
        name: [
          inputNames.rawCost,
          inputNames.workingCost,
          inputNames.deliveryCost
        ]
      });
  var toFiniteFloat = function (optionStr) {
    return Belt_Option.keep(Belt_Option.flatMap(optionStr, Belt_Float.fromString), (function (prim) {
                  return Number.isFinite(prim);
                }));
  };
  var totalRawCost;
  if (watchCost !== undefined) {
    if (watchCost.length !== 3) {
      totalRawCost = 0;
    } else {
      var rawCost = watchCost[0];
      var workingCost = watchCost[1];
      var deliveryCost = watchCost[2];
      var rawCost$p = Belt_Option.getWithDefault(toFiniteFloat(rawCost), 0);
      var workingCost$p = Belt_Option.getWithDefault(toFiniteFloat(workingCost), 0);
      var deliveryCost$p = Belt_Option.getWithDefault(toFiniteFloat(deliveryCost), 0);
      totalRawCost = rawCost$p + workingCost$p + deliveryCost$p;
    }
  } else {
    totalRawCost = 0;
  }
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px]"
            }, React.createElement("label", {
                  className: "whitespace-nowrap block"
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "생산자 총 공급원가"), React.createElement("span", {
                      className: "text-gray-600"
                    }, " *자동계산")), React.createElement("div", {
                  className: "mt-2 h-9 w-full px-3 py-2 border border-gray-300 rounded-lg"
                }, String(totalRawCost)));
}

var TotalRawCost = {
  make: Add_ProductOption_Admin$TotalRawCost
};

function Add_ProductOption_Admin$CostTypeSelect(Props) {
  var inputName = Props.inputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var errors = match.formState.errors;
  return React.createElement("div", {
              className: "flex flex-col w-[158px] min-w-[158px]"
            }, React.createElement("label", {
                  className: "block"
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "생산자 공급가 타입"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*")), React.createElement("div", {
                  className: "mt-2 w-full h-9"
                }, React.createElement(ReactHookForm$1.Controller, {
                      name: inputName,
                      control: match.control,
                      render: (function (param) {
                          var match = param.field;
                          var onChange = match.onChange;
                          return React.createElement("div", undefined, React.createElement(Select_Producer_Contract_Type.make, {
                                          status: Belt_Result.mapWithDefault(Select_Producer_Contract_Type.status_decode(match.value), undefined, (function (v) {
                                                  return v;
                                                })),
                                          onChange: (function (status) {
                                              return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Select_Producer_Contract_Type.status_encode(status)));
                                            }),
                                          forwardRef: match.ref
                                        }), React.createElement(ErrorMessage.ErrorMessage, {
                                          name: match.name,
                                          errors: errors,
                                          render: (function (param) {
                                              return React.createElement("span", {
                                                          className: "flex"
                                                        }, React.createElement(IconError.make, {
                                                              width: "20",
                                                              height: "20"
                                                            }), React.createElement("span", {
                                                              className: "text-sm text-notice ml-1"
                                                            }, "공급가 타입을 입력해주세요."));
                                            })
                                        }));
                        }),
                      rules: ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)
                    })));
}

var CostTypeSelect = {
  make: Add_ProductOption_Admin$CostTypeSelect
};

function Add_ProductOption_Admin$CutOffTimeInput(Props) {
  var inputName = Props.inputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, {
        maxLength: 100
      });
  var name = match$1.name;
  return React.createElement("div", {
              className: "flex flex-col gap-2 min-w-1/2 max-w-2xl"
            }, React.createElement("label", {
                  htmlFor: name
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "출고기준시간")), React.createElement("textarea", {
                  ref: match$1.ref,
                  defaultValue: "10시 이전 발주 완료건에 한해 당일 출고(단, 산지 상황에 따라 출고 일정은 변경 될 수 있습니다.)",
                  className: "px-3 py-2 border border-border-default-L1 rounded-lg focus:outline-none h-9",
                  id: name,
                  name: name,
                  placeholder: "출고기준시간 입력(최대 100자)",
                  onBlur: match$1.onBlur,
                  onChange: match$1.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "최대 100자까지 입력가능합니다."));
                    })
                }));
}

var CutOffTimeInput = {
  make: Add_ProductOption_Admin$CutOffTimeInput
};

function Add_ProductOption_Admin$MemoInput(Props) {
  var inputName = Props.inputName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var match$1 = match.register(inputName, {
        maxLength: 100
      });
  var name = match$1.name;
  return React.createElement("div", {
              className: "flex flex-col gap-2 min-w-1/2 max-w-2xl"
            }, React.createElement("label", {
                  htmlFor: name
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "메모")), React.createElement("textarea", {
                  ref: match$1.ref,
                  className: "px-3 py-2 border border-border-default-L1 rounded-lg focus:outline-none h-9",
                  id: name,
                  name: name,
                  placeholder: "메모사항 입력(최대 100자)",
                  onBlur: match$1.onBlur,
                  onChange: match$1.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "최대 100자까지 입력가능합니다."));
                    })
                }));
}

var MemoInput = {
  make: Add_ProductOption_Admin$MemoInput
};

function Add_ProductOption_Admin(Props) {
  var prefix = Props.prefix;
  var index = Props.index;
  var remove = Props.remove;
  var prepend = Props.prepend;
  var isOnlyOneRemained = Props.isOnlyOneRemained;
  var productDisplayName = Props.productDisplayName;
  var applyAll = Props.applyAll;
  var setApplyAll = Props.setApplyAll;
  var isCourierAvailable = Props.isCourierAvailable;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var values = Garter_Array.first(Belt_Option.getWithDefault(Js_json.decodeArray(match.getValues([prefix])), []));
  var match$1 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowRemove = match$1[1];
  var inputNames = makeNames(prefix);
  var onClickDelete = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return setShowRemove(function (param) {
                              return /* Show */0;
                            });
                }), param);
  };
  var onClickCopy = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  setApplyAll(function (param) {
                        return false;
                      });
                  if (values === undefined) {
                    return ;
                  }
                  var focusOptions = {
                    shouldFocus: true
                  };
                  return prepend(Caml_option.valFromOption(values), Caml_option.some(focusOptions), undefined);
                }), param);
  };
  var onClickApplyAll = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  return setApplyAll(function (prev) {
                              return !prev;
                            });
                }), param);
  };
  var showEach = ReactHookForm$1.useWatch({
        name: inputNames.showEach,
        control: match.control
      });
  return React.createElement("div", {
              className: "bg-gray-50 border border-gray-200 px-3 py-7 rounded text-sm"
            }, React.createElement(ReactCollapsible.Root, {
                  children: null,
                  defaultOpen: true
                }, React.createElement("section", {
                      className: "flex flex-col gap-6"
                    }, React.createElement("div", {
                          className: "flex flex-col gap-2"
                        }, React.createElement("div", {
                              className: "flex justify-between"
                            }, React.createElement("div", {
                                  className: "flex items-center justify-start"
                                }, React.createElement("span", {
                                      className: "block font-bold"
                                    }, "단품 기본정보"), React.createElement("button", {
                                      className: "ml-2 px-2 py-1 bg-green-500 text-white focus:outline-none rounded",
                                      onClick: onClickCopy
                                    }, "복사하기"), React.createElement("button", {
                                      className: "ml-2 px-2 py-1 bg-gray-100 rounded focus:outline-none",
                                      disabled: isOnlyOneRemained,
                                      onClick: onClickDelete
                                    }, "삭제하기")), React.createElement(ReactCollapsible.Trigger, {
                                  children: React.createElement("div", {
                                        className: "flex items-center cursor-pointer relative gap-1"
                                      }, React.createElement("span", {
                                            className: "underline"
                                          }, "단품정보 접기"), React.createElement(IconArrow.make, {
                                            height: "15",
                                            width: "15",
                                            stroke: "#000000",
                                            className: "transform -rotate-90"
                                          })),
                                  className: "collabsible-trigger"
                                })), React.createElement("div", {
                              className: "flex gap-2"
                            }, React.createElement(Add_ProductOption_Admin$NameInput, {
                                  inputName: inputNames.name
                                }), React.createElement(Add_ProductOption_Admin$AutoGeneratedName, {
                                  inputNames: inputNames
                                }), React.createElement(Add_ProductOption_Admin$OptionCode, {})))), React.createElement(ReactCollapsible.Content, {
                      children: React.createElement("div", {
                            className: "divide-y"
                          }, React.createElement("div", {
                                className: "flex gap-2 py-6"
                              }, React.createElement(Add_ProductOption_Admin$GradeInput, {
                                    inputName: inputNames.grade
                                  }), React.createElement(Add_ProductOption_Admin$PackageInput, {
                                    inputName: inputNames.package
                                  })), React.createElement(Add_ProductOption_Admin$WeightInput, {
                                showEachInputName: inputNames.showEach,
                                weightInputName: inputNames.weight,
                                unitInputName: inputNames.weightUnit
                              }), showEach !== undefined && showEach ? React.createElement(Product_Option_Each_Admin.make, {
                                  prefix: prefix,
                                  weightFormName: inputNames.weight,
                                  wieghtUnitFormName: inputNames.weightUnit
                                }) : null, React.createElement("div", {
                                className: "flex flex-col gap-6 py-6 w-full"
                              }, React.createElement("div", {
                                    className: "flex gap-4 items-center justify-start"
                                  }, React.createElement(Add_ProductOption_Admin$PriceInput, {
                                        inputName: inputNames.buyerPrice
                                      }), React.createElement(Add_ProductOption_Admin$TotalRawCost, {
                                        inputNames: inputNames
                                      }), React.createElement(Add_ProductOption_Admin$OptionStatusSelect, {
                                        inputName: inputNames.operationStatus
                                      }), React.createElement(Add_ProductOption_Admin$IsFreeShipping, {
                                        inputName: inputNames.isFreeShipping
                                      })), React.createElement("div", {
                                    className: "flex gap-4 items-center justify-start"
                                  }, React.createElement(Add_ProductOption_Admin$RawCostInput, {
                                        inputName: inputNames.rawCost
                                      }), React.createElement(Add_ProductOption_Admin$WorkingCostInput, {
                                        inputName: inputNames.workingCost
                                      }), isCourierAvailable ? React.createElement(Add_ProductOption_Admin$DeliveryCostInput, {
                                          inputName: inputNames.deliveryCost
                                        }) : React.createElement(Add_ProductOption_Admin$DeliveryCostInput$Disabled, {}), React.createElement(Add_ProductOption_Admin$CostTypeSelect, {
                                        inputName: inputNames.costType
                                      }))), React.createElement("div", {
                                className: "flex flex-col gap-6 py-6 w-full"
                              }, React.createElement(Add_ProductOption_Admin$CutOffTimeInput, {
                                    inputName: inputNames.cutOffTime
                                  }), React.createElement(Add_ProductOption_Admin$MemoInput, {
                                    inputName: inputNames.memo
                                  }), index !== 0 ? null : React.createElement("div", {
                                      className: "flex gap-2 items-center"
                                    }, React.createElement("button", {
                                          onClick: onClickApplyAll
                                        }, React.createElement("img", {
                                              src: applyAll ? checkboxCheckedIcon : checkboxUncheckedIcon
                                            })), React.createElement("span", undefined, "[" + productDisplayName + "] 전체 단품에 출고기준시간과 메모 동일하게 적용하기")))),
                      className: "collabsible-content"
                    })), React.createElement(Dialog.make, {
                  isShow: match$1[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "등록중인 단품정보를", React.createElement("br", undefined), "삭제하시겠어요?"),
                  onCancel: (function (param) {
                      return setShowRemove(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  onConfirm: (function (param) {
                      remove(index);
                      return setShowRemove(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  textOnCancel: "닫기",
                  textOnConfirm: "삭제",
                  kindOfConfirm: /* Negative */1,
                  boxStyle: "text-center rounded-2xl"
                }));
}

var Select_Unit;

var make = Add_ProductOption_Admin;

export {
  Select_Unit ,
  checkboxCheckedIcon ,
  checkboxUncheckedIcon ,
  Form ,
  makeAutoGeneratedName ,
  NameInput ,
  AutoGeneratedName ,
  OptionCode ,
  GradeInput ,
  PackageInput ,
  WeightInput ,
  PriceInput ,
  OptionStatusSelect ,
  IsFreeShipping ,
  RawCostInput ,
  WorkingCostInput ,
  DeliveryCostInput ,
  TotalRawCost ,
  CostTypeSelect ,
  CutOffTimeInput ,
  MemoInput ,
  make ,
  
}
/* checkboxCheckedIcon Not a pure module */
