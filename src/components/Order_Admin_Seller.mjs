// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Swr from "swr";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Input from "./common/Input.mjs";
import * as React from "react";
import * as Dialog from "./common/Dialog.mjs";
import * as Helper from "../utils/Helper.mjs";
import * as Locale from "../utils/Locale.mjs";
import * as Period from "../utils/Period.mjs";
import * as Checkbox from "./common/Checkbox.mjs";
import * as Skeleton from "./Skeleton.mjs";
import * as IconCheck from "./svgs/IconCheck.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Badge_Admin from "./Badge_Admin.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as FetchHelper from "../utils/FetchHelper.mjs";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Router from "next/router";
import * as Select_Courier from "./Select_Courier.mjs";
import * as Tracking_Admin from "./Tracking_Admin.mjs";
import * as Order_Detail_Button_Admin from "./Order_Detail_Button_Admin.mjs";
import * as ReactToastNotifications from "react-toast-notifications";

function formatDate(d) {
  return Locale.DateTime.formatFromUTC(new Date(d), "yyyy/MM/dd HH:mm");
}

function Order_Admin_Seller$Item$Table(Props) {
  var order = Props.order;
  var courierCode = Props.courierCode;
  var setCourier = Props.setCourier;
  var invoice = Props.invoice;
  var onChangeInvoice = Props.onChangeInvoice;
  var onSubmitInvoice = Props.onSubmitInvoice;
  var check = Props.check;
  var onCheckOrder = Props.onCheckOrder;
  var onClickPacking = Props.onClickPacking;
  var match = React.useState(function () {
        return /* Hide */1;
      });
  var setShowPackingConfirm = match[1];
  var status = CustomHooks.Courier.use(undefined);
  var courierName;
  if (typeof status === "number" || status.TAG !== /* Loaded */0) {
    courierName = "-";
  } else {
    var couriers = status._0;
    courierName = Belt_Option.mapWithDefault(Belt_Option.flatMap(order.courierCode, (function (courierCode$p) {
                return Belt_Result.mapWithDefault(CustomHooks.Courier.response_decode(couriers), undefined, (function (couriers$p) {
                              return Belt_Array.getBy(couriers$p.data, (function (courier) {
                                            return courier.code === courierCode$p;
                                          }));
                            }));
              })), "-", (function (courier) {
            return courier.name;
          }));
  }
  var match$1 = order.status;
  var isDisabedCheckbox = match$1 !== 0;
  var isDisabledSubmitButton = courierCode !== undefined && invoice !== undefined ? invoice === "" : true;
  var match$2 = order.status;
  var tmp;
  var exit = 0;
  switch (match$2) {
    case /* CREATE */0 :
        tmp = React.createElement("button", {
              className: "max-w-min p-2 bg-green-gl text-white rounded-md whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-green-gl focus:ring-offset-1 focus:ring-opacity-100",
              onClick: (function (param) {
                  setShowPackingConfirm(function (param) {
                        return /* Show */0;
                      });
                })
            }, "상품준비중 처리");
        break;
    case /* COMPLETE */4 :
    case /* CANCEL */5 :
        exit = 2;
        break;
    case /* PACKING */1 :
    case /* DEPARTURE */2 :
    case /* DELIVERING */3 :
    case /* ERROR */6 :
    case /* REFUND */7 :
    case /* NEGOTIATING */8 :
        exit = 1;
        break;
    
  }
  switch (exit) {
    case 1 :
        var match$3 = order.invoice;
        tmp = React.createElement(React.Fragment, undefined, React.createElement(Select_Courier.make, {
                  courierCode: courierCode,
                  setCourier: setCourier
                }), React.createElement("div", {
                  className: "flex mt-1"
                }, React.createElement("label", {
                      className: "block flex-auto"
                    }, React.createElement(Input.make, {
                          type_: "text",
                          name: "invoice-number",
                          placeholder: "송장번호입력",
                          value: Belt_Option.getWithDefault(invoice, ""),
                          onChange: onChangeInvoice,
                          size: /* Small */2,
                          error: undefined
                        })), React.createElement("label", undefined, match$3 !== undefined ? React.createElement("button", {
                            className: "py-1 px-2 rounded-md bg-gray-300 text-white ml-1 whitespace-nowrap",
                            type: "button",
                            onClick: onSubmitInvoice
                          }, "수정") : React.createElement("button", {
                            className: isDisabledSubmitButton ? "py-1 px-2 rounded-md bg-gray-button-gl text-gray-gl ml-1 whitespace-nowrap" : "py-1 px-2 rounded-md bg-green-gl text-white ml-1 whitespace-nowrap",
                            type: "button",
                            onClick: onSubmitInvoice
                          }, "등록"))));
        break;
    case 2 :
        tmp = React.createElement(React.Fragment, undefined, React.createElement("span", {
                  className: "block"
                }, courierName), React.createElement("span", {
                  className: "block text-gray-500"
                }, Belt_Option.getWithDefault(order.invoice, "-")), React.createElement(Tracking_Admin.make, {
                  order: order
                }));
        break;
    
  }
  return React.createElement(React.Fragment, undefined, React.createElement("li", {
                  className: "grid grid-cols-12-gl-admin text-gray-700"
                }, React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement(Checkbox.make, {
                          id: "checkbox-" + order.orderProductNo + "",
                          checked: Curry._1(check, order.orderProductNo),
                          onChange: Curry._1(onCheckOrder, order.orderProductNo),
                          disabled: isDisabedCheckbox
                        })), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("span", {
                          className: "block mb-1"
                        }, order.farmerName), React.createElement("span", {
                          className: "block mb-1"
                        }, "(" + Belt_Option.getWithDefault(Belt_Option.flatMap(Helper.PhoneNumber.parse(order.farmerPhone), Helper.PhoneNumber.format), order.farmerPhone) + ")"), React.createElement("span", {
                          className: "block mb-1"
                        }, order.buyerName)), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("span", {
                          className: "block"
                        }, formatDate(order.orderDate))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 min-w-max"
                    }, React.createElement("span", {
                          className: "block text-gray-400 mb-2"
                        }, "" + String(order.productId) + " ・ " + order.productSku + ""), React.createElement(Badge_Admin.make, {
                          status: order.status
                        })), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement(Order_Detail_Button_Admin.make, {
                          order: order
                        })), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, tmp), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("span", {
                          className: "block whitespace-nowrap"
                        }, order.productName), React.createElement("span", {
                          className: "block text-gray-500"
                        }, Belt_Option.getWithDefault(order.productOptionName, "-")), React.createElement("span", {
                          className: "block whitespace-nowrap"
                        }, String(order.quantity))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("span", {
                          className: "block"
                        }, Belt_Option.getWithDefault(order.receiverName, "-")), React.createElement("span", {
                          className: "block"
                        }, Belt_Option.getWithDefault(order.receiverPhone, "-"))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 whitespace-nowrap"
                    }, React.createElement("span", {
                          className: "block"
                        }, "" + Locale.Float.show(undefined, order.productPrice, 0) + "원")), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 whitespace-nowrap"
                    }, React.createElement("span", {
                          className: "block"
                        }, Belt_Option.getWithDefault(order.receiverAddress, "-")), React.createElement("span", {
                          className: "block"
                        }, Belt_Option.getWithDefault(order.receiverZipcode, "-"))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2 whitespace-nowrap"
                    }, React.createElement("span", {
                          className: "block"
                        }, Belt_Option.getWithDefault(order.ordererName, "")), React.createElement("span", {
                          className: "block"
                        }, Belt_Option.getWithDefault(order.ordererPhone, ""))), React.createElement("div", {
                      className: "h-full flex flex-col px-4 py-2"
                    }, React.createElement("span", {
                          className: "block line-clamp-2"
                        }, Belt_Option.getWithDefault(order.deliveryMessage, "")))), React.createElement(Dialog.make, {
                  isShow: match[0],
                  children: React.createElement("p", {
                        className: "text-black-gl text-center whitespace-pre-wrap"
                      }, "선택한 주문을 상품준비중으로 변경하시겠습니까?"),
                  onCancel: (function (param) {
                      setShowPackingConfirm(function (param) {
                            return /* Hide */1;
                          });
                    }),
                  onConfirm: (function (param) {
                      setShowPackingConfirm(function (param) {
                            return /* Hide */1;
                          });
                      Curry._1(onClickPacking, [order.orderProductNo]);
                    }),
                  textOnCancel: "취소",
                  textOnConfirm: "확인"
                }));
}

var Table = {
  make: Order_Admin_Seller$Item$Table
};

function Order_Admin_Seller$Item$Loading(Props) {
  return React.createElement("li", {
              className: "grid grid-cols-12-gl-admin text-gray-700"
            }, React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Checkbox.make, {})), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {
                      className: "w-2/3"
                    }), React.createElement(Skeleton.Box.make, {}), React.createElement(Skeleton.Box.make, {
                      className: "w-2/3"
                    })), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {})), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {}), React.createElement(Skeleton.Box.make, {})), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {
                      className: "w-2/3"
                    })), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {
                      className: "w-2/3"
                    }), React.createElement(Skeleton.Box.make, {}), React.createElement(Skeleton.Box.make, {
                      className: "w-1/2"
                    })), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {}), React.createElement(Skeleton.Box.make, {
                      className: "w-2/3"
                    }), React.createElement(Skeleton.Box.make, {
                      className: "w-8"
                    })), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {
                      className: "w-2/3"
                    }), React.createElement(Skeleton.Box.make, {})), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2 whitespace-nowrap"
                }, React.createElement(Skeleton.Box.make, {})), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2 whitespace-nowrap"
                }, React.createElement(Skeleton.Box.make, {}), React.createElement(Skeleton.Box.make, {
                      className: "w-1/2"
                    })), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2 whitespace-nowrap"
                }, React.createElement(Skeleton.Box.make, {}), React.createElement(Skeleton.Box.make, {})), React.createElement("div", {
                  className: "h-full flex flex-col px-4 py-2"
                }, React.createElement(Skeleton.Box.make, {})));
}

var Loading = {
  make: Order_Admin_Seller$Item$Loading
};

var Item = {
  Table: Table,
  Loading: Loading
};

function Order_Admin_Seller(Props) {
  var order = Props.order;
  var check = Props.check;
  var onCheckOrder = Props.onCheckOrder;
  var onClickPacking = Props.onClickPacking;
  var router = Router.useRouter();
  var match = Swr.useSWRConfig();
  var mutate = match.mutate;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  var match$2 = CustomHooks.useInvoice(order.invoice);
  var invoice = match$2[0];
  var match$3 = React.useState(function () {
        return order.courierCode;
      });
  var courierCode = match$3[0];
  var match$4 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowErrorPostCourierInvoiceNo = match$4[1];
  var postCourierInvoiceNo = function (param) {
    return ReactEvents.interceptingHandler((function (param) {
                  Helper.$$Option.map2(courierCode, invoice, (function (courierCode$p, invoice$p) {
                          return Belt_Option.map(JSON.stringify({
                                          list: [{
                                              "order-product-number": order.orderProductNo,
                                              invoice: invoice$p,
                                              "courier-code": courierCode$p
                                            }]
                                        }), (function (body) {
                                        return FetchHelper.requestWithRetry(FetchHelper.postWithToken, "" + Env.restApiUrl + "/order/invoices", body, 3, (function (param) {
                                                      addToast(React.createElement("div", {
                                                                className: "flex items-center"
                                                              }, React.createElement(IconCheck.make, {
                                                                    height: "24",
                                                                    width: "24",
                                                                    fill: "#12B564",
                                                                    className: "mr-2"
                                                                  }), "송장번호가 입력되었습니다"), {
                                                            appearance: "success"
                                                          });
                                                      mutate("" + Env.restApiUrl + "/order?" + new URLSearchParams(router.query).toString() + "", undefined, undefined);
                                                      mutate("" + Env.restApiUrl + "/order/summary?" + Period.currentPeriod(router) + "", undefined, undefined);
                                                    }), (function (param) {
                                                      setShowErrorPostCourierInvoiceNo(function (param) {
                                                            return /* Show */0;
                                                          });
                                                    }));
                                      }));
                        }));
                }), param);
  };
  return React.createElement(React.Fragment, undefined, React.createElement(Order_Admin_Seller$Item$Table, {
                  order: order,
                  courierCode: courierCode,
                  setCourier: match$3[1],
                  invoice: invoice,
                  onChangeInvoice: match$2[1],
                  onSubmitInvoice: postCourierInvoiceNo,
                  check: check,
                  onCheckOrder: onCheckOrder,
                  onClickPacking: onClickPacking
                }), React.createElement(Dialog.make, {
                  isShow: match$4[0],
                  children: React.createElement("p", {
                        className: "text-gray-500 text-center whitespace-pre-wrap"
                      }, "송장번호 저장에 실패하였습니다."),
                  onConfirm: (function (param) {
                      setShowErrorPostCourierInvoiceNo(function (param) {
                            return /* Hide */1;
                          });
                    })
                }));
}

var make = Order_Admin_Seller;

export {
  formatDate ,
  Item ,
  make ,
}
/* Env Not a pure module */
