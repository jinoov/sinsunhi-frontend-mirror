// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as DataGtm from "../utils/DataGtm.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Garter_Id from "@greenlabs/garter/src/Garter_Id.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Garter_Math from "@greenlabs/garter/src/Garter_Math.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";

function productStatus_encode(v) {
  if (v === "SOLDOUT") {
    return "soldout";
  } else if (v === "HIDDEN_SALE") {
    return "hidden_sale";
  } else if (v === "SALE") {
    return "sale";
  } else if (v === "RETIRE") {
    return "retire";
  } else {
    return "nosale";
  }
}

function productStatus_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("sale" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: "SALE"
          };
  } else if ("soldout" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: "SOLDOUT"
          };
  } else if ("hidden_sale" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: "HIDDEN_SALE"
          };
  } else if ("nosale" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: "NOSALE"
          };
  } else if ("retire" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: "RETIRE"
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function productOption_encode(v) {
  return Js_dict.fromArray([
              [
                "checked",
                Spice.boolToJson(v.checked)
              ],
              [
                "cart-id",
                Spice.intToJson(v.cartId)
              ],
              [
                "product-option-id",
                Spice.intToJson(v.productOptionId)
              ],
              [
                "product-option-name",
                Spice.optionToJson(Spice.stringToJson, v.productOptionName)
              ],
              [
                "option-status",
                productStatus_encode(v.optionStatus)
              ],
              [
                "updated-at",
                Spice.optionToJson(Spice.stringToJson, v.updatedAt)
              ],
              [
                "price",
                Spice.intToJson(v.price)
              ],
              [
                "quantity",
                Spice.intToJson(v.quantity)
              ]
            ]);
}

function productOption_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var checked = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "checked"), null));
  if (checked.TAG === /* Ok */0) {
    var cartId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "cart-id"), null));
    if (cartId.TAG === /* Ok */0) {
      var productOptionId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-option-id"), null));
      if (productOptionId.TAG === /* Ok */0) {
        var productOptionName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-option-name"), null));
        if (productOptionName.TAG === /* Ok */0) {
          var optionStatus = productStatus_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "option-status"), null));
          if (optionStatus.TAG === /* Ok */0) {
            var updatedAt = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "updated-at"), null));
            if (updatedAt.TAG === /* Ok */0) {
              var price = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "price"), null));
              if (price.TAG === /* Ok */0) {
                var quantity = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "quantity"), null));
                if (quantity.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: {
                            checked: checked._0,
                            cartId: cartId._0,
                            productOptionId: productOptionId._0,
                            productOptionName: productOptionName._0,
                            optionStatus: optionStatus._0,
                            updatedAt: updatedAt._0,
                            price: price._0,
                            quantity: quantity._0
                          }
                        };
                }
                var e = quantity._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".quantity" + e.path,
                          message: e.message,
                          value: e.value
                        }
                      };
              }
              var e$1 = price._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".price" + e$1.path,
                        message: e$1.message,
                        value: e$1.value
                      }
                    };
            }
            var e$2 = updatedAt._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".updated-at" + e$2.path,
                      message: e$2.message,
                      value: e$2.value
                    }
                  };
          }
          var e$3 = optionStatus._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".option-status" + e$3.path,
                    message: e$3.message,
                    value: e$3.value
                  }
                };
        }
        var e$4 = productOptionName._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".product-option-name" + e$4.path,
                  message: e$4.message,
                  value: e$4.value
                }
              };
      }
      var e$5 = productOptionId._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".product-option-id" + e$5.path,
                message: e$5.message,
                value: e$5.value
              }
            };
    }
    var e$6 = cartId._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".cart-id" + e$6.path,
              message: e$6.message,
              value: e$6.value
            }
          };
  }
  var e$7 = checked._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".checked" + e$7.path,
            message: e$7.message,
            value: e$7.value
          }
        };
}

function productOptions_encode(v) {
  return Spice.arrayToJson(productOption_encode, v);
}

function productOptions_decode(v) {
  return Spice.arrayFromJson(productOption_decode, v);
}

function cartItem_encode(v) {
  return Js_dict.fromArray([
              [
                "checked",
                Spice.boolToJson(v.checked)
              ],
              [
                "checked-number",
                Spice.intToJson(v.checkedNumber)
              ],
              [
                "product-id",
                Spice.intToJson(v.productId)
              ],
              [
                "image-url",
                Spice.optionToJson(Spice.stringToJson, v.imageUrl)
              ],
              [
                "product-name",
                Spice.optionToJson(Spice.stringToJson, v.productName)
              ],
              [
                "total-price",
                Spice.optionToJson(Spice.intToJson, v.totalPrice)
              ],
              [
                "updated-at",
                Spice.optionToJson(Spice.stringToJson, v.updatedAt)
              ],
              [
                "product-status",
                productStatus_encode(v.productStatus)
              ],
              [
                "product-options",
                Spice.arrayToJson(productOption_encode, v.productOptions)
              ]
            ]);
}

function cartItem_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var checked = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "checked"), null));
  if (checked.TAG === /* Ok */0) {
    var checkedNumber = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "checked-number"), null));
    if (checkedNumber.TAG === /* Ok */0) {
      var productId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-id"), null));
      if (productId.TAG === /* Ok */0) {
        var imageUrl = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "image-url"), null));
        if (imageUrl.TAG === /* Ok */0) {
          var productName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-name"), null));
          if (productName.TAG === /* Ok */0) {
            var totalPrice = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-price"), null));
            if (totalPrice.TAG === /* Ok */0) {
              var updatedAt = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "updated-at"), null));
              if (updatedAt.TAG === /* Ok */0) {
                var productStatus = productStatus_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-status"), null));
                if (productStatus.TAG === /* Ok */0) {
                  var productOptions = Spice.arrayFromJson(productOption_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-options"), null));
                  if (productOptions.TAG === /* Ok */0) {
                    return {
                            TAG: /* Ok */0,
                            _0: {
                              checked: checked._0,
                              checkedNumber: checkedNumber._0,
                              productId: productId._0,
                              imageUrl: imageUrl._0,
                              productName: productName._0,
                              totalPrice: totalPrice._0,
                              updatedAt: updatedAt._0,
                              productStatus: productStatus._0,
                              productOptions: productOptions._0
                            }
                          };
                  }
                  var e = productOptions._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".product-options" + e.path,
                            message: e.message,
                            value: e.value
                          }
                        };
                }
                var e$1 = productStatus._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".product-status" + e$1.path,
                          message: e$1.message,
                          value: e$1.value
                        }
                      };
              }
              var e$2 = updatedAt._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".updated-at" + e$2.path,
                        message: e$2.message,
                        value: e$2.value
                      }
                    };
            }
            var e$3 = totalPrice._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".total-price" + e$3.path,
                      message: e$3.message,
                      value: e$3.value
                    }
                  };
          }
          var e$4 = productName._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".product-name" + e$4.path,
                    message: e$4.message,
                    value: e$4.value
                  }
                };
        }
        var e$5 = imageUrl._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".image-url" + e$5.path,
                  message: e$5.message,
                  value: e$5.value
                }
              };
      }
      var e$6 = productId._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".product-id" + e$6.path,
                message: e$6.message,
                value: e$6.value
              }
            };
    }
    var e$7 = checkedNumber._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".checked-number" + e$7.path,
              message: e$7.message,
              value: e$7.value
            }
          };
  }
  var e$8 = checked._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".checked" + e$8.path,
            message: e$8.message,
            value: e$8.value
          }
        };
}

function orderType_encode(v) {
  if (v === "UnCourierAvailable") {
    return "un-courier-available";
  } else {
    return "courier-available";
  }
}

function orderType_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("courier-available" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: "CourierAvailable"
          };
  } else if ("un-courier-available" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: "UnCourierAvailable"
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function cart_encode(v) {
  return Js_dict.fromArray([
              [
                "checked",
                Spice.boolToJson(v.checked)
              ],
              [
                "cart-items",
                Spice.optionToJson((function (param) {
                        return Spice.arrayToJson(cartItem_encode, param);
                      }), v.cartItems)
              ]
            ]);
}

function cart_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var checked = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "checked"), null));
  if (checked.TAG === /* Ok */0) {
    var cartItems = Spice.optionFromJson((function (param) {
            return Spice.arrayFromJson(cartItem_decode, param);
          }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "cart-items"), null));
    if (cartItems.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                checked: checked._0,
                cartItems: cartItems._0
              }
            };
    }
    var e = cartItems._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".cart-items" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = checked._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".checked" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function cartContainer_encode(v) {
  return Js_dict.fromArray([
              [
                "order-type",
                orderType_encode(v.orderType)
              ],
              [
                "courier-available-item",
                cart_encode(v.courierAvailableItem)
              ],
              [
                "un-courier-available-item",
                cart_encode(v.unCourierAvailableItem)
              ]
            ]);
}

function cartContainer_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var orderType = orderType_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-type"), null));
  if (orderType.TAG === /* Ok */0) {
    var courierAvailableItem = cart_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "courier-available-item"), null));
    if (courierAvailableItem.TAG === /* Ok */0) {
      var unCourierAvailableItem = cart_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "un-courier-available-item"), null));
      if (unCourierAvailableItem.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  orderType: orderType._0,
                  courierAvailableItem: courierAvailableItem._0,
                  unCourierAvailableItem: unCourierAvailableItem._0
                }
              };
      }
      var e = unCourierAvailableItem._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".un-courier-available-item" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = courierAvailableItem._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".courier-available-item" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = orderType._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".order-type" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function submit_encode(v) {
  return Js_dict.fromArray([[
                "cart",
                cartContainer_encode(v.cart)
              ]]);
}

function submit_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var cart = cartContainer_decode(Belt_Option.getWithDefault(Js_dict.get(dict._0, "cart"), null));
  if (cart.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              cart: cart._0
            }
          };
  }
  var e = cart._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".cart" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function names(prefix) {
  return {
          name: prefix,
          orderType: "" + prefix + ".order-type",
          courierAvailableItem: "" + prefix + ".courier-available-item",
          unCourierAvailableItem: "" + prefix + ".un-courier-available-item",
          cartId: "" + prefix + ".cart-id",
          cartItems: "" + prefix + ".cart-items",
          productId: "" + prefix + ".product-id",
          checked: "" + prefix + ".checked",
          productOptionId: "" + prefix + ".product-option-id",
          productOptionName: "" + prefix + ".product-option-name",
          price: "" + prefix + ".price",
          quantity: "" + prefix + ".quantity",
          productName: "" + prefix + ".product-name",
          totalPrice: "" + prefix + ".total-price",
          productOptions: "" + prefix + ".product-options",
          productStatus: "" + prefix + ".product-status",
          optionStatus: "" + prefix + ".option-status",
          checkedNumber: "" + prefix + ".checked-number",
          imageUrl: "" + prefix + ".image-url",
          updatedAt: "" + prefix + ".updated-at"
        };
}

function soldable(s) {
  if (s === "SALE") {
    return true;
  } else {
    return s === "HIDDEN_SALE";
  }
}

function toVariant(s) {
  if (s === "NOSALE") {
    return "NOSALE";
  } else if (s === "SOLDOUT") {
    return "SOLDOUT";
  } else if (s === "HIDDEN_SALE") {
    return "HIDDEN_SALE";
  } else if (s === "SALE" || s !== "RETIRE") {
    return "SALE";
  } else {
    return "RETIRE";
  }
}

function strDateToFloat(s) {
  return Belt_Option.mapWithDefault(s, 0, (function (s$p) {
                return new Date(s$p).getTime();
              }));
}

function groupBy(arrayOfCartItem) {
  return Belt_Map.valuesToArray(Garter_Array.groupBy(arrayOfCartItem, (function (a) {
                    return a.productId;
                  }), Garter_Id.IntComparable));
}

function dateCompare(str1, str2) {
  if (strDateToFloat(str2) - strDateToFloat(str1) > 0) {
    return 1;
  } else {
    return -1;
  }
}

function compare(item1, item2) {
  var match = item1.optionStatus;
  var match$1 = item2.optionStatus;
  if (match === "SOLDOUT") {
    if (match$1 === "SOLDOUT") {
      return dateCompare(item1.updatedAt, item2.updatedAt);
    } else {
      return 1;
    }
  } else if (match$1 === "SOLDOUT") {
    return -1;
  } else {
    return dateCompare(item1.updatedAt, item2.updatedAt);
  }
}

function orderByCartItem(arr) {
  return Belt_List.toArray(Belt_List.sort(Belt_List.fromArray(arr), (function (item1, item2) {
                    return dateCompare(item1.updatedAt, item2.updatedAt);
                  })));
}

function orderByRawData(arr) {
  return Belt_List.toArray(Belt_List.sort(Belt_List.fromArray(arr), compare));
}

function map(arr) {
  var ordered = orderByRawData(arr);
  return Belt_Option.map(Garter_Array.first(ordered), (function (item) {
                return {
                        checked: true,
                        checkedNumber: ordered.length,
                        productId: item.productId,
                        imageUrl: Belt_Option.map(item.image, (function (image$p) {
                                return image$p.thumb100x100;
                              })),
                        productName: item.productName,
                        totalPrice: 0,
                        updatedAt: item.updatedAt,
                        productStatus: toVariant(item.productStatus),
                        productOptions: Belt_Array.map(ordered, (function (item$p) {
                                return {
                                        checked: true,
                                        cartId: item$p.cartId,
                                        productOptionId: item$p.optionId,
                                        productOptionName: item$p.optionName,
                                        optionStatus: toVariant(item$p.optionStatus),
                                        updatedAt: item$p.updatedAt,
                                        price: item$p.price,
                                        quantity: item$p.quantity
                                      };
                              }))
                      };
              }));
}

function makeGtmData(data, cartIds, eventType) {
  return {
          event: eventType,
          ecommerce: {
            value: String(Garter_Math.sum_int(Belt_Array.concatMany(Belt_Array.map(data, (function (item) {
                                return Belt_Array.map(item.productOptions, (function (param) {
                                              return Math.imul(param.price, param.quantity);
                                            }));
                              }))))),
            currency: "KRW",
            items: Belt_Array.mapWithIndex(Belt_Array.concatMany(Belt_Array.map(Belt_Array.map(data, (function (item) {
                                return {
                                        checked: item.checked,
                                        checkedNumber: item.checkedNumber,
                                        productId: item.productId,
                                        imageUrl: item.imageUrl,
                                        productName: item.productName,
                                        totalPrice: item.totalPrice,
                                        updatedAt: item.updatedAt,
                                        productStatus: item.productStatus,
                                        productOptions: Belt_Array.keep(item.productOptions, (function (option) {
                                                return Belt_Array.some(cartIds, (function (a) {
                                                              return a === option.cartId;
                                                            }));
                                              }))
                                      };
                              })), (function (item) {
                            return Belt_Array.map(item.productOptions, (function (option) {
                                          return {
                                                  item_id: String(item.productId),
                                                  item_name: Belt_Option.getWithDefault(item.productName, ""),
                                                  price: String(option.price),
                                                  quantity: option.quantity,
                                                  item_variant: option.productOptionName,
                                                  index: undefined
                                                };
                                        }));
                          }))), (function (idx, obj) {
                    return Object.assign(obj, {
                                index: idx
                              });
                  }))
          }
        };
}

function cartGtmPush(data, cartIds, eventType) {
  DataGtm.push({
        ecommerce: null
      });
  DataGtm.push(DataGtm.mergeUserIdUnsafe(makeGtmData(data, cartIds, eventType)));
}

var name = "cart";

export {
  name ,
  productStatus_encode ,
  productStatus_decode ,
  productOption_encode ,
  productOption_decode ,
  productOptions_encode ,
  productOptions_decode ,
  cartItem_encode ,
  cartItem_decode ,
  orderType_encode ,
  orderType_decode ,
  cart_encode ,
  cart_decode ,
  cartContainer_encode ,
  cartContainer_decode ,
  submit_encode ,
  submit_decode ,
  names ,
  soldable ,
  toVariant ,
  strDateToFloat ,
  groupBy ,
  dateCompare ,
  compare ,
  orderByCartItem ,
  orderByRawData ,
  map ,
  makeGtmData ,
  cartGtmPush ,
}
/* DataGtm Not a pure module */
