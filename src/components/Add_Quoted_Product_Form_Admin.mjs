// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Dialog from "./common/Dialog.mjs";
import * as Helper from "../utils/Helper.mjs";
import * as Locale from "../utils/Locale.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as RelayEnv from "../constants/RelayEnv.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as DatePicker from "./DatePicker.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactSelect from "./common/ReactSelect.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as ReactHookForm from "../bindings/ReactHookForm/ReactHookForm.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as ReactHookForm$1 from "react-hook-form";
import * as Hooks from "react-relay/hooks";
import Async from "react-select/async";
import * as Product_Detail_Editor from "./Product_Detail_Editor.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as Upload_Thumbnail_Admin from "./Upload_Thumbnail_Admin.mjs";
import * as ErrorMessage from "@hookform/error-message";
import * as Select_Product_Category from "./Select_Product_Category.mjs";
import * as Select_Display_Categories from "./Select_Display_Categories.mjs";
import * as Select_Product_Categories from "./Select_Product_Categories.mjs";
import * as Select_Product_Operation_Status from "./Select_Product_Operation_Status.mjs";
import * as Product_Detail_Display_Categories from "./Product_Detail_Display_Categories.mjs";
import * as AddQuotedProductFormAdminSelectProducerInputQuery_graphql from "../__generated__/AddQuotedProductFormAdminSelectProducerInputQuery_graphql.mjs";

function submit_encode(v) {
  return Js_dict.fromArray([
              [
                "producer-name",
                ReactSelect.selectValue_encode(v.producerName)
              ],
              [
                "producer-product-name",
                Spice.stringToJson(v.producerProductName)
              ],
              [
                "buyer-product-name",
                Spice.stringToJson(v.buyerProductName)
              ],
              [
                "origin",
                Spice.stringToJson(v.origin)
              ],
              [
                "product-category",
                Select_Product_Category.Form.submit_encode(v.productCategory)
              ],
              [
                "display-categories",
                Spice.arrayToJson(Select_Display_Categories.Form.submit_encode, v.displayCategories)
              ],
              [
                "product-operation-status",
                Select_Product_Operation_Status.Base.status_encode(v.operationStatus)
              ],
              [
                "grade",
                Spice.stringToJson(v.grade)
              ],
              [
                "notice",
                Spice.optionToJson(Spice.stringToJson, v.notice)
              ],
              [
                "notice-date-from",
                Spice.optionToJson(Spice.stringToJson, v.noticeStartAt)
              ],
              [
                "notice-date-to",
                Spice.optionToJson(Spice.stringToJson, v.noticeEndAt)
              ],
              [
                "thumbnail",
                Upload_Thumbnail_Admin.Form.image_encode(v.thumbnail)
              ],
              [
                "document-url",
                Spice.optionToJson(Spice.stringToJson, v.documentURL)
              ],
              [
                "description-html",
                Spice.stringToJson(v.editor)
              ]
            ]);
}

function submit_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var producerName = ReactSelect.selectValue_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-name"), null));
  if (producerName.TAG === /* Ok */0) {
    var producerProductName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-product-name"), null));
    if (producerProductName.TAG === /* Ok */0) {
      var buyerProductName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyer-product-name"), null));
      if (buyerProductName.TAG === /* Ok */0) {
        var origin = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "origin"), null));
        if (origin.TAG === /* Ok */0) {
          var productCategory = Select_Product_Category.Form.submit_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-category"), null));
          if (productCategory.TAG === /* Ok */0) {
            var displayCategories = Spice.arrayFromJson(Select_Display_Categories.Form.submit_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "display-categories"), null));
            if (displayCategories.TAG === /* Ok */0) {
              var operationStatus = Select_Product_Operation_Status.Base.status_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-operation-status"), null));
              if (operationStatus.TAG === /* Ok */0) {
                var grade = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "grade"), null));
                if (grade.TAG === /* Ok */0) {
                  var notice = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "notice"), null));
                  if (notice.TAG === /* Ok */0) {
                    var noticeStartAt = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "notice-date-from"), null));
                    if (noticeStartAt.TAG === /* Ok */0) {
                      var noticeEndAt = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "notice-date-to"), null));
                      if (noticeEndAt.TAG === /* Ok */0) {
                        var thumbnail = Upload_Thumbnail_Admin.Form.image_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "thumbnail"), null));
                        if (thumbnail.TAG === /* Ok */0) {
                          var documentURL = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "document-url"), null));
                          if (documentURL.TAG === /* Ok */0) {
                            var editor = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "description-html"), null));
                            if (editor.TAG === /* Ok */0) {
                              return {
                                      TAG: /* Ok */0,
                                      _0: {
                                        producerName: producerName._0,
                                        producerProductName: producerProductName._0,
                                        buyerProductName: buyerProductName._0,
                                        origin: origin._0,
                                        productCategory: productCategory._0,
                                        displayCategories: displayCategories._0,
                                        operationStatus: operationStatus._0,
                                        grade: grade._0,
                                        notice: notice._0,
                                        noticeStartAt: noticeStartAt._0,
                                        noticeEndAt: noticeEndAt._0,
                                        thumbnail: thumbnail._0,
                                        documentURL: documentURL._0,
                                        editor: editor._0
                                      }
                                    };
                            }
                            var e = editor._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".description-html" + e.path,
                                      message: e.message,
                                      value: e.value
                                    }
                                  };
                          }
                          var e$1 = documentURL._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".document-url" + e$1.path,
                                    message: e$1.message,
                                    value: e$1.value
                                  }
                                };
                        }
                        var e$2 = thumbnail._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".thumbnail" + e$2.path,
                                  message: e$2.message,
                                  value: e$2.value
                                }
                              };
                      }
                      var e$3 = noticeEndAt._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".notice-date-to" + e$3.path,
                                message: e$3.message,
                                value: e$3.value
                              }
                            };
                    }
                    var e$4 = noticeStartAt._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".notice-date-from" + e$4.path,
                              message: e$4.message,
                              value: e$4.value
                            }
                          };
                  }
                  var e$5 = notice._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".notice" + e$5.path,
                            message: e$5.message,
                            value: e$5.value
                          }
                        };
                }
                var e$6 = grade._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".grade" + e$6.path,
                          message: e$6.message,
                          value: e$6.value
                        }
                      };
              }
              var e$7 = operationStatus._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".product-operation-status" + e$7.path,
                        message: e$7.message,
                        value: e$7.value
                      }
                    };
            }
            var e$8 = displayCategories._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".display-categories" + e$8.path,
                      message: e$8.message,
                      value: e$8.value
                    }
                  };
          }
          var e$9 = productCategory._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".product-category" + e$9.path,
                    message: e$9.message,
                    value: e$9.value
                  }
                };
        }
        var e$10 = origin._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".origin" + e$10.path,
                  message: e$10.message,
                  value: e$10.value
                }
              };
      }
      var e$11 = buyerProductName._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".buyer-product-name" + e$11.path,
                message: e$11.message,
                value: e$11.value
              }
            };
    }
    var e$12 = producerProductName._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".producer-product-name" + e$12.path,
              message: e$12.message,
              value: e$12.value
            }
          };
  }
  var e$13 = producerName._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".producer-name" + e$13.path,
            message: e$13.message,
            value: e$13.value
          }
        };
}

var Form_formName = {
  producerName: "producer-name",
  producerProductName: "producer-product-name",
  buyerProductName: "buyer-product-name",
  origin: "origin",
  productCategory: "product-category",
  displayCategories: "display-categories",
  operationStatus: "product-operation-status",
  grade: "grade",
  notice: "notice",
  noticeDateTo: "notice-date-to",
  noticeDateFrom: "notice-date-from",
  thumbnail: "thumbnail",
  documentURL: "document-url",
  editor: "description-html"
};

var Form = {
  formName: Form_formName,
  submit_encode: submit_encode,
  submit_decode: submit_decode
};

function getTextInputStyle(disabled) {
  var defaultStyle = "px-3 py-2 border border-border-default-L1 rounded-lg h-9 focus:outline-none min-w-1/2 max-w-2xl";
  if (disabled) {
    return Cx.cx([
                defaultStyle,
                "bg-disabled-L3"
              ]);
  } else {
    return defaultStyle;
  }
}

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(AddQuotedProductFormAdminSelectProducerInputQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(AddQuotedProductFormAdminSelectProducerInputQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(AddQuotedProductFormAdminSelectProducerInputQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(AddQuotedProductFormAdminSelectProducerInputQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, AddQuotedProductFormAdminSelectProducerInputQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, AddQuotedProductFormAdminSelectProducerInputQuery_graphql.node, AddQuotedProductFormAdminSelectProducerInputQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: AddQuotedProductFormAdminSelectProducerInputQuery_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, AddQuotedProductFormAdminSelectProducerInputQuery_graphql.node, AddQuotedProductFormAdminSelectProducerInputQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(AddQuotedProductFormAdminSelectProducerInputQuery_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(AddQuotedProductFormAdminSelectProducerInputQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(AddQuotedProductFormAdminSelectProducerInputQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(AddQuotedProductFormAdminSelectProducerInputQuery_graphql.node, AddQuotedProductFormAdminSelectProducerInputQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_userRole_decode = AddQuotedProductFormAdminSelectProducerInputQuery_graphql.Utils.userRole_decode;

var Query_userRole_fromString = AddQuotedProductFormAdminSelectProducerInputQuery_graphql.Utils.userRole_fromString;

var Query_makeVariables = AddQuotedProductFormAdminSelectProducerInputQuery_graphql.Utils.makeVariables;

var Query = {
  userRole_decode: Query_userRole_decode,
  userRole_fromString: Query_userRole_fromString,
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function Add_Quoted_Product_Form_Admin$SelectProducerInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var handleLoadOptions = function (inputValue) {
    return fetchPromised(RelayEnv.envSinsunMarket, {
                  nameMatch: inputValue,
                  role: "PRODUCER"
                }, undefined, undefined, undefined).then(function (result) {
                var result$p = Belt_Array.map(result.users.edges, (function (edge) {
                        return /* Selected */{
                                value: edge.node.id,
                                label: Belt_Option.mapWithDefault(edge.node.bossName, edge.node.name, (function (boss) {
                                        return edge.node.name + "(" + boss + ")";
                                      }))
                              };
                      }));
                return Promise.resolve(result$p);
              });
  };
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("div", undefined, React.createElement("span", {
                      className: "font-bold"
                    }, "생산자(대표자명)"), React.createElement("span", {
                      className: "text-notice"
                    }, "*")), React.createElement("div", {
                  className: "relative max-w-md w-1/3 h-9"
                }, React.createElement("div", {
                      className: "absolute w-full"
                    }, React.createElement(ReactHookForm$1.Controller, {
                          name: name,
                          control: match.control,
                          render: (function (param) {
                              var match = param.field;
                              var onChange = match.onChange;
                              return React.createElement(React.Fragment, undefined, React.createElement(Async, {
                                              value: Belt_Result.getWithDefault(ReactSelect.decoderRule(match.value), /* NotSelected */0),
                                              cacheOptions: false,
                                              defaultOptions: false,
                                              loadOptions: Helper.Debounce.make1(handleLoadOptions, 500),
                                              onChange: (function (data) {
                                                  return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, ReactSelect.encoderRule(data)));
                                                }),
                                              placeholder: "생산자명으로 찾기",
                                              noOptionsMessage: (function (param) {
                                                  return "검색 결과가 없습니다.";
                                                }),
                                              isClearable: true,
                                              styles: {
                                                menu: (function (provide, param) {
                                                    return Object.assign(Object.assign({}, provide), {
                                                                position: "inherit"
                                                              });
                                                  }),
                                                control: (function (provide, param) {
                                                    return Object.assign(Object.assign({}, provide), {
                                                                minHeight: "unset",
                                                                height: "2.25rem"
                                                              });
                                                  })
                                              },
                                              ref: match.ref
                                            }));
                            }),
                          defaultValue: ReactSelect.encoderRule(/* NotSelected */0),
                          rules: ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)
                        }))), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "생산자명을 입력해주세요."));
                    })
                }));
}

var SelectProducerInput = {
  Query: Query,
  make: Add_Quoted_Product_Form_Admin$SelectProducerInput
};

function Add_Quoted_Product_Form_Admin$ProductNameInputs(Props) {
  var producerProductName = Props.producerProductName;
  var buyerProductName = Props.buyerProductName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var register = match.register;
  var errors = match.formState.errors;
  var producerProductNameInput = register(producerProductName, {
        required: true,
        maxLength: 100
      });
  var buyerProductNameInput = register(buyerProductName, {
        required: true,
        maxLength: 100
      });
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "flex flex-col gap-2"
                }, React.createElement("label", {
                      className: "block",
                      htmlFor: producerProductNameInput.name
                    }, React.createElement("span", {
                          className: "font-bold"
                        }, "생산자용 상품명"), React.createElement("span", {
                          className: "text-notice"
                        }, "*")), React.createElement("div", undefined, React.createElement("input", {
                          ref: producerProductNameInput.ref,
                          className: getTextInputStyle(false),
                          id: producerProductNameInput.name,
                          name: producerProductNameInput.name,
                          placeholder: "생산자용 상품명 입력(최대 100자)",
                          onBlur: producerProductNameInput.onBlur,
                          onChange: producerProductNameInput.onChange
                        }), React.createElement(ErrorMessage.ErrorMessage, {
                          name: producerProductNameInput.name,
                          errors: errors,
                          render: (function (param) {
                              return React.createElement("span", {
                                          className: "flex"
                                        }, React.createElement(IconError.make, {
                                              width: "20",
                                              height: "20"
                                            }), React.createElement("span", {
                                              className: "text-sm text-notice ml-1"
                                            }, "생산자용 상품명을 입력해주세요.(최대100자)"));
                            })
                        }))), React.createElement("div", {
                  className: "flex flex-col gap-2"
                }, React.createElement("label", {
                      className: "block",
                      htmlFor: buyerProductNameInput.name
                    }, React.createElement("span", {
                          className: "font-bold"
                        }, "바이어용 상품명"), React.createElement("span", {
                          className: "text-notice"
                        }, "*")), React.createElement("input", {
                      ref: buyerProductNameInput.ref,
                      className: getTextInputStyle(false),
                      id: buyerProductNameInput.name,
                      name: buyerProductNameInput.name,
                      placeholder: "바이어용 상품명 입력, 상품매장에 노출됨(최대 100자)",
                      onBlur: buyerProductNameInput.onBlur,
                      onChange: buyerProductNameInput.onChange
                    }), React.createElement(ErrorMessage.ErrorMessage, {
                      name: buyerProductNameInput.name,
                      errors: errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "바이어용 상품명을 입력해주세요.(최대100자)"));
                        })
                    })));
}

var ProductNameInputs = {
  make: Add_Quoted_Product_Form_Admin$ProductNameInputs
};

function Add_Quoted_Product_Form_Admin$Category(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("div", undefined, React.createElement("span", {
                      className: " font-bold"
                    }, "표준카테고리"), React.createElement("span", {
                      className: "text-notice"
                    }, "*")), React.createElement(Select_Product_Categories.make, {
                  control: match.control,
                  name: name,
                  disabled: false
                }));
}

var Category = {
  make: Add_Quoted_Product_Form_Admin$Category
};

function Add_Quoted_Product_Form_Admin$DisplayCategory(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("div", undefined, React.createElement("span", {
                      className: " font-bold"
                    }, "전시카테고리"), React.createElement("span", {
                      className: "text-notice"
                    }, "*")), React.createElement(Product_Detail_Display_Categories.make, {
                  control: match.control,
                  name: name,
                  disabled: false
                }), React.createElement("div", undefined));
}

var DisplayCategory = {
  make: Add_Quoted_Product_Form_Admin$DisplayCategory
};

function Add_Quoted_Product_Form_Admin$ReadOnlyProductId(Props) {
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("div", undefined, React.createElement("span", {
                      className: "font-bold"
                    }, "상품번호")), React.createElement("div", {
                  className: "px-3 py-2 border border-border-default-L1 bg-disabled-L3 text-disabled-L1 rounded-lg h-9 max-w-md w-1/3"
                }, React.createElement("span", {
                      className: "text-disabled-L1"
                    }, "저장 후 자동생성됩니다.")));
}

var ReadOnlyProductId = {
  make: Add_Quoted_Product_Form_Admin$ReadOnlyProductId
};

function Add_Quoted_Product_Form_Admin$DisplayPriceInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var localeStringToFloat = function (value) {
    return Belt_Option.flatMap(Belt_Option.map(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.map(Caml_option.null_to_opt(/^[\d,]+/.exec(value)), (function (prim) {
                                  return prim;
                                })), Garter_Array.first), (function (prim) {
                          if (prim == null) {
                            return ;
                          } else {
                            return Caml_option.some(prim);
                          }
                        })), (function (__x) {
                      return __x.replace(/,/g, "");
                    })), Belt_Float.fromString);
  };
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("label", {
                  className: "block",
                  htmlFor: name
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "전시매장 노출 기준가격"), React.createElement("span", {
                      className: "text-notice"
                    }, "*")), React.createElement(ReactHookForm$1.Controller, {
                  name: name,
                  control: match.control,
                  render: (function (param) {
                      var match = param.field;
                      var onChange = match.onChange;
                      var func = Locale.Float.show;
                      return React.createElement("input", {
                                  ref: match.ref,
                                  className: getTextInputStyle(false),
                                  id: match.name,
                                  placeholder: "가격 입력(단위 원)",
                                  type: "text",
                                  value: Belt_Option.mapWithDefault(Js_json.decodeNumber(match.value), "", (function (eta) {
                                          return Curry._3(func, undefined, eta, 0);
                                        })),
                                  onChange: (function (e) {
                                      var value = e.currentTarget.value;
                                      var validValue = Belt_Option.getWithDefault(Belt_Option.map(localeStringToFloat(value), (function (prim) {
                                                  return prim;
                                                })), "");
                                      return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, validValue));
                                    })
                                });
                    }),
                  rules: ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "전시매장 노출 기준가격을 입력해주세요."));
                    })
                }));
}

var DisplayPriceInput = {
  make: Add_Quoted_Product_Form_Admin$DisplayPriceInput
};

function Add_Quoted_Product_Form_Admin$OperationStatusInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var setValue = match.setValue;
  var errors = match.formState.errors;
  var match$1 = React.useState(function () {
        return /* Hide */1;
      });
  var setShowProductOperationNoSale = match$1[1];
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "flex flex-col gap-2 max-w-md w-1/3"
                }, React.createElement("div", undefined, React.createElement("span", {
                          className: "font-bold"
                        }, "운영상태"), React.createElement("span", {
                          className: "text-notice"
                        }, "*")), React.createElement(ReactHookForm$1.Controller, {
                      name: name,
                      control: match.control,
                      render: (function (param) {
                          var match = param.field;
                          var onChange = match.onChange;
                          return React.createElement("div", undefined, React.createElement(Select_Product_Operation_Status.Base.make, {
                                          status: Belt_Result.mapWithDefault(Select_Product_Operation_Status.Base.status_decode(match.value), undefined, (function (status) {
                                                  return status;
                                                })),
                                          onChange: (function (param) {
                                              if (param !== 3) {
                                                return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Select_Product_Operation_Status.Base.status_encode(param)));
                                              } else {
                                                return setShowProductOperationNoSale(function (param) {
                                                            return /* Show */0;
                                                          });
                                              }
                                            }),
                                          forwardRef: match.ref
                                        }), React.createElement(ErrorMessage.ErrorMessage, {
                                          name: name,
                                          errors: errors,
                                          render: (function (param) {
                                              return React.createElement("span", {
                                                          className: "flex"
                                                        }, React.createElement(IconError.make, {
                                                              width: "20",
                                                              height: "20"
                                                            }), React.createElement("span", {
                                                              className: "text-sm text-notice ml-1"
                                                            }, "운영상태를 선택해주세요."));
                                            })
                                        }));
                        }),
                      rules: ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)
                    })), React.createElement(Dialog.make, {
                  isShow: match$1[0],
                  children: React.createElement("p", undefined, "영구판매중지 상태를 선택 후 저장하시면", React.createElement("br", undefined), "추후 해당 상품을 수정할 수 없습니다.", React.createElement("br", undefined), React.createElement("br", undefined), "영구판매중지 상태로 변경할까요?"),
                  onCancel: (function (param) {
                      return setShowProductOperationNoSale(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  onConfirm: (function (param) {
                      setValue(name, Select_Product_Operation_Status.Base.status_encode(/* RETIRE */3));
                      return setShowProductOperationNoSale(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  textOnCancel: "닫기",
                  textOnConfirm: "확인",
                  kindOfConfirm: /* Negative */1,
                  boxStyle: "rounded-2xl text-center"
                }));
}

var OperationStatusInput = {
  make: Add_Quoted_Product_Form_Admin$OperationStatusInput
};

function Add_Quoted_Product_Form_Admin$OriginInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var productOrigin = match.register(name, {
        required: true
      });
  return React.createElement("div", {
              className: "flex flex-col gap-2 max-w-md w-1/3"
            }, React.createElement("label", {
                  className: "block",
                  htmlFor: productOrigin.name
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "원산지"), React.createElement("span", {
                      className: "text-notice"
                    }, "*")), React.createElement("input", {
                  ref: productOrigin.ref,
                  className: getTextInputStyle(false),
                  id: productOrigin.name,
                  name: productOrigin.name,
                  placeholder: "원산지 입력(선택사항)",
                  onBlur: productOrigin.onBlur,
                  onChange: productOrigin.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: productOrigin.name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "원산지를 입력해주세요."));
                    })
                }));
}

var OriginInput = {
  make: Add_Quoted_Product_Form_Admin$OriginInput
};

function Add_Quoted_Product_Form_Admin$GradeInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var grade = match.register(name, {
        required: true
      });
  return React.createElement("div", {
              className: "flex flex-col gap-2 max-w-md w-1/3"
            }, React.createElement("label", {
                  className: "block",
                  htmlFor: grade.name
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "등급"), React.createElement("span", {
                      className: "text-notice"
                    }, "*")), React.createElement("input", {
                  ref: grade.ref,
                  className: getTextInputStyle(false),
                  id: grade.name,
                  name: grade.name,
                  placeholder: "등급 입력",
                  onBlur: grade.onBlur,
                  onChange: grade.onChange
                }), React.createElement(ErrorMessage.ErrorMessage, {
                  name: grade.name,
                  errors: match.formState.errors,
                  render: (function (param) {
                      return React.createElement("span", {
                                  className: "flex"
                                }, React.createElement(IconError.make, {
                                      width: "20",
                                      height: "20"
                                    }), React.createElement("span", {
                                      className: "text-sm text-notice ml-1"
                                    }, "등급을 입력해주세요."));
                    })
                }));
}

var GradeInput = {
  make: Add_Quoted_Product_Form_Admin$GradeInput
};

function Add_Quoted_Product_Form_Admin$NoticeAndDateInput$DateInput(Props) {
  var name = Props.name;
  var minDate = Props.minDate;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var jsonToStr = function (jsonStr) {
    return Belt_Option.map(Belt_Option.keep(Js_json.decodeString(jsonStr), (function (str) {
                      return str !== "";
                    })), (function (prim) {
                  return new Date(prim);
                }));
  };
  return React.createElement(ReactHookForm$1.Controller, {
              name: name,
              control: match.control,
              render: (function (param) {
                  var match = param.field;
                  var onChange = match.onChange;
                  var tmp = {
                    id: match.name,
                    onChange: (function (e) {
                        return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, e.detail.value));
                      }),
                    firstDayOfWeek: 0
                  };
                  var tmp$1 = jsonToStr(match.value);
                  if (tmp$1 !== undefined) {
                    tmp.date = Caml_option.valFromOption(tmp$1);
                  }
                  if (minDate !== undefined) {
                    tmp.minDate = Caml_option.valFromOption(minDate);
                  }
                  return React.createElement(DatePicker.make, tmp);
                }),
              defaultValue: ""
            });
}

var DateInput = {
  make: Add_Quoted_Product_Form_Admin$NoticeAndDateInput$DateInput
};

function Add_Quoted_Product_Form_Admin$NoticeAndDateInput(Props) {
  var noticeName = Props.noticeName;
  var noticeFromName = Props.noticeFromName;
  var noticeToName = Props.noticeToName;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var noticeDateFrom = ReactHookForm$1.useWatch({
        name: noticeFromName
      });
  var notice = match.register(noticeName, {
        maxLength: 1000
      });
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "flex flex-col gap-2"
                }, React.createElement("label", {
                      htmlFor: notice.name
                    }, React.createElement("span", {
                          className: "font-bold"
                        }, "공지사항")), React.createElement("textarea", {
                      ref: notice.ref,
                      className: "px-3 py-2 border border-border-default-L1 rounded-lg h-24 focus:outline-none min-w-1/2 max-w-2xl",
                      id: notice.name,
                      name: notice.name,
                      placeholder: "공지사항 또는 메모 입력(최대 1000자)",
                      onBlur: notice.onBlur,
                      onChange: notice.onChange
                    }), React.createElement(ErrorMessage.ErrorMessage, {
                      name: notice.name,
                      errors: match.formState.errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "공지사항은 최대 1000자까지 입력 가능합니다."));
                        })
                    })), React.createElement("div", {
                  className: "flex flex-col gap-2"
                }, React.createElement("span", {
                      className: "font-bold"
                    }, "공지사항 적용기간"), React.createElement("div", {
                      className: "flex gap-1"
                    }, React.createElement(Add_Quoted_Product_Form_Admin$NoticeAndDateInput$DateInput, {
                          name: noticeFromName,
                          minDate: "2021-01-01"
                        }), React.createElement("span", {
                          className: "flex items-center"
                        }, "~"), React.createElement(Add_Quoted_Product_Form_Admin$NoticeAndDateInput$DateInput, {
                          name: noticeToName,
                          minDate: Belt_Option.getWithDefault(noticeDateFrom, "")
                        }))));
}

var NoticeAndDateInput = {
  DateInput: DateInput,
  make: Add_Quoted_Product_Form_Admin$NoticeAndDateInput
};

function Add_Quoted_Product_Form_Admin$ThumbnailUploadInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("div", undefined, React.createElement("span", {
                      className: "font-bold"
                    }, "대표이미지(썸네일)"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*"), React.createElement("span", {
                      className: "text-text-L2 ml-2"
                    }, "*이미지 파일 형식 등록 가능")), React.createElement("div", undefined, React.createElement(ReactHookForm$1.Controller, {
                      name: name,
                      control: match.control,
                      render: (function (param) {
                          var match = param.field;
                          var onChange = match.onChange;
                          return React.createElement(Upload_Thumbnail_Admin.make, {
                                      name: match.name,
                                      updateFn: (function (imageUrls) {
                                          return Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Upload_Thumbnail_Admin.Form.image_encode(imageUrls)));
                                        }),
                                      value: Belt_Result.getWithDefault(Upload_Thumbnail_Admin.Form.image_decode(match.value), Upload_Thumbnail_Admin.Form.resetImage)
                                    });
                        }),
                      defaultValue: Upload_Thumbnail_Admin.Form.image_encode(Upload_Thumbnail_Admin.Form.resetImage),
                      rules: ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Js_dict.fromArray([[
                                      "required",
                                      ReactHookForm.Validation.sync(function (value) {
                                            return Belt_Result.mapWithDefault(Upload_Thumbnail_Admin.Form.image_decode(value), false, (function (image) {
                                                          return image.original !== "";
                                                        }));
                                          })
                                    ]])), undefined, undefined, undefined)
                    }), React.createElement(ErrorMessage.ErrorMessage, {
                      name: name,
                      errors: match.formState.errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "대표이미지(썸네일)을 선택해주세요."));
                        })
                    })));
}

var ThumbnailUploadInput = {
  make: Add_Quoted_Product_Form_Admin$ThumbnailUploadInput
};

function Add_Quoted_Product_Form_Admin$SalesDocumentURLInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var documentURL = match.register(name, undefined);
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("label", {
                  className: "block font-bold"
                }, "판매자료 URL"), React.createElement("input", {
                  ref: documentURL.ref,
                  className: "py-2 px-3 h-9 border-border-default-L1 border rounded-lg focus:outline-none min-w-1/2 max-w-2xl",
                  id: documentURL.name,
                  name: documentURL.name,
                  onBlur: documentURL.onBlur,
                  onChange: documentURL.onChange
                }));
}

var SalesDocumentURLInput = {
  make: Add_Quoted_Product_Form_Admin$SalesDocumentURLInput
};

function Add_Quoted_Product_Form_Admin$EditorInput(Props) {
  var name = Props.name;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("div", {
                  className: "flex gap-2"
                }, React.createElement("div", undefined, React.createElement("span", {
                          className: "font-bold"
                        }, "상품설명"), React.createElement("span", {
                          className: "text-red-500"
                        }, "*")), React.createElement(ErrorMessage.ErrorMessage, {
                      name: name,
                      errors: match.formState.errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "상품설명을 추가해주세요."));
                        })
                    })), React.createElement("div", undefined, React.createElement(Product_Detail_Editor.make, {
                      control: match.control,
                      name: name
                    })));
}

var EditorInput = {
  make: Add_Quoted_Product_Form_Admin$EditorInput
};

function Add_Quoted_Product_Form_Admin(Props) {
  return React.createElement(React.Fragment, undefined, React.createElement("section", {
                  className: "p-7 mx-4 bg-white rounded-b-md"
                }, React.createElement("h2", {
                      className: "text-text-L1 text-lg font-bold"
                    }, "기본정보"), React.createElement("div", {
                      className: "divide-y text-sm"
                    }, React.createElement("div", {
                          className: "flex flex-col space-y-6 py-6"
                        }, React.createElement(Add_Quoted_Product_Form_Admin$SelectProducerInput, {
                              name: "producer-name"
                            }), React.createElement(Add_Quoted_Product_Form_Admin$Category, {
                              name: "product-category"
                            }), React.createElement(Add_Quoted_Product_Form_Admin$DisplayCategory, {
                              name: "display-categories"
                            })), React.createElement("div", {
                          className: "flex flex-col space-y-6 py-6"
                        }, React.createElement(Add_Quoted_Product_Form_Admin$ProductNameInputs, {
                              producerProductName: "producer-product-name",
                              buyerProductName: "buyer-product-name"
                            }), React.createElement(Add_Quoted_Product_Form_Admin$ReadOnlyProductId, {})), React.createElement("div", {
                          className: "py-6 flex flex-col space-y-6"
                        }, React.createElement("div", {
                              className: "flex gap-2"
                            }, React.createElement(Add_Quoted_Product_Form_Admin$OperationStatusInput, {
                                  name: "product-operation-status"
                                }), React.createElement(Add_Quoted_Product_Form_Admin$OriginInput, {
                                  name: "origin"
                                })), React.createElement("div", {
                              className: "flex gap-2"
                            }, React.createElement(Add_Quoted_Product_Form_Admin$GradeInput, {
                                  name: "grade"
                                }))))), React.createElement("section", {
                  className: "p-7 mt-4 mx-4 mb-7 bg-white rounded shadow-gl"
                }, React.createElement("h2", {
                      className: "text-text-L1 text-lg font-bold"
                    }, "상품상세설명"), React.createElement("div", {
                      className: "text-sm py-6 flex flex-col space-y-6"
                    }, React.createElement(Add_Quoted_Product_Form_Admin$NoticeAndDateInput, {
                          noticeName: "notice",
                          noticeFromName: "notice-date-from",
                          noticeToName: "notice-date-to"
                        }), React.createElement(Add_Quoted_Product_Form_Admin$ThumbnailUploadInput, {
                          name: "thumbnail"
                        }), React.createElement(Add_Quoted_Product_Form_Admin$SalesDocumentURLInput, {
                          name: "document-url"
                        }), React.createElement(Add_Quoted_Product_Form_Admin$EditorInput, {
                          name: "description-html"
                        }))));
}

var make = Add_Quoted_Product_Form_Admin;

export {
  Form ,
  getTextInputStyle ,
  SelectProducerInput ,
  ProductNameInputs ,
  Category ,
  DisplayCategory ,
  ReadOnlyProductId ,
  DisplayPriceInput ,
  OperationStatusInput ,
  OriginInput ,
  GradeInput ,
  NoticeAndDateInput ,
  ThumbnailUploadInput ,
  SalesDocumentURLInput ,
  EditorInput ,
  make ,
  
}
/* react Not a pure module */
