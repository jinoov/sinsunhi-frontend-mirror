// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as IconError from "./svgs/IconError.mjs";
import * as DatePicker from "./DatePicker.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactHookForm from "../bindings/ReactHookForm/ReactHookForm.mjs";
import Format from "date-fns/format";
import * as ReactHookForm$1 from "react-hook-form";
import * as Product_Detail_Editor from "./Product_Detail_Editor.mjs";
import * as Upload_Thumbnail_Admin from "./Upload_Thumbnail_Admin.mjs";
import * as ErrorMessage from "@hookform/error-message";

var Form = {
  formName: {
    notice: "notice",
    noticeDate: "notice-date",
    noticeDateTo: "notice-date-to",
    noticeDateFrom: "notice-date-from",
    thumbnail: "thumbnail",
    documentURL: "document-url",
    editor: "description-html"
  }
};

function Product_Detail_Description_Admin$NoticeDateInput(props) {
  var disabled = props.disabled;
  var minDate = props.minDate;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var strToJson = function (dateStr) {
    return Format(new Date(dateStr), "yyyy-MM-dd");
  };
  var jsonToStr = function (jsonStr) {
    return Belt_Option.map(Belt_Option.keep(Js_json.decodeString(jsonStr), (function (str) {
                      return str !== "";
                    })), (function (prim) {
                  return new Date(prim);
                }));
  };
  return React.createElement(ReactHookForm$1.Controller, {
              name: props.name,
              control: Caml_option.some(match.control),
              render: (function (param) {
                  var match = param.field;
                  var onChange = match.onChange;
                  return React.createElement(DatePicker.make, {
                              id: match.name,
                              onChange: (function (e) {
                                  Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, e.detail.value));
                                }),
                              date: jsonToStr(match.value),
                              minDate: minDate,
                              firstDayOfWeek: 0,
                              disabled: disabled
                            });
                }),
              defaultValue: Caml_option.some(Belt_Option.mapWithDefault(props.defaultValue, "", strToJson))
            });
}

var NoticeDateInput = {
  make: Product_Detail_Description_Admin$NoticeDateInput
};

function Product_Detail_Description_Admin$ThumbnailUploadInput(props) {
  var disabled = props.disabled;
  var name = props.name;
  var disabled$1 = disabled !== undefined ? disabled : false;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  return React.createElement("div", {
              className: "flex flex-col gap-2"
            }, React.createElement("div", undefined, React.createElement("span", {
                      className: "font-bold"
                    }, "대표이미지(썸네일)"), React.createElement("span", {
                      className: "text-red-500"
                    }, "*"), React.createElement("span", {
                      className: "text-text-L2 ml-2"
                    }, "*이미지 파일 형식 등록 가능")), React.createElement("div", undefined, React.createElement(ReactHookForm$1.Controller, {
                      name: name,
                      control: Caml_option.some(match.control),
                      render: (function (param) {
                          var match = param.field;
                          var onChange = match.onChange;
                          return React.createElement(Upload_Thumbnail_Admin.make, {
                                      name: match.name,
                                      updateFn: (function (imageUrls) {
                                          Curry._1(onChange, Curry._1(ReactHookForm.Controller.OnChangeArg.value, Upload_Thumbnail_Admin.Form.image_encode(imageUrls)));
                                        }),
                                      value: Belt_Result.getWithDefault(Upload_Thumbnail_Admin.Form.image_decode(match.value), Upload_Thumbnail_Admin.Form.resetImage),
                                      disabled: disabled$1
                                    });
                        }),
                      defaultValue: Caml_option.some(Upload_Thumbnail_Admin.Form.image_encode(Belt_Option.getWithDefault(props.defaultValue, Upload_Thumbnail_Admin.Form.resetImage))),
                      rules: Caml_option.some(ReactHookForm.Rules.make(true, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Js_dict.fromArray([[
                                          "required",
                                          ReactHookForm.Validation.sync(function (value) {
                                                return Belt_Result.mapWithDefault(Upload_Thumbnail_Admin.Form.image_decode(value), false, (function (image) {
                                                              return image.original !== "";
                                                            }));
                                              })
                                        ]])), undefined, undefined, undefined))
                    }), React.createElement(ErrorMessage.ErrorMessage, {
                      name: name,
                      errors: match.formState.errors,
                      render: (function (param) {
                          return React.createElement("span", {
                                      className: "flex"
                                    }, React.createElement(IconError.make, {
                                          width: "20",
                                          height: "20"
                                        }), React.createElement("span", {
                                          className: "text-sm text-notice ml-1"
                                        }, "대표이미지(썸네일)을 선택해주세요."));
                        })
                    })));
}

var ThumbnailUploadInput = {
  make: Product_Detail_Description_Admin$ThumbnailUploadInput
};

function Product_Detail_Description_Admin(props) {
  var allFieldsDisabled = props.allFieldsDisabled;
  var discriptionDisabled = props.discriptionDisabled;
  var documentURLDisabled = props.documentURLDisabled;
  var thumbnailDisabled = props.thumbnailDisabled;
  var noticeEndAtDisabled = props.noticeEndAtDisabled;
  var noticeStartAtDisabled = props.noticeStartAtDisabled;
  var noticeDisabled = props.noticeDisabled;
  var allFieldsDisabled$1 = allFieldsDisabled !== undefined ? allFieldsDisabled : false;
  var discriptionDisabled$1 = discriptionDisabled !== undefined ? discriptionDisabled : false;
  var documentURLDisabled$1 = documentURLDisabled !== undefined ? documentURLDisabled : false;
  var thumbnailDisabled$1 = thumbnailDisabled !== undefined ? thumbnailDisabled : false;
  var noticeEndAtDisabled$1 = noticeEndAtDisabled !== undefined ? noticeEndAtDisabled : false;
  var noticeStartAtDisabled$1 = noticeStartAtDisabled !== undefined ? noticeStartAtDisabled : false;
  var noticeDisabled$1 = noticeDisabled !== undefined ? noticeDisabled : false;
  var match = ReactHookForm$1.useFormContext({
        mode: "onChange"
      }, undefined);
  var register = match.register;
  var errors = match.formState.errors;
  var noticeDateFrom = ReactHookForm$1.useWatch({
        name: "notice-date-from"
      });
  var notice = register("notice", {
        maxLength: 1000
      });
  var documentURL = register("document-url", undefined);
  return React.createElement("div", undefined, React.createElement("h2", {
                  className: "text-text-L1 text-lg font-bold"
                }, "상품상세설명"), React.createElement("div", {
                  className: "text-sm py-6 flex flex-col space-y-6"
                }, React.createElement("div", {
                      className: "flex flex-col gap-2"
                    }, React.createElement("label", {
                          htmlFor: notice.name
                        }, React.createElement("span", {
                              className: "font-bold"
                            }, "공지사항")), React.createElement("textarea", {
                          ref: notice.ref,
                          defaultValue: Belt_Option.getWithDefault(props.defaultNotice, ""),
                          className: "px-3 py-2 border border-border-default-L1 rounded-lg h-24 focus:outline-none min-w-1/2 max-w-2xl",
                          id: notice.name,
                          disabled: allFieldsDisabled$1 || noticeDisabled$1,
                          name: notice.name,
                          placeholder: "공지사항 또는 메모 입력(최대 1000자)",
                          onBlur: notice.onBlur,
                          onChange: notice.onChange
                        }), React.createElement(ErrorMessage.ErrorMessage, {
                          name: "notice",
                          errors: errors,
                          render: (function (param) {
                              return React.createElement("span", {
                                          className: "flex"
                                        }, React.createElement(IconError.make, {
                                              width: "20",
                                              height: "20"
                                            }), React.createElement("span", {
                                              className: "text-sm text-notice ml-1"
                                            }, "공지사항은 최대 1000자까지 입력 가능합니다."));
                            })
                        })), React.createElement("div", {
                      className: "flex flex-col gap-2"
                    }, React.createElement("span", {
                          className: "font-bold"
                        }, "공지사항 적용기간"), React.createElement("div", {
                          className: "flex gap-1"
                        }, React.createElement(Product_Detail_Description_Admin$NoticeDateInput, {
                              name: "notice-date-from",
                              defaultValue: props.defaultNoticeStratAt,
                              minDate: "2021-01-01",
                              disabled: allFieldsDisabled$1 || noticeStartAtDisabled$1
                            }), React.createElement("span", {
                              className: "flex items-center"
                            }, "~"), React.createElement(Product_Detail_Description_Admin$NoticeDateInput, {
                              name: "notice-date-to",
                              defaultValue: props.defaultNoticeEndAt,
                              minDate: Belt_Option.getWithDefault(noticeDateFrom, ""),
                              disabled: allFieldsDisabled$1 || noticeEndAtDisabled$1
                            }))), React.createElement(Product_Detail_Description_Admin$ThumbnailUploadInput, {
                      name: "thumbnail",
                      defaultValue: props.defaultThumbnail,
                      disabled: allFieldsDisabled$1 || thumbnailDisabled$1
                    }), React.createElement("div", {
                      className: "flex flex-col gap-2"
                    }, React.createElement("label", {
                          className: "block font-bold"
                        }, "판매자료 URL"), React.createElement("input", {
                          ref: documentURL.ref,
                          defaultValue: Belt_Option.getWithDefault(props.defaultSalesDocument, ""),
                          className: "py-2 px-3 h-9 border-border-default-L1 border rounded-lg focus:outline-none min-w-1/2 max-w-2xl",
                          id: documentURL.name,
                          disabled: allFieldsDisabled$1 || documentURLDisabled$1,
                          name: documentURL.name,
                          onBlur: documentURL.onBlur,
                          onChange: documentURL.onChange
                        })), React.createElement("div", {
                      className: "flex flex-col gap-2"
                    }, React.createElement("div", {
                          className: "flex gap-2"
                        }, React.createElement("div", undefined, React.createElement("span", {
                                  className: "font-bold"
                                }, "상품설명"), React.createElement("span", {
                                  className: "text-red-500"
                                }, "*")), React.createElement(ErrorMessage.ErrorMessage, {
                              name: "description-html",
                              errors: errors,
                              render: (function (param) {
                                  return React.createElement("span", {
                                              className: "flex"
                                            }, React.createElement(IconError.make, {
                                                  width: "20",
                                                  height: "20"
                                                }), React.createElement("span", {
                                                  className: "text-sm text-notice ml-1"
                                                }, "상품설명을 추가해주세요."));
                                })
                            })), React.createElement("div", undefined, React.createElement(Product_Detail_Editor.make, {
                              control: match.control,
                              name: "description-html",
                              defaultValue: Belt_Option.getWithDefault(props.defaultDescription, ""),
                              disabled: allFieldsDisabled$1 || discriptionDisabled$1
                            })))));
}

var make = Product_Detail_Description_Admin;

export {
  Form ,
  NoticeDateInput ,
  ThumbnailUploadInput ,
  make ,
}
/* react Not a pure module */
