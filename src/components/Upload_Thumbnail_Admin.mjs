// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactEvents from "../utils/ReactEvents.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as RelayRuntime from "relay-runtime";
import * as IconCloseInput from "./svgs/IconCloseInput.mjs";
import * as Hooks from "react-relay/hooks";
import * as UploadFileToS3PresignedUrl from "../utils/UploadFileToS3PresignedUrl.mjs";
import * as UploadThumbnailAdminMutation_graphql from "../__generated__/UploadThumbnailAdminMutation_graphql.mjs";

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: UploadThumbnailAdminMutation_graphql.node,
              variables: UploadThumbnailAdminMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, UploadThumbnailAdminMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? UploadThumbnailAdminMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, UploadThumbnailAdminMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use(param) {
  var match = Hooks.useMutation(UploadThumbnailAdminMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, UploadThumbnailAdminMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? UploadThumbnailAdminMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, UploadThumbnailAdminMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: UploadThumbnailAdminMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Mutation_makeVariables = UploadThumbnailAdminMutation_graphql.Utils.makeVariables;

var Mutation = {
  makeVariables: Mutation_makeVariables,
  Types: undefined,
  commitMutation: commitMutation,
  use: use
};

function image_encode(v) {
  return Js_dict.fromArray([
              [
                "original",
                Spice.stringToJson(v.original)
              ],
              [
                "thumb1000x1000",
                Spice.stringToJson(v.thumb1000x1000)
              ],
              [
                "thumb100x100",
                Spice.stringToJson(v.thumb100x100)
              ],
              [
                "thumb1920x1920",
                Spice.stringToJson(v.thumb1920x1920)
              ],
              [
                "thumb400x400",
                Spice.stringToJson(v.thumb400x400)
              ],
              [
                "thumb800x800",
                Spice.stringToJson(v.thumb800x800)
              ]
            ]);
}

function image_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var original = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "original"), null));
  if (original.TAG === /* Ok */0) {
    var thumb1000x1000 = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "thumb1000x1000"), null));
    if (thumb1000x1000.TAG === /* Ok */0) {
      var thumb100x100 = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "thumb100x100"), null));
      if (thumb100x100.TAG === /* Ok */0) {
        var thumb1920x1920 = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "thumb1920x1920"), null));
        if (thumb1920x1920.TAG === /* Ok */0) {
          var thumb400x400 = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "thumb400x400"), null));
          if (thumb400x400.TAG === /* Ok */0) {
            var thumb800x800 = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "thumb800x800"), null));
            if (thumb800x800.TAG === /* Ok */0) {
              return {
                      TAG: /* Ok */0,
                      _0: {
                        original: original._0,
                        thumb1000x1000: thumb1000x1000._0,
                        thumb100x100: thumb100x100._0,
                        thumb1920x1920: thumb1920x1920._0,
                        thumb400x400: thumb400x400._0,
                        thumb800x800: thumb800x800._0
                      }
                    };
            }
            var e = thumb800x800._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".thumb800x800" + e.path,
                      message: e.message,
                      value: e.value
                    }
                  };
          }
          var e$1 = thumb400x400._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".thumb400x400" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
        }
        var e$2 = thumb1920x1920._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".thumb1920x1920" + e$2.path,
                  message: e$2.message,
                  value: e$2.value
                }
              };
      }
      var e$3 = thumb100x100._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".thumb100x100" + e$3.path,
                message: e$3.message,
                value: e$3.value
              }
            };
    }
    var e$4 = thumb1000x1000._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".thumb1000x1000" + e$4.path,
              message: e$4.message,
              value: e$4.value
            }
          };
  }
  var e$5 = original._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".original" + e$5.path,
            message: e$5.message,
            value: e$5.value
          }
        };
}

var resetImage = {
  original: "",
  thumb1000x1000: "",
  thumb100x100: "",
  thumb1920x1920: "",
  thumb400x400: "",
  thumb800x800: ""
};

var Form = {
  image_encode: image_encode,
  image_decode: image_decode,
  resetImage: resetImage
};

function mutationImageToFormImage(image) {
  return {
          original: image.original,
          thumb1000x1000: image.thumb1000x1000,
          thumb100x100: image.thumb100x100,
          thumb1920x1920: image.thumb1920x1920,
          thumb400x400: image.thumb400x400,
          thumb800x800: image.thumb800x800
        };
}

function Upload_Thumbnail_Admin(Props) {
  var name = Props.name;
  var updateFn = Props.updateFn;
  var value = Props.value;
  var disabled = Props.disabled;
  var match = use(undefined);
  var mutate = match[0];
  var match$1 = React.useState(function () {
        return /* Init */0;
      });
  var setThumbnailURL = match$1[1];
  var thumbnailURL = match$1[0];
  var isThumbnailUploading = thumbnailURL === /* Loading */1;
  var resetFile = function (param) {
    var inputFile = document.getElementById("thumbnail");
    Belt_Option.map((inputFile == null) ? undefined : Caml_option.some(inputFile), (function (inputFile$p) {
            inputFile$p.value = "";
            
          }));
    
  };
  var onFailureWithReset = function (resetFn, updateFn, param) {
    setThumbnailURL(function (param) {
          return /* Error */2;
        });
    Curry._1(resetFn, undefined);
    return Curry._1(updateFn, resetImage);
  };
  var imageUrlStateReset = function (param) {
    Curry._1(updateFn, resetImage);
    return setThumbnailURL(function (param) {
                return /* Loading */1;
              });
  };
  var handleOnChangeFile = function (e) {
    var files = e.target.files;
    var file = Belt_Option.flatMap(files, Garter_Array.first);
    if (file === undefined) {
      return ;
    }
    var file$p = Caml_option.valFromOption(file);
    imageUrlStateReset(undefined);
    var filename = file$p.name;
    Curry.app(mutate, [
          (function (err) {
              console.log(err);
              return onFailureWithReset(resetFile, updateFn, err);
            }),
          (function (param, param$1) {
              var res = param.createPresignedUrlForImage;
              if (typeof res !== "object") {
                return ;
              }
              if (res.NAME !== "CreatePresignedUrlForImageResult") {
                return ;
              }
              var res$p = res.VAL;
              UploadFileToS3PresignedUrl.uploadImage(file$p, res$p.url, res$p.image.thumb1920x1920, (function (param) {
                      var imageUrls = mutationImageToFormImage(res$p.image);
                      setThumbnailURL(function (param) {
                            return /* Loaded */{
                                    _0: filename
                                  };
                          });
                      return Curry._1(updateFn, imageUrls);
                    }), (function (err) {
                      return onFailureWithReset(resetFile, updateFn, err);
                    }), undefined);
              
            }),
          undefined,
          undefined,
          undefined,
          undefined,
          {
            filename: filename
          },
          undefined,
          undefined
        ]);
    
  };
  var displayName = Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.map(Caml_option.null_to_opt(/[^/]+$/.exec(value.original)), (function (prim) {
                  return prim;
                })), Garter_Array.first), (function (prim) {
          if (prim == null) {
            return ;
          } else {
            return Caml_option.some(prim);
          }
        }));
  return React.createElement("div", {
              className: "flex flex-col gap-1"
            }, React.createElement("div", {
                  className: "flex gap-2 items-center"
                }, React.createElement("label", {
                      className: "flex gap-2 items-center"
                    }, React.createElement("span", {
                          className: "bg-div-shape-L1 rounded-lg py-2 px-3 block"
                        }, "대표 이미지 선택하기"), React.createElement("input", {
                          className: "file:hidden sr-only",
                          id: name,
                          accept: ".png,.jpg",
                          disabled: Belt_Option.getWithDefault(disabled, false) || isThumbnailUploading,
                          name: name,
                          type: "file",
                          onChange: handleOnChangeFile
                        }), isThumbnailUploading ? React.createElement("span", undefined, "업로드 중 입니다.....") : React.createElement("span", {
                            className: "truncate"
                          }, Belt_Option.getWithDefault(displayName, "선택된 파일이 없습니다."))), typeof thumbnailURL === "number" ? null : React.createElement("button", {
                        type: "button",
                        onClick: (function (param) {
                            return ReactEvents.interceptingHandler((function (param) {
                                          resetFile(undefined);
                                          return Curry._1(updateFn, resetImage);
                                        }), param);
                          })
                      }, React.createElement(IconCloseInput.make, {
                            height: "28",
                            width: "28",
                            fill: "#B2B2B2"
                          }))), thumbnailURL === /* Error */2 ? React.createElement("span", {
                    className: "flex gap-1 text-xs"
                  }, React.createElement(IconError.make, {
                        width: "20",
                        height: "20"
                      }), React.createElement("span", {
                        className: "text-sm text-notice"
                      }, "업로드에 실패했습니다.")) : null);
}

var make = Upload_Thumbnail_Admin;

export {
  Mutation ,
  Form ,
  mutationImageToFormImage ,
  make ,
  
}
/* react Not a pure module */
