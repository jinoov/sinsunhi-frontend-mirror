// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Dialog from "./common/Dialog.mjs";
import * as IconCheck from "./svgs/IconCheck.mjs";
import * as IconClose from "./svgs/IconClose.mjs";
import * as IconError from "./svgs/IconError.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactRelay from "react-relay";
import * as RelayRuntime from "relay-runtime";
import * as IconArrowSelect from "./svgs/IconArrowSelect.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as ReactScrollArea from "@radix-ui/react-scroll-area";
import * as ReactDropdownMenu from "@radix-ui/react-dropdown-menu";
import * as OrdersCancelDialogAdmin_Mutation_graphql from "../__generated__/OrdersCancelDialogAdmin_Mutation_graphql.mjs";

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: OrdersCancelDialogAdmin_Mutation_graphql.node,
              variables: OrdersCancelDialogAdmin_Mutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, OrdersCancelDialogAdmin_Mutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? OrdersCancelDialogAdmin_Mutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    Curry._2(updater, store, OrdersCancelDialogAdmin_Mutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use(param) {
  var match = ReactRelay.useMutation(OrdersCancelDialogAdmin_Mutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      Curry._2(param$1, OrdersCancelDialogAdmin_Mutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? OrdersCancelDialogAdmin_Mutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      Curry._2(param$5, store, OrdersCancelDialogAdmin_Mutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: OrdersCancelDialogAdmin_Mutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var Mutation_wosOrderCancelType_decode = OrdersCancelDialogAdmin_Mutation_graphql.Utils.wosOrderCancelType_decode;

var Mutation_wosOrderCancelType_fromString = OrdersCancelDialogAdmin_Mutation_graphql.Utils.wosOrderCancelType_fromString;

var Mutation = {
  wosOrderCancelType_decode: Mutation_wosOrderCancelType_decode,
  wosOrderCancelType_fromString: Mutation_wosOrderCancelType_fromString,
  Operation: undefined,
  Types: undefined,
  commitMutation: commitMutation,
  use: use
};

function toString(r) {
  if (r === "PRODUCT_SOLDOUT") {
    return "상품품절";
  } else if (r === "ETC") {
    return "기타";
  } else if (r === "DELIVERY_NOT_POSSIBLE") {
    return "배송불가";
  } else if (r === "DUPLICATED_ORDER") {
    return "중복주문";
  } else if (r === "DELIVERY_ACCIDENT") {
    return "배송사고";
  } else if (r === "CHANGED_MIND") {
    return "단순변심";
  } else {
    return "배송지연";
  }
}

function Orders_Cancel_Dialog_Admin$Scroll(Props) {
  var children = Props.children;
  return React.createElement(ReactScrollArea.Root, {
              children: null,
              className: "max-h-[400px] flex flex-col overflow-hidden w-full"
            }, React.createElement(ReactScrollArea.Viewport, {
                  children: children,
                  className: "w-full h-full"
                }), React.createElement(ReactScrollArea.Scrollbar, {
                  children: React.createElement(ReactScrollArea.Thumb, {})
                }));
}

var Scroll = {
  make: Orders_Cancel_Dialog_Admin$Scroll
};

function Orders_Cancel_Dialog_Admin$Item(Props) {
  var reason = Props.reason;
  var setReason = Props.setReason;
  return React.createElement(ReactDropdownMenu.Item, {
              children: React.createElement("div", {
                    className: "rounded-lg py-3 px-2 hover:bg-gray-100 w-full",
                    onClick: (function (param) {
                        setReason(function (param) {
                              return reason;
                            });
                      })
                  }, React.createElement("span", {
                        className: "text-gray-800 w-full"
                      }, React.createElement("span", {
                            className: "w-full"
                          }, toString(reason)))),
              className: "focus:outline-none w-80"
            });
}

var Item = {
  make: Orders_Cancel_Dialog_Admin$Item
};

function Orders_Cancel_Dialog_Admin(Props) {
  var isShowCancelConfirm = Props.isShowCancelConfirm;
  var setShowCancelConfirm = Props.setShowCancelConfirm;
  var selectedOrders = Props.selectedOrders;
  var confirmFn = Props.confirmFn;
  var match = ReactToastNotifications.useToasts();
  var addToast = match.addToast;
  var match$1 = React.useState(function () {
        
      });
  var setReason = match$1[1];
  var reason = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setReasonDetail = match$2[1];
  var reasonDetail = match$2[0];
  var match$3 = use(undefined);
  var mutate = match$3[0];
  var reset = function (param) {
    setShowCancelConfirm(function (param) {
          return /* Hide */1;
        });
    setReason(function (param) {
          
        });
    setReasonDetail(function (param) {
          
        });
  };
  var handleError = function (message) {
    addToast(React.createElement("div", {
              className: "flex items-center"
            }, React.createElement(IconError.make, {
                  width: "24",
                  height: "24",
                  className: "mr-2"
                }), message), {
          appearance: "error"
        });
  };
  return React.createElement(Dialog.make, {
              isShow: isShowCancelConfirm,
              children: React.createElement("div", {
                    className: "text-black-gl text-center whitespace-pre-wrap w-full"
                  }, React.createElement("div", {
                        className: "flex justify-between items-center"
                      }, React.createElement("span", {
                            className: "text-text-L1 font-bold text-xl"
                          }, "주문 취소"), React.createElement("button", {
                            type: "button",
                            onClick: (function (param) {
                                reset(undefined);
                              })
                          }, React.createElement(IconClose.make, {
                                height: "24",
                                width: "24",
                                fill: "#1F2024"
                              }))), React.createElement("div", {
                        className: "mt-7 flex justify-between items-center"
                      }, React.createElement("span", {
                            className: "text-text-L1 text-sm"
                          }, "취소할 주문 수"), React.createElement("span", {
                            className: "text-text-L1 text-sm font-bold"
                          }, "" + String(selectedOrders.length) + "개 선택됨")), React.createElement("div", {
                        className: "my-5 bg-[#EDEFF2] h-px w-full"
                      }), React.createElement("div", {
                        className: "flex w-full flex-col gap-2 items-start"
                      }, React.createElement("span", {
                            className: "text-text-L1 text-sm"
                          }, "취소사유(필수)"), React.createElement("div", {
                            className: "w-full"
                          }, React.createElement(ReactDropdownMenu.Root, {
                                children: null
                              }, React.createElement(ReactDropdownMenu.Trigger, {
                                    children: React.createElement("div", {
                                          className: "w-full h-13 p-3 flex items-center justify-between border rounded-xl"
                                        }, React.createElement("span", {
                                              className: "text-gray-600"
                                            }, Belt_Option.mapWithDefault(reason, "선택해주세요", toString)), React.createElement(IconArrowSelect.make, {
                                              height: "20",
                                              width: "20",
                                              fill: "#121212"
                                            })),
                                    className: "focus:outline-none w-full"
                                  }), React.createElement(ReactDropdownMenu.Content, {
                                    children: React.createElement(Orders_Cancel_Dialog_Admin$Scroll, {
                                          children: Belt_Array.map([
                                                "DELIVERY_NOT_POSSIBLE",
                                                "DELIVERY_ACCIDENT",
                                                "DELIVERY_DELAY",
                                                "CHANGED_MIND",
                                                "PRODUCT_SOLDOUT",
                                                "DUPLICATED_ORDER",
                                                "ETC"
                                              ], (function (reason) {
                                                  return React.createElement(Orders_Cancel_Dialog_Admin$Item, {
                                                              reason: reason,
                                                              setReason: setReason,
                                                              key: toString(reason)
                                                            });
                                                }))
                                        }),
                                    align: "start",
                                    className: "bg-white border rounded-lg shadow-md p-1",
                                    sideOffset: 4
                                  }))), React.createElement("div", {
                            className: "mt-5 flex flex-col gap-2 items-start w-full"
                          }, React.createElement("span", {
                                className: "text-text-L1 text-sm"
                              }, "취소상세사유(선택)"), React.createElement("textarea", {
                                className: "p-3 w-full border border-border-default-L1 rounded-lg",
                                maxLength: 1000,
                                placeholder: "취소상세사유를 입력하실 수 있습니다.",
                                value: Belt_Option.getWithDefault(reasonDetail, ""),
                                onChange: (function (e) {
                                    setReasonDetail(function (param) {
                                          return e.target.value;
                                        });
                                  })
                              }), React.createElement("span", {
                                className: "text-[#8B8D94] text-sm text-left"
                              }, "*주문 취소 완료 후에는 취소사유, 취소상세사유가 변경되지 않습니다.")))),
              onCancel: (function (param) {
                  reset(undefined);
                }),
              onConfirm: (function (param) {
                  if (reason !== undefined) {
                    Curry.app(mutate, [
                          (function (err) {
                              handleError(err.message);
                            }),
                          (function (param, param$1) {
                              var cancelWosOrderProductOption = param.cancelWosOrderProductOption;
                              if (cancelWosOrderProductOption === undefined) {
                                return handleError("주문 취소에 실패하였습니다.");
                              }
                              if (typeof cancelWosOrderProductOption !== "object") {
                                return handleError("주문 취소에 실패하였습니다.");
                              }
                              var variant = cancelWosOrderProductOption.NAME;
                              if (variant === "CancelWosOrderProductOptionResult") {
                                Curry._1(confirmFn, undefined);
                                reset(undefined);
                                return addToast(React.createElement("div", {
                                                className: "flex items-center"
                                              }, React.createElement(IconCheck.make, {
                                                    height: "24",
                                                    width: "24",
                                                    fill: "#12B564",
                                                    className: "mr-2"
                                                  }), "주문이 취소되었습니다."), {
                                            appearance: "success"
                                          });
                              } else if (variant === "Error") {
                                return handleError(Belt_Option.getWithDefault(cancelWosOrderProductOption.VAL.message, "주문 취소에 실패하였습니다."));
                              } else {
                                return handleError("주문 취소에 실패하였습니다.");
                              }
                            }),
                          undefined,
                          undefined,
                          undefined,
                          undefined,
                          {
                            input: {
                              detailReason: reasonDetail,
                              idsToCancel: selectedOrders,
                              reason: reason
                            }
                          },
                          undefined,
                          undefined
                        ]);
                    return ;
                  } else {
                    return handleError("주문취소사유를 선택해주세요.");
                  }
                }),
              textOnCancel: "닫기",
              textOnConfirm: "취소 완료하기"
            });
}

var make = Orders_Cancel_Dialog_Admin;

export {
  Mutation ,
  toString ,
  Scroll ,
  Item ,
  make ,
}
/* react Not a pure module */
