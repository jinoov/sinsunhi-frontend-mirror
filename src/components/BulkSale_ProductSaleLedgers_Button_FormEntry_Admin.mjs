// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Input from "./common/Input.mjs";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as Input_Select_BulkSale_ProductQuantity from "./Input_Select_BulkSale_ProductQuantity.mjs";

function BulkSale_ProductSaleLedgers_Button_FormEntry_Admin(Props) {
  var id = Props.id;
  var entries = Props.entries;
  var setEntries = Props.setEntries;
  var formErrors = Props.formErrors;
  var grade = Belt_Option.map(Belt_MapString.get(entries, id), (function (entry) {
          return entry.grade;
        }));
  var handleOnChangeGrade = function (e) {
    var value = e.target.value;
    var newEntry = Belt_Option.map(Belt_MapString.get(entries, id), (function (entry) {
            return {
                    id: entry.id,
                    grade: value,
                    price: entry.price,
                    quantity: entry.quantity,
                    volume: entry.volume
                  };
          }));
    var newEntries = Belt_Option.map(newEntry, (function (newEntry$p) {
            return Belt_MapString.set(entries, id, newEntry$p);
          }));
    if (newEntries === undefined) {
      return ;
    }
    var newEntries$p = Caml_option.valFromOption(newEntries);
    return setEntries(function (param) {
                return newEntries$p;
              });
  };
  var amount = Belt_Option.map(Belt_MapString.get(entries, id), (function (entry) {
          return entry.quantity.amount;
        }));
  var handleOnChangeAmount = function (e) {
    var value = e.target.value;
    var newEntry = Belt_Option.map(Belt_MapString.get(entries, id), (function (entry) {
            var init = entry.quantity;
            return {
                    id: entry.id,
                    grade: entry.grade,
                    price: entry.price,
                    quantity: {
                      amount: value,
                      unit: init.unit
                    },
                    volume: entry.volume
                  };
          }));
    var newEntries = Belt_Option.map(newEntry, (function (newEntry$p) {
            return Belt_MapString.set(entries, id, newEntry$p);
          }));
    if (newEntries === undefined) {
      return ;
    }
    var newEntries$p = Caml_option.valFromOption(newEntries);
    return setEntries(function (param) {
                return newEntries$p;
              });
  };
  var unit = Belt_Option.mapWithDefault(Belt_MapString.get(entries, id), "KG", (function (entry) {
          return entry.quantity.unit;
        }));
  var handleOnChangeUnit = function (e) {
    var value = e.target.value;
    var newEntry = Belt_Option.map(Belt_MapString.get(entries, id), (function (entry) {
            var init = entry.quantity;
            return {
                    id: entry.id,
                    grade: entry.grade,
                    price: entry.price,
                    quantity: {
                      amount: init.amount,
                      unit: Belt_Result.getWithDefault(Input_Select_BulkSale_ProductQuantity.decodePackageUnit(value), "KG")
                    },
                    volume: entry.volume
                  };
          }));
    var newEntries = Belt_Option.map(newEntry, (function (newEntry$p) {
            return Belt_MapString.set(entries, id, newEntry$p);
          }));
    if (newEntries === undefined) {
      return ;
    }
    var newEntries$p = Caml_option.valFromOption(newEntries);
    return setEntries(function (param) {
                return newEntries$p;
              });
  };
  var volume = Belt_Option.map(Belt_MapString.get(entries, id), (function (entry) {
          return entry.volume;
        }));
  var handleOnChangeVolume = function (e) {
    var value = e.target.value;
    var newEntry = Belt_Option.map(Belt_MapString.get(entries, id), (function (entry) {
            return {
                    id: entry.id,
                    grade: entry.grade,
                    price: entry.price,
                    quantity: entry.quantity,
                    volume: value
                  };
          }));
    var newEntries = Belt_Option.map(newEntry, (function (newEntry$p) {
            return Belt_MapString.set(entries, id, newEntry$p);
          }));
    if (newEntries === undefined) {
      return ;
    }
    var newEntries$p = Caml_option.valFromOption(newEntries);
    return setEntries(function (param) {
                return newEntries$p;
              });
  };
  var price = Belt_Option.map(Belt_MapString.get(entries, id), (function (entry) {
          return entry.price;
        }));
  var handleOnChangePrice = function (e) {
    var value = e.target.value;
    var newEntry = Belt_Option.map(Belt_MapString.get(entries, id), (function (entry) {
            return {
                    id: entry.id,
                    grade: entry.grade,
                    price: value,
                    quantity: entry.quantity,
                    volume: entry.volume
                  };
          }));
    var newEntries = Belt_Option.map(newEntry, (function (newEntry$p) {
            return Belt_MapString.set(entries, id, newEntry$p);
          }));
    if (newEntries === undefined) {
      return ;
    }
    var newEntries$p = Caml_option.valFromOption(newEntries);
    return setEntries(function (param) {
                return newEntries$p;
              });
  };
  return React.createElement("div", {
              className: "py-4"
            }, React.createElement("section", {
                  className: "flex gap-2"
                }, React.createElement("article", {
                      className: "flex-1"
                    }, React.createElement("h3", {
                          className: "text-sm"
                        }, "등급"), React.createElement(Input.make, {
                          type_: "text",
                          name: "grade",
                          className: "mt-2",
                          value: Belt_Option.getWithDefault(grade, ""),
                          onChange: handleOnChangeGrade,
                          size: /* Small */2,
                          error: Garter_Array.first(Belt_Array.keepMap(formErrors, (function (error) {
                                      var match = error[1];
                                      if (typeof match === "object" && match.NAME === "ErrorGrade" && id === error[0]) {
                                        return match.VAL;
                                      }
                                      
                                    })))
                        })), React.createElement("article", undefined, React.createElement("h3", {
                          className: "text-sm"
                        }, "중량"), React.createElement(Input_Select_BulkSale_ProductQuantity.make, {
                          quantityAmount: amount,
                          quantityUnit: unit,
                          onChangeAmount: handleOnChangeAmount,
                          onChangeUnit: handleOnChangeUnit,
                          error: Garter_Array.first(Belt_Array.keepMap(formErrors, (function (error) {
                                      var match = error[1];
                                      if (typeof match === "object" && match.NAME === "ErrorAmount" && id === error[0]) {
                                        return match.VAL;
                                      }
                                      
                                    })))
                        }))), React.createElement("section", {
                  className: "flex gap-2 mt-4"
                }, React.createElement("article", {
                      className: "flex-1"
                    }, React.createElement("h3", {
                          className: "text-sm"
                        }, "거래량"), React.createElement(Input.make, {
                          type_: "number",
                          name: "volume",
                          placeholder: "0",
                          className: "mt-2",
                          value: Belt_Option.getWithDefault(price, ""),
                          onChange: handleOnChangePrice,
                          size: /* Small */2,
                          error: Garter_Array.first(Belt_Array.keepMap(formErrors, (function (error) {
                                      var match = error[1];
                                      if (typeof match === "object" && match.NAME === "ErrorVolume" && id === error[0]) {
                                        return match.VAL;
                                      }
                                      
                                    }))),
                          textAlign: /* Right */2
                        })), React.createElement("article", undefined, React.createElement("h3", {
                          className: "text-sm"
                        }, "경락단가"), React.createElement(Input.make, {
                          type_: "number",
                          name: "price",
                          placeholder: "0",
                          className: "mt-2",
                          value: Belt_Option.getWithDefault(volume, ""),
                          onChange: handleOnChangeVolume,
                          size: /* Small */2,
                          error: Garter_Array.first(Belt_Array.keepMap(formErrors, (function (error) {
                                      var match = error[1];
                                      if (typeof match === "object" && match.NAME === "ErrorPrice" && id === error[0]) {
                                        return match.VAL;
                                      }
                                      
                                    }))),
                          textAlign: /* Right */2
                        }))));
}

var make = BulkSale_ProductSaleLedgers_Button_FormEntry_Admin;

export {
  make ,
  
}
/* Input Not a pure module */
