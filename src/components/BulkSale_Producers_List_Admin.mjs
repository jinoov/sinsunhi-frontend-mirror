// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Fetch from "bs-fetch/src/Fetch.mjs";
import * as React from "@rescript/react/src/React.mjs";
import * as React$1 from "react";
import * as Helper from "../utils/Helper.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Skeleton from "./Skeleton.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as FetchHelper from "../utils/FetchHelper.mjs";
import * as Order_Admin from "./Order_Admin.mjs";
import * as Router from "next/router";
import * as ReactRelay from "react-relay";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import Format from "date-fns/format";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as IconDownloadCenter from "./svgs/IconDownloadCenter.mjs";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.mjs";
import * as Webapi__Dom__Document from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Document.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as BulkSale_Producer_Admin from "./BulkSale_Producer_Admin.mjs";
import * as Status_BulkSale_Producer from "./common/Status_BulkSale_Producer.mjs";
import * as BulkSaleProducersListAdminFragment_graphql from "../__generated__/BulkSaleProducersListAdminFragment_graphql.mjs";
import * as BulkSaleProducersListAdminRefetchQuery_graphql from "../__generated__/BulkSaleProducersListAdminRefetchQuery_graphql.mjs";

function internal_makeRefetchableFnOpts(fetchPolicy, onComplete, param) {
  var tmp = {};
  var tmp$1 = RescriptRelay.mapFetchPolicy(fetchPolicy);
  if (tmp$1 !== undefined) {
    tmp.fetchPolicy = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = RescriptRelay_Internal.internal_nullableToOptionalExnHandler(onComplete);
  if (tmp$2 !== undefined) {
    tmp.onComplete = Caml_option.valFromOption(tmp$2);
  }
  return tmp;
}

function useRefetchable(fRef) {
  var match = ReactRelay.useRefetchableFragment(BulkSaleProducersListAdminFragment_graphql.node, fRef);
  var refetchFn = match[1];
  var data = RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProducersListAdminFragment_graphql.Internal.convertFragment, match[0]);
  return [
          data,
          React$1.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return Curry._2(refetchFn, RescriptRelay_Internal.internal_removeUndefinedAndConvertNullsRaw(BulkSaleProducersListAdminRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [refetchFn])
        ];
}

function use(fRef) {
  var data = ReactRelay.useFragment(BulkSaleProducersListAdminFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProducersListAdminFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(BulkSaleProducersListAdminFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return BulkSaleProducersListAdminFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

function usePagination(fr) {
  var p = ReactRelay.usePaginationFragment(BulkSaleProducersListAdminFragment_graphql.node, fr);
  var data = RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProducersListAdminFragment_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React$1.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React$1.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          isLoadingNext: p.isLoadingNext,
          isLoadingPrevious: p.isLoadingPrevious,
          refetch: React$1.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(BulkSaleProducersListAdminRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

function useBlockingPagination(fRef) {
  var p = ReactRelay.useBlockingPaginationFragment(BulkSaleProducersListAdminFragment_graphql.node, fRef);
  var data = RescriptRelay_Internal.internal_useConvertedValue(BulkSaleProducersListAdminFragment_graphql.Internal.convertFragment, p.data);
  return {
          data: data,
          loadNext: React$1.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadNext(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadNext]),
          loadPrevious: React$1.useMemo((function () {
                  return function (param, param$1, param$2) {
                    return p.loadPrevious(param, {
                                onComplete: RescriptRelay_Internal.internal_nullableToOptionalExnHandler(param$1)
                              });
                  };
                }), [p.loadPrevious]),
          hasNext: p.hasNext,
          hasPrevious: p.hasPrevious,
          refetch: React$1.useMemo((function () {
                  return function (param, param$1, param$2, param$3) {
                    return p.refetch(RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(BulkSaleProducersListAdminRefetchQuery_graphql.Internal.convertVariables(param)), internal_makeRefetchableFnOpts(param$1, param$2, undefined));
                  };
                }), [p.refetch])
        };
}

var makeRefetchVariables = BulkSaleProducersListAdminRefetchQuery_graphql.Types.makeRefetchVariables;

var Fragment_getConnectionNodes = BulkSaleProducersListAdminFragment_graphql.Utils.getConnectionNodes;

var Fragment = {
  getConnectionNodes: Fragment_getConnectionNodes,
  Types: undefined,
  internal_makeRefetchableFnOpts: internal_makeRefetchableFnOpts,
  useRefetchable: useRefetchable,
  Operation: undefined,
  use: use,
  useOpt: useOpt,
  usePagination: usePagination,
  useBlockingPagination: useBlockingPagination,
  makeRefetchVariables: makeRefetchVariables
};

function BulkSale_Producers_List_Admin$Header(props) {
  return React$1.createElement("div", {
              className: "grid grid-cols-11-admin-bulk-sale-producers bg-gray-50 text-gray-500 h-12 divide-y divide-gray-100"
            }, React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "신청일자"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "상태"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "담당자"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "작물"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "예상판매가"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "연평균 판매량"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "택배 가능 여부"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "포장 무게 단위"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "하루 수확 생산량"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "수확 주기"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "예상 출하 시점"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "톤백, 콘티 거래 가능 여부"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "재배 시설"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "농산물 관련 인증"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "농산물 등급"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "출하시장 정보"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "온라인판매 여부"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "생산 작물 사진"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "생산자정보"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "직접 농사 여부"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "농사 경력"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "생산자만의 특별함"), React$1.createElement("div", {
                  className: "h-full px-4 flex items-center whitespace-nowrap"
                }, "메모"));
}

var Header = {
  make: BulkSale_Producers_List_Admin$Header
};

function BulkSale_Producers_List_Admin$Loading(props) {
  return React$1.createElement("div", {
              className: "w-full overflow-x-scroll"
            }, React$1.createElement("div", {
                  className: "min-w-max text-sm"
                }, React$1.createElement(BulkSale_Producers_List_Admin$Header, {}), React$1.createElement("ol", {
                      className: "divide-y divide-gray-100 lg:list-height-admin-bulk-sale lg:overflow-y-scroll"
                    }, Garter_Array.map(Garter_Array.make(5, 0), (function (param) {
                            return React$1.createElement(Order_Admin.Item.Table.Loading.make, {});
                          })))));
}

var Loading = {
  make: BulkSale_Producers_List_Admin$Loading
};

function BulkSale_Producers_List_Admin$Skeleton(props) {
  return React$1.createElement(React$1.Fragment, undefined, React$1.createElement("div", {
                  className: "md:flex md:justify-between pb-4"
                }, React$1.createElement("div", {
                      className: "flex flex-auto items-center justify-between h-8"
                    }, React$1.createElement("h3", {
                          className: "text-lg font-bold"
                        }, "내역"), React$1.createElement(Skeleton.Box.make, {
                          className: "w-32"
                        }))), React$1.createElement("div", {
                  className: "w-full overflow-x-scroll"
                }, React$1.createElement("div", {
                      className: "min-w-max text-sm"
                    }, React$1.createElement("div", {
                          className: "bg-gray-50 h-12 divide-y divide-gray-100"
                        }), React$1.createElement("span", {
                          className: "w-full h-[500px] flex items-center justify-center"
                        }, "로딩중.."))));
}

var Skeleton$1 = {
  make: BulkSale_Producers_List_Admin$Skeleton
};

function BulkSale_Producers_List_Admin$List(props) {
  var statistics = props.statistics;
  var refetchSummary = props.refetchSummary;
  var router = Router.useRouter();
  var queried = Belt_Option.flatMap(Js_dict.get(router.query, "status"), (function (status) {
          var status$p = Status_BulkSale_Producer.status_decode(status);
          if (status$p.TAG === /* Ok */0) {
            return status$p._0;
          }
          
        }));
  var count;
  if (queried !== undefined) {
    switch (queried) {
      case /* APPLIED */0 :
          count = statistics.progressAppliedCount;
          break;
      case /* UNDER_DISCUSSION */1 :
          count = statistics.progressUnderDiscussionCount;
          break;
      case /* ON_SITE_MEETING_SCHEDULED */2 :
          count = statistics.progressOnSiteMeetingScheduledCount;
          break;
      case /* SAMPLE_REQUESTED */3 :
          count = statistics.progressSampleRequestedCount;
          break;
      case /* SAMPLE_REVIEWING */4 :
          count = statistics.progressSampleReviewingCount;
          break;
      case /* REJECTED */5 :
          count = statistics.progressRejectedCount;
          break;
      case /* CONFIRMED */6 :
          count = statistics.progressConfirmedCount;
          break;
      case /* WITHDRAWN */7 :
          count = statistics.progressWithdrawnCount;
          break;
      
    }
  } else {
    count = statistics.count;
  }
  var listContainerRef = React$1.useRef(null);
  var loadMoreRef = React$1.useRef(null);
  var match = usePagination(props.query);
  var hasNext = match.hasNext;
  var loadNext = match.loadNext;
  var isIntersecting = CustomHooks.$$IntersectionObserver.use(listContainerRef, loadMoreRef, 0.1, "50px", undefined);
  React$1.useEffect((function () {
          if (hasNext && isIntersecting) {
            Curry._3(loadNext, 5, undefined, undefined);
          }
          
        }), [
        hasNext,
        isIntersecting
      ]);
  return React$1.createElement(React$1.Fragment, undefined, React$1.createElement("div", {
                  className: "md:flex md:justify-between pb-4"
                }, React$1.createElement("div", {
                      className: "flex flex-auto justify-between"
                    }, React$1.createElement("h3", {
                          className: "text-lg font-bold"
                        }, "내역", React$1.createElement("span", {
                              className: "text-base ml-1 text-green-gl font-normal"
                            }, "" + String(count) + "건")), React$1.createElement("div", {
                          className: "flex"
                        }, React$1.createElement("button", {
                              className: "btn-level6-small px-3 py-1 flex justify-center items-center text-[15px]",
                              onClick: (function (param) {
                                  var progress = Belt_Option.mapWithDefault(Js_dict.get(router.query, "status"), "ALL", (function (status) {
                                          return status.toUpperCase();
                                        }));
                                  FetchHelper.requestWithRetry(FetchHelper.getWithTokenForExcel, "" + Env.restApiUrl + "/farmmorning-bridge/api/bulk-sale/bulk-sale-applications/export/excel?progress=" + progress + "", "", 3, (function (res) {
                                          var headers = res.headers;
                                          var filename = Belt_Option.getWithDefault(Belt_Option.map(Belt_Option.flatMap(Fetch.$$Headers.get("Content-Disposition", headers), Helper.Filename.parseFilename), (function (prim) {
                                                      return decodeURIComponent(prim);
                                                    })), "" + Format(new Date(), "yyyyMMdd") + "_주문서.xlsx");
                                          Js_promise.$$catch((function (err) {
                                                  console.log(err);
                                                  return Promise.reject(Js_exn.raiseError("파일을 다운로드 할 수 없습니다."));
                                                }), Js_promise.then_((function (blob) {
                                                      var anchor = Webapi__Dom__Element.asHtmlElement(document.createElement("a"));
                                                      var body = Belt_Option.flatMap(Webapi__Dom__Document.asHtmlDocument(document), (function (prim) {
                                                              return Caml_option.nullable_to_opt(prim.body);
                                                            }));
                                                      Helper.$$Option.map2(body, anchor, (function (body$p, anchor$p) {
                                                              var url = URL.createObjectURL(blob);
                                                              anchor$p.setAttribute("href", url);
                                                              anchor$p.setAttribute("download", filename);
                                                              anchor$p.setAttribute("style", "{display: none;}");
                                                              body$p.appendChild(anchor$p);
                                                              anchor$p.click();
                                                              body$p.removeChild(anchor$p);
                                                              URL.revokeObjectURL(url);
                                                            }));
                                                      return Promise.resolve(blob);
                                                    }), Fetch.$$Response.blob(res)));
                                        }), (function (err) {
                                          console.log(err);
                                        }));
                                })
                            }, React$1.createElement(IconDownloadCenter.make, {
                                  width: "20",
                                  height: "20",
                                  fill: "#262626",
                                  className: "mr-1"
                                }), "엑셀 다운로드")))), React$1.createElement("div", {
                  className: "w-full overflow-x-scroll"
                }, React$1.createElement("div", {
                      className: "min-w-max text-sm"
                    }, React$1.createElement(BulkSale_Producers_List_Admin$Header, {}), React$1.createElement("ol", {
                          ref: listContainerRef,
                          className: "divide-y divide-gray-100 lg:list-height-admin-bulk-sale lg:overflow-y-scroll"
                        }, Belt_Array.map(match.data.bulkSaleApplications.edges, (function (edge) {
                                return React.createElementWithKey(BulkSale_Producer_Admin.make, {
                                            node: edge.node,
                                            refetchSummary: refetchSummary
                                          }, edge.cursor);
                              })), match.isLoadingNext ? React$1.createElement("div", undefined, "로딩중...") : null, React$1.createElement("div", {
                              ref: loadMoreRef,
                              className: "h-5"
                            })))));
}

var List = {
  make: BulkSale_Producers_List_Admin$List
};

function BulkSale_Producers_List_Admin(props) {
  return React$1.createElement(BulkSale_Producers_List_Admin$List, {
              query: props.query,
              refetchSummary: props.refetchSummary,
              statistics: props.statistics
            });
}

var make = BulkSale_Producers_List_Admin;

export {
  Fragment ,
  Header ,
  Loading ,
  Skeleton$1 as Skeleton,
  List ,
  make ,
}
/* Env Not a pure module */
