// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Dialog from "./common/Dialog.mjs";
import * as CustomHooks from "../utils/CustomHooks.mjs";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";
import Format from "date-fns/format";

function styleStatus(status) {
  switch (status) {
    case /* WAITING */0 :
        return "text-gray-500 whitespace-nowrap";
    case /* PROCESSING */1 :
        return "text-gray-700 whitespace-nowrap";
    case /* SUCCESS */2 :
        return "text-primary whitespace-nowrap";
    case /* FAIL */3 :
        return "text-red-500 whitespace-nowrap";
    
  }
}

function displayStatus(s) {
  switch (s) {
    case /* WAITING */0 :
        return "대기중...";
    case /* PROCESSING */1 :
        return "처리중...";
    case /* SUCCESS */2 :
        return "전체성공";
    case /* FAIL */3 :
        return "전체실패";
    
  }
}

function OfflineOrders_UploadStatus_Admin$DownloadItem(Props) {
  var data = Props.data;
  var match = React.useState(function () {
        return /* Hide */1;
      });
  var setShowError = match[1];
  var match$1 = data.errorCode;
  return React.createElement(React.Fragment, undefined, React.createElement("li", {
                  className: "grid grid-cols-3-offline-upload mt-4"
                }, React.createElement("div", undefined, Format(new Date(data.createdAt), "yyyy/MM/dd HH:mm")), React.createElement("div", undefined, data.filename), React.createElement("div", undefined, React.createElement("span", {
                          className: styleStatus(data.status)
                        }, displayStatus(data.status)), match$1 !== undefined ? React.createElement("button", {
                            className: "ml-5 focus:outline-none underline text-text-L3",
                            onClick: (function (param) {
                                return setShowError(function (param) {
                                            return /* Show */0;
                                          });
                              })
                          }, "자세히보기") : null)), React.createElement(Dialog.make, {
                  isShow: match[0],
                  children: null,
                  onCancel: (function (param) {
                      return setShowError(function (param) {
                                  return /* Hide */1;
                                });
                    }),
                  textOnCancel: "닫기"
                }, React.createElement("p", {
                      className: "text-text-L1 text-center whitespace-pre-wrap"
                    }, "양식에 맞지 않은 주문서입니다.", React.createElement("br", undefined), "아래와 같은 이유로 실패할 수 있습니다."), React.createElement("br", undefined), React.createElement("ol", {
                      className: "font-bold px-9"
                    }, React.createElement("li", undefined, "1.엑셀파일 형식 (xls, xlsx) 이 아닌 경우"), React.createElement("li", undefined, "2.필수값 8개 항목 (오프라인주문번호, 오프라인주문일, 단품코드, 바이어코드, 발주량, 생산자공급원가, 바이어판매단가, 출고예정일) 이 없거나 잘못된 값일 경우"), React.createElement("li", undefined, "3.단품정보에 중량 / 패키지 / 등급 3개 항목이 비어 있을 경우"), React.createElement("li", undefined, "4.출고예정일이 오늘보다 과거날짜로 등록을 시도하는 경우"), React.createElement("li", undefined, "5.엑셀에 비밀번호가 걸려있을 경우"))));
}

var DownloadItem = {
  styleStatus: styleStatus,
  displayStatus: displayStatus,
  make: OfflineOrders_UploadStatus_Admin$DownloadItem
};

function OfflineOrders_UploadStatus_Admin(Props) {
  var status = CustomHooks.OfflineUploadStatus.use(undefined);
  var tmp;
  if (typeof status === "number") {
    tmp = React.createElement("div", undefined, "로딩 중..");
  } else if (status.TAG === /* Loaded */0) {
    var data$p = CustomHooks.OfflineUploadStatus.response_decode(status._0);
    if (data$p.TAG === /* Ok */0) {
      var data$p$1 = data$p._0;
      tmp = Garter_Array.isEmpty(data$p$1.data) ? React.createElement("div", undefined, "업로드 한 내역이 없습니다.") : Garter_Array.map(data$p$1.data, (function (d) {
                return React.createElement(OfflineOrders_UploadStatus_Admin$DownloadItem, {
                            data: d,
                            key: d.uploadNo
                          });
              }));
    } else {
      tmp = null;
    }
  } else {
    tmp = React.createElement("div", undefined, "에러가 발생하였습니다.");
  }
  return React.createElement(React.Fragment, undefined, React.createElement("h3", {
                  className: "font-bold"
                }, "주문서 업로드 결과"), React.createElement("div", {
                  className: "grid grid-cols-3-offline-upload mt-5 font-bold"
                }, React.createElement("div", undefined, "요청일시"), React.createElement("div", undefined, "파일명"), React.createElement("div", undefined, "결과")), React.createElement("ol", undefined, tmp));
}

var make = OfflineOrders_UploadStatus_Admin;

export {
  DownloadItem ,
  make ,
  
}
/* react Not a pure module */
