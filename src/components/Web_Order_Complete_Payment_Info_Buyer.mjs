// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Locale from "../utils/Locale.mjs";
import * as Skeleton from "./Skeleton.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as WebOrderCompletePaymentInfoBuyerFragment_graphql from "../__generated__/WebOrderCompletePaymentInfoBuyerFragment_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(WebOrderCompletePaymentInfoBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(WebOrderCompletePaymentInfoBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(WebOrderCompletePaymentInfoBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return WebOrderCompletePaymentInfoBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_paymentMethod_decode = WebOrderCompletePaymentInfoBuyerFragment_graphql.Utils.paymentMethod_decode;

var Fragment_paymentMethod_fromString = WebOrderCompletePaymentInfoBuyerFragment_graphql.Utils.paymentMethod_fromString;

var Fragment_wosDeliveryType_decode = WebOrderCompletePaymentInfoBuyerFragment_graphql.Utils.wosDeliveryType_decode;

var Fragment_wosDeliveryType_fromString = WebOrderCompletePaymentInfoBuyerFragment_graphql.Utils.wosDeliveryType_fromString;

var Fragment = {
  paymentMethod_decode: Fragment_paymentMethod_decode,
  paymentMethod_fromString: Fragment_paymentMethod_fromString,
  wosDeliveryType_decode: Fragment_wosDeliveryType_decode,
  wosDeliveryType_fromString: Fragment_wosDeliveryType_fromString,
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function paymentMethodToString(m) {
  if (m !== undefined) {
    if (m === "VIRTUAL_ACCOUNT") {
      return "가상계좌";
    } else if (m === "CREDIT_CARD") {
      return "카드결제";
    } else if (m === "TRANSFER") {
      return "계좌이체";
    } else {
      return "-";
    }
  } else {
    return "-";
  }
}

function makePrice(o, d, m) {
  if (m === "SELF" || m === "FREIGHT") {
    return [
            o,
            0
          ];
  } else if (m === "PARCEL") {
    return [
            o - d | 0,
            d
          ];
  } else {
    return [
            0,
            0
          ];
  }
}

function Web_Order_Complete_Payment_Info_Buyer$Placeholder(Props) {
  return React.createElement("section", {
              className: "flex flex-col rounded-sm bg-white w-full p-7 gap-7"
            }, React.createElement("span", {
                  className: "text-lg xl:text-xl text-enabled-L1 font-bold"
                }, "결제 정보"), React.createElement("ul", {
                  className: "text-sm flex flex-col gap-5"
                }, React.createElement("li", {
                      key: "payment-method",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "결제 수단"), React.createElement(Skeleton.Box.make, {
                          className: "h-6 my-0 w-20 text-base font-bold xl:text-sm"
                        })), React.createElement("li", {
                      key: "total-price",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 결제금액"), React.createElement(Skeleton.Box.make, {
                          className: "h-6 my-0 w-24 text-base font-bold xl:text-sm"
                        }))));
}

var Placeholder = {
  make: Web_Order_Complete_Payment_Info_Buyer$Placeholder
};

function Web_Order_Complete_Payment_Info_Buyer(Props) {
  var query = Props.query;
  var match = use(query);
  var wosOrder = match.wosOrder;
  if (wosOrder === undefined) {
    return React.createElement(Web_Order_Complete_Payment_Info_Buyer$Placeholder, {});
  }
  var totalDeliveryCost = wosOrder.totalDeliveryCost;
  var totalOrderPrice = wosOrder.totalOrderPrice;
  var deliveryType = Belt_Option.flatMap(Belt_Array.get(wosOrder.orderProducts, 0), (function (a) {
          return Belt_Option.map(a, (function (b) {
                        return b.deliveryType;
                      }));
        }));
  var match$1 = Belt_Option.mapWithDefault(deliveryType, [
        0,
        0
      ], (function (d) {
          return makePrice(totalOrderPrice, Belt_Option.getWithDefault(totalDeliveryCost, 0), d);
        }));
  return React.createElement("section", {
              className: "flex flex-col rounded-sm bg-white w-full p-7 gap-7"
            }, React.createElement("span", {
                  className: "text-lg xl:text-xl text-enabled-L1 font-bold"
                }, "결제 정보"), React.createElement("ul", {
                  className: "text-sm flex flex-col gap-5"
                }, React.createElement("li", {
                      key: "payment-method",
                      className: "flex justify-between items-center h-6"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "결제 수단"), React.createElement("span", {
                          className: "text-base font-bold xl:text-sm"
                        }, paymentMethodToString(wosOrder.paymentMethod))), React.createElement("li", {
                      key: "total-price",
                      className: "flex justify-between items-center h-6"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 결제금액"), React.createElement("span", {
                          className: "text-xl xl:text-lg text-primary font-bold"
                        }, Locale.Int.show(undefined, match$1[0] + match$1[1] | 0) + "원"))));
}

var make = Web_Order_Complete_Payment_Info_Buyer;

export {
  Fragment ,
  paymentMethodToString ,
  makePrice ,
  Placeholder ,
  make ,
  
}
/* react Not a pure module */
