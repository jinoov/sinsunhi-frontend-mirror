// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cx from "rescript-classnames/src/Cx.mjs";
import * as React from "react";
import * as Locale from "../utils/Locale.mjs";
import * as Skeleton from "./Skeleton.mjs";
import * as IconCheck from "./svgs/IconCheck.mjs";
import * as ReactUtil from "../utils/ReactUtil.mjs";
import Clipboard from "clipboard";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactRelay from "react-relay";
import Format from "date-fns/format";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ReactToastNotifications from "react-toast-notifications";
import * as WebOrderCompletePaymentInfoBuyerFragment_graphql from "../__generated__/WebOrderCompletePaymentInfoBuyerFragment_graphql.mjs";

function use(fRef) {
  var data = ReactRelay.useFragment(WebOrderCompletePaymentInfoBuyerFragment_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(WebOrderCompletePaymentInfoBuyerFragment_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = ReactRelay.useFragment(WebOrderCompletePaymentInfoBuyerFragment_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return WebOrderCompletePaymentInfoBuyerFragment_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment_paymentMethod_decode = WebOrderCompletePaymentInfoBuyerFragment_graphql.Utils.paymentMethod_decode;

var Fragment_paymentMethod_fromString = WebOrderCompletePaymentInfoBuyerFragment_graphql.Utils.paymentMethod_fromString;

var Fragment_wosDeliveryType_decode = WebOrderCompletePaymentInfoBuyerFragment_graphql.Utils.wosDeliveryType_decode;

var Fragment_wosDeliveryType_fromString = WebOrderCompletePaymentInfoBuyerFragment_graphql.Utils.wosDeliveryType_fromString;

var Fragment_wosOrderStatus_decode = WebOrderCompletePaymentInfoBuyerFragment_graphql.Utils.wosOrderStatus_decode;

var Fragment_wosOrderStatus_fromString = WebOrderCompletePaymentInfoBuyerFragment_graphql.Utils.wosOrderStatus_fromString;

var Fragment = {
  paymentMethod_decode: Fragment_paymentMethod_decode,
  paymentMethod_fromString: Fragment_paymentMethod_fromString,
  wosDeliveryType_decode: Fragment_wosDeliveryType_decode,
  wosDeliveryType_fromString: Fragment_wosDeliveryType_fromString,
  wosOrderStatus_decode: Fragment_wosOrderStatus_decode,
  wosOrderStatus_fromString: Fragment_wosOrderStatus_fromString,
  Types: undefined,
  Operation: undefined,
  use: use,
  useOpt: useOpt
};

function paymentMethodToString(m) {
  if (m !== undefined) {
    if (m === "VIRTUAL_ACCOUNT") {
      return "가상계좌";
    } else if (m === "CREDIT_CARD") {
      return "카드결제";
    } else if (m === "TRANSFER") {
      return "계좌이체";
    } else {
      return "-";
    }
  } else {
    return "-";
  }
}

function makePrice(o, d, m) {
  if (m === "SELF" || m === "FREIGHT") {
    return [
            o,
            0
          ];
  } else if (m === "PARCEL") {
    return [
            o - d | 0,
            d
          ];
  } else {
    return [
            0,
            0
          ];
  }
}

function Web_Order_Complete_Payment_Info_Buyer$ResponsiveTitle(Props) {
  var deviceType = Props.deviceType;
  var title = Props.title;
  var textColorOpt = Props.textColor;
  var textColor = textColorOpt !== undefined ? textColorOpt : "text-enabled-L1";
  switch (deviceType) {
    case /* Unknown */0 :
        return null;
    case /* PC */1 :
        return React.createElement("span", {
                    className: Cx.cx([
                          "text-xl font-bold",
                          textColor
                        ])
                  }, title);
    case /* Mobile */2 :
        return React.createElement("span", {
                    className: Cx.cx([
                          "text-lg font-bold",
                          textColor
                        ])
                  }, title);
    
  }
}

var ResponsiveTitle = {
  make: Web_Order_Complete_Payment_Info_Buyer$ResponsiveTitle
};

function Web_Order_Complete_Payment_Info_Buyer$Placeholder(Props) {
  var deviceType = Props.deviceType;
  return React.createElement("section", {
              className: "flex flex-col rounded-sm bg-white w-full p-7 gap-7"
            }, React.createElement(Web_Order_Complete_Payment_Info_Buyer$ResponsiveTitle, {
                  deviceType: deviceType,
                  title: "결제 정보"
                }), React.createElement("ul", {
                  className: "text-sm flex flex-col gap-5"
                }, React.createElement("li", {
                      key: "payment-method",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "결제 수단"), React.createElement(Skeleton.Box.make, {
                          className: "h-6 my-0 w-20 text-base font-bold xl:text-sm"
                        })), React.createElement("li", {
                      key: "total-price",
                      className: "flex justify-between items-center"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 결제금액"), React.createElement(Skeleton.Box.make, {
                          className: "h-6 my-0 w-24 text-base font-bold xl:text-sm"
                        }))));
}

var Placeholder = {
  make: Web_Order_Complete_Payment_Info_Buyer$Placeholder
};

function Web_Order_Complete_Payment_Info_Buyer(Props) {
  var query = Props.query;
  var deviceType = Props.deviceType;
  var match = use(query);
  var wosOrder = match.wosOrder;
  var match$1 = ReactToastNotifications.useToasts();
  var addToast = match$1.addToast;
  React.useEffect((function () {
          new Clipboard(".btn-link");
        }), []);
  var showToastCopyToClipboard = function (param) {
    addToast(React.createElement("div", {
              className: "flex items-center "
            }, React.createElement(IconCheck.make, {
                  height: "24",
                  width: "24",
                  fill: "#12B564",
                  className: "mr-2"
                }), "계좌번호가 클립보드에 복사되었습니다."), {
          appearance: "success"
        });
  };
  if (wosOrder === undefined) {
    return React.createElement(Web_Order_Complete_Payment_Info_Buyer$Placeholder, {
                deviceType: deviceType
              });
  }
  var totalOrderPrice = wosOrder.totalOrderPrice;
  var totalDeliveryCost = wosOrder.totalDeliveryCost;
  var payment = wosOrder.payment;
  var deliveryType = Belt_Option.flatMap(Belt_Array.get(wosOrder.orderProducts, 0), (function (a) {
          return Belt_Option.map(a, (function (b) {
                        return b.deliveryType;
                      }));
        }));
  var match$2 = Belt_Option.mapWithDefault(deliveryType, [
        0,
        0
      ], (function (d) {
          return makePrice(totalOrderPrice, Belt_Option.getWithDefault(totalDeliveryCost, 0), d);
        }));
  var match$3 = Belt_Option.flatMap(payment, (function (p) {
          return p.virtualAccount;
        }));
  var tmp;
  if (wosOrder.status === "DEPOSIT_PENDING" && match$3 !== undefined) {
    var accountNo = match$3.accountNo;
    tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
              className: "h-px bg-border-default-L2"
            }), React.createElement(Web_Order_Complete_Payment_Info_Buyer$ResponsiveTitle, {
              deviceType: deviceType,
              title: "입금 정보"
            }), React.createElement("li", {
              key: "virtual-account-bank-name",
              className: "flex justify-between items-center h-6"
            }, React.createElement("span", {
                  className: "text-text-L2"
                }, "가상계좌은행"), React.createElement("span", {
                  className: "text-base font-bold xl:text-sm"
                }, match$3.bank.name)), React.createElement("li", {
              key: "virtual-account-account-owner",
              className: "flex justify-between items-center h-6"
            }, React.createElement("span", {
                  className: "text-text-L2"
                }, "계좌주"), React.createElement("span", {
                  className: "text-base font-bold xl:text-sm"
                }, "주식회사 그린랩스")), React.createElement("li", {
              key: "virtual-account-number",
              className: "flex justify-between items-center h-6"
            }, React.createElement("span", {
                  className: "text-text-L2"
                }, "계좌번호"), React.createElement("span", {
                  className: "flex gap-1 items-center text-base font-bold xl:text-sm"
                }, accountNo, React.createElement(ReactUtil.SpreadProps.make, {
                      children: React.createElement("button", {
                            className: "btn-link py-1 px-2 text-[#65666B] font-normal text-sm rounded-md bg-[#F7F8FA]",
                            type: "button",
                            onClick: showToastCopyToClipboard
                          }, "복사"),
                      props: {
                        "data-clipboard-text": accountNo.replace(/\D/g, "")
                      }
                    }))), React.createElement("li", {
              key: "virtual-account-expired-at",
              className: "flex justify-between items-center h-6"
            }, React.createElement("span", {
                  className: "text-text-L2"
                }, "입금기한"), React.createElement("span", {
                  className: "text-base font-bold xl:text-sm"
                }, Format(new Date(match$3.expiredAt), "yyyy/MM/dd HH:mm"))));
  } else {
    tmp = null;
  }
  return React.createElement("section", {
              className: "flex flex-col rounded-sm bg-white w-full p-7 gap-7"
            }, React.createElement(Web_Order_Complete_Payment_Info_Buyer$ResponsiveTitle, {
                  deviceType: deviceType,
                  title: "결제 정보"
                }), React.createElement("ul", {
                  className: "text-sm flex flex-col gap-5"
                }, React.createElement("li", {
                      key: "payment-method",
                      className: "flex justify-between items-center h-6"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "결제 수단"), React.createElement("span", {
                          className: "text-base font-bold xl:text-sm"
                        }, paymentMethodToString(Belt_Option.flatMap(payment, (function (p) {
                                    return p.paymentMethod;
                                  }))))), React.createElement("li", {
                      key: "total-price",
                      className: "flex justify-between items-center h-6"
                    }, React.createElement("span", {
                          className: "text-text-L2"
                        }, "총 결제금액"), React.createElement(Web_Order_Complete_Payment_Info_Buyer$ResponsiveTitle, {
                          deviceType: deviceType,
                          title: "" + Locale.Int.show(undefined, match$2[0] + match$2[1] | 0) + "원",
                          textColor: "text-primary"
                        })), tmp));
}

var make = Web_Order_Complete_Payment_Info_Buyer;

export {
  Fragment ,
  paymentMethodToString ,
  makePrice ,
  ResponsiveTitle ,
  Placeholder ,
  make ,
}
/* react Not a pure module */
