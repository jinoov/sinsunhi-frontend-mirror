// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as FetchHelper from "./FetchHelper.mjs";

function responseData_encode(v) {
  return Js_dict.fromArray([[
                "url",
                Spice.stringToJson(v.url)
              ]]);
}

function responseData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var url = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict._0, "url"), null));
  if (url.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              url: url._0
            }
          };
  }
  var e = url._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".url" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function response_encode(v) {
  return Js_dict.fromArray([
              [
                "message",
                Spice.stringToJson(v.message)
              ],
              [
                "data",
                responseData_encode(v.data)
              ]
            ]);
}

function response_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
  if (message.TAG === /* Ok */0) {
    var data = responseData_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
    if (data.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                message: message._0,
                data: data._0
              }
            };
    }
    var e = data._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".data" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = message._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".message" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function upload(userId, kind, file, onSuccess, onFailure, param) {
  var filename = file.name;
  var url;
  if (userId !== undefined) {
    switch (kind) {
      case /* Seller */0 :
          url = Env.restApiUrl + "/order/delivery/upload-url?file-name=" + filename + "&user-id=" + userId;
          break;
      case /* Buyer */1 :
          url = Env.restApiUrl + "/order/upload-url?file-name=" + filename + "&user-id=" + userId;
          break;
      case /* AfterPay */2 :
          url = Env.restApiUrl + "/order/upload-url?file-name=" + filename + "&user-id=" + userId + "&pay-type=AFTER_PAY";
          break;
      case /* Admin */3 :
          url = Env.restApiUrl + "/offlineOrder/upload-url?file-name=" + filename + "&user-id=" + userId;
          break;
      
    }
  } else {
    switch (kind) {
      case /* Seller */0 :
          url = Env.restApiUrl + "/order/delivery/upload-url?file-name=" + filename;
          break;
      case /* Buyer */1 :
          url = Env.restApiUrl + "/order/upload-url?file-name=" + filename;
          break;
      case /* AfterPay */2 :
          url = Env.restApiUrl + "/order/upload-url?file-name=" + filename + "&pay-type=AFTER_PAY";
          break;
      case /* Admin */3 :
          url = Env.restApiUrl + "/offline-order/upload-url?file-name=" + filename;
          break;
      
    }
  }
  return FetchHelper.fetchWithRetry(FetchHelper.getWithToken, url, undefined, 3).then(function (json) {
                var response = response_decode(json);
                if (response.TAG === /* Ok */0) {
                  return FetchHelper.fetchWithRetry(FetchHelper.putWithFile, response._0.data.url, file, 3).then(function (res) {
                                return Promise.resolve(Curry._1(onSuccess, res));
                              }).catch(function (err) {
                              return Promise.resolve(Curry._1(onFailure, err));
                            });
                }
                var err = response._0;
                console.log(err);
                return Promise.resolve(Curry._1(onFailure, err.message));
              }).catch(function (err) {
              console.log(err);
              return Promise.resolve(Curry._1(onFailure, err));
            });
}

function responseDataBulkSale_encode(v) {
  return Js_dict.fromArray([
              [
                "url",
                Spice.stringToJson(v.url)
              ],
              [
                "path",
                Spice.stringToJson(v.path)
              ]
            ]);
}

function responseDataBulkSale_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var url = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "url"), null));
  if (url.TAG === /* Ok */0) {
    var path = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "path"), null));
    if (path.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                url: url._0,
                path: path._0
              }
            };
    }
    var e = path._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".path" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = url._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".url" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function uploadBulkSale(file, farmmorningUserId, onSuccess, onFailure, param) {
  var filename = file.name;
  var url = Env.restApiUrl + "/farmmorning-bridge/api/bulk-sale/product-sale-ledger/issue-s3-put-url?filename=" + filename + "&farmmorning-user-id=" + farmmorningUserId;
  return FetchHelper.fetchWithRetry(FetchHelper.getWithToken, url, undefined, 3).then(function (json) {
                var response = responseDataBulkSale_decode(json);
                if (response.TAG === /* Ok */0) {
                  var response$1 = response._0;
                  return FetchHelper.fetchWithRetry(FetchHelper.putWithFileAsAttachment, response$1.url, file, 3).then(function (_res) {
                                return Promise.resolve(Curry._1(onSuccess, response$1.path));
                              }).catch(function (err) {
                              return Promise.resolve(Curry._1(onFailure, err));
                            });
                }
                var err = response._0;
                console.log(err);
                return Promise.resolve(Curry._1(onFailure, err.message));
              }).catch(function (err) {
              console.log(err);
              return Promise.resolve(Curry._1(onFailure, err));
            });
}

function uploadImage(file, original, thumb1920, onSuccess, onFailure, param) {
  return FetchHelper.fetchWithRetry(FetchHelper.putWithFile, original, file, 3).then(function (_res) {
                  return FetchHelper.fetchWithIntervalRetry(FetchHelper.getProcessedImage, thumb1920, "", 10, 3000).then(function (res) {
                                return Promise.resolve(res);
                              }).catch(function (err) {
                              return Promise.reject(err);
                            });
                }).then(function (res) {
                return Promise.resolve(Curry._1(onSuccess, res));
              }).catch(function (err) {
              return Promise.resolve(Curry._1(onFailure, err));
            });
}

export {
  responseData_encode ,
  responseData_decode ,
  response_encode ,
  response_decode ,
  upload ,
  responseDataBulkSale_encode ,
  responseDataBulkSale_decode ,
  uploadBulkSale ,
  uploadImage ,
  
}
/* Env Not a pure module */
