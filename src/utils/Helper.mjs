// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Garter_Array from "@greenlabs/garter/src/Garter_Array.mjs";

function map2(xs, ys, f) {
  return Belt_Option.flatMap(xs, (function (x) {
                return Belt_Option.map(ys, (function (y) {
                              return Curry._2(f, x, y);
                            }));
              }));
}

function sequence(xs) {
  return Belt_Array.reduce(xs, [], (function (a, x) {
                return map2(a, x, (function (a, x) {
                              return Belt_Array.concat(a, [x]);
                            }));
              }));
}

function traverse(xs, f) {
  return sequence(Belt_Array.map(xs, f));
}

function alt(a, b) {
  if (a !== undefined) {
    return a;
  } else if (b !== undefined) {
    return b;
  } else {
    return ;
  }
}

function map2$1(xs, ys, f) {
  return Belt_Result.flatMap(xs, (function (x) {
                return Belt_Result.map(ys, (function (y) {
                              return Curry._2(f, x, y);
                            }));
              }));
}

function sequence$1(xs) {
  return Belt_Array.reduce(xs, {
              TAG: /* Ok */0,
              _0: []
            }, (function (a, x) {
                return map2$1(a, x, (function (a, x) {
                              return Belt_Array.concat(a, [x]);
                            }));
              }));
}

function parseFilename(value) {
  return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.map(Caml_option.null_to_opt(new RegExp("filename\\*?=['\"]?(?:UTF-\\d['\"]*)?([^;\r\n\"']*)['\"]?;?").exec(value)), (function (prim) {
                        return prim;
                      })), (function (strings) {
                    return Garter_Array.get(strings, 1);
                  })), (function (filename) {
                if (filename == null) {
                  return ;
                } else {
                  return Caml_option.some(filename);
                }
              }));
}

var Filename = {
  parseFilename: parseFilename
};

function cleanup(v) {
  return v.replace(/[^0-9a-zA-Z\-\_]/g, "").replace("--", "-").replace("__", "_").replace("-_", "-").replace("_-", "_");
}

var Invoice = {
  cleanup: cleanup
};

var regexOfMobile = new RegExp("^(010|011|016|017|018|019)([0-9]{3,4})([0-9]{4})$");

var regexOfLocalLine = new RegExp("^(02|031|032|033|041|042|043|044|051|052|053|054|055|061|062|063|064)([0-9]{3,4})([0-9]{4})");

var regexOfVoIP = new RegExp("^(070)([0-9]{3,4})([0-9]{4})");

var regexOfONO = new RegExp("^(050\\d|060\\d)([0-9]{3,4})([0-9]{4})");

var regexs = [
  {
    TAG: /* Mobile */0,
    _0: regexOfMobile
  },
  {
    TAG: /* LocalLine */1,
    _0: regexOfLocalLine
  },
  {
    TAG: /* VoIP */2,
    _0: regexOfVoIP
  },
  {
    TAG: /* ONO */3,
    _0: regexOfONO
  }
];

function removeDash(phoneNumber) {
  return phoneNumber.replace(new RegExp("\\-", "g"), "");
}

function extract(regex, s) {
  switch (regex.TAG | 0) {
    case /* Mobile */0 :
        if (regex._0.test(s)) {
          return {
                  TAG: /* Mobile */0,
                  _0: s
                };
        } else {
          return ;
        }
    case /* LocalLine */1 :
        if (regex._0.test(s)) {
          return {
                  TAG: /* LocalLine */1,
                  _0: s
                };
        } else {
          return ;
        }
    case /* VoIP */2 :
        if (regex._0.test(s)) {
          return {
                  TAG: /* VoIP */2,
                  _0: s
                };
        } else {
          return ;
        }
    case /* ONO */3 :
        if (regex._0.test(s)) {
          return {
                  TAG: /* ONO */3,
                  _0: s
                };
        } else {
          return ;
        }
    
  }
}

function parse(s) {
  return Belt_Array.reduce(regexs, undefined, (function (acc, regex) {
                return alt(acc, extract(regex, s));
              }));
}

function formatByRe(phoneNumber, regex) {
  return Belt_Option.map(Belt_Option.flatMap(Belt_Option.map(Caml_option.null_to_opt(regex.exec(phoneNumber)), (function (result) {
                        return Belt_Array.map(result, (function (prim) {
                                      if (prim == null) {
                                        return ;
                                      } else {
                                        return Caml_option.some(prim);
                                      }
                                    }));
                      })), sequence), (function (arr) {
                return Belt_Array.sliceToEnd(arr, 1).join("-");
              }));
}

function format(kind) {
  switch (kind.TAG | 0) {
    case /* Mobile */0 :
        return formatByRe(kind._0, regexOfMobile);
    case /* LocalLine */1 :
        return formatByRe(kind._0, regexOfLocalLine);
    case /* VoIP */2 :
        return formatByRe(kind._0, regexOfVoIP);
    case /* ONO */3 :
        return formatByRe(kind._0, regexOfONO);
    
  }
}

function make1(fun, $$await) {
  var timeoutId = {
    contents: undefined
  };
  return function (args) {
    Belt_Option.map(timeoutId.contents, (function (id$p) {
            clearTimeout(id$p);
            timeoutId.contents = undefined;
            
          }));
    return new Promise((function (resolve, reject) {
                  timeoutId.contents = Caml_option.some(setTimeout((function (param) {
                              var __x = Curry._1(fun, args);
                              var __x$1 = __x.then(function (res) {
                                    return Promise.resolve(resolve(res));
                                  });
                              __x$1.catch(function (error) {
                                    return Promise.resolve(reject(new Error(error)));
                                  });
                              
                            }), $$await));
                  
                }));
  };
}

var Debounce = {
  make1: make1
};

var $$Option = {
  map2: map2,
  sequence: sequence,
  traverse: traverse,
  alt: alt
};

var Result = {
  map2: map2$1,
  sequence: sequence$1
};

var PhoneNumber = {
  removeDash: removeDash,
  parse: parse,
  format: format
};

export {
  $$Option ,
  Result ,
  Filename ,
  Invoice ,
  PhoneNumber ,
  Debounce ,
  
}
/* regexOfMobile Not a pure module */
