// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import Swr from "swr";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.mjs";
import * as React from "react";
import * as Global from "../components/Global.mjs";
import * as Helper from "./Helper.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Redirect from "../components/Redirect.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import JwtDecode from "jwt-decode";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as FetchHelper from "./FetchHelper.mjs";
import * as Router from "next/router";
import * as DetectBrowser from "detect-browser";
import * as LocalStorageHooks from "./LocalStorageHooks.mjs";

function useSetPassword(token) {
  var match = React.useState(function () {
        return /* Hide */1;
      });
  var setShowSetPassword = match[1];
  React.useEffect((function () {
          if (token !== undefined) {
            setShowSetPassword(function (param) {
                  return /* Show */0;
                });
          }
          return (function (param) {
                    return setShowSetPassword(function (param) {
                                return /* Hide */1;
                              });
                  });
        }), [token]);
  return [
          match[0],
          setShowSetPassword
        ];
}

function useDebounce(value, delay) {
  var match = React.useState(function () {
        return value;
      });
  var setDebouncedValue = match[1];
  React.useEffect((function () {
          var handler = setTimeout((function (param) {
                  return setDebouncedValue(function (param) {
                              return value;
                            });
                }), delay);
          return (function (param) {
                    clearTimeout(handler);
                    
                  });
        }), [value]);
  return [
          match[0],
          setDebouncedValue
        ];
}

function useScrollObserver(thresholds, sensitive) {
  var match = React.useState(function () {
        return /* Hidden */1;
      });
  var setVisible = match[1];
  var match$1 = React.useState(function () {
        return window.scrollY;
      });
  var setPrevScrollPos = match$1[1];
  var prevScrollPos = match$1[0];
  var match$2 = useDebounce(prevScrollPos, Belt_Option.getWithDefault(sensitive, 300));
  var debounceValue = match$2[0];
  var match$3 = React.useState(function () {
        return 0.0;
      });
  var setScrollDiff = match$3[1];
  var match$4 = React.useState(function () {
        return /* ScrollStop */0;
      });
  var setScrollDirection = match$4[1];
  var handleScrollEvent = function (param) {
    var currentScrollTop = window.scrollY;
    return Belt_Option.forEach(Caml_option.nullable_to_opt(document.querySelector("body")), (function (body) {
                  var isVisible;
                  isVisible = thresholds.TAG === /* Pct */0 ? currentScrollTop / body.clientHeight >= thresholds._0 : currentScrollTop >= thresholds._0;
                  Curry._1(setPrevScrollPos, (function (param) {
                          return window.scrollY;
                        }));
                  if (isVisible) {
                    return Curry._1(setVisible, (function (param) {
                                  return /* Visible */0;
                                }));
                  } else {
                    return Curry._1(setVisible, (function (param) {
                                  return /* Hidden */1;
                                }));
                  }
                }));
  };
  React.useLayoutEffect((function () {
          var diff = window.scrollY - debounceValue;
          if (diff > 0.0) {
            Curry._1(setScrollDirection, (function (param) {
                    return /* ScrollDown */1;
                  }));
            Curry._1(setScrollDiff, (function (param) {
                    return diff;
                  }));
          } else if (diff < 0.0) {
            Curry._1(setScrollDirection, (function (param) {
                    return /* ScrollUp */2;
                  }));
            Curry._1(setScrollDiff, (function (param) {
                    return diff;
                  }));
          } else {
            Curry._1(setScrollDirection, (function (param) {
                    return /* ScrollStop */0;
                  }));
            Curry._1(setScrollDiff, (function (param) {
                    return diff;
                  }));
          }
          
        }), [prevScrollPos]);
  React.useLayoutEffect((function () {
          window.addEventListener("scroll", handleScrollEvent);
          return (function (param) {
                    window.removeEventListener("scroll", handleScrollEvent);
                    
                  });
        }), [
        handleScrollEvent,
        thresholds
      ]);
  return [
          match[0],
          match$4[0],
          match$3[0],
          window.scrollY
        ];
}

var Scroll = {
  useScrollObserver: useScrollObserver
};

function onErrorRetry(error, _key, _config, revalidate, param) {
  var retryCount = param.retryCount;
  if (error.status === 401) {
    FetchHelper.refreshToken(undefined).catch(function (err) {
          console.log(err);
          return Promise.resolve(undefined);
        });
  }
  if (retryCount > 3) {
    return ;
  }
  var revalidateOptions = {
    retryCount: retryCount
  };
  setTimeout((function (param) {
          Curry._1(revalidate, revalidateOptions);
          
        }), 500);
  
}

function use(root, target, thresholds, rootMargin, param) {
  var match = React.useState(function () {
        return false;
      });
  var setIntersecting = match[1];
  React.useEffect((function () {
          var t = target.current;
          if (t == null) {
            return ;
          }
          var observer = new IntersectionObserver((function (entries) {
                  if (Belt_Array.every(entries, (function (e) {
                            return e.isIntersecting;
                          }))) {
                    return setIntersecting(function (param) {
                                return true;
                              });
                  } else {
                    return setIntersecting(function (param) {
                                return false;
                              });
                  }
                }), {
                root: root !== undefined ? root.current : null,
                rootMargin: rootMargin,
                thresholds: thresholds
              });
          observer.observe(t);
          return (function (param) {
                    observer.unobserve(t);
                    
                  });
        }), [
        root,
        target,
        thresholds,
        rootMargin
      ]);
  return match[0];
}

var $$IntersectionObserver$1 = {
  use: use
};

function encoderRole(v) {
  switch (v) {
    case /* Seller */0 :
        return "farmer";
    case /* Buyer */1 :
        return "buyer";
    case /* Admin */2 :
        return "admin";
    
  }
}

function decoderRole(json) {
  var str = Js_json.classify(json);
  if (typeof str === "number") {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONString",
              value: json
            }
          };
  }
  if (str.TAG !== /* JSONString */0) {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONString",
              value: json
            }
          };
  }
  switch (str._0) {
    case "admin" :
        return {
                TAG: /* Ok */0,
                _0: /* Admin */2
              };
    case "buyer" :
        return {
                TAG: /* Ok */0,
                _0: /* Buyer */1
              };
    case "farmer" :
        return {
                TAG: /* Ok */0,
                _0: /* Seller */0
              };
    default:
      return {
              TAG: /* Error */1,
              _0: {
                path: "",
                message: "Expected JSONString",
                value: json
              }
            };
  }
}

var codecRole = [
  encoderRole,
  decoderRole
];

function user_encode(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.intToJson(v.id)
              ],
              [
                "uid",
                Spice.stringToJson(v.uid)
              ],
              [
                "email",
                Spice.optionToJson(Spice.stringToJson, v.email)
              ],
              [
                "role",
                encoderRole(v.role)
              ],
              [
                "address",
                Spice.optionToJson(Spice.stringToJson, v.address)
              ],
              [
                "phone",
                Spice.optionToJson(Spice.stringToJson, v.phone)
              ],
              [
                "name",
                Spice.stringToJson(v.name)
              ],
              [
                "business-registration-number",
                Spice.optionToJson(Spice.stringToJson, v.businessRegistrationNumber)
              ],
              [
                "producer-type",
                Spice.optionToJson(Spice.stringToJson, v.producerType)
              ],
              [
                "producer-code",
                Spice.optionToJson(Spice.stringToJson, v.producerCode)
              ],
              [
                "zip-code",
                Spice.optionToJson(Spice.stringToJson, v.zipCode)
              ]
            ]);
}

function user_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var uid = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "uid"), null));
    if (uid.TAG === /* Ok */0) {
      var email = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "email"), null));
      if (email.TAG === /* Ok */0) {
        var role = decoderRole(Belt_Option.getWithDefault(Js_dict.get(dict$1, "role"), null));
        if (role.TAG === /* Ok */0) {
          var address = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "address"), null));
          if (address.TAG === /* Ok */0) {
            var phone = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "phone"), null));
            if (phone.TAG === /* Ok */0) {
              var name = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
              if (name.TAG === /* Ok */0) {
                var businessRegistrationNumber = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "business-registration-number"), null));
                if (businessRegistrationNumber.TAG === /* Ok */0) {
                  var producerType = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-type"), null));
                  if (producerType.TAG === /* Ok */0) {
                    var producerCode = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-code"), null));
                    if (producerCode.TAG === /* Ok */0) {
                      var zipCode = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "zip-code"), null));
                      if (zipCode.TAG === /* Ok */0) {
                        return {
                                TAG: /* Ok */0,
                                _0: {
                                  id: id._0,
                                  uid: uid._0,
                                  email: email._0,
                                  role: role._0,
                                  address: address._0,
                                  phone: phone._0,
                                  name: name._0,
                                  businessRegistrationNumber: businessRegistrationNumber._0,
                                  producerType: producerType._0,
                                  producerCode: producerCode._0,
                                  zipCode: zipCode._0
                                }
                              };
                      }
                      var e = zipCode._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".zip-code" + e.path,
                                message: e.message,
                                value: e.value
                              }
                            };
                    }
                    var e$1 = producerCode._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".producer-code" + e$1.path,
                              message: e$1.message,
                              value: e$1.value
                            }
                          };
                  }
                  var e$2 = producerType._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".producer-type" + e$2.path,
                            message: e$2.message,
                            value: e$2.value
                          }
                        };
                }
                var e$3 = businessRegistrationNumber._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".business-registration-number" + e$3.path,
                          message: e$3.message,
                          value: e$3.value
                        }
                      };
              }
              var e$4 = name._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".name" + e$4.path,
                        message: e$4.message,
                        value: e$4.value
                      }
                    };
            }
            var e$5 = phone._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".phone" + e$5.path,
                      message: e$5.message,
                      value: e$5.value
                    }
                  };
          }
          var e$6 = address._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".address" + e$6.path,
                    message: e$6.message,
                    value: e$6.value
                  }
                };
        }
        var e$7 = role._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".role" + e$7.path,
                  message: e$7.message,
                  value: e$7.value
                }
              };
      }
      var e$8 = email._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".email" + e$8.path,
                message: e$8.message,
                value: e$8.value
              }
            };
    }
    var e$9 = uid._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".uid" + e$9.path,
              message: e$9.message,
              value: e$9.value
            }
          };
  }
  var e$10 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$10.path,
            message: e$10.message,
            value: e$10.value
          }
        };
}

function toOption(u) {
  if (typeof u === "number") {
    return ;
  } else {
    return u._0;
  }
}

function use$1(param) {
  var match = React.useState(function () {
        return /* Unknown */0;
      });
  var setToken = match[1];
  React.useEffect((function () {
          var accessToken = Curry._1(LocalStorageHooks.AccessToken.get, undefined);
          if (accessToken === "") {
            setToken(function (param) {
                  return /* NotLoggedIn */1;
                });
          } else {
            var user = user_decode(JwtDecode(accessToken));
            if (user.TAG === /* Ok */0) {
              var user$1 = user._0;
              setToken(function (param) {
                    return /* LoggedIn */{
                            _0: user$1
                          };
                  });
            } else {
              setToken(function (param) {
                    return /* NotLoggedIn */1;
                  });
            }
          }
          
        }), []);
  return match[0];
}

function logOut(param) {
  Curry._1(LocalStorageHooks.AccessToken.remove, undefined);
  return Curry._1(LocalStorageHooks.RefreshToken.remove, undefined);
}

var Auth = {
  encoderRole: encoderRole,
  decoderRole: decoderRole,
  codecRole: codecRole,
  user_encode: user_encode,
  user_decode: user_decode,
  toOption: toOption,
  use: use$1,
  logOut: logOut
};

function use$2(param) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        return /* Unknown */0;
      });
  var setStatus = match[1];
  var user = use$1(undefined);
  React.useEffect((function () {
          if (typeof user === "number") {
            if (user !== 0) {
              Redirect.setHref("/seller/signin?redirect=" + router.asPath);
            } else {
              setStatus(function (param) {
                    return user;
                  });
            }
          } else {
            var match = user._0.role;
            switch (match) {
              case /* Seller */0 :
                  setStatus(function (param) {
                        return user;
                      });
                  break;
              case /* Buyer */1 :
                  Redirect.setHref("/buyer");
                  break;
              case /* Admin */2 :
                  Redirect.setHref("/admin");
                  break;
              
            }
          }
          
        }), [
        user,
        router.asPath
      ]);
  return match[0];
}

var Seller = {
  use: use$2
};

function use$3(param) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        return /* Unknown */0;
      });
  var setStatus = match[1];
  var user = use$1(undefined);
  React.useEffect((function () {
          if (typeof user === "number") {
            if (user !== 0) {
              Redirect.setHref("/buyer/signin?redirect=" + router.asPath);
            } else {
              setStatus(function (param) {
                    return /* Unknown */0;
                  });
            }
          } else {
            var match = user._0.role;
            switch (match) {
              case /* Seller */0 :
                  Redirect.setHref("/seller");
                  break;
              case /* Buyer */1 :
                  setStatus(function (param) {
                        return user;
                      });
                  break;
              case /* Admin */2 :
                  Redirect.setHref("/admin/");
                  break;
              
            }
          }
          
        }), [
        user,
        router.asPath
      ]);
  return match[0];
}

function use2(param) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        return /* Unknown */0;
      });
  var setStatus = match[1];
  var user = use$1(undefined);
  React.useEffect((function () {
          setStatus(function (param) {
                return user;
              });
          
        }), [
        user,
        router.query
      ]);
  return match[0];
}

var Buyer = {
  use: use$3,
  use2: use2
};

function use$4(param) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        return /* Unknown */0;
      });
  var setStatus = match[1];
  var user = use$1(undefined);
  React.useEffect((function () {
          if (typeof user === "number") {
            if (user !== 0) {
              Redirect.setHref("/admin/signin?redirect=" + router.asPath);
            } else {
              setStatus(function (param) {
                    return user;
                  });
            }
          } else {
            var match = user._0.role;
            switch (match) {
              case /* Seller */0 :
                  Redirect.setHref("/seller/");
                  break;
              case /* Buyer */1 :
                  Redirect.setHref("/buyer");
                  break;
              case /* Admin */2 :
                  setStatus(function (param) {
                        return user;
                      });
                  break;
              
            }
          }
          
        }), [
        user,
        router.asPath
      ]);
  return match[0];
}

var Admin = {
  use: use$4
};

var User = {
  Seller: Seller,
  Buyer: Buyer,
  Admin: Admin
};

function roleToString(r) {
  switch (r) {
    case /* Seller */0 :
        return "seller";
    case /* Buyer */1 :
        return "buyer";
    case /* Admin */2 :
        return "admin";
    
  }
}

function use$5(param) {
  var user = use$1(undefined);
  React.useEffect((function () {
          if (Global.$$window !== undefined && typeof user !== "number") {
            var user$1 = user._0;
            Caml_option.valFromOption(Global.$$window).user = {
              id: user$1.id,
              name: user$1.name,
              email: user$1.email,
              role: roleToString(user$1.role)
            };
          }
          return (function (param) {
                    if (Global.$$window !== undefined) {
                      Caml_option.valFromOption(Global.$$window).user = undefined;
                      return ;
                    }
                    
                  });
        }), [user]);
  
}

var CRMUser = {
  roleToString: roleToString,
  use: use$5
};

function orderStatus_encode(v) {
  switch (v) {
    case /* PROCESSING */0 :
        return "PROCESSING";
    case /* SUCCESS */1 :
        return "SUCCESS";
    case /* FAIL */2 :
        return "FAIL";
    case /* COMPLETE */3 :
        return "COMPLETE";
    
  }
}

function orderStatus_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("PROCESSING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PROCESSING */0
          };
  } else if ("SUCCESS" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SUCCESS */1
          };
  } else if ("FAIL" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* FAIL */2
          };
  } else if ("COMPLETE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* COMPLETE */3
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function status_encode(v) {
  switch (v) {
    case /* CREATE */0 :
        return "CREATE";
    case /* PACKING */1 :
        return "PACKING";
    case /* DEPARTURE */2 :
        return "DEPARTURE";
    case /* DELIVERING */3 :
        return "DELIVERING";
    case /* COMPLETE */4 :
        return "COMPLETE";
    case /* CANCEL */5 :
        return "CANCEL";
    case /* ERROR */6 :
        return "ERROR";
    case /* REFUND */7 :
        return "REFUND";
    case /* NEGOTIATING */8 :
        return "NEGOTIATING";
    
  }
}

function status_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("CREATE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CREATE */0
          };
  } else if ("PACKING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PACKING */1
          };
  } else if ("DEPARTURE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DEPARTURE */2
          };
  } else if ("DELIVERING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DELIVERING */3
          };
  } else if ("COMPLETE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* COMPLETE */4
          };
  } else if ("CANCEL" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CANCEL */5
          };
  } else if ("ERROR" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ERROR */6
          };
  } else if ("REFUND" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* REFUND */7
          };
  } else if ("NEGOTIATING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* NEGOTIATING */8
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function payType_encode(v) {
  if (v) {
    return "AFTER_PAY";
  } else {
    return "PAID";
  }
}

function payType_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("PAID" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PAID */0
          };
  } else if ("AFTER_PAY" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* AFTER_PAY */1
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function deliveryType_encode(v) {
  switch (v) {
    case /* SELF */0 :
        return "SELF";
    case /* FREIGHT */1 :
        return "FREIGHT";
    case /* PARCEL */2 :
        return "PARCEL";
    
  }
}

function deliveryType_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("SELF" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SELF */0
          };
  } else if ("FREIGHT" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* FREIGHT */1
          };
  } else if ("PARCEL" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PARCEL */2
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function order_encode(v) {
  return Js_dict.fromArray([
              [
                "courier-code",
                Spice.optionToJson(Spice.stringToJson, v.courierCode)
              ],
              [
                "delivery-date",
                Spice.optionToJson(Spice.stringToJson, v.deliveryDate)
              ],
              [
                "delivery-message",
                Spice.optionToJson(Spice.stringToJson, v.deliveryMessage)
              ],
              [
                "delivery-type",
                Spice.optionToJson(deliveryType_encode, v.deliveryType)
              ],
              [
                "error-code",
                Spice.optionToJson(Spice.stringToJson, v.errorCode)
              ],
              [
                "error-message",
                Spice.optionToJson(Spice.stringToJson, v.errorMessage)
              ],
              [
                "invoice",
                Spice.optionToJson(Spice.stringToJson, v.invoice)
              ],
              [
                "order-date",
                Spice.stringToJson(v.orderDate)
              ],
              [
                "order-no",
                Spice.stringToJson(v.orderNo)
              ],
              [
                "order-product-no",
                Spice.stringToJson(v.orderProductNo)
              ],
              [
                "order-status",
                orderStatus_encode(v.orderStatus)
              ],
              [
                "product-id",
                Spice.intToJson(v.productId)
              ],
              [
                "product-sku",
                Spice.stringToJson(v.productSku)
              ],
              [
                "product-name",
                Spice.stringToJson(v.productName)
              ],
              [
                "product-option-name",
                Spice.optionToJson(Spice.stringToJson, v.productOptionName)
              ],
              [
                "product-price",
                Spice.floatToJson(v.productPrice)
              ],
              [
                "quantity",
                Spice.intToJson(v.quantity)
              ],
              [
                "orderer-name",
                Spice.optionToJson(Spice.stringToJson, v.ordererName)
              ],
              [
                "orderer-phone",
                Spice.optionToJson(Spice.stringToJson, v.ordererPhone)
              ],
              [
                "receiver-address",
                Spice.optionToJson(Spice.stringToJson, v.receiverAddress)
              ],
              [
                "receiver-name",
                Spice.optionToJson(Spice.stringToJson, v.receiverName)
              ],
              [
                "receiver-phone",
                Spice.optionToJson(Spice.stringToJson, v.receiverPhone)
              ],
              [
                "receiver-zipcode",
                Spice.optionToJson(Spice.stringToJson, v.receiverZipcode)
              ],
              [
                "status",
                status_encode(v.status)
              ],
              [
                "courier-name",
                Spice.optionToJson(Spice.stringToJson, v.driverName)
              ],
              [
                "courier-phone",
                Spice.optionToJson(Spice.stringToJson, v.driverPhone)
              ],
              [
                "is-shipped",
                Spice.boolToJson(v.isShipped)
              ],
              [
                "is-delivered",
                Spice.boolToJson(v.isDelivered)
              ],
              [
                "inspector-name",
                Spice.optionToJson(Spice.stringToJson, v.inspectorName)
              ],
              [
                "is-inspected",
                Spice.boolToJson(v.isInspected)
              ],
              [
                "inspection-opinion",
                Spice.optionToJson(Spice.stringToJson, v.inspectionOpinion)
              ],
              [
                "pay-type",
                v.payType ? "AFTER_PAY" : "PAID"
              ]
            ]);
}

function order_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var courierCode = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "courier-code"), null));
  if (courierCode.TAG === /* Ok */0) {
    var deliveryDate = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "delivery-date"), null));
    if (deliveryDate.TAG === /* Ok */0) {
      var deliveryMessage = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "delivery-message"), null));
      if (deliveryMessage.TAG === /* Ok */0) {
        var deliveryType = Spice.optionFromJson(deliveryType_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "delivery-type"), null));
        if (deliveryType.TAG === /* Ok */0) {
          var errorCode = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "error-code"), null));
          if (errorCode.TAG === /* Ok */0) {
            var errorMessage = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "error-message"), null));
            if (errorMessage.TAG === /* Ok */0) {
              var invoice = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "invoice"), null));
              if (invoice.TAG === /* Ok */0) {
                var orderDate = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-date"), null));
                if (orderDate.TAG === /* Ok */0) {
                  var orderNo = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-no"), null));
                  if (orderNo.TAG === /* Ok */0) {
                    var orderProductNo = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-product-no"), null));
                    if (orderProductNo.TAG === /* Ok */0) {
                      var orderStatus = orderStatus_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-status"), null));
                      if (orderStatus.TAG === /* Ok */0) {
                        var productId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-id"), null));
                        if (productId.TAG === /* Ok */0) {
                          var productSku = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-sku"), null));
                          if (productSku.TAG === /* Ok */0) {
                            var productName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-name"), null));
                            if (productName.TAG === /* Ok */0) {
                              var productOptionName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-option-name"), null));
                              if (productOptionName.TAG === /* Ok */0) {
                                var productPrice = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-price"), null));
                                if (productPrice.TAG === /* Ok */0) {
                                  var quantity = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "quantity"), null));
                                  if (quantity.TAG === /* Ok */0) {
                                    var ordererName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "orderer-name"), null));
                                    if (ordererName.TAG === /* Ok */0) {
                                      var ordererPhone = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "orderer-phone"), null));
                                      if (ordererPhone.TAG === /* Ok */0) {
                                        var receiverAddress = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiver-address"), null));
                                        if (receiverAddress.TAG === /* Ok */0) {
                                          var receiverName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiver-name"), null));
                                          if (receiverName.TAG === /* Ok */0) {
                                            var receiverPhone = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiver-phone"), null));
                                            if (receiverPhone.TAG === /* Ok */0) {
                                              var receiverZipcode = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiver-zipcode"), null));
                                              if (receiverZipcode.TAG === /* Ok */0) {
                                                var status = status_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "status"), null));
                                                if (status.TAG === /* Ok */0) {
                                                  var driverName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "courier-name"), null));
                                                  if (driverName.TAG === /* Ok */0) {
                                                    var driverPhone = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "courier-phone"), null));
                                                    if (driverPhone.TAG === /* Ok */0) {
                                                      var isShipped = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "is-shipped"), null));
                                                      if (isShipped.TAG === /* Ok */0) {
                                                        var isDelivered = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "is-delivered"), null));
                                                        if (isDelivered.TAG === /* Ok */0) {
                                                          var inspectorName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "inspector-name"), null));
                                                          if (inspectorName.TAG === /* Ok */0) {
                                                            var isInspected = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "is-inspected"), null));
                                                            if (isInspected.TAG === /* Ok */0) {
                                                              var inspectionOpinion = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "inspection-opinion"), null));
                                                              if (inspectionOpinion.TAG === /* Ok */0) {
                                                                var payType = payType_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "pay-type"), null));
                                                                if (payType.TAG === /* Ok */0) {
                                                                  return {
                                                                          TAG: /* Ok */0,
                                                                          _0: {
                                                                            courierCode: courierCode._0,
                                                                            deliveryDate: deliveryDate._0,
                                                                            deliveryMessage: deliveryMessage._0,
                                                                            deliveryType: deliveryType._0,
                                                                            errorCode: errorCode._0,
                                                                            errorMessage: errorMessage._0,
                                                                            invoice: invoice._0,
                                                                            orderDate: orderDate._0,
                                                                            orderNo: orderNo._0,
                                                                            orderProductNo: orderProductNo._0,
                                                                            orderStatus: orderStatus._0,
                                                                            productId: productId._0,
                                                                            productSku: productSku._0,
                                                                            productName: productName._0,
                                                                            productOptionName: productOptionName._0,
                                                                            productPrice: productPrice._0,
                                                                            quantity: quantity._0,
                                                                            ordererName: ordererName._0,
                                                                            ordererPhone: ordererPhone._0,
                                                                            receiverAddress: receiverAddress._0,
                                                                            receiverName: receiverName._0,
                                                                            receiverPhone: receiverPhone._0,
                                                                            receiverZipcode: receiverZipcode._0,
                                                                            status: status._0,
                                                                            driverName: driverName._0,
                                                                            driverPhone: driverPhone._0,
                                                                            isShipped: isShipped._0,
                                                                            isDelivered: isDelivered._0,
                                                                            inspectorName: inspectorName._0,
                                                                            isInspected: isInspected._0,
                                                                            inspectionOpinion: inspectionOpinion._0,
                                                                            payType: payType._0
                                                                          }
                                                                        };
                                                                }
                                                                var e = payType._0;
                                                                return {
                                                                        TAG: /* Error */1,
                                                                        _0: {
                                                                          path: ".pay-type" + e.path,
                                                                          message: e.message,
                                                                          value: e.value
                                                                        }
                                                                      };
                                                              }
                                                              var e$1 = inspectionOpinion._0;
                                                              return {
                                                                      TAG: /* Error */1,
                                                                      _0: {
                                                                        path: ".inspection-opinion" + e$1.path,
                                                                        message: e$1.message,
                                                                        value: e$1.value
                                                                      }
                                                                    };
                                                            }
                                                            var e$2 = isInspected._0;
                                                            return {
                                                                    TAG: /* Error */1,
                                                                    _0: {
                                                                      path: ".is-inspected" + e$2.path,
                                                                      message: e$2.message,
                                                                      value: e$2.value
                                                                    }
                                                                  };
                                                          }
                                                          var e$3 = inspectorName._0;
                                                          return {
                                                                  TAG: /* Error */1,
                                                                  _0: {
                                                                    path: ".inspector-name" + e$3.path,
                                                                    message: e$3.message,
                                                                    value: e$3.value
                                                                  }
                                                                };
                                                        }
                                                        var e$4 = isDelivered._0;
                                                        return {
                                                                TAG: /* Error */1,
                                                                _0: {
                                                                  path: ".is-delivered" + e$4.path,
                                                                  message: e$4.message,
                                                                  value: e$4.value
                                                                }
                                                              };
                                                      }
                                                      var e$5 = isShipped._0;
                                                      return {
                                                              TAG: /* Error */1,
                                                              _0: {
                                                                path: ".is-shipped" + e$5.path,
                                                                message: e$5.message,
                                                                value: e$5.value
                                                              }
                                                            };
                                                    }
                                                    var e$6 = driverPhone._0;
                                                    return {
                                                            TAG: /* Error */1,
                                                            _0: {
                                                              path: ".courier-phone" + e$6.path,
                                                              message: e$6.message,
                                                              value: e$6.value
                                                            }
                                                          };
                                                  }
                                                  var e$7 = driverName._0;
                                                  return {
                                                          TAG: /* Error */1,
                                                          _0: {
                                                            path: ".courier-name" + e$7.path,
                                                            message: e$7.message,
                                                            value: e$7.value
                                                          }
                                                        };
                                                }
                                                var e$8 = status._0;
                                                return {
                                                        TAG: /* Error */1,
                                                        _0: {
                                                          path: ".status" + e$8.path,
                                                          message: e$8.message,
                                                          value: e$8.value
                                                        }
                                                      };
                                              }
                                              var e$9 = receiverZipcode._0;
                                              return {
                                                      TAG: /* Error */1,
                                                      _0: {
                                                        path: ".receiver-zipcode" + e$9.path,
                                                        message: e$9.message,
                                                        value: e$9.value
                                                      }
                                                    };
                                            }
                                            var e$10 = receiverPhone._0;
                                            return {
                                                    TAG: /* Error */1,
                                                    _0: {
                                                      path: ".receiver-phone" + e$10.path,
                                                      message: e$10.message,
                                                      value: e$10.value
                                                    }
                                                  };
                                          }
                                          var e$11 = receiverName._0;
                                          return {
                                                  TAG: /* Error */1,
                                                  _0: {
                                                    path: ".receiver-name" + e$11.path,
                                                    message: e$11.message,
                                                    value: e$11.value
                                                  }
                                                };
                                        }
                                        var e$12 = receiverAddress._0;
                                        return {
                                                TAG: /* Error */1,
                                                _0: {
                                                  path: ".receiver-address" + e$12.path,
                                                  message: e$12.message,
                                                  value: e$12.value
                                                }
                                              };
                                      }
                                      var e$13 = ordererPhone._0;
                                      return {
                                              TAG: /* Error */1,
                                              _0: {
                                                path: ".orderer-phone" + e$13.path,
                                                message: e$13.message,
                                                value: e$13.value
                                              }
                                            };
                                    }
                                    var e$14 = ordererName._0;
                                    return {
                                            TAG: /* Error */1,
                                            _0: {
                                              path: ".orderer-name" + e$14.path,
                                              message: e$14.message,
                                              value: e$14.value
                                            }
                                          };
                                  }
                                  var e$15 = quantity._0;
                                  return {
                                          TAG: /* Error */1,
                                          _0: {
                                            path: ".quantity" + e$15.path,
                                            message: e$15.message,
                                            value: e$15.value
                                          }
                                        };
                                }
                                var e$16 = productPrice._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: ".product-price" + e$16.path,
                                          message: e$16.message,
                                          value: e$16.value
                                        }
                                      };
                              }
                              var e$17 = productOptionName._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: ".product-option-name" + e$17.path,
                                        message: e$17.message,
                                        value: e$17.value
                                      }
                                    };
                            }
                            var e$18 = productName._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".product-name" + e$18.path,
                                      message: e$18.message,
                                      value: e$18.value
                                    }
                                  };
                          }
                          var e$19 = productSku._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".product-sku" + e$19.path,
                                    message: e$19.message,
                                    value: e$19.value
                                  }
                                };
                        }
                        var e$20 = productId._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".product-id" + e$20.path,
                                  message: e$20.message,
                                  value: e$20.value
                                }
                              };
                      }
                      var e$21 = orderStatus._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".order-status" + e$21.path,
                                message: e$21.message,
                                value: e$21.value
                              }
                            };
                    }
                    var e$22 = orderProductNo._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".order-product-no" + e$22.path,
                              message: e$22.message,
                              value: e$22.value
                            }
                          };
                  }
                  var e$23 = orderNo._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".order-no" + e$23.path,
                            message: e$23.message,
                            value: e$23.value
                          }
                        };
                }
                var e$24 = orderDate._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".order-date" + e$24.path,
                          message: e$24.message,
                          value: e$24.value
                        }
                      };
              }
              var e$25 = invoice._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".invoice" + e$25.path,
                        message: e$25.message,
                        value: e$25.value
                      }
                    };
            }
            var e$26 = errorMessage._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".error-message" + e$26.path,
                      message: e$26.message,
                      value: e$26.value
                    }
                  };
          }
          var e$27 = errorCode._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".error-code" + e$27.path,
                    message: e$27.message,
                    value: e$27.value
                  }
                };
        }
        var e$28 = deliveryType._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".delivery-type" + e$28.path,
                  message: e$28.message,
                  value: e$28.value
                }
              };
      }
      var e$29 = deliveryMessage._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".delivery-message" + e$29.path,
                message: e$29.message,
                value: e$29.value
              }
            };
    }
    var e$30 = deliveryDate._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".delivery-date" + e$30.path,
              message: e$30.message,
              value: e$30.value
            }
          };
  }
  var e$31 = courierCode._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".courier-code" + e$31.path,
            message: e$31.message,
            value: e$31.value
          }
        };
}

function orders_encode(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(order_encode, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ]
            ]);
}

function orders_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(order_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
      if (offset.TAG === /* Ok */0) {
        var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
        if (limit.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    data: data._0,
                    count: count._0,
                    offset: offset._0,
                    limit: limit._0
                  }
                };
        }
        var e = limit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".limit" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = offset._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".offset" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function use$6(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/order?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var Orders = {
  orderStatus_encode: orderStatus_encode,
  orderStatus_decode: orderStatus_decode,
  status_encode: status_encode,
  status_decode: status_decode,
  payType_encode: payType_encode,
  payType_decode: payType_decode,
  deliveryType_encode: deliveryType_encode,
  deliveryType_decode: deliveryType_decode,
  order_encode: order_encode,
  order_decode: order_decode,
  orders_encode: orders_encode,
  orders_decode: orders_decode,
  use: use$6
};

function orderStatus_encode$1(v) {
  switch (v) {
    case /* PROCESSING */0 :
        return "PROCESSING";
    case /* SUCCESS */1 :
        return "SUCCESS";
    case /* FAIL */2 :
        return "FAIL";
    case /* COMPLETE */3 :
        return "COMPLETE";
    
  }
}

function orderStatus_decode$1(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("PROCESSING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PROCESSING */0
          };
  } else if ("SUCCESS" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SUCCESS */1
          };
  } else if ("FAIL" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* FAIL */2
          };
  } else if ("COMPLETE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* COMPLETE */3
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function status_encode$1(v) {
  switch (v) {
    case /* CREATE */0 :
        return "CREATE";
    case /* PACKING */1 :
        return "PACKING";
    case /* DEPARTURE */2 :
        return "DEPARTURE";
    case /* DELIVERING */3 :
        return "DELIVERING";
    case /* COMPLETE */4 :
        return "COMPLETE";
    case /* CANCEL */5 :
        return "CANCEL";
    case /* ERROR */6 :
        return "ERROR";
    case /* REFUND */7 :
        return "REFUND";
    case /* NEGOTIATING */8 :
        return "NEGOTIATING";
    
  }
}

function status_decode$1(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("CREATE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CREATE */0
          };
  } else if ("PACKING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PACKING */1
          };
  } else if ("DEPARTURE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DEPARTURE */2
          };
  } else if ("DELIVERING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DELIVERING */3
          };
  } else if ("COMPLETE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* COMPLETE */4
          };
  } else if ("CANCEL" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CANCEL */5
          };
  } else if ("ERROR" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ERROR */6
          };
  } else if ("REFUND" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* REFUND */7
          };
  } else if ("NEGOTIATING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* NEGOTIATING */8
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function payType_encode$1(v) {
  if (v) {
    return "AFTER_PAY";
  } else {
    return "PAID";
  }
}

function payType_decode$1(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("PAID" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PAID */0
          };
  } else if ("AFTER_PAY" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* AFTER_PAY */1
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function refundReason_encode(v) {
  if (v) {
    return "order-refund-defective-product";
  } else {
    return "order-refund-delivery-delayed";
  }
}

function refundReason_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("order-refund-delivery-delayed" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DeliveryDelayed */0
          };
  } else if ("order-refund-defective-product" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DefectiveProduct */1
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function deliveryType_encode$1(v) {
  switch (v) {
    case /* SELF */0 :
        return "SELF";
    case /* FREIGHT */1 :
        return "FREIGHT";
    case /* PARCEL */2 :
        return "PARCEL";
    
  }
}

function deliveryType_decode$1(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("SELF" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SELF */0
          };
  } else if ("FREIGHT" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* FREIGHT */1
          };
  } else if ("PARCEL" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PARCEL */2
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function order_encode$1(v) {
  return Js_dict.fromArray([
              [
                "admin-memo",
                Spice.optionToJson(Spice.stringToJson, v.adminMemo)
              ],
              [
                "buyer-email",
                Spice.stringToJson(v.buyerEmail)
              ],
              [
                "buyer-name",
                Spice.stringToJson(v.buyerName)
              ],
              [
                "buyer-phone",
                Spice.stringToJson(v.buyerPhone)
              ],
              [
                "courier-code",
                Spice.optionToJson(Spice.stringToJson, v.courierCode)
              ],
              [
                "delivery-date",
                Spice.optionToJson(Spice.stringToJson, v.deliveryDate)
              ],
              [
                "delivery-message",
                Spice.optionToJson(Spice.stringToJson, v.deliveryMessage)
              ],
              [
                "delivery-type",
                Spice.optionToJson(deliveryType_encode$1, v.deliveryType)
              ],
              [
                "desired-delivery-date",
                Spice.optionToJson(Spice.stringToJson, v.desiredDeliveryDate)
              ],
              [
                "error-code",
                Spice.optionToJson(Spice.stringToJson, v.errorCode)
              ],
              [
                "error-message",
                Spice.optionToJson(Spice.stringToJson, v.errorMessage)
              ],
              [
                "farmer-email",
                Spice.optionToJson(Spice.stringToJson, v.farmerEmail)
              ],
              [
                "farmer-name",
                Spice.stringToJson(v.farmerName)
              ],
              [
                "farmer-phone",
                Spice.stringToJson(v.farmerPhone)
              ],
              [
                "invoice",
                Spice.optionToJson(Spice.stringToJson, v.invoice)
              ],
              [
                "order-date",
                Spice.stringToJson(v.orderDate)
              ],
              [
                "order-no",
                Spice.stringToJson(v.orderNo)
              ],
              [
                "order-product-no",
                Spice.stringToJson(v.orderProductNo)
              ],
              [
                "order-status",
                orderStatus_encode$1(v.orderStatus)
              ],
              [
                "product-id",
                Spice.intToJson(v.productId)
              ],
              [
                "product-sku",
                Spice.stringToJson(v.productSku)
              ],
              [
                "product-name",
                Spice.stringToJson(v.productName)
              ],
              [
                "product-option-name",
                Spice.optionToJson(Spice.stringToJson, v.productOptionName)
              ],
              [
                "product-price",
                Spice.floatToJson(v.productPrice)
              ],
              [
                "quantity",
                Spice.intToJson(v.quantity)
              ],
              [
                "orderer-name",
                Spice.optionToJson(Spice.stringToJson, v.ordererName)
              ],
              [
                "orderer-phone",
                Spice.optionToJson(Spice.stringToJson, v.ordererPhone)
              ],
              [
                "receiver-address",
                Spice.optionToJson(Spice.stringToJson, v.receiverAddress)
              ],
              [
                "receiver-name",
                Spice.optionToJson(Spice.stringToJson, v.receiverName)
              ],
              [
                "receiver-phone",
                Spice.optionToJson(Spice.stringToJson, v.receiverPhone)
              ],
              [
                "receiver-zipcode",
                Spice.optionToJson(Spice.stringToJson, v.receiverZipcode)
              ],
              [
                "status",
                status_encode$1(v.status)
              ],
              [
                "refund-requestor-id",
                Spice.optionToJson(Spice.intToJson, v.refundRequestorId)
              ],
              [
                "refund-requestor-name",
                Spice.optionToJson(Spice.stringToJson, v.refundRequestorName)
              ],
              [
                "refund-reason",
                Spice.optionToJson(Spice.stringToJson, v.refundReason)
              ],
              [
                "courier-name",
                Spice.optionToJson(Spice.stringToJson, v.driverName)
              ],
              [
                "courier-phone",
                Spice.optionToJson(Spice.stringToJson, v.driverPhone)
              ],
              [
                "is-shipped",
                Spice.boolToJson(v.isShipped)
              ],
              [
                "is-delivered",
                Spice.boolToJson(v.isDelivered)
              ],
              [
                "inspector-name",
                Spice.optionToJson(Spice.stringToJson, v.inspectorName)
              ],
              [
                "is-inspected",
                Spice.boolToJson(v.isInspected)
              ],
              [
                "inspection-opinion",
                Spice.optionToJson(Spice.stringToJson, v.inspectionOpinion)
              ],
              [
                "pay-type",
                v.payType ? "AFTER_PAY" : "PAID"
              ]
            ]);
}

function order_decode$1(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var adminMemo = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "admin-memo"), null));
  if (adminMemo.TAG === /* Ok */0) {
    var buyerEmail = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyer-email"), null));
    if (buyerEmail.TAG === /* Ok */0) {
      var buyerName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyer-name"), null));
      if (buyerName.TAG === /* Ok */0) {
        var buyerPhone = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyer-phone"), null));
        if (buyerPhone.TAG === /* Ok */0) {
          var courierCode = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "courier-code"), null));
          if (courierCode.TAG === /* Ok */0) {
            var deliveryDate = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "delivery-date"), null));
            if (deliveryDate.TAG === /* Ok */0) {
              var deliveryMessage = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "delivery-message"), null));
              if (deliveryMessage.TAG === /* Ok */0) {
                var deliveryType = Spice.optionFromJson(deliveryType_decode$1, Belt_Option.getWithDefault(Js_dict.get(dict$1, "delivery-type"), null));
                if (deliveryType.TAG === /* Ok */0) {
                  var desiredDeliveryDate = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "desired-delivery-date"), null));
                  if (desiredDeliveryDate.TAG === /* Ok */0) {
                    var errorCode = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "error-code"), null));
                    if (errorCode.TAG === /* Ok */0) {
                      var errorMessage = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "error-message"), null));
                      if (errorMessage.TAG === /* Ok */0) {
                        var farmerEmail = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "farmer-email"), null));
                        if (farmerEmail.TAG === /* Ok */0) {
                          var farmerName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "farmer-name"), null));
                          if (farmerName.TAG === /* Ok */0) {
                            var farmerPhone = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "farmer-phone"), null));
                            if (farmerPhone.TAG === /* Ok */0) {
                              var invoice = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "invoice"), null));
                              if (invoice.TAG === /* Ok */0) {
                                var orderDate = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-date"), null));
                                if (orderDate.TAG === /* Ok */0) {
                                  var orderNo = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-no"), null));
                                  if (orderNo.TAG === /* Ok */0) {
                                    var orderProductNo = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-product-no"), null));
                                    if (orderProductNo.TAG === /* Ok */0) {
                                      var orderStatus = orderStatus_decode$1(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-status"), null));
                                      if (orderStatus.TAG === /* Ok */0) {
                                        var productId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-id"), null));
                                        if (productId.TAG === /* Ok */0) {
                                          var productSku = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-sku"), null));
                                          if (productSku.TAG === /* Ok */0) {
                                            var productName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-name"), null));
                                            if (productName.TAG === /* Ok */0) {
                                              var productOptionName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-option-name"), null));
                                              if (productOptionName.TAG === /* Ok */0) {
                                                var productPrice = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-price"), null));
                                                if (productPrice.TAG === /* Ok */0) {
                                                  var quantity = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "quantity"), null));
                                                  if (quantity.TAG === /* Ok */0) {
                                                    var ordererName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "orderer-name"), null));
                                                    if (ordererName.TAG === /* Ok */0) {
                                                      var ordererPhone = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "orderer-phone"), null));
                                                      if (ordererPhone.TAG === /* Ok */0) {
                                                        var receiverAddress = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiver-address"), null));
                                                        if (receiverAddress.TAG === /* Ok */0) {
                                                          var receiverName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiver-name"), null));
                                                          if (receiverName.TAG === /* Ok */0) {
                                                            var receiverPhone = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiver-phone"), null));
                                                            if (receiverPhone.TAG === /* Ok */0) {
                                                              var receiverZipcode = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiver-zipcode"), null));
                                                              if (receiverZipcode.TAG === /* Ok */0) {
                                                                var status = status_decode$1(Belt_Option.getWithDefault(Js_dict.get(dict$1, "status"), null));
                                                                if (status.TAG === /* Ok */0) {
                                                                  var refundRequestorId = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "refund-requestor-id"), null));
                                                                  if (refundRequestorId.TAG === /* Ok */0) {
                                                                    var refundRequestorName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "refund-requestor-name"), null));
                                                                    if (refundRequestorName.TAG === /* Ok */0) {
                                                                      var refundReason = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "refund-reason"), null));
                                                                      if (refundReason.TAG === /* Ok */0) {
                                                                        var driverName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "courier-name"), null));
                                                                        if (driverName.TAG === /* Ok */0) {
                                                                          var driverPhone = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "courier-phone"), null));
                                                                          if (driverPhone.TAG === /* Ok */0) {
                                                                            var isShipped = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "is-shipped"), null));
                                                                            if (isShipped.TAG === /* Ok */0) {
                                                                              var isDelivered = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "is-delivered"), null));
                                                                              if (isDelivered.TAG === /* Ok */0) {
                                                                                var inspectorName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "inspector-name"), null));
                                                                                if (inspectorName.TAG === /* Ok */0) {
                                                                                  var isInspected = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "is-inspected"), null));
                                                                                  if (isInspected.TAG === /* Ok */0) {
                                                                                    var inspectionOpinion = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "inspection-opinion"), null));
                                                                                    if (inspectionOpinion.TAG === /* Ok */0) {
                                                                                      var payType = payType_decode$1(Belt_Option.getWithDefault(Js_dict.get(dict$1, "pay-type"), null));
                                                                                      if (payType.TAG === /* Ok */0) {
                                                                                        return {
                                                                                                TAG: /* Ok */0,
                                                                                                _0: {
                                                                                                  adminMemo: adminMemo._0,
                                                                                                  buyerEmail: buyerEmail._0,
                                                                                                  buyerName: buyerName._0,
                                                                                                  buyerPhone: buyerPhone._0,
                                                                                                  courierCode: courierCode._0,
                                                                                                  deliveryDate: deliveryDate._0,
                                                                                                  deliveryMessage: deliveryMessage._0,
                                                                                                  deliveryType: deliveryType._0,
                                                                                                  desiredDeliveryDate: desiredDeliveryDate._0,
                                                                                                  errorCode: errorCode._0,
                                                                                                  errorMessage: errorMessage._0,
                                                                                                  farmerEmail: farmerEmail._0,
                                                                                                  farmerName: farmerName._0,
                                                                                                  farmerPhone: farmerPhone._0,
                                                                                                  invoice: invoice._0,
                                                                                                  orderDate: orderDate._0,
                                                                                                  orderNo: orderNo._0,
                                                                                                  orderProductNo: orderProductNo._0,
                                                                                                  orderStatus: orderStatus._0,
                                                                                                  productId: productId._0,
                                                                                                  productSku: productSku._0,
                                                                                                  productName: productName._0,
                                                                                                  productOptionName: productOptionName._0,
                                                                                                  productPrice: productPrice._0,
                                                                                                  quantity: quantity._0,
                                                                                                  ordererName: ordererName._0,
                                                                                                  ordererPhone: ordererPhone._0,
                                                                                                  receiverAddress: receiverAddress._0,
                                                                                                  receiverName: receiverName._0,
                                                                                                  receiverPhone: receiverPhone._0,
                                                                                                  receiverZipcode: receiverZipcode._0,
                                                                                                  status: status._0,
                                                                                                  refundRequestorId: refundRequestorId._0,
                                                                                                  refundRequestorName: refundRequestorName._0,
                                                                                                  refundReason: refundReason._0,
                                                                                                  driverName: driverName._0,
                                                                                                  driverPhone: driverPhone._0,
                                                                                                  isShipped: isShipped._0,
                                                                                                  isDelivered: isDelivered._0,
                                                                                                  inspectorName: inspectorName._0,
                                                                                                  isInspected: isInspected._0,
                                                                                                  inspectionOpinion: inspectionOpinion._0,
                                                                                                  payType: payType._0
                                                                                                }
                                                                                              };
                                                                                      }
                                                                                      var e = payType._0;
                                                                                      return {
                                                                                              TAG: /* Error */1,
                                                                                              _0: {
                                                                                                path: ".pay-type" + e.path,
                                                                                                message: e.message,
                                                                                                value: e.value
                                                                                              }
                                                                                            };
                                                                                    }
                                                                                    var e$1 = inspectionOpinion._0;
                                                                                    return {
                                                                                            TAG: /* Error */1,
                                                                                            _0: {
                                                                                              path: ".inspection-opinion" + e$1.path,
                                                                                              message: e$1.message,
                                                                                              value: e$1.value
                                                                                            }
                                                                                          };
                                                                                  }
                                                                                  var e$2 = isInspected._0;
                                                                                  return {
                                                                                          TAG: /* Error */1,
                                                                                          _0: {
                                                                                            path: ".is-inspected" + e$2.path,
                                                                                            message: e$2.message,
                                                                                            value: e$2.value
                                                                                          }
                                                                                        };
                                                                                }
                                                                                var e$3 = inspectorName._0;
                                                                                return {
                                                                                        TAG: /* Error */1,
                                                                                        _0: {
                                                                                          path: ".inspector-name" + e$3.path,
                                                                                          message: e$3.message,
                                                                                          value: e$3.value
                                                                                        }
                                                                                      };
                                                                              }
                                                                              var e$4 = isDelivered._0;
                                                                              return {
                                                                                      TAG: /* Error */1,
                                                                                      _0: {
                                                                                        path: ".is-delivered" + e$4.path,
                                                                                        message: e$4.message,
                                                                                        value: e$4.value
                                                                                      }
                                                                                    };
                                                                            }
                                                                            var e$5 = isShipped._0;
                                                                            return {
                                                                                    TAG: /* Error */1,
                                                                                    _0: {
                                                                                      path: ".is-shipped" + e$5.path,
                                                                                      message: e$5.message,
                                                                                      value: e$5.value
                                                                                    }
                                                                                  };
                                                                          }
                                                                          var e$6 = driverPhone._0;
                                                                          return {
                                                                                  TAG: /* Error */1,
                                                                                  _0: {
                                                                                    path: ".courier-phone" + e$6.path,
                                                                                    message: e$6.message,
                                                                                    value: e$6.value
                                                                                  }
                                                                                };
                                                                        }
                                                                        var e$7 = driverName._0;
                                                                        return {
                                                                                TAG: /* Error */1,
                                                                                _0: {
                                                                                  path: ".courier-name" + e$7.path,
                                                                                  message: e$7.message,
                                                                                  value: e$7.value
                                                                                }
                                                                              };
                                                                      }
                                                                      var e$8 = refundReason._0;
                                                                      return {
                                                                              TAG: /* Error */1,
                                                                              _0: {
                                                                                path: ".refund-reason" + e$8.path,
                                                                                message: e$8.message,
                                                                                value: e$8.value
                                                                              }
                                                                            };
                                                                    }
                                                                    var e$9 = refundRequestorName._0;
                                                                    return {
                                                                            TAG: /* Error */1,
                                                                            _0: {
                                                                              path: ".refund-requestor-name" + e$9.path,
                                                                              message: e$9.message,
                                                                              value: e$9.value
                                                                            }
                                                                          };
                                                                  }
                                                                  var e$10 = refundRequestorId._0;
                                                                  return {
                                                                          TAG: /* Error */1,
                                                                          _0: {
                                                                            path: ".refund-requestor-id" + e$10.path,
                                                                            message: e$10.message,
                                                                            value: e$10.value
                                                                          }
                                                                        };
                                                                }
                                                                var e$11 = status._0;
                                                                return {
                                                                        TAG: /* Error */1,
                                                                        _0: {
                                                                          path: ".status" + e$11.path,
                                                                          message: e$11.message,
                                                                          value: e$11.value
                                                                        }
                                                                      };
                                                              }
                                                              var e$12 = receiverZipcode._0;
                                                              return {
                                                                      TAG: /* Error */1,
                                                                      _0: {
                                                                        path: ".receiver-zipcode" + e$12.path,
                                                                        message: e$12.message,
                                                                        value: e$12.value
                                                                      }
                                                                    };
                                                            }
                                                            var e$13 = receiverPhone._0;
                                                            return {
                                                                    TAG: /* Error */1,
                                                                    _0: {
                                                                      path: ".receiver-phone" + e$13.path,
                                                                      message: e$13.message,
                                                                      value: e$13.value
                                                                    }
                                                                  };
                                                          }
                                                          var e$14 = receiverName._0;
                                                          return {
                                                                  TAG: /* Error */1,
                                                                  _0: {
                                                                    path: ".receiver-name" + e$14.path,
                                                                    message: e$14.message,
                                                                    value: e$14.value
                                                                  }
                                                                };
                                                        }
                                                        var e$15 = receiverAddress._0;
                                                        return {
                                                                TAG: /* Error */1,
                                                                _0: {
                                                                  path: ".receiver-address" + e$15.path,
                                                                  message: e$15.message,
                                                                  value: e$15.value
                                                                }
                                                              };
                                                      }
                                                      var e$16 = ordererPhone._0;
                                                      return {
                                                              TAG: /* Error */1,
                                                              _0: {
                                                                path: ".orderer-phone" + e$16.path,
                                                                message: e$16.message,
                                                                value: e$16.value
                                                              }
                                                            };
                                                    }
                                                    var e$17 = ordererName._0;
                                                    return {
                                                            TAG: /* Error */1,
                                                            _0: {
                                                              path: ".orderer-name" + e$17.path,
                                                              message: e$17.message,
                                                              value: e$17.value
                                                            }
                                                          };
                                                  }
                                                  var e$18 = quantity._0;
                                                  return {
                                                          TAG: /* Error */1,
                                                          _0: {
                                                            path: ".quantity" + e$18.path,
                                                            message: e$18.message,
                                                            value: e$18.value
                                                          }
                                                        };
                                                }
                                                var e$19 = productPrice._0;
                                                return {
                                                        TAG: /* Error */1,
                                                        _0: {
                                                          path: ".product-price" + e$19.path,
                                                          message: e$19.message,
                                                          value: e$19.value
                                                        }
                                                      };
                                              }
                                              var e$20 = productOptionName._0;
                                              return {
                                                      TAG: /* Error */1,
                                                      _0: {
                                                        path: ".product-option-name" + e$20.path,
                                                        message: e$20.message,
                                                        value: e$20.value
                                                      }
                                                    };
                                            }
                                            var e$21 = productName._0;
                                            return {
                                                    TAG: /* Error */1,
                                                    _0: {
                                                      path: ".product-name" + e$21.path,
                                                      message: e$21.message,
                                                      value: e$21.value
                                                    }
                                                  };
                                          }
                                          var e$22 = productSku._0;
                                          return {
                                                  TAG: /* Error */1,
                                                  _0: {
                                                    path: ".product-sku" + e$22.path,
                                                    message: e$22.message,
                                                    value: e$22.value
                                                  }
                                                };
                                        }
                                        var e$23 = productId._0;
                                        return {
                                                TAG: /* Error */1,
                                                _0: {
                                                  path: ".product-id" + e$23.path,
                                                  message: e$23.message,
                                                  value: e$23.value
                                                }
                                              };
                                      }
                                      var e$24 = orderStatus._0;
                                      return {
                                              TAG: /* Error */1,
                                              _0: {
                                                path: ".order-status" + e$24.path,
                                                message: e$24.message,
                                                value: e$24.value
                                              }
                                            };
                                    }
                                    var e$25 = orderProductNo._0;
                                    return {
                                            TAG: /* Error */1,
                                            _0: {
                                              path: ".order-product-no" + e$25.path,
                                              message: e$25.message,
                                              value: e$25.value
                                            }
                                          };
                                  }
                                  var e$26 = orderNo._0;
                                  return {
                                          TAG: /* Error */1,
                                          _0: {
                                            path: ".order-no" + e$26.path,
                                            message: e$26.message,
                                            value: e$26.value
                                          }
                                        };
                                }
                                var e$27 = orderDate._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: ".order-date" + e$27.path,
                                          message: e$27.message,
                                          value: e$27.value
                                        }
                                      };
                              }
                              var e$28 = invoice._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: ".invoice" + e$28.path,
                                        message: e$28.message,
                                        value: e$28.value
                                      }
                                    };
                            }
                            var e$29 = farmerPhone._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".farmer-phone" + e$29.path,
                                      message: e$29.message,
                                      value: e$29.value
                                    }
                                  };
                          }
                          var e$30 = farmerName._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".farmer-name" + e$30.path,
                                    message: e$30.message,
                                    value: e$30.value
                                  }
                                };
                        }
                        var e$31 = farmerEmail._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".farmer-email" + e$31.path,
                                  message: e$31.message,
                                  value: e$31.value
                                }
                              };
                      }
                      var e$32 = errorMessage._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".error-message" + e$32.path,
                                message: e$32.message,
                                value: e$32.value
                              }
                            };
                    }
                    var e$33 = errorCode._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".error-code" + e$33.path,
                              message: e$33.message,
                              value: e$33.value
                            }
                          };
                  }
                  var e$34 = desiredDeliveryDate._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".desired-delivery-date" + e$34.path,
                            message: e$34.message,
                            value: e$34.value
                          }
                        };
                }
                var e$35 = deliveryType._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".delivery-type" + e$35.path,
                          message: e$35.message,
                          value: e$35.value
                        }
                      };
              }
              var e$36 = deliveryMessage._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".delivery-message" + e$36.path,
                        message: e$36.message,
                        value: e$36.value
                      }
                    };
            }
            var e$37 = deliveryDate._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".delivery-date" + e$37.path,
                      message: e$37.message,
                      value: e$37.value
                    }
                  };
          }
          var e$38 = courierCode._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".courier-code" + e$38.path,
                    message: e$38.message,
                    value: e$38.value
                  }
                };
        }
        var e$39 = buyerPhone._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".buyer-phone" + e$39.path,
                  message: e$39.message,
                  value: e$39.value
                }
              };
      }
      var e$40 = buyerName._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".buyer-name" + e$40.path,
                message: e$40.message,
                value: e$40.value
              }
            };
    }
    var e$41 = buyerEmail._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".buyer-email" + e$41.path,
              message: e$41.message,
              value: e$41.value
            }
          };
  }
  var e$42 = adminMemo._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".admin-memo" + e$42.path,
            message: e$42.message,
            value: e$42.value
          }
        };
}

function orders_encode$1(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(order_encode$1, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ]
            ]);
}

function orders_decode$1(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(order_decode$1, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
      if (offset.TAG === /* Ok */0) {
        var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
        if (limit.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    data: data._0,
                    count: count._0,
                    offset: offset._0,
                    limit: limit._0
                  }
                };
        }
        var e = limit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".limit" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = offset._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".offset" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function use$7(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/order?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var OrdersAdmin = {
  orderStatus_encode: orderStatus_encode$1,
  orderStatus_decode: orderStatus_decode$1,
  status_encode: status_encode$1,
  status_decode: status_decode$1,
  payType_encode: payType_encode$1,
  payType_decode: payType_decode$1,
  refundReason_encode: refundReason_encode,
  refundReason_decode: refundReason_decode,
  deliveryType_encode: deliveryType_encode$1,
  deliveryType_decode: deliveryType_decode$1,
  order_encode: order_encode$1,
  order_decode: order_decode$1,
  orders_encode: orders_encode$1,
  orders_decode: orders_decode$1,
  use: use$7
};

function orderType_encode(v) {
  if (v) {
    return "오프라인";
  } else {
    return "온라인";
  }
}

function orderType_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("온라인" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Online */0
          };
  } else if ("오프라인" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Offline */1
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function order_encode$2(v) {
  return Js_dict.fromArray([
              [
                "no",
                Spice.intToJson(v.no)
              ],
              [
                "order-date",
                Spice.stringToJson(v.orderDate)
              ],
              [
                "order-type",
                v.orderType ? "오프라인" : "온라인"
              ],
              [
                "producer-name",
                Spice.optionToJson(Spice.stringToJson, v.producerName)
              ],
              [
                "buyer-name",
                Spice.optionToJson(Spice.stringToJson, v.buyerName)
              ],
              [
                "total-price",
                Spice.floatToJson(v.totalPrice)
              ],
              [
                "order-no",
                Spice.optionToJson(Spice.stringToJson, v.orderNo)
              ],
              [
                "product-category",
                Spice.stringToJson(v.productCategory)
              ],
              [
                "product-name",
                Spice.stringToJson(v.productName)
              ],
              [
                "product-option-name",
                Spice.optionToJson(Spice.stringToJson, v.productOptionName)
              ]
            ]);
}

function order_decode$2(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var no = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "no"), null));
  if (no.TAG === /* Ok */0) {
    var orderDate = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-date"), null));
    if (orderDate.TAG === /* Ok */0) {
      var orderType = orderType_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-type"), null));
      if (orderType.TAG === /* Ok */0) {
        var producerName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-name"), null));
        if (producerName.TAG === /* Ok */0) {
          var buyerName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyer-name"), null));
          if (buyerName.TAG === /* Ok */0) {
            var totalPrice = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-price"), null));
            if (totalPrice.TAG === /* Ok */0) {
              var orderNo = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-no"), null));
              if (orderNo.TAG === /* Ok */0) {
                var productCategory = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-category"), null));
                if (productCategory.TAG === /* Ok */0) {
                  var productName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-name"), null));
                  if (productName.TAG === /* Ok */0) {
                    var productOptionName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-option-name"), null));
                    if (productOptionName.TAG === /* Ok */0) {
                      return {
                              TAG: /* Ok */0,
                              _0: {
                                no: no._0,
                                orderDate: orderDate._0,
                                orderType: orderType._0,
                                producerName: producerName._0,
                                buyerName: buyerName._0,
                                totalPrice: totalPrice._0,
                                orderNo: orderNo._0,
                                productCategory: productCategory._0,
                                productName: productName._0,
                                productOptionName: productOptionName._0
                              }
                            };
                    }
                    var e = productOptionName._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".product-option-name" + e.path,
                              message: e.message,
                              value: e.value
                            }
                          };
                  }
                  var e$1 = productName._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".product-name" + e$1.path,
                            message: e$1.message,
                            value: e$1.value
                          }
                        };
                }
                var e$2 = productCategory._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".product-category" + e$2.path,
                          message: e$2.message,
                          value: e$2.value
                        }
                      };
              }
              var e$3 = orderNo._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".order-no" + e$3.path,
                        message: e$3.message,
                        value: e$3.value
                      }
                    };
            }
            var e$4 = totalPrice._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".total-price" + e$4.path,
                      message: e$4.message,
                      value: e$4.value
                    }
                  };
          }
          var e$5 = buyerName._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".buyer-name" + e$5.path,
                    message: e$5.message,
                    value: e$5.value
                  }
                };
        }
        var e$6 = producerName._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".producer-name" + e$6.path,
                  message: e$6.message,
                  value: e$6.value
                }
              };
      }
      var e$7 = orderType._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".order-type" + e$7.path,
                message: e$7.message,
                value: e$7.value
              }
            };
    }
    var e$8 = orderDate._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".order-date" + e$8.path,
              message: e$8.message,
              value: e$8.value
            }
          };
  }
  var e$9 = no._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".no" + e$9.path,
            message: e$9.message,
            value: e$9.value
          }
        };
}

function orders_encode$2(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(order_encode$2, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ]
            ]);
}

function orders_decode$2(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(order_decode$2, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
      if (offset.TAG === /* Ok */0) {
        var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
        if (limit.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    data: data._0,
                    count: count._0,
                    offset: offset._0,
                    limit: limit._0
                  }
                };
        }
        var e = limit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".limit" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = offset._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".offset" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function use$8(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/order/sc?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var OrdersAllAdmin = {
  orderType_encode: orderType_encode,
  orderType_decode: orderType_decode,
  order_encode: order_encode$2,
  order_decode: order_decode$2,
  orders_encode: orders_encode$2,
  orders_decode: orders_decode$2,
  use: use$8
};

function orderDetail_encode(v) {
  return Js_dict.fromArray([
              [
                "courier-code",
                Spice.optionToJson(Spice.stringToJson, v.courierCode)
              ],
              [
                "delivery-message",
                Spice.optionToJson(Spice.stringToJson, v.deliveryMessage)
              ],
              [
                "etc",
                Spice.optionToJson(Spice.stringToJson, v.etc)
              ],
              [
                "invoice",
                Spice.optionToJson(Spice.stringToJson, v.invoice)
              ],
              [
                "orderer-name",
                Spice.optionToJson(Spice.stringToJson, v.ordererName)
              ],
              [
                "orderer-phone",
                Spice.optionToJson(Spice.stringToJson, v.ordererPhone)
              ],
              [
                "product-id",
                Spice.intToJson(v.productId)
              ],
              [
                "product-name",
                Spice.stringToJson(v.productName)
              ],
              [
                "product-option-name",
                Spice.optionToJson(Spice.stringToJson, v.productOptionName)
              ],
              [
                "product-price",
                Spice.floatToJson(v.productPrice)
              ],
              [
                "product-sku",
                Spice.stringToJson(v.productSku)
              ],
              [
                "quantity",
                Spice.stringToJson(v.quantity)
              ],
              [
                "receiver-address",
                Spice.stringToJson(v.receiverAddress)
              ],
              [
                "receiver-name",
                Spice.stringToJson(v.receiverName)
              ],
              [
                "receiver-phone",
                Spice.stringToJson(v.receiverPhone)
              ],
              [
                "receiver-zipcode",
                Spice.stringToJson(v.receiverZipcode)
              ],
              [
                "seller-code",
                Spice.stringToJson(v.sellerCode)
              ]
            ]);
}

function orderDetail_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var courierCode = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "courier-code"), null));
  if (courierCode.TAG === /* Ok */0) {
    var deliveryMessage = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "delivery-message"), null));
    if (deliveryMessage.TAG === /* Ok */0) {
      var etc = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "etc"), null));
      if (etc.TAG === /* Ok */0) {
        var invoice = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "invoice"), null));
        if (invoice.TAG === /* Ok */0) {
          var ordererName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "orderer-name"), null));
          if (ordererName.TAG === /* Ok */0) {
            var ordererPhone = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "orderer-phone"), null));
            if (ordererPhone.TAG === /* Ok */0) {
              var productId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-id"), null));
              if (productId.TAG === /* Ok */0) {
                var productName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-name"), null));
                if (productName.TAG === /* Ok */0) {
                  var productOptionName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-option-name"), null));
                  if (productOptionName.TAG === /* Ok */0) {
                    var productPrice = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-price"), null));
                    if (productPrice.TAG === /* Ok */0) {
                      var productSku = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-sku"), null));
                      if (productSku.TAG === /* Ok */0) {
                        var quantity = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "quantity"), null));
                        if (quantity.TAG === /* Ok */0) {
                          var receiverAddress = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiver-address"), null));
                          if (receiverAddress.TAG === /* Ok */0) {
                            var receiverName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiver-name"), null));
                            if (receiverName.TAG === /* Ok */0) {
                              var receiverPhone = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiver-phone"), null));
                              if (receiverPhone.TAG === /* Ok */0) {
                                var receiverZipcode = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "receiver-zipcode"), null));
                                if (receiverZipcode.TAG === /* Ok */0) {
                                  var sellerCode = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "seller-code"), null));
                                  if (sellerCode.TAG === /* Ok */0) {
                                    return {
                                            TAG: /* Ok */0,
                                            _0: {
                                              courierCode: courierCode._0,
                                              deliveryMessage: deliveryMessage._0,
                                              etc: etc._0,
                                              invoice: invoice._0,
                                              ordererName: ordererName._0,
                                              ordererPhone: ordererPhone._0,
                                              productId: productId._0,
                                              productName: productName._0,
                                              productOptionName: productOptionName._0,
                                              productPrice: productPrice._0,
                                              productSku: productSku._0,
                                              quantity: quantity._0,
                                              receiverAddress: receiverAddress._0,
                                              receiverName: receiverName._0,
                                              receiverPhone: receiverPhone._0,
                                              receiverZipcode: receiverZipcode._0,
                                              sellerCode: sellerCode._0
                                            }
                                          };
                                  }
                                  var e = sellerCode._0;
                                  return {
                                          TAG: /* Error */1,
                                          _0: {
                                            path: ".seller-code" + e.path,
                                            message: e.message,
                                            value: e.value
                                          }
                                        };
                                }
                                var e$1 = receiverZipcode._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: ".receiver-zipcode" + e$1.path,
                                          message: e$1.message,
                                          value: e$1.value
                                        }
                                      };
                              }
                              var e$2 = receiverPhone._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: ".receiver-phone" + e$2.path,
                                        message: e$2.message,
                                        value: e$2.value
                                      }
                                    };
                            }
                            var e$3 = receiverName._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".receiver-name" + e$3.path,
                                      message: e$3.message,
                                      value: e$3.value
                                    }
                                  };
                          }
                          var e$4 = receiverAddress._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".receiver-address" + e$4.path,
                                    message: e$4.message,
                                    value: e$4.value
                                  }
                                };
                        }
                        var e$5 = quantity._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".quantity" + e$5.path,
                                  message: e$5.message,
                                  value: e$5.value
                                }
                              };
                      }
                      var e$6 = productSku._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".product-sku" + e$6.path,
                                message: e$6.message,
                                value: e$6.value
                              }
                            };
                    }
                    var e$7 = productPrice._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".product-price" + e$7.path,
                              message: e$7.message,
                              value: e$7.value
                            }
                          };
                  }
                  var e$8 = productOptionName._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".product-option-name" + e$8.path,
                            message: e$8.message,
                            value: e$8.value
                          }
                        };
                }
                var e$9 = productName._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".product-name" + e$9.path,
                          message: e$9.message,
                          value: e$9.value
                        }
                      };
              }
              var e$10 = productId._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".product-id" + e$10.path,
                        message: e$10.message,
                        value: e$10.value
                      }
                    };
            }
            var e$11 = ordererPhone._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".orderer-phone" + e$11.path,
                      message: e$11.message,
                      value: e$11.value
                    }
                  };
          }
          var e$12 = ordererName._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".orderer-name" + e$12.path,
                    message: e$12.message,
                    value: e$12.value
                  }
                };
        }
        var e$13 = invoice._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".invoice" + e$13.path,
                  message: e$13.message,
                  value: e$13.value
                }
              };
      }
      var e$14 = etc._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".etc" + e$14.path,
                message: e$14.message,
                value: e$14.value
              }
            };
    }
    var e$15 = deliveryMessage._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".delivery-message" + e$15.path,
              message: e$15.message,
              value: e$15.value
            }
          };
  }
  var e$16 = courierCode._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".courier-code" + e$16.path,
            message: e$16.message,
            value: e$16.value
          }
        };
}

function orderUncompleted_encode(v) {
  return Js_dict.fromArray([
              [
                "current-deposit",
                Spice.floatToJson(v.currentDeposit)
              ],
              [
                "email",
                Spice.stringToJson(v.email)
              ],
              [
                "error-code",
                Spice.optionToJson(Spice.stringToJson, v.errorCode)
              ],
              [
                "error-message",
                Spice.optionToJson(Spice.stringToJson, v.errorMessage)
              ],
              [
                "name",
                Spice.stringToJson(v.name)
              ],
              [
                "order-date",
                Spice.stringToJson(v.orderDate)
              ],
              [
                "order-no",
                Spice.stringToJson(v.orderNo)
              ],
              [
                "phone",
                Spice.stringToJson(v.phone)
              ],
              [
                "price",
                Spice.optionToJson(Spice.floatToJson, v.price)
              ],
              [
                "user-deposit",
                Spice.optionToJson(Spice.floatToJson, v.userDeposit)
              ],
              [
                "data",
                Spice.optionToJson((function (param) {
                        return Spice.arrayToJson(orderDetail_encode, param);
                      }), v.data)
              ]
            ]);
}

function orderUncompleted_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var currentDeposit = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "current-deposit"), null));
  if (currentDeposit.TAG === /* Ok */0) {
    var email = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "email"), null));
    if (email.TAG === /* Ok */0) {
      var errorCode = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "error-code"), null));
      if (errorCode.TAG === /* Ok */0) {
        var errorMessage = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "error-message"), null));
        if (errorMessage.TAG === /* Ok */0) {
          var name = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
          if (name.TAG === /* Ok */0) {
            var orderDate = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-date"), null));
            if (orderDate.TAG === /* Ok */0) {
              var orderNo = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-no"), null));
              if (orderNo.TAG === /* Ok */0) {
                var phone = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "phone"), null));
                if (phone.TAG === /* Ok */0) {
                  var price = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "price"), null));
                  if (price.TAG === /* Ok */0) {
                    var userDeposit = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "user-deposit"), null));
                    if (userDeposit.TAG === /* Ok */0) {
                      var data = Spice.optionFromJson((function (param) {
                              return Spice.arrayFromJson(orderDetail_decode, param);
                            }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
                      if (data.TAG === /* Ok */0) {
                        return {
                                TAG: /* Ok */0,
                                _0: {
                                  currentDeposit: currentDeposit._0,
                                  email: email._0,
                                  errorCode: errorCode._0,
                                  errorMessage: errorMessage._0,
                                  name: name._0,
                                  orderDate: orderDate._0,
                                  orderNo: orderNo._0,
                                  phone: phone._0,
                                  price: price._0,
                                  userDeposit: userDeposit._0,
                                  data: data._0
                                }
                              };
                      }
                      var e = data._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".data" + e.path,
                                message: e.message,
                                value: e.value
                              }
                            };
                    }
                    var e$1 = userDeposit._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".user-deposit" + e$1.path,
                              message: e$1.message,
                              value: e$1.value
                            }
                          };
                  }
                  var e$2 = price._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".price" + e$2.path,
                            message: e$2.message,
                            value: e$2.value
                          }
                        };
                }
                var e$3 = phone._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".phone" + e$3.path,
                          message: e$3.message,
                          value: e$3.value
                        }
                      };
              }
              var e$4 = orderNo._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".order-no" + e$4.path,
                        message: e$4.message,
                        value: e$4.value
                      }
                    };
            }
            var e$5 = orderDate._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".order-date" + e$5.path,
                      message: e$5.message,
                      value: e$5.value
                    }
                  };
          }
          var e$6 = name._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".name" + e$6.path,
                    message: e$6.message,
                    value: e$6.value
                  }
                };
        }
        var e$7 = errorMessage._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".error-message" + e$7.path,
                  message: e$7.message,
                  value: e$7.value
                }
              };
      }
      var e$8 = errorCode._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".error-code" + e$8.path,
                message: e$8.message,
                value: e$8.value
              }
            };
    }
    var e$9 = email._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".email" + e$9.path,
              message: e$9.message,
              value: e$9.value
            }
          };
  }
  var e$10 = currentDeposit._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".current-deposit" + e$10.path,
            message: e$10.message,
            value: e$10.value
          }
        };
}

function orders_encode$3(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(orderUncompleted_encode, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ]
            ]);
}

function orders_decode$3(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(orderUncompleted_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
      if (limit.TAG === /* Ok */0) {
        var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
        if (message.TAG === /* Ok */0) {
          var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
          if (offset.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      data: data._0,
                      count: count._0,
                      limit: limit._0,
                      message: message._0,
                      offset: offset._0
                    }
                  };
          }
          var e = offset._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".offset" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = message._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".message" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = limit._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".limit" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function use$9(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/order/failed?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var OrdersAdminUncompleted = {
  orderDetail_encode: orderDetail_encode,
  orderDetail_decode: orderDetail_decode,
  orderUncompleted_encode: orderUncompleted_encode,
  orderUncompleted_decode: orderUncompleted_decode,
  orders_encode: orders_encode$3,
  orders_decode: orders_decode$3,
  use: use$9
};

function status_encode$2(v) {
  switch (v) {
    case /* CREATE */0 :
        return "CREATE";
    case /* PACKING */1 :
        return "PACKING";
    case /* DEPARTURE */2 :
        return "DEPARTURE";
    case /* DELIVERING */3 :
        return "DELIVERING";
    case /* COMPLETE */4 :
        return "COMPLETE";
    case /* CANCEL */5 :
        return "CANCEL";
    case /* ERROR */6 :
        return "ERROR";
    case /* REFUND */7 :
        return "REFUND";
    case /* NEGOTIATING */8 :
        return "NEGOTIATING";
    
  }
}

function status_decode$2(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("CREATE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CREATE */0
          };
  } else if ("PACKING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PACKING */1
          };
  } else if ("DEPARTURE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DEPARTURE */2
          };
  } else if ("DELIVERING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* DELIVERING */3
          };
  } else if ("COMPLETE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* COMPLETE */4
          };
  } else if ("CANCEL" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CANCEL */5
          };
  } else if ("ERROR" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ERROR */6
          };
  } else if ("REFUND" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* REFUND */7
          };
  } else if ("NEGOTIATING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* NEGOTIATING */8
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function order_encode$3(v) {
  return Js_dict.fromArray([
              [
                "status",
                status_encode$2(v.status)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ]
            ]);
}

function order_decode$3(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var status = status_decode$2(Belt_Option.getWithDefault(Js_dict.get(dict$1, "status"), null));
  if (status.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                status: status._0,
                count: count._0
              }
            };
    }
    var e = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = status._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".status" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function orders_encode$4(v) {
  return Js_dict.fromArray([
              [
                "message",
                Spice.stringToJson(v.message)
              ],
              [
                "data",
                Spice.arrayToJson(order_encode$3, v.data)
              ]
            ]);
}

function orders_decode$4(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
  if (message.TAG === /* Ok */0) {
    var data = Spice.arrayFromJson(order_decode$3, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
    if (data.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                message: message._0,
                data: data._0
              }
            };
    }
    var e = data._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".data" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = message._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".message" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$10(queryParams, param) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/order/summary?" + Belt_Option.getWithDefault(queryParams, ""), FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var OrdersSummary = {
  status_encode: status_encode$2,
  status_decode: status_decode$2,
  order_encode: order_encode$3,
  order_decode: order_decode$3,
  orders_encode: orders_encode$4,
  orders_decode: orders_decode$4,
  use: use$10
};

function order_encode$4(v) {
  return Js_dict.fromArray([
              [
                "product-name",
                Spice.stringToJson(v.productName)
              ],
              [
                "product-option-name",
                Spice.stringToJson(v.productOptionName)
              ],
              [
                "quantity-sum",
                Spice.intToJson(v.quantitySum)
              ],
              [
                "order-count",
                Spice.intToJson(v.orderCount)
              ]
            ]);
}

function order_decode$4(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var productName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-name"), null));
  if (productName.TAG === /* Ok */0) {
    var productOptionName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-option-name"), null));
    if (productOptionName.TAG === /* Ok */0) {
      var quantitySum = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "quantity-sum"), null));
      if (quantitySum.TAG === /* Ok */0) {
        var orderCount = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-count"), null));
        if (orderCount.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    productName: productName._0,
                    productOptionName: productOptionName._0,
                    quantitySum: quantitySum._0,
                    orderCount: orderCount._0
                  }
                };
        }
        var e = orderCount._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".order-count" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = quantitySum._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".quantity-sum" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = productOptionName._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".product-option-name" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = productName._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".product-name" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function orders_encode$5(v) {
  return Js_dict.fromArray([
              [
                "message",
                Spice.stringToJson(v.message)
              ],
              [
                "data",
                Spice.arrayToJson(order_encode$4, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ]
            ]);
}

function orders_decode$5(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
  if (message.TAG === /* Ok */0) {
    var data = Spice.arrayFromJson(order_decode$4, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
    if (data.TAG === /* Ok */0) {
      var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
      if (count.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  message: message._0,
                  data: data._0,
                  count: count._0
                }
              };
      }
      var e = count._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".count" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = data._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".data" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = message._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".message" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function use$11(param) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/order/farmer-delivery-summary", FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var OrdersSummaryFarmerDelivery = {
  order_encode: order_encode$4,
  order_decode: order_decode$4,
  orders_encode: orders_encode$5,
  orders_decode: orders_decode$5,
  use: use$11
};

function summary_encode(v) {
  return Js_dict.fromArray([
              [
                "invoice-not-updated",
                Spice.intToJson(v.invoiceNotUpdated)
              ],
              [
                "invoice-requested",
                Spice.intToJson(v.invoiceRequested)
              ],
              [
                "invoice-updated",
                Spice.intToJson(v.invoiceUpdated)
              ],
              [
                "new-orders",
                Spice.intToJson(v.newOrders)
              ],
              [
                "orders-fail",
                Spice.intToJson(v.ordersFail)
              ],
              [
                "orders-success",
                Spice.intToJson(v.ordersSuccess)
              ]
            ]);
}

function summary_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var invoiceNotUpdated = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "invoice-not-updated"), null));
  if (invoiceNotUpdated.TAG === /* Ok */0) {
    var invoiceRequested = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "invoice-requested"), null));
    if (invoiceRequested.TAG === /* Ok */0) {
      var invoiceUpdated = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "invoice-updated"), null));
      if (invoiceUpdated.TAG === /* Ok */0) {
        var newOrders = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "new-orders"), null));
        if (newOrders.TAG === /* Ok */0) {
          var ordersFail = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "orders-fail"), null));
          if (ordersFail.TAG === /* Ok */0) {
            var ordersSuccess = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "orders-success"), null));
            if (ordersSuccess.TAG === /* Ok */0) {
              return {
                      TAG: /* Ok */0,
                      _0: {
                        invoiceNotUpdated: invoiceNotUpdated._0,
                        invoiceRequested: invoiceRequested._0,
                        invoiceUpdated: invoiceUpdated._0,
                        newOrders: newOrders._0,
                        ordersFail: ordersFail._0,
                        ordersSuccess: ordersSuccess._0
                      }
                    };
            }
            var e = ordersSuccess._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".orders-success" + e.path,
                      message: e.message,
                      value: e.value
                    }
                  };
          }
          var e$1 = ordersFail._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".orders-fail" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
        }
        var e$2 = newOrders._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".new-orders" + e$2.path,
                  message: e$2.message,
                  value: e$2.value
                }
              };
      }
      var e$3 = invoiceUpdated._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".invoice-updated" + e$3.path,
                message: e$3.message,
                value: e$3.value
              }
            };
    }
    var e$4 = invoiceRequested._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".invoice-requested" + e$4.path,
              message: e$4.message,
              value: e$4.value
            }
          };
  }
  var e$5 = invoiceNotUpdated._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".invoice-not-updated" + e$5.path,
            message: e$5.message,
            value: e$5.value
          }
        };
}

function orders_encode$6(v) {
  return Js_dict.fromArray([
              [
                "message",
                Spice.stringToJson(v.message)
              ],
              [
                "data",
                summary_encode(v.data)
              ]
            ]);
}

function orders_decode$6(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
  if (message.TAG === /* Ok */0) {
    var data = summary_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
    if (data.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                message: message._0,
                data: data._0
              }
            };
    }
    var e = data._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".data" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = message._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".message" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$12(param) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/order/admin-dashboard-summary", FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var OrdersSummaryAdminDashboard = {
  summary_encode: summary_encode,
  summary_decode: summary_decode,
  orders_encode: orders_encode$6,
  orders_decode: orders_decode$6,
  use: use$12
};

function responseData_encode(v) {
  return Js_dict.fromArray([[
                "url",
                Spice.stringToJson(v.url)
              ]]);
}

function responseData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var url = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict._0, "url"), null));
  if (url.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              url: url._0
            }
          };
  }
  var e = url._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".url" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function response_encode(v) {
  return Js_dict.fromArray([
              [
                "message",
                Spice.stringToJson(v.message)
              ],
              [
                "data",
                responseData_encode(v.data)
              ]
            ]);
}

function response_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
  if (message.TAG === /* Ok */0) {
    var data = responseData_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
    if (data.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                message: message._0,
                data: data._0
              }
            };
    }
    var e = data._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".data" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = message._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".message" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$13(filename, kind, userId, param) {
  var fetcherOptions = {
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
    onErrorRetry: onErrorRetry
  };
  var match = Swr(userId !== undefined ? (
          kind ? Env.restApiUrl + "/order/upload-url?file-name=" + filename + "&user-id=" + userId : Env.restApiUrl + "/order/delivery/upload-url?file-name=" + filename + "&user-id=" + userId
        ) : (
          kind ? Env.restApiUrl + "/order/upload-url?file-name=" + filename : Env.restApiUrl + "/order/delivery/upload-url?file-name=" + filename
        ), FetchHelper.fetcher, fetcherOptions);
  var isValidating = match.isValidating;
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    if (isValidating) {
      return /* Validating */2;
    } else {
      return {
              TAG: /* Loaded */0,
              _0: Caml_option.valFromOption(data)
            };
    }
  } else if (isValidating) {
    return /* Loading */1;
  } else {
    return /* Waiting */0;
  }
}

var S3PresignedUrl = {
  responseData_encode: responseData_encode,
  responseData_decode: responseData_decode,
  response_encode: response_encode,
  response_decode: response_decode,
  use: use$13
};

function courier_encode(v) {
  return Js_dict.fromArray([
              [
                "code",
                Spice.stringToJson(v.code)
              ],
              [
                "name",
                Spice.stringToJson(v.name)
              ]
            ]);
}

function courier_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var code = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "code"), null));
  if (code.TAG === /* Ok */0) {
    var name = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
    if (name.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                code: code._0,
                name: name._0
              }
            };
    }
    var e = name._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".name" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = code._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".code" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function couriers_encode(v) {
  return Spice.arrayToJson(courier_encode, v);
}

function couriers_decode(v) {
  return Spice.arrayFromJson(courier_decode, v);
}

function response_encode$1(v) {
  return Js_dict.fromArray([
              [
                "message",
                Spice.stringToJson(v.message)
              ],
              [
                "data",
                Spice.arrayToJson(courier_encode, v.data)
              ]
            ]);
}

function response_decode$1(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
  if (message.TAG === /* Ok */0) {
    var data = Spice.arrayFromJson(courier_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
    if (data.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                message: message._0,
                data: data._0
              }
            };
    }
    var e = data._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".data" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = message._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".message" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$14(param) {
  var fetcherOptions = {
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/order/delivery-company-codes", FetchHelper.fetcher, fetcherOptions);
  var isValidating = match.isValidating;
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    if (isValidating) {
      return /* Validating */2;
    } else {
      return {
              TAG: /* Loaded */0,
              _0: Caml_option.valFromOption(data)
            };
    }
  } else if (isValidating) {
    return /* Loading */1;
  } else {
    return /* Waiting */0;
  }
}

var Courier = {
  courier_encode: courier_encode,
  courier_decode: courier_decode,
  couriers_encode: couriers_encode,
  couriers_decode: couriers_decode,
  response_encode: response_encode$1,
  response_decode: response_decode$1,
  use: use$14
};

function data_encode(v) {
  return Js_dict.fromArray([[
                "st-api-key",
                Spice.stringToJson(v.stApiKey)
              ]]);
}

function data_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var stApiKey = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict._0, "st-api-key"), null));
  if (stApiKey.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              stApiKey: stApiKey._0
            }
          };
  }
  var e = stApiKey._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".st-api-key" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function response_encode$2(v) {
  return Js_dict.fromArray([
              [
                "message",
                Spice.stringToJson(v.message)
              ],
              [
                "data",
                data_encode(v.data)
              ]
            ]);
}

function response_decode$2(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
  if (message.TAG === /* Ok */0) {
    var data = data_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
    if (data.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                message: message._0,
                data: data._0
              }
            };
    }
    var e = data._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".data" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = message._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".message" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$15(param) {
  var fetcherOptions = {
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/order/delivery/st-api-key", FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var SweetTracker = {
  data_encode: data_encode,
  data_decode: data_decode,
  response_encode: response_encode$2,
  response_decode: response_decode$2,
  use: use$15
};

function uploadStatus_encode(v) {
  switch (v) {
    case /* WAITING */0 :
        return "WAITING";
    case /* PROCESSING */1 :
        return "PROCESSING";
    case /* SUCCESS */2 :
        return "SUCCESS";
    case /* FAIL */3 :
        return "FAIL";
    
  }
}

function uploadStatus_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("WAITING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* WAITING */0
          };
  } else if ("PROCESSING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PROCESSING */1
          };
  } else if ("SUCCESS" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SUCCESS */2
          };
  } else if ("FAIL" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* FAIL */3
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function errorCode_encode(v) {
  switch (v.TAG | 0) {
    case /* S3GetObject */0 :
        return [
                "S3GetObject",
                Spice.stringToJson(v._0)
              ];
    case /* RequiredColumns */1 :
        return [
                "RequiredColumns",
                Spice.stringToJson(v._0)
              ];
    case /* ExcelCell */2 :
        return [
                "ExcelCell",
                Spice.stringToJson(v._0)
              ];
    case /* EncryptedDocument */3 :
        return [
                "EncryptedDocument",
                Spice.stringToJson(v._0)
              ];
    case /* Deposit */4 :
        return [
                "Deposit",
                Spice.stringToJson(v._0)
              ];
    case /* ProductId */5 :
        return [
                "ProductId",
                Spice.stringToJson(v._0)
              ];
    case /* Sku */6 :
        return [
                "Sku",
                Spice.stringToJson(v._0)
              ];
    case /* OrderProductNo */7 :
        return [
                "OrderProductNo",
                Spice.stringToJson(v._0)
              ];
    case /* OrdererId */8 :
        return [
                "OrdererId",
                Spice.stringToJson(v._0)
              ];
    case /* Etc */9 :
        return [
                "Etc",
                Spice.stringToJson(v._0)
              ];
    case /* AfterPay */10 :
        return [
                "AfterPay",
                Spice.stringToJson(v._0)
              ];
    
  }
}

function errorCode_decode(v) {
  var json_arr = Js_json.classify(v);
  if (typeof json_arr === "number") {
    return Spice.error(undefined, "Not a variant", v);
  }
  if (json_arr.TAG !== /* JSONArray */3) {
    return Spice.error(undefined, "Not a variant", v);
  }
  var json_arr$1 = json_arr._0;
  if (json_arr$1.length === 0) {
    return Spice.error(undefined, "Expected variant, found empty array", v);
  }
  var tagged = json_arr$1.map(Js_json.classify);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match !== "number" && match.TAG === /* JSONString */0) {
    switch (match._0) {
      case "AfterPay" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* AfterPay */10,
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      case "Deposit" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$1 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$1.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* Deposit */4,
                      _0: v0$1._0
                    }
                  };
          }
          var e$1 = v0$1._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
      case "EncryptedDocument" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$2 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$2.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* EncryptedDocument */3,
                      _0: v0$2._0
                    }
                  };
          }
          var e$2 = v0$2._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
      case "Etc" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$3 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$3.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* Etc */9,
                      _0: v0$3._0
                    }
                  };
          }
          var e$3 = v0$3._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$3.path,
                    message: e$3.message,
                    value: e$3.value
                  }
                };
      case "ExcelCell" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$4 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$4.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* ExcelCell */2,
                      _0: v0$4._0
                    }
                  };
          }
          var e$4 = v0$4._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$4.path,
                    message: e$4.message,
                    value: e$4.value
                  }
                };
      case "OrderProductNo" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$5 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$5.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* OrderProductNo */7,
                      _0: v0$5._0
                    }
                  };
          }
          var e$5 = v0$5._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$5.path,
                    message: e$5.message,
                    value: e$5.value
                  }
                };
      case "OrdererId" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$6 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$6.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* OrdererId */8,
                      _0: v0$6._0
                    }
                  };
          }
          var e$6 = v0$6._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$6.path,
                    message: e$6.message,
                    value: e$6.value
                  }
                };
      case "ProductId" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$7 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$7.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* ProductId */5,
                      _0: v0$7._0
                    }
                  };
          }
          var e$7 = v0$7._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$7.path,
                    message: e$7.message,
                    value: e$7.value
                  }
                };
      case "RequiredColumns" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$8 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$8.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* RequiredColumns */1,
                      _0: v0$8._0
                    }
                  };
          }
          var e$8 = v0$8._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$8.path,
                    message: e$8.message,
                    value: e$8.value
                  }
                };
      case "S3GetObject" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$9 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$9.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* S3GetObject */0,
                      _0: v0$9._0
                    }
                  };
          }
          var e$9 = v0$9._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$9.path,
                    message: e$9.message,
                    value: e$9.value
                  }
                };
      case "Sku" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$10 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$10.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* Sku */6,
                      _0: v0$10._0
                    }
                  };
          }
          var e$10 = v0$10._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$10.path,
                    message: e$10.message,
                    value: e$10.value
                  }
                };
      default:
        
    }
  }
  return Spice.error(undefined, "Invalid variant constructor", Belt_Array.getExn(json_arr$1, 0));
}

function encoderErrorCode(v) {
  return v._0;
}

function decoderErrorCode(json) {
  var str = Js_json.classify(json);
  if (typeof str === "number") {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONString",
              value: json
            }
          };
  }
  if (str.TAG !== /* JSONString */0) {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONString",
              value: json
            }
          };
  }
  switch (str._0) {
    case "after-pay" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* AfterPay */10,
                  _0: "한도가 부족합니다."
                }
              };
    case "deposit" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* Deposit */4,
                  _0: "잔액이 부족합니다."
                }
              };
    case "encrypted-document" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* EncryptedDocument */3,
                  _0: "엑셀 파일에 암호가 걸려 있습니다."
                }
              };
    case "etc" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* Etc */9,
                  _0: "알 수 없는 오류가 발생하였습니다."
                }
              };
    case "excel-cell" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* ExcelCell */2,
                  _0: "엑셀 파일 양식에 문제를 발견하였습니다."
                }
              };
    case "order-product-no" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* OrderProductNo */7,
                  _0: "신선하이 주문번호(C열)에 문제를 발견하였습니다."
                }
              };
    case "orderer-id" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* OrdererId */8,
                  _0: "주문자 아이디를 찾을 수가 없습니다."
                }
              };
    case "product-id" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* ProductId */5,
                  _0: "상품코드(A열)에 문제를 발견하였습니다."
                }
              };
    case "required-columns" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* RequiredColumns */1,
                  _0: "엑셀 파일의 필수 열을 찾을 수 없습니다."
                }
              };
    case "s3-getobject" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* S3GetObject */0,
                  _0: "파일을 찾을 수 없습니다."
                }
              };
    case "sku" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* Sku */6,
                  _0: "옵션코드(C열)에 문제를 발견하였습니다."
                }
              };
    default:
      return {
              TAG: /* Error */1,
              _0: {
                path: "",
                message: "Expected JSONString",
                value: json
              }
            };
  }
}

var codecErrorCode = [
  encoderErrorCode,
  decoderErrorCode
];

function failCode_encode(v) {
  switch (v.TAG | 0) {
    case /* InvalidSpec */0 :
        return [
                "InvalidSpec",
                Spice.stringToJson(v._0)
              ];
    case /* InvalidCourierCode */1 :
        return [
                "InvalidCourierCode",
                Spice.stringToJson(v._0)
              ];
    case /* NotYourProduct */2 :
        return [
                "NotYourProduct",
                Spice.stringToJson(v._0)
              ];
    case /* NotAllowedModify */3 :
        return [
                "NotAllowedModify",
                Spice.stringToJson(v._0)
              ];
    
  }
}

function failCode_decode(v) {
  var json_arr = Js_json.classify(v);
  if (typeof json_arr === "number") {
    return Spice.error(undefined, "Not a variant", v);
  }
  if (json_arr.TAG !== /* JSONArray */3) {
    return Spice.error(undefined, "Not a variant", v);
  }
  var json_arr$1 = json_arr._0;
  if (json_arr$1.length === 0) {
    return Spice.error(undefined, "Expected variant, found empty array", v);
  }
  var tagged = json_arr$1.map(Js_json.classify);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match !== "number" && match.TAG === /* JSONString */0) {
    switch (match._0) {
      case "InvalidCourierCode" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* InvalidCourierCode */1,
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      case "InvalidSpec" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$1 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$1.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* InvalidSpec */0,
                      _0: v0$1._0
                    }
                  };
          }
          var e$1 = v0$1._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
      case "NotAllowedModify" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$2 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$2.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* NotAllowedModify */3,
                      _0: v0$2._0
                    }
                  };
          }
          var e$2 = v0$2._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
      case "NotYourProduct" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$3 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$3.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* NotYourProduct */2,
                      _0: v0$3._0
                    }
                  };
          }
          var e$3 = v0$3._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$3.path,
                    message: e$3.message,
                    value: e$3.value
                  }
                };
      default:
        
    }
  }
  return Spice.error(undefined, "Invalid variant constructor", Belt_Array.getExn(json_arr$1, 0));
}

function encoderFailCode(v) {
  return v._0;
}

function decoderFailCode(json) {
  var str = Js_json.classify(json);
  if (typeof str === "number") {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONString",
              value: json
            }
          };
  }
  if (str.TAG !== /* JSONString */0) {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONString",
              value: json
            }
          };
  }
  switch (str._0) {
    case "courier-code" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* InvalidCourierCode */1,
                  _0: "올바르지 않은 배송회사 입력"
                }
              };
    case "is-renewable-status" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* NotAllowedModify */3,
                  _0: "수정가능한 상태가 아닌 경우"
                }
              };
    case "is-spec-valid" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* InvalidSpec */0,
                  _0: "엑셀파일 필수컬럼 부재"
                }
              };
    case "is-your-product" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* NotYourProduct */2,
                  _0: "자신의 상품이 아닌 경우"
                }
              };
    default:
      return {
              TAG: /* Error */1,
              _0: {
                path: "",
                message: "\xec\x95\x8c \xec\x88\x98 \xec\x97\x86\xeb\x8a\x94 \xec\x98\xa4\xeb\xa5\x98",
                value: json
              }
            };
  }
}

var codecFailCode = [
  encoderFailCode,
  decoderFailCode
];

function failDataJson_encode(v) {
  return Js_dict.fromArray([
              [
                "row-number",
                Spice.intToJson(v.rowNumber)
              ],
              [
                "fail-code",
                encoderFailCode(v.failCode)
              ]
            ]);
}

function failDataJson_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var rowNumber = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "row-number"), null));
  if (rowNumber.TAG === /* Ok */0) {
    var failCode = decoderFailCode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "fail-code"), null));
    if (failCode.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                rowNumber: rowNumber._0,
                failCode: failCode._0
              }
            };
    }
    var e = failCode._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".fail-code" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = rowNumber._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".row-number" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function data_encode$1(v) {
  return Js_dict.fromArray([
              [
                "created-at",
                Spice.stringToJson(v.createdAt)
              ],
              [
                "upload-no",
                Spice.stringToJson(v.orderNo)
              ],
              [
                "status",
                uploadStatus_encode(v.status)
              ],
              [
                "file-name",
                Spice.stringToJson(v.filename)
              ],
              [
                "error-code",
                Spice.optionToJson(encoderErrorCode, v.errorCode)
              ],
              [
                "success-count",
                Spice.optionToJson(Spice.intToJson, v.successCount)
              ],
              [
                "fail-count",
                Spice.optionToJson(Spice.intToJson, v.failCount)
              ],
              [
                "fail-data-json",
                Spice.optionToJson((function (param) {
                        return Spice.arrayToJson(failDataJson_encode, param);
                      }), v.failDataJson)
              ]
            ]);
}

function data_decode$1(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var createdAt = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "created-at"), null));
  if (createdAt.TAG === /* Ok */0) {
    var orderNo = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "upload-no"), null));
    if (orderNo.TAG === /* Ok */0) {
      var status = uploadStatus_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "status"), null));
      if (status.TAG === /* Ok */0) {
        var filename = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "file-name"), null));
        if (filename.TAG === /* Ok */0) {
          var errorCode = Spice.optionFromJson(decoderErrorCode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "error-code"), null));
          if (errorCode.TAG === /* Ok */0) {
            var successCount = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "success-count"), null));
            if (successCount.TAG === /* Ok */0) {
              var failCount = Spice.optionFromJson(Spice.intFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "fail-count"), null));
              if (failCount.TAG === /* Ok */0) {
                var failDataJson = Spice.optionFromJson((function (param) {
                        return Spice.arrayFromJson(failDataJson_decode, param);
                      }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "fail-data-json"), null));
                if (failDataJson.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: {
                            createdAt: createdAt._0,
                            orderNo: orderNo._0,
                            status: status._0,
                            filename: filename._0,
                            errorCode: errorCode._0,
                            successCount: successCount._0,
                            failCount: failCount._0,
                            failDataJson: failDataJson._0
                          }
                        };
                }
                var e = failDataJson._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".fail-data-json" + e.path,
                          message: e.message,
                          value: e.value
                        }
                      };
              }
              var e$1 = failCount._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".fail-count" + e$1.path,
                        message: e$1.message,
                        value: e$1.value
                      }
                    };
            }
            var e$2 = successCount._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".success-count" + e$2.path,
                      message: e$2.message,
                      value: e$2.value
                    }
                  };
          }
          var e$3 = errorCode._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".error-code" + e$3.path,
                    message: e$3.message,
                    value: e$3.value
                  }
                };
        }
        var e$4 = filename._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".file-name" + e$4.path,
                  message: e$4.message,
                  value: e$4.value
                }
              };
      }
      var e$5 = status._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".status" + e$5.path,
                message: e$5.message,
                value: e$5.value
              }
            };
    }
    var e$6 = orderNo._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".upload-no" + e$6.path,
              message: e$6.message,
              value: e$6.value
            }
          };
  }
  var e$7 = createdAt._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".created-at" + e$7.path,
            message: e$7.message,
            value: e$7.value
          }
        };
}

function response_encode$3(v) {
  return Js_dict.fromArray([
              [
                "message",
                Spice.stringToJson(v.message)
              ],
              [
                "data",
                Spice.arrayToJson(data_encode$1, v.data)
              ]
            ]);
}

function response_decode$3(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
  if (message.TAG === /* Ok */0) {
    var data = Spice.arrayFromJson(data_decode$1, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
    if (data.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                message: message._0,
                data: data._0
              }
            };
    }
    var e = data._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".data" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = message._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".message" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$16(kind, uploadType) {
  var fetcherOptions = {
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
    refreshInterval: kind >= 2 ? 3000 : 5000,
    onErrorRetry: onErrorRetry
  };
  var tmp;
  switch (uploadType) {
    case /* Order */0 :
        tmp = Env.restApiUrl + "/order/recent-uploads?upload-type=order&pay-type=PAID";
        break;
    case /* Invoice */1 :
        tmp = Env.restApiUrl + "/order/recent-uploads?upload-type=invoice";
        break;
    case /* Offline */2 :
        tmp = Env.restApiUrl + "/offline-order/recent-uploads?upload-type=offline";
        break;
    case /* OrderAfterPay */3 :
        tmp = Env.restApiUrl + "/order/recent-uploads?upload-type=order&pay-type=AFTER_PAY";
        break;
    
  }
  var match = Swr(tmp, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var UploadStatus = {
  uploadStatus_encode: uploadStatus_encode,
  uploadStatus_decode: uploadStatus_decode,
  errorCode_encode: errorCode_encode,
  errorCode_decode: errorCode_decode,
  encoderErrorCode: encoderErrorCode,
  decoderErrorCode: decoderErrorCode,
  codecErrorCode: codecErrorCode,
  failCode_encode: failCode_encode,
  failCode_decode: failCode_decode,
  encoderFailCode: encoderFailCode,
  decoderFailCode: decoderFailCode,
  codecFailCode: codecFailCode,
  failDataJson_encode: failDataJson_encode,
  failDataJson_decode: failDataJson_decode,
  data_encode: data_encode$1,
  data_decode: data_decode$1,
  response_encode: response_encode$3,
  response_decode: response_decode$3,
  use: use$16
};

function user_encode$1(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.intToJson(v.id)
              ],
              [
                "uid",
                Spice.stringToJson(v.uid)
              ],
              [
                "name",
                Spice.stringToJson(v.name)
              ],
              [
                "email",
                Spice.optionToJson(Spice.stringToJson, v.email)
              ],
              [
                "phone",
                Spice.stringToJson(v.phone)
              ],
              [
                "address",
                Spice.optionToJson(Spice.stringToJson, v.address)
              ],
              [
                "role",
                Spice.stringToJson(v.role)
              ],
              [
                "business-registration-number",
                Spice.optionToJson(Spice.stringToJson, v.businessRegistrationNumber)
              ],
              [
                "producer-type",
                Spice.optionToJson(Spice.stringToJson, v.producerType)
              ],
              [
                "producer-code",
                Spice.optionToJson(Spice.stringToJson, v.producerCode)
              ],
              [
                "created-at",
                Spice.stringToJson(v.createdAt)
              ],
              [
                "description",
                Spice.optionToJson(Spice.stringToJson, v.producerTypeDescription)
              ],
              [
                "md-name",
                Spice.optionToJson(Spice.stringToJson, v.mdName)
              ],
              [
                "boss-name",
                Spice.optionToJson(Spice.stringToJson, v.rep)
              ],
              [
                "manager",
                Spice.optionToJson(Spice.stringToJson, v.manager)
              ],
              [
                "manager-phone",
                Spice.optionToJson(Spice.stringToJson, v.managerPhone)
              ],
              [
                "etc",
                Spice.optionToJson(Spice.stringToJson, v.etc)
              ]
            ]);
}

function user_decode$1(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var uid = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "uid"), null));
    if (uid.TAG === /* Ok */0) {
      var name = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
      if (name.TAG === /* Ok */0) {
        var email = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "email"), null));
        if (email.TAG === /* Ok */0) {
          var phone = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "phone"), null));
          if (phone.TAG === /* Ok */0) {
            var address = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "address"), null));
            if (address.TAG === /* Ok */0) {
              var role = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "role"), null));
              if (role.TAG === /* Ok */0) {
                var businessRegistrationNumber = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "business-registration-number"), null));
                if (businessRegistrationNumber.TAG === /* Ok */0) {
                  var producerType = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-type"), null));
                  if (producerType.TAG === /* Ok */0) {
                    var producerCode = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-code"), null));
                    if (producerCode.TAG === /* Ok */0) {
                      var createdAt = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "created-at"), null));
                      if (createdAt.TAG === /* Ok */0) {
                        var producerTypeDescription = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "description"), null));
                        if (producerTypeDescription.TAG === /* Ok */0) {
                          var mdName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "md-name"), null));
                          if (mdName.TAG === /* Ok */0) {
                            var rep = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "boss-name"), null));
                            if (rep.TAG === /* Ok */0) {
                              var manager = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "manager"), null));
                              if (manager.TAG === /* Ok */0) {
                                var managerPhone = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "manager-phone"), null));
                                if (managerPhone.TAG === /* Ok */0) {
                                  var etc = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "etc"), null));
                                  if (etc.TAG === /* Ok */0) {
                                    return {
                                            TAG: /* Ok */0,
                                            _0: {
                                              id: id._0,
                                              uid: uid._0,
                                              name: name._0,
                                              email: email._0,
                                              phone: phone._0,
                                              address: address._0,
                                              role: role._0,
                                              businessRegistrationNumber: businessRegistrationNumber._0,
                                              producerType: producerType._0,
                                              producerCode: producerCode._0,
                                              createdAt: createdAt._0,
                                              producerTypeDescription: producerTypeDescription._0,
                                              mdName: mdName._0,
                                              rep: rep._0,
                                              manager: manager._0,
                                              managerPhone: managerPhone._0,
                                              etc: etc._0
                                            }
                                          };
                                  }
                                  var e = etc._0;
                                  return {
                                          TAG: /* Error */1,
                                          _0: {
                                            path: ".etc" + e.path,
                                            message: e.message,
                                            value: e.value
                                          }
                                        };
                                }
                                var e$1 = managerPhone._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: ".manager-phone" + e$1.path,
                                          message: e$1.message,
                                          value: e$1.value
                                        }
                                      };
                              }
                              var e$2 = manager._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: ".manager" + e$2.path,
                                        message: e$2.message,
                                        value: e$2.value
                                      }
                                    };
                            }
                            var e$3 = rep._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".boss-name" + e$3.path,
                                      message: e$3.message,
                                      value: e$3.value
                                    }
                                  };
                          }
                          var e$4 = mdName._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".md-name" + e$4.path,
                                    message: e$4.message,
                                    value: e$4.value
                                  }
                                };
                        }
                        var e$5 = producerTypeDescription._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".description" + e$5.path,
                                  message: e$5.message,
                                  value: e$5.value
                                }
                              };
                      }
                      var e$6 = createdAt._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".created-at" + e$6.path,
                                message: e$6.message,
                                value: e$6.value
                              }
                            };
                    }
                    var e$7 = producerCode._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".producer-code" + e$7.path,
                              message: e$7.message,
                              value: e$7.value
                            }
                          };
                  }
                  var e$8 = producerType._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".producer-type" + e$8.path,
                            message: e$8.message,
                            value: e$8.value
                          }
                        };
                }
                var e$9 = businessRegistrationNumber._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".business-registration-number" + e$9.path,
                          message: e$9.message,
                          value: e$9.value
                        }
                      };
              }
              var e$10 = role._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".role" + e$10.path,
                        message: e$10.message,
                        value: e$10.value
                      }
                    };
            }
            var e$11 = address._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".address" + e$11.path,
                      message: e$11.message,
                      value: e$11.value
                    }
                  };
          }
          var e$12 = phone._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".phone" + e$12.path,
                    message: e$12.message,
                    value: e$12.value
                  }
                };
        }
        var e$13 = email._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".email" + e$13.path,
                  message: e$13.message,
                  value: e$13.value
                }
              };
      }
      var e$14 = name._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".name" + e$14.path,
                message: e$14.message,
                value: e$14.value
              }
            };
    }
    var e$15 = uid._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".uid" + e$15.path,
              message: e$15.message,
              value: e$15.value
            }
          };
  }
  var e$16 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$16.path,
            message: e$16.message,
            value: e$16.value
          }
        };
}

function users_encode(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(user_encode$1, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ]
            ]);
}

function users_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(user_decode$1, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
      if (offset.TAG === /* Ok */0) {
        var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
        if (limit.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    data: data._0,
                    count: count._0,
                    offset: offset._0,
                    limit: limit._0
                  }
                };
        }
        var e = limit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".limit" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = offset._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".offset" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function use$17(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/user?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */1;
  }
}

var Farmer = {
  user_encode: user_encode$1,
  user_decode: user_decode$1,
  users_encode: users_encode,
  users_decode: users_decode,
  use: use$17
};

function status_encode$3(v) {
  if (v) {
    return "CANNOT-ORDER";
  } else {
    return "CAN-ORDER";
  }
}

function status_decode$3(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("CAN-ORDER" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CanOrder */0
          };
  } else if ("CANNOT-ORDER" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CanNotOrder */1
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function user_encode$2(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.intToJson(v.id)
              ],
              [
                "uid",
                Spice.stringToJson(v.uid)
              ],
              [
                "name",
                Spice.stringToJson(v.name)
              ],
              [
                "deposit",
                Spice.floatToJson(v.deposit)
              ],
              [
                "status",
                v.status ? "CANNOT-ORDER" : "CAN-ORDER"
              ],
              [
                "email",
                Spice.stringToJson(v.email)
              ],
              [
                "phone",
                Spice.stringToJson(v.phone)
              ],
              [
                "address",
                Spice.optionToJson(Spice.stringToJson, v.address)
              ],
              [
                "role",
                Spice.stringToJson(v.role)
              ],
              [
                "business-registration-number",
                Spice.optionToJson(Spice.stringToJson, v.businessRegistrationNumber)
              ],
              [
                "manager",
                Spice.optionToJson(Spice.stringToJson, v.manager)
              ],
              [
                "shop-url",
                Spice.optionToJson(Spice.stringToJson, v.shopUrl)
              ]
            ]);
}

function user_decode$2(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var uid = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "uid"), null));
    if (uid.TAG === /* Ok */0) {
      var name = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
      if (name.TAG === /* Ok */0) {
        var deposit = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "deposit"), null));
        if (deposit.TAG === /* Ok */0) {
          var status = status_decode$3(Belt_Option.getWithDefault(Js_dict.get(dict$1, "status"), null));
          if (status.TAG === /* Ok */0) {
            var email = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "email"), null));
            if (email.TAG === /* Ok */0) {
              var phone = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "phone"), null));
              if (phone.TAG === /* Ok */0) {
                var address = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "address"), null));
                if (address.TAG === /* Ok */0) {
                  var role = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "role"), null));
                  if (role.TAG === /* Ok */0) {
                    var businessRegistrationNumber = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "business-registration-number"), null));
                    if (businessRegistrationNumber.TAG === /* Ok */0) {
                      var manager = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "manager"), null));
                      if (manager.TAG === /* Ok */0) {
                        var shopUrl = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "shop-url"), null));
                        if (shopUrl.TAG === /* Ok */0) {
                          return {
                                  TAG: /* Ok */0,
                                  _0: {
                                    id: id._0,
                                    uid: uid._0,
                                    name: name._0,
                                    deposit: deposit._0,
                                    status: status._0,
                                    email: email._0,
                                    phone: phone._0,
                                    address: address._0,
                                    role: role._0,
                                    businessRegistrationNumber: businessRegistrationNumber._0,
                                    manager: manager._0,
                                    shopUrl: shopUrl._0
                                  }
                                };
                        }
                        var e = shopUrl._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".shop-url" + e.path,
                                  message: e.message,
                                  value: e.value
                                }
                              };
                      }
                      var e$1 = manager._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".manager" + e$1.path,
                                message: e$1.message,
                                value: e$1.value
                              }
                            };
                    }
                    var e$2 = businessRegistrationNumber._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".business-registration-number" + e$2.path,
                              message: e$2.message,
                              value: e$2.value
                            }
                          };
                  }
                  var e$3 = role._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".role" + e$3.path,
                            message: e$3.message,
                            value: e$3.value
                          }
                        };
                }
                var e$4 = address._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".address" + e$4.path,
                          message: e$4.message,
                          value: e$4.value
                        }
                      };
              }
              var e$5 = phone._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".phone" + e$5.path,
                        message: e$5.message,
                        value: e$5.value
                      }
                    };
            }
            var e$6 = email._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".email" + e$6.path,
                      message: e$6.message,
                      value: e$6.value
                    }
                  };
          }
          var e$7 = status._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".status" + e$7.path,
                    message: e$7.message,
                    value: e$7.value
                  }
                };
        }
        var e$8 = deposit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".deposit" + e$8.path,
                  message: e$8.message,
                  value: e$8.value
                }
              };
      }
      var e$9 = name._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".name" + e$9.path,
                message: e$9.message,
                value: e$9.value
              }
            };
    }
    var e$10 = uid._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".uid" + e$10.path,
              message: e$10.message,
              value: e$10.value
            }
          };
  }
  var e$11 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$11.path,
            message: e$11.message,
            value: e$11.value
          }
        };
}

function users_encode$1(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(user_encode$2, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ]
            ]);
}

function users_decode$1(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(user_decode$2, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
      if (offset.TAG === /* Ok */0) {
        var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
        if (limit.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    data: data._0,
                    count: count._0,
                    offset: offset._0,
                    limit: limit._0
                  }
                };
        }
        var e = limit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".limit" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = offset._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".offset" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function use$18(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/user?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */1;
  }
}

var Buyer$1 = {
  status_encode: status_encode$3,
  status_decode: status_decode$3,
  user_encode: user_encode$2,
  user_decode: user_decode$2,
  users_encode: users_encode$1,
  users_decode: users_decode$1,
  use: use$18
};

function user_encode$3(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.intToJson(v.id)
              ],
              [
                "uid",
                Spice.stringToJson(v.uid)
              ],
              [
                "name",
                Spice.stringToJson(v.name)
              ],
              [
                "email",
                Spice.optionToJson(Spice.stringToJson, v.email)
              ],
              [
                "phone",
                Spice.stringToJson(v.phone)
              ]
            ]);
}

function user_decode$3(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var uid = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "uid"), null));
    if (uid.TAG === /* Ok */0) {
      var name = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
      if (name.TAG === /* Ok */0) {
        var email = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "email"), null));
        if (email.TAG === /* Ok */0) {
          var phone = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "phone"), null));
          if (phone.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      id: id._0,
                      uid: uid._0,
                      name: name._0,
                      email: email._0,
                      phone: phone._0
                    }
                  };
          }
          var e = phone._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".phone" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = email._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".email" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = name._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".name" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = uid._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".uid" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function users_encode$2(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(user_encode$3, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ]
            ]);
}

function users_decode$2(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(user_decode$3, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
      if (offset.TAG === /* Ok */0) {
        var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
        if (limit.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    data: data._0,
                    count: count._0,
                    offset: offset._0,
                    limit: limit._0
                  }
                };
        }
        var e = limit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".limit" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = offset._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".offset" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

var Admin$1 = {
  user_encode: user_encode$3,
  user_decode: user_decode$3,
  users_encode: users_encode$2,
  users_decode: users_decode$2
};

var QueryUser = {
  Farmer: Farmer,
  Buyer: Buyer$1,
  Admin: Admin$1
};

function salesStatus_encode(v) {
  switch (v) {
    case /* SALE */0 :
        return "SALE";
    case /* SOLDOUT */1 :
        return "SOLDOUT";
    case /* HIDDEN_SALE */2 :
        return "HIDDEN_SALE";
    case /* NOSALE */3 :
        return "NOSALE";
    case /* RETIRE */4 :
        return "RETIRE";
    case /* HIDDEN */5 :
        return "HIDDEN";
    
  }
}

function salesStatus_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("SALE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SALE */0
          };
  } else if ("SOLDOUT" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SOLDOUT */1
          };
  } else if ("HIDDEN_SALE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* HIDDEN_SALE */2
          };
  } else if ("NOSALE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* NOSALE */3
          };
  } else if ("RETIRE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* RETIRE */4
          };
  } else if ("HIDDEN" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* HIDDEN */5
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function weightUnit_encode(v) {
  switch (v) {
    case /* G */0 :
        return "g";
    case /* Kg */1 :
        return "kg";
    case /* Ton */2 :
        return "t";
    
  }
}

function weightUnit_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("g" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* G */0
          };
  } else if ("kg" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Kg */1
          };
  } else if ("t" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Ton */2
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function sizeUnit_encode(v) {
  switch (v) {
    case /* Mm */0 :
        return "mm";
    case /* Cm */1 :
        return "cm";
    case /* M */2 :
        return "m";
    
  }
}

function sizeUnit_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("mm" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Mm */0
          };
  } else if ("cm" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Cm */1
          };
  } else if ("m" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* M */2
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function product_encode(v) {
  return Js_dict.fromArray([
              [
                "product-id",
                Spice.intToJson(v.productId)
              ],
              [
                "product-name",
                Spice.stringToJson(v.productName)
              ],
              [
                "product-status",
                salesStatus_encode(v.salesStatus)
              ],
              [
                "stock-sku",
                Spice.stringToJson(v.productSku)
              ],
              [
                "option-name",
                Spice.optionToJson(Spice.stringToJson, v.productOptionName)
              ],
              [
                "producer-name",
                Spice.stringToJson(v.producerName)
              ],
              [
                "price",
                Spice.floatToJson(v.price)
              ],
              [
                "memo",
                Spice.optionToJson(Spice.stringToJson, v.memo)
              ],
              [
                "cut-off-time",
                Spice.optionToJson(Spice.stringToJson, v.cutOffTime)
              ],
              [
                "md-name",
                Spice.optionToJson(Spice.stringToJson, v.mdName)
              ],
              [
                "weight",
                Spice.optionToJson(Spice.floatToJson, v.weight)
              ],
              [
                "weight-unit",
                weightUnit_encode(v.weightUnit)
              ],
              [
                "package-type",
                Spice.optionToJson(Spice.stringToJson, v.packageType)
              ],
              [
                "count-per-package",
                Spice.optionToJson(Spice.stringToJson, v.cntPerPackage)
              ],
              [
                "grade",
                Spice.optionToJson(Spice.stringToJson, v.grade)
              ],
              [
                "per-weight-max",
                Spice.optionToJson(Spice.floatToJson, v.unitWeightMax)
              ],
              [
                "per-weight-min",
                Spice.optionToJson(Spice.floatToJson, v.unitWeightMin)
              ],
              [
                "per-weight-unit",
                weightUnit_encode(v.unitWieghtUnit)
              ],
              [
                "per-size-max",
                Spice.optionToJson(Spice.floatToJson, v.unitSizeMax)
              ],
              [
                "per-size-min",
                Spice.optionToJson(Spice.floatToJson, v.unitSizeMin)
              ],
              [
                "per-size-unit",
                sizeUnit_encode(v.unitSizeUnit)
              ],
              [
                "item",
                Spice.optionToJson(Spice.stringToJson, v.crop)
              ],
              [
                "kind",
                Spice.optionToJson(Spice.stringToJson, v.cultivar)
              ]
            ]);
}

function product_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var productId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-id"), null));
  if (productId.TAG === /* Ok */0) {
    var productName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-name"), null));
    if (productName.TAG === /* Ok */0) {
      var salesStatus = salesStatus_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-status"), null));
      if (salesStatus.TAG === /* Ok */0) {
        var productSku = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "stock-sku"), null));
        if (productSku.TAG === /* Ok */0) {
          var productOptionName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "option-name"), null));
          if (productOptionName.TAG === /* Ok */0) {
            var producerName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-name"), null));
            if (producerName.TAG === /* Ok */0) {
              var price = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "price"), null));
              if (price.TAG === /* Ok */0) {
                var memo = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "memo"), null));
                if (memo.TAG === /* Ok */0) {
                  var cutOffTime = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "cut-off-time"), null));
                  if (cutOffTime.TAG === /* Ok */0) {
                    var mdName = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "md-name"), null));
                    if (mdName.TAG === /* Ok */0) {
                      var weight = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "weight"), null));
                      if (weight.TAG === /* Ok */0) {
                        var weightUnit = weightUnit_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "weight-unit"), null));
                        if (weightUnit.TAG === /* Ok */0) {
                          var packageType = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "package-type"), null));
                          if (packageType.TAG === /* Ok */0) {
                            var cntPerPackage = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "count-per-package"), null));
                            if (cntPerPackage.TAG === /* Ok */0) {
                              var grade = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "grade"), null));
                              if (grade.TAG === /* Ok */0) {
                                var unitWeightMax = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "per-weight-max"), null));
                                if (unitWeightMax.TAG === /* Ok */0) {
                                  var unitWeightMin = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "per-weight-min"), null));
                                  if (unitWeightMin.TAG === /* Ok */0) {
                                    var unitWieghtUnit = weightUnit_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "per-weight-unit"), null));
                                    if (unitWieghtUnit.TAG === /* Ok */0) {
                                      var unitSizeMax = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "per-size-max"), null));
                                      if (unitSizeMax.TAG === /* Ok */0) {
                                        var unitSizeMin = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "per-size-min"), null));
                                        if (unitSizeMin.TAG === /* Ok */0) {
                                          var unitSizeUnit = sizeUnit_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "per-size-unit"), null));
                                          if (unitSizeUnit.TAG === /* Ok */0) {
                                            var crop = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "item"), null));
                                            if (crop.TAG === /* Ok */0) {
                                              var cultivar = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "kind"), null));
                                              if (cultivar.TAG === /* Ok */0) {
                                                return {
                                                        TAG: /* Ok */0,
                                                        _0: {
                                                          productId: productId._0,
                                                          productName: productName._0,
                                                          salesStatus: salesStatus._0,
                                                          productSku: productSku._0,
                                                          productOptionName: productOptionName._0,
                                                          producerName: producerName._0,
                                                          price: price._0,
                                                          memo: memo._0,
                                                          cutOffTime: cutOffTime._0,
                                                          mdName: mdName._0,
                                                          weight: weight._0,
                                                          weightUnit: weightUnit._0,
                                                          packageType: packageType._0,
                                                          cntPerPackage: cntPerPackage._0,
                                                          grade: grade._0,
                                                          unitWeightMax: unitWeightMax._0,
                                                          unitWeightMin: unitWeightMin._0,
                                                          unitWieghtUnit: unitWieghtUnit._0,
                                                          unitSizeMax: unitSizeMax._0,
                                                          unitSizeMin: unitSizeMin._0,
                                                          unitSizeUnit: unitSizeUnit._0,
                                                          crop: crop._0,
                                                          cultivar: cultivar._0
                                                        }
                                                      };
                                              }
                                              var e = cultivar._0;
                                              return {
                                                      TAG: /* Error */1,
                                                      _0: {
                                                        path: ".kind" + e.path,
                                                        message: e.message,
                                                        value: e.value
                                                      }
                                                    };
                                            }
                                            var e$1 = crop._0;
                                            return {
                                                    TAG: /* Error */1,
                                                    _0: {
                                                      path: ".item" + e$1.path,
                                                      message: e$1.message,
                                                      value: e$1.value
                                                    }
                                                  };
                                          }
                                          var e$2 = unitSizeUnit._0;
                                          return {
                                                  TAG: /* Error */1,
                                                  _0: {
                                                    path: ".per-size-unit" + e$2.path,
                                                    message: e$2.message,
                                                    value: e$2.value
                                                  }
                                                };
                                        }
                                        var e$3 = unitSizeMin._0;
                                        return {
                                                TAG: /* Error */1,
                                                _0: {
                                                  path: ".per-size-min" + e$3.path,
                                                  message: e$3.message,
                                                  value: e$3.value
                                                }
                                              };
                                      }
                                      var e$4 = unitSizeMax._0;
                                      return {
                                              TAG: /* Error */1,
                                              _0: {
                                                path: ".per-size-max" + e$4.path,
                                                message: e$4.message,
                                                value: e$4.value
                                              }
                                            };
                                    }
                                    var e$5 = unitWieghtUnit._0;
                                    return {
                                            TAG: /* Error */1,
                                            _0: {
                                              path: ".per-weight-unit" + e$5.path,
                                              message: e$5.message,
                                              value: e$5.value
                                            }
                                          };
                                  }
                                  var e$6 = unitWeightMin._0;
                                  return {
                                          TAG: /* Error */1,
                                          _0: {
                                            path: ".per-weight-min" + e$6.path,
                                            message: e$6.message,
                                            value: e$6.value
                                          }
                                        };
                                }
                                var e$7 = unitWeightMax._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: ".per-weight-max" + e$7.path,
                                          message: e$7.message,
                                          value: e$7.value
                                        }
                                      };
                              }
                              var e$8 = grade._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: ".grade" + e$8.path,
                                        message: e$8.message,
                                        value: e$8.value
                                      }
                                    };
                            }
                            var e$9 = cntPerPackage._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".count-per-package" + e$9.path,
                                      message: e$9.message,
                                      value: e$9.value
                                    }
                                  };
                          }
                          var e$10 = packageType._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".package-type" + e$10.path,
                                    message: e$10.message,
                                    value: e$10.value
                                  }
                                };
                        }
                        var e$11 = weightUnit._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".weight-unit" + e$11.path,
                                  message: e$11.message,
                                  value: e$11.value
                                }
                              };
                      }
                      var e$12 = weight._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".weight" + e$12.path,
                                message: e$12.message,
                                value: e$12.value
                              }
                            };
                    }
                    var e$13 = mdName._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".md-name" + e$13.path,
                              message: e$13.message,
                              value: e$13.value
                            }
                          };
                  }
                  var e$14 = cutOffTime._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".cut-off-time" + e$14.path,
                            message: e$14.message,
                            value: e$14.value
                          }
                        };
                }
                var e$15 = memo._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".memo" + e$15.path,
                          message: e$15.message,
                          value: e$15.value
                        }
                      };
              }
              var e$16 = price._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".price" + e$16.path,
                        message: e$16.message,
                        value: e$16.value
                      }
                    };
            }
            var e$17 = producerName._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".producer-name" + e$17.path,
                      message: e$17.message,
                      value: e$17.value
                    }
                  };
          }
          var e$18 = productOptionName._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".option-name" + e$18.path,
                    message: e$18.message,
                    value: e$18.value
                  }
                };
        }
        var e$19 = productSku._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".stock-sku" + e$19.path,
                  message: e$19.message,
                  value: e$19.value
                }
              };
      }
      var e$20 = salesStatus._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".product-status" + e$20.path,
                message: e$20.message,
                value: e$20.value
              }
            };
    }
    var e$21 = productName._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".product-name" + e$21.path,
              message: e$21.message,
              value: e$21.value
            }
          };
  }
  var e$22 = productId._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".product-id" + e$22.path,
            message: e$22.message,
            value: e$22.value
          }
        };
}

function products_encode(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(product_encode, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ]
            ]);
}

function products_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(product_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
      if (offset.TAG === /* Ok */0) {
        var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
        if (limit.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    data: data._0,
                    count: count._0,
                    offset: offset._0,
                    limit: limit._0
                  }
                };
        }
        var e = limit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".limit" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = offset._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".offset" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function use$19(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/product?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var Products = {
  salesStatus_encode: salesStatus_encode,
  salesStatus_decode: salesStatus_decode,
  weightUnit_encode: weightUnit_encode,
  weightUnit_decode: weightUnit_decode,
  sizeUnit_encode: sizeUnit_encode,
  sizeUnit_decode: sizeUnit_decode,
  product_encode: product_encode,
  product_decode: product_decode,
  products_encode: products_encode,
  products_decode: products_decode,
  use: use$19
};

function use$20(router) {
  React.useEffect((function () {
          var browserInfo = DetectBrowser.detect();
          var firstPathname = Belt_Array.getBy(router.pathname.split("/"), (function (x) {
                  return x !== "";
                }));
          var match = browserInfo.name;
          var exit = 0;
          if (match === "ie") {
            if (firstPathname !== undefined) {
              if (firstPathname !== "browser-guide") {
                router.replace("/browser-guide");
              } else if (firstPathname !== "browser-guide") {
                exit = 1;
              }
              
            }
            
          } else {
            exit = 1;
          }
          if (exit === 1) {
            if (firstPathname === "browser-guide") {
              router.replace("/");
            }
            
          }
          
        }), [router]);
  
}

var NoIE = {
  use: use$20
};

function useInvoice(initialInvoice) {
  var match = React.useState(function () {
        return initialInvoice;
      });
  var setInvoice = match[1];
  var handleOnChangeInvoice = function (e) {
    var cleanedValue = Helper.Invoice.cleanup(e.currentTarget.value);
    return setInvoice(function (param) {
                return cleanedValue;
              });
  };
  return [
          match[0],
          handleOnChangeInvoice
        ];
}

function contractType_encode(v) {
  if (v) {
    return "online";
  } else {
    return "bulk-sale";
  }
}

function contractType_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("bulk-sale" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Bulksale */0
          };
  } else if ("online" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Online */1
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function cost_encode(v) {
  return Js_dict.fromArray([
              [
                "cost",
                Spice.optionToJson(Spice.floatToJson, v.cost)
              ],
              [
                "working-cost",
                Spice.optionToJson(Spice.floatToJson, v.workingCost)
              ],
              [
                "delivery-cost",
                Spice.optionToJson(Spice.floatToJson, v.deliveryCost)
              ],
              [
                "raw-cost",
                Spice.optionToJson(Spice.floatToJson, v.rawCost)
              ],
              [
                "effective-date",
                Spice.stringToJson(v.effectiveDate)
              ],
              [
                "producer-name",
                Spice.stringToJson(v.producerName)
              ],
              [
                "contract-type",
                v.contractType ? "online" : "bulk-sale"
              ],
              [
                "product-name",
                Spice.stringToJson(v.productName)
              ],
              [
                "option-name",
                Spice.stringToJson(v.optionName)
              ],
              [
                "producer-id",
                Spice.intToJson(v.producerId)
              ],
              [
                "product-id",
                Spice.intToJson(v.productId)
              ],
              [
                "sku",
                Spice.stringToJson(v.sku)
              ],
              [
                "price",
                Spice.floatToJson(v.price)
              ]
            ]);
}

function cost_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var cost = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "cost"), null));
  if (cost.TAG === /* Ok */0) {
    var workingCost = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "working-cost"), null));
    if (workingCost.TAG === /* Ok */0) {
      var deliveryCost = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "delivery-cost"), null));
      if (deliveryCost.TAG === /* Ok */0) {
        var rawCost = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "raw-cost"), null));
        if (rawCost.TAG === /* Ok */0) {
          var effectiveDate = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "effective-date"), null));
          if (effectiveDate.TAG === /* Ok */0) {
            var producerName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-name"), null));
            if (producerName.TAG === /* Ok */0) {
              var contractType = contractType_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "contract-type"), null));
              if (contractType.TAG === /* Ok */0) {
                var productName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-name"), null));
                if (productName.TAG === /* Ok */0) {
                  var optionName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "option-name"), null));
                  if (optionName.TAG === /* Ok */0) {
                    var producerId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-id"), null));
                    if (producerId.TAG === /* Ok */0) {
                      var productId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "product-id"), null));
                      if (productId.TAG === /* Ok */0) {
                        var sku = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "sku"), null));
                        if (sku.TAG === /* Ok */0) {
                          var price = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "price"), null));
                          if (price.TAG === /* Ok */0) {
                            return {
                                    TAG: /* Ok */0,
                                    _0: {
                                      cost: cost._0,
                                      workingCost: workingCost._0,
                                      deliveryCost: deliveryCost._0,
                                      rawCost: rawCost._0,
                                      effectiveDate: effectiveDate._0,
                                      producerName: producerName._0,
                                      contractType: contractType._0,
                                      productName: productName._0,
                                      optionName: optionName._0,
                                      producerId: producerId._0,
                                      productId: productId._0,
                                      sku: sku._0,
                                      price: price._0
                                    }
                                  };
                          }
                          var e = price._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".price" + e.path,
                                    message: e.message,
                                    value: e.value
                                  }
                                };
                        }
                        var e$1 = sku._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".sku" + e$1.path,
                                  message: e$1.message,
                                  value: e$1.value
                                }
                              };
                      }
                      var e$2 = productId._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".product-id" + e$2.path,
                                message: e$2.message,
                                value: e$2.value
                              }
                            };
                    }
                    var e$3 = producerId._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".producer-id" + e$3.path,
                              message: e$3.message,
                              value: e$3.value
                            }
                          };
                  }
                  var e$4 = optionName._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".option-name" + e$4.path,
                            message: e$4.message,
                            value: e$4.value
                          }
                        };
                }
                var e$5 = productName._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".product-name" + e$5.path,
                          message: e$5.message,
                          value: e$5.value
                        }
                      };
              }
              var e$6 = contractType._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".contract-type" + e$6.path,
                        message: e$6.message,
                        value: e$6.value
                      }
                    };
            }
            var e$7 = producerName._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".producer-name" + e$7.path,
                      message: e$7.message,
                      value: e$7.value
                    }
                  };
          }
          var e$8 = effectiveDate._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".effective-date" + e$8.path,
                    message: e$8.message,
                    value: e$8.value
                  }
                };
        }
        var e$9 = rawCost._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".raw-cost" + e$9.path,
                  message: e$9.message,
                  value: e$9.value
                }
              };
      }
      var e$10 = deliveryCost._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".delivery-cost" + e$10.path,
                message: e$10.message,
                value: e$10.value
              }
            };
    }
    var e$11 = workingCost._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".working-cost" + e$11.path,
              message: e$11.message,
              value: e$11.value
            }
          };
  }
  var e$12 = cost._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".cost" + e$12.path,
            message: e$12.message,
            value: e$12.value
          }
        };
}

function costs_encode(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(cost_encode, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ]
            ]);
}

function costs_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(cost_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
      if (offset.TAG === /* Ok */0) {
        var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
        if (limit.TAG === /* Ok */0) {
          var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
          if (message.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      data: data._0,
                      count: count._0,
                      offset: offset._0,
                      limit: limit._0,
                      message: message._0
                    }
                  };
          }
          var e = message._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".message" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = limit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".limit" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = offset._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".offset" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function use$21(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/settlement/cost?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var Costs = {
  contractType_encode: contractType_encode,
  contractType_decode: contractType_decode,
  cost_encode: cost_encode,
  cost_decode: cost_decode,
  costs_encode: costs_encode,
  costs_decode: costs_decode,
  use: use$21
};

function settlementCycle_encode(v) {
  switch (v) {
    case /* Week */0 :
        return "week";
    case /* HalfMonth */1 :
        return "half-month";
    case /* Month */2 :
        return "month";
    
  }
}

function settlementCycle_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("week" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Week */0
          };
  } else if ("half-month" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* HalfMonth */1
          };
  } else if ("month" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* Month */2
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function settlement_encode(v) {
  return Js_dict.fromArray([
              [
                "producer-code",
                Spice.stringToJson(v.producerCode)
              ],
              [
                "producer-name",
                Spice.stringToJson(v.producerName)
              ],
              [
                "settlement-cycle",
                settlementCycle_encode(v.settlementCycle)
              ],
              [
                "invoice-updated-sum",
                Spice.floatToJson(v.invoiceUpdatedSum)
              ],
              [
                "false-excluded-sum",
                Spice.floatToJson(v.falseExcludedSum)
              ],
              [
                "complete-sum",
                Spice.floatToJson(v.completeSum)
              ],
              [
                "false-excluded-tax",
                Spice.floatToJson(v.falseExcludedTax)
              ],
              [
                "complete-tax",
                Spice.floatToJson(v.completeTax)
              ]
            ]);
}

function settlement_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var producerCode = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-code"), null));
  if (producerCode.TAG === /* Ok */0) {
    var producerName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-name"), null));
    if (producerName.TAG === /* Ok */0) {
      var settlementCycle = settlementCycle_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "settlement-cycle"), null));
      if (settlementCycle.TAG === /* Ok */0) {
        var invoiceUpdatedSum = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "invoice-updated-sum"), null));
        if (invoiceUpdatedSum.TAG === /* Ok */0) {
          var falseExcludedSum = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "false-excluded-sum"), null));
          if (falseExcludedSum.TAG === /* Ok */0) {
            var completeSum = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "complete-sum"), null));
            if (completeSum.TAG === /* Ok */0) {
              var falseExcludedTax = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "false-excluded-tax"), null));
              if (falseExcludedTax.TAG === /* Ok */0) {
                var completeTax = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "complete-tax"), null));
                if (completeTax.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: {
                            producerCode: producerCode._0,
                            producerName: producerName._0,
                            settlementCycle: settlementCycle._0,
                            invoiceUpdatedSum: invoiceUpdatedSum._0,
                            falseExcludedSum: falseExcludedSum._0,
                            completeSum: completeSum._0,
                            falseExcludedTax: falseExcludedTax._0,
                            completeTax: completeTax._0
                          }
                        };
                }
                var e = completeTax._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".complete-tax" + e.path,
                          message: e.message,
                          value: e.value
                        }
                      };
              }
              var e$1 = falseExcludedTax._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".false-excluded-tax" + e$1.path,
                        message: e$1.message,
                        value: e$1.value
                      }
                    };
            }
            var e$2 = completeSum._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".complete-sum" + e$2.path,
                      message: e$2.message,
                      value: e$2.value
                    }
                  };
          }
          var e$3 = falseExcludedSum._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".false-excluded-sum" + e$3.path,
                    message: e$3.message,
                    value: e$3.value
                  }
                };
        }
        var e$4 = invoiceUpdatedSum._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".invoice-updated-sum" + e$4.path,
                  message: e$4.message,
                  value: e$4.value
                }
              };
      }
      var e$5 = settlementCycle._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".settlement-cycle" + e$5.path,
                message: e$5.message,
                value: e$5.value
              }
            };
    }
    var e$6 = producerName._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".producer-name" + e$6.path,
              message: e$6.message,
              value: e$6.value
            }
          };
  }
  var e$7 = producerCode._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".producer-code" + e$7.path,
            message: e$7.message,
            value: e$7.value
          }
        };
}

function settlements_encode(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(settlement_encode, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ]
            ]);
}

function settlements_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(settlement_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
      if (offset.TAG === /* Ok */0) {
        var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
        if (limit.TAG === /* Ok */0) {
          var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
          if (message.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      data: data._0,
                      count: count._0,
                      offset: offset._0,
                      limit: limit._0,
                      message: message._0
                    }
                  };
          }
          var e = message._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".message" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = limit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".limit" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = offset._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".offset" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function use$22(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/settlement?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var Settlements = {
  settlementCycle_encode: settlementCycle_encode,
  settlementCycle_decode: settlementCycle_decode,
  settlement_encode: settlement_encode,
  settlement_decode: settlement_decode,
  settlements_encode: settlements_encode,
  settlements_decode: settlements_decode,
  use: use$22
};

function data_encode$2(v) {
  return Js_dict.fromArray([[
                "deposit",
                Spice.floatToJson(v.deposit)
              ]]);
}

function data_decode$2(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var deposit = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict._0, "deposit"), null));
  if (deposit.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              deposit: deposit._0
            }
          };
  }
  var e = deposit._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".deposit" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function response_encode$4(v) {
  return Js_dict.fromArray([
              [
                "data",
                data_encode$2(v.data)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ]
            ]);
}

function response_decode$4(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = data_decode$2(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
    if (message.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                data: data._0,
                message: message._0
              }
            };
    }
    var e = message._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".message" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$23(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/user/deposit?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var UserDeposit = {
  data_encode: data_encode$2,
  data_decode: data_decode$2,
  response_encode: response_encode$4,
  response_decode: response_decode$4,
  use: use$23
};

function kind_encode(v) {
  switch (v) {
    case /* OrderComplete */0 :
        return "order-complete";
    case /* CashRefund */1 :
        return "cash-refund";
    case /* ImwebPay */2 :
        return "imweb-pay";
    case /* ImwebCancel */3 :
        return "imweb-cancel";
    case /* OrderCancel */4 :
        return "order-cancel";
    case /* OrderRefundDeliveryDelayed */5 :
        return "order-refund-delivery-delayed";
    case /* OrderRefundDefectiveProduct */6 :
        return "order-refund-defective-product";
    case /* SinsunCash */7 :
        return "sinsun-cash";
    
  }
}

function kind_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("order-complete" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* OrderComplete */0
          };
  } else if ("cash-refund" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CashRefund */1
          };
  } else if ("imweb-pay" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ImwebPay */2
          };
  } else if ("imweb-cancel" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ImwebCancel */3
          };
  } else if ("order-cancel" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* OrderCancel */4
          };
  } else if ("order-refund-delivery-delayed" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* OrderRefundDeliveryDelayed */5
          };
  } else if ("order-refund-defective-product" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* OrderRefundDefectiveProduct */6
          };
  } else if ("sinsun-cash" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SinsunCash */7
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function transaction_encode(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.intToJson(v.id)
              ],
              [
                "type",
                kind_encode(v.type_)
              ],
              [
                "amount",
                Spice.floatToJson(v.amount)
              ],
              [
                "created-at",
                Spice.stringToJson(v.createdAt)
              ],
              [
                "deposit",
                Spice.floatToJson(v.deposit)
              ]
            ]);
}

function transaction_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var type_ = kind_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "type"), null));
    if (type_.TAG === /* Ok */0) {
      var amount = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "amount"), null));
      if (amount.TAG === /* Ok */0) {
        var createdAt = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "created-at"), null));
        if (createdAt.TAG === /* Ok */0) {
          var deposit = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "deposit"), null));
          if (deposit.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      id: id._0,
                      type_: type_._0,
                      amount: amount._0,
                      createdAt: createdAt._0,
                      deposit: deposit._0
                    }
                  };
          }
          var e = deposit._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".deposit" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = createdAt._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".created-at" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = amount._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".amount" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = type_._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".type" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function response_encode$5(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(transaction_encode, v.data)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ]
            ]);
}

function response_decode$5(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(transaction_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
    if (message.TAG === /* Ok */0) {
      var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
      if (count.TAG === /* Ok */0) {
        var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
        if (offset.TAG === /* Ok */0) {
          var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
          if (limit.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      data: data._0,
                      message: message._0,
                      count: count._0,
                      offset: offset._0,
                      limit: limit._0
                    }
                  };
          }
          var e = limit._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".limit" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = offset._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".offset" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = count._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".count" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = message._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".message" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function use$24(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/transaction?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var Transaction = {
  kind_encode: kind_encode,
  kind_decode: kind_decode,
  transaction_encode: transaction_encode,
  transaction_decode: transaction_decode,
  response_encode: response_encode$5,
  response_decode: response_decode$5,
  use: use$24
};

function data_encode$3(v) {
  return Js_dict.fromArray([
              [
                "order-complete",
                Spice.floatToJson(v.orderComplete)
              ],
              [
                "cash-refund",
                Spice.floatToJson(v.cashRefund)
              ],
              [
                "imweb-pay",
                Spice.floatToJson(v.imwebPay)
              ],
              [
                "imweb-cancel",
                Spice.floatToJson(v.imwebCancel)
              ],
              [
                "order-cancel",
                Spice.floatToJson(v.orderCancel)
              ],
              [
                "order-refund",
                Spice.floatToJson(v.orderRefund)
              ],
              [
                "sinsun-cash",
                Spice.floatToJson(v.sinsunCash)
              ],
              [
                "deposit",
                Spice.floatToJson(v.deposit)
              ]
            ]);
}

function data_decode$3(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var orderComplete = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-complete"), null));
  if (orderComplete.TAG === /* Ok */0) {
    var cashRefund = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "cash-refund"), null));
    if (cashRefund.TAG === /* Ok */0) {
      var imwebPay = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "imweb-pay"), null));
      if (imwebPay.TAG === /* Ok */0) {
        var imwebCancel = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "imweb-cancel"), null));
        if (imwebCancel.TAG === /* Ok */0) {
          var orderCancel = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-cancel"), null));
          if (orderCancel.TAG === /* Ok */0) {
            var orderRefund = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-refund"), null));
            if (orderRefund.TAG === /* Ok */0) {
              var sinsunCash = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "sinsun-cash"), null));
              if (sinsunCash.TAG === /* Ok */0) {
                var deposit = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "deposit"), null));
                if (deposit.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: {
                            orderComplete: orderComplete._0,
                            cashRefund: cashRefund._0,
                            imwebPay: imwebPay._0,
                            imwebCancel: imwebCancel._0,
                            orderCancel: orderCancel._0,
                            orderRefund: orderRefund._0,
                            sinsunCash: sinsunCash._0,
                            deposit: deposit._0
                          }
                        };
                }
                var e = deposit._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".deposit" + e.path,
                          message: e.message,
                          value: e.value
                        }
                      };
              }
              var e$1 = sinsunCash._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".sinsun-cash" + e$1.path,
                        message: e$1.message,
                        value: e$1.value
                      }
                    };
            }
            var e$2 = orderRefund._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".order-refund" + e$2.path,
                      message: e$2.message,
                      value: e$2.value
                    }
                  };
          }
          var e$3 = orderCancel._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".order-cancel" + e$3.path,
                    message: e$3.message,
                    value: e$3.value
                  }
                };
        }
        var e$4 = imwebCancel._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".imweb-cancel" + e$4.path,
                  message: e$4.message,
                  value: e$4.value
                }
              };
      }
      var e$5 = imwebPay._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".imweb-pay" + e$5.path,
                message: e$5.message,
                value: e$5.value
              }
            };
    }
    var e$6 = cashRefund._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".cash-refund" + e$6.path,
              message: e$6.message,
              value: e$6.value
            }
          };
  }
  var e$7 = orderComplete._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".order-complete" + e$7.path,
            message: e$7.message,
            value: e$7.value
          }
        };
}

function response_encode$6(v) {
  return Js_dict.fromArray([
              [
                "data",
                data_encode$3(v.data)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ]
            ]);
}

function response_decode$6(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = data_decode$3(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
    if (message.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                data: data._0,
                message: message._0
              }
            };
    }
    var e = message._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".message" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$25(queryParams) {
  var fetcherOptions = {
    revalidateIfStale: true,
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/transaction/summary?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var TransactionSummary = {
  data_encode: data_encode$3,
  data_decode: data_decode$3,
  response_encode: response_encode$6,
  response_decode: response_decode$6,
  use: use$25
};

function status_encode$4(v) {
  switch (v) {
    case /* REQUEST */0 :
        return "REQUEST";
    case /* PROCESSING */1 :
        return "PROCESSING";
    case /* SUCCESS */2 :
        return "SUCCESS";
    case /* FAIL */3 :
        return "FAIL";
    
  }
}

function status_decode$4(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("REQUEST" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* REQUEST */0
          };
  } else if ("PROCESSING" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PROCESSING */1
          };
  } else if ("SUCCESS" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* SUCCESS */2
          };
  } else if ("FAIL" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* FAIL */3
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function download_encode(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.intToJson(v.id)
              ],
              [
                "requested-at",
                Spice.stringToJson(v.requestAt)
              ],
              [
                "file-name",
                Spice.stringToJson(v.filename)
              ],
              [
                "status",
                status_encode$4(v.status)
              ],
              [
                "file-expired-at",
                Spice.optionToJson(Spice.stringToJson, v.expiredAt)
              ],
              [
                "request-message-id",
                Spice.optionToJson(Spice.stringToJson, v.requestMessageId)
              ],
              [
                "excelType",
                Spice.optionToJson(Spice.stringToJson, v.excelType)
              ],
              [
                "file-path",
                Spice.optionToJson(Spice.stringToJson, v.filepath)
              ]
            ]);
}

function download_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var requestAt = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "requested-at"), null));
    if (requestAt.TAG === /* Ok */0) {
      var filename = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "file-name"), null));
      if (filename.TAG === /* Ok */0) {
        var status = status_decode$4(Belt_Option.getWithDefault(Js_dict.get(dict$1, "status"), null));
        if (status.TAG === /* Ok */0) {
          var expiredAt = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "file-expired-at"), null));
          if (expiredAt.TAG === /* Ok */0) {
            var requestMessageId = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "request-message-id"), null));
            if (requestMessageId.TAG === /* Ok */0) {
              var excelType = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "excelType"), null));
              if (excelType.TAG === /* Ok */0) {
                var filepath = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "file-path"), null));
                if (filepath.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: {
                            id: id._0,
                            requestAt: requestAt._0,
                            filename: filename._0,
                            status: status._0,
                            expiredAt: expiredAt._0,
                            requestMessageId: requestMessageId._0,
                            excelType: excelType._0,
                            filepath: filepath._0
                          }
                        };
                }
                var e = filepath._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".file-path" + e.path,
                          message: e.message,
                          value: e.value
                        }
                      };
              }
              var e$1 = excelType._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".excelType" + e$1.path,
                        message: e$1.message,
                        value: e$1.value
                      }
                    };
            }
            var e$2 = requestMessageId._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".request-message-id" + e$2.path,
                      message: e$2.message,
                      value: e$2.value
                    }
                  };
          }
          var e$3 = expiredAt._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".file-expired-at" + e$3.path,
                    message: e$3.message,
                    value: e$3.value
                  }
                };
        }
        var e$4 = status._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".status" + e$4.path,
                  message: e$4.message,
                  value: e$4.value
                }
              };
      }
      var e$5 = filename._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".file-name" + e$5.path,
                message: e$5.message,
                value: e$5.value
              }
            };
    }
    var e$6 = requestAt._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".requested-at" + e$6.path,
              message: e$6.message,
              value: e$6.value
            }
          };
  }
  var e$7 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$7.path,
            message: e$7.message,
            value: e$7.value
          }
        };
}

function downloads_encode(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(download_encode, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ]
            ]);
}

function downloads_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(download_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
      if (offset.TAG === /* Ok */0) {
        var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
        if (limit.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    data: data._0,
                    count: count._0,
                    offset: offset._0,
                    limit: limit._0
                  }
                };
        }
        var e = limit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".limit" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = offset._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".offset" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function use$26(queryParams) {
  var fetcherOptions = {
    refreshInterval: 10000,
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/excel-export?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var Downloads = {
  status_encode: status_encode$4,
  status_decode: status_decode$4,
  download_encode: download_encode,
  download_decode: download_decode,
  downloads_encode: downloads_encode,
  downloads_decode: downloads_decode,
  use: use$26
};

function marketType_encode(v) {
  switch (v) {
    case /* ONLINE */0 :
        return "online";
    case /* WHOLESALE */1 :
        return "wholesale";
    case /* OFFLINE */2 :
        return "offline";
    
  }
}

function marketType_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("online" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* ONLINE */0
          };
  } else if ("wholesale" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* WHOLESALE */1
          };
  } else if ("offline" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* OFFLINE */2
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function shipment_encode(v) {
  return Js_dict.fromArray([
              [
                "shipment-date",
                Spice.stringToJson(v.date)
              ],
              [
                "market-type",
                marketType_encode(v.marketType)
              ],
              [
                "item",
                Spice.stringToJson(v.crop)
              ],
              [
                "kind",
                Spice.stringToJson(v.cultivar)
              ],
              [
                "weight",
                Spice.optionToJson(Spice.floatToJson, v.weight)
              ],
              [
                "weight-unit",
                Spice.optionToJson(weightUnit_encode, v.weightUnit)
              ],
              [
                "package-type",
                Spice.optionToJson(Spice.stringToJson, v.packageType)
              ],
              [
                "grade",
                Spice.optionToJson(Spice.stringToJson, v.grade)
              ],
              [
                "total-quantity",
                Spice.floatToJson(v.totalQuantity)
              ],
              [
                "total-price",
                Spice.floatToJson(v.totalPrice)
              ],
              [
                "sku",
                Spice.stringToJson(v.sku)
              ]
            ]);
}

function shipment_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var date = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "shipment-date"), null));
  if (date.TAG === /* Ok */0) {
    var marketType = marketType_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "market-type"), null));
    if (marketType.TAG === /* Ok */0) {
      var crop = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "item"), null));
      if (crop.TAG === /* Ok */0) {
        var cultivar = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "kind"), null));
        if (cultivar.TAG === /* Ok */0) {
          var weight = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "weight"), null));
          if (weight.TAG === /* Ok */0) {
            var weightUnit = Spice.optionFromJson(weightUnit_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "weight-unit"), null));
            if (weightUnit.TAG === /* Ok */0) {
              var packageType = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "package-type"), null));
              if (packageType.TAG === /* Ok */0) {
                var grade = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "grade"), null));
                if (grade.TAG === /* Ok */0) {
                  var totalQuantity = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-quantity"), null));
                  if (totalQuantity.TAG === /* Ok */0) {
                    var totalPrice = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-price"), null));
                    if (totalPrice.TAG === /* Ok */0) {
                      var sku = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "sku"), null));
                      if (sku.TAG === /* Ok */0) {
                        return {
                                TAG: /* Ok */0,
                                _0: {
                                  date: date._0,
                                  marketType: marketType._0,
                                  crop: crop._0,
                                  cultivar: cultivar._0,
                                  weight: weight._0,
                                  weightUnit: weightUnit._0,
                                  packageType: packageType._0,
                                  grade: grade._0,
                                  totalQuantity: totalQuantity._0,
                                  totalPrice: totalPrice._0,
                                  sku: sku._0
                                }
                              };
                      }
                      var e = sku._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".sku" + e.path,
                                message: e.message,
                                value: e.value
                              }
                            };
                    }
                    var e$1 = totalPrice._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".total-price" + e$1.path,
                              message: e$1.message,
                              value: e$1.value
                            }
                          };
                  }
                  var e$2 = totalQuantity._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".total-quantity" + e$2.path,
                            message: e$2.message,
                            value: e$2.value
                          }
                        };
                }
                var e$3 = grade._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".grade" + e$3.path,
                          message: e$3.message,
                          value: e$3.value
                        }
                      };
              }
              var e$4 = packageType._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".package-type" + e$4.path,
                        message: e$4.message,
                        value: e$4.value
                      }
                    };
            }
            var e$5 = weightUnit._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".weight-unit" + e$5.path,
                      message: e$5.message,
                      value: e$5.value
                    }
                  };
          }
          var e$6 = weight._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".weight" + e$6.path,
                    message: e$6.message,
                    value: e$6.value
                  }
                };
        }
        var e$7 = cultivar._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".kind" + e$7.path,
                  message: e$7.message,
                  value: e$7.value
                }
              };
      }
      var e$8 = crop._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".item" + e$8.path,
                message: e$8.message,
                value: e$8.value
              }
            };
    }
    var e$9 = marketType._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".market-type" + e$9.path,
              message: e$9.message,
              value: e$9.value
            }
          };
  }
  var e$10 = date._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".shipment-date" + e$10.path,
            message: e$10.message,
            value: e$10.value
          }
        };
}

function shipments_encode(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(shipment_encode, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ]
            ]);
}

function shipments_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(shipment_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
      if (offset.TAG === /* Ok */0) {
        var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
        if (limit.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    data: data._0,
                    count: count._0,
                    offset: offset._0,
                    limit: limit._0
                  }
                };
        }
        var e = limit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".limit" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = offset._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".offset" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function use$27(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/shipment?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var Shipments = {
  marketType_encode: marketType_encode,
  marketType_decode: marketType_decode,
  shipment_encode: shipment_encode,
  shipment_decode: shipment_decode,
  shipments_encode: shipments_encode,
  shipments_decode: shipments_decode,
  use: use$27
};

function response_encode$7(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.floatToJson(v.price)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ]
            ]);
}

function response_decode$7(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var price = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (price.TAG === /* Ok */0) {
    var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
    if (message.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                price: price._0,
                message: message._0
              }
            };
    }
    var e = message._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".message" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = price._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$28(queryParam) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/shipment/amounts?" + queryParam, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var ShipmentSummary = {
  response_encode: response_encode$7,
  response_decode: response_decode$7,
  use: use$28
};

function response_encode$8(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.floatToJson(v.price)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ]
            ]);
}

function response_decode$8(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var price = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (price.TAG === /* Ok */0) {
    var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
    if (message.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                price: price._0,
                message: message._0
              }
            };
    }
    var e = message._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".message" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = price._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$29(param) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/shipment/monthly-amounts?market-type=all", FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var ShipmentMontlyAmount = {
  response_encode: response_encode$8,
  response_decode: response_decode$8,
  use: use$29
};

function offlineOrder_encode(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.intToJson(v.id)
              ],
              [
                "order-product-no",
                Spice.stringToJson(v.orderProductNo)
              ],
              [
                "sku",
                Spice.stringToJson(v.sku)
              ],
              [
                "created-at",
                Spice.stringToJson(v.createdAt)
              ],
              [
                "release-date",
                Spice.optionToJson(Spice.stringToJson, v.releaseDate)
              ],
              [
                "order-no",
                Spice.stringToJson(v.orderNo)
              ],
              [
                "order-quantity-complete",
                Spice.optionToJson(Spice.floatToJson, v.confirmedOrderQuantity)
              ],
              [
                "order-quantity",
                Spice.floatToJson(v.orderQuantity)
              ],
              [
                "buyer-sell-price",
                Spice.floatToJson(v.price)
              ],
              [
                "producer-name",
                Spice.stringToJson(v.producerName)
              ],
              [
                "producer-id",
                Spice.intToJson(v.producerId)
              ],
              [
                "buyer-name",
                Spice.stringToJson(v.buyerName)
              ],
              [
                "buyer-id",
                Spice.intToJson(v.buyerId)
              ],
              [
                "producer-product-cost",
                Spice.floatToJson(v.cost)
              ],
              [
                "item",
                Spice.stringToJson(v.crop)
              ],
              [
                "order-product-id",
                Spice.stringToJson(v.orderProductId)
              ],
              [
                "release-due-date",
                Spice.stringToJson(v.releaseDueDate)
              ],
              [
                "kind",
                Spice.stringToJson(v.cultivar)
              ],
              [
                "weight",
                Spice.optionToJson(Spice.floatToJson, v.weight)
              ],
              [
                "weight-unit",
                weightUnit_encode(v.weightUnit)
              ],
              [
                "package-type",
                Spice.optionToJson(Spice.stringToJson, v.packageType)
              ],
              [
                "grade",
                Spice.optionToJson(Spice.stringToJson, v.grade)
              ]
            ]);
}

function offlineOrder_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var orderProductNo = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-product-no"), null));
    if (orderProductNo.TAG === /* Ok */0) {
      var sku = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "sku"), null));
      if (sku.TAG === /* Ok */0) {
        var createdAt = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "created-at"), null));
        if (createdAt.TAG === /* Ok */0) {
          var releaseDate = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "release-date"), null));
          if (releaseDate.TAG === /* Ok */0) {
            var orderNo = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-no"), null));
            if (orderNo.TAG === /* Ok */0) {
              var confirmedOrderQuantity = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-quantity-complete"), null));
              if (confirmedOrderQuantity.TAG === /* Ok */0) {
                var orderQuantity = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-quantity"), null));
                if (orderQuantity.TAG === /* Ok */0) {
                  var price = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyer-sell-price"), null));
                  if (price.TAG === /* Ok */0) {
                    var producerName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-name"), null));
                    if (producerName.TAG === /* Ok */0) {
                      var producerId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-id"), null));
                      if (producerId.TAG === /* Ok */0) {
                        var buyerName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyer-name"), null));
                        if (buyerName.TAG === /* Ok */0) {
                          var buyerId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyer-id"), null));
                          if (buyerId.TAG === /* Ok */0) {
                            var cost = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "producer-product-cost"), null));
                            if (cost.TAG === /* Ok */0) {
                              var crop = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "item"), null));
                              if (crop.TAG === /* Ok */0) {
                                var orderProductId = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-product-id"), null));
                                if (orderProductId.TAG === /* Ok */0) {
                                  var releaseDueDate = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "release-due-date"), null));
                                  if (releaseDueDate.TAG === /* Ok */0) {
                                    var cultivar = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "kind"), null));
                                    if (cultivar.TAG === /* Ok */0) {
                                      var weight = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "weight"), null));
                                      if (weight.TAG === /* Ok */0) {
                                        var weightUnit = weightUnit_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "weight-unit"), null));
                                        if (weightUnit.TAG === /* Ok */0) {
                                          var packageType = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "package-type"), null));
                                          if (packageType.TAG === /* Ok */0) {
                                            var grade = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "grade"), null));
                                            if (grade.TAG === /* Ok */0) {
                                              return {
                                                      TAG: /* Ok */0,
                                                      _0: {
                                                        id: id._0,
                                                        orderProductNo: orderProductNo._0,
                                                        sku: sku._0,
                                                        createdAt: createdAt._0,
                                                        releaseDate: releaseDate._0,
                                                        orderNo: orderNo._0,
                                                        confirmedOrderQuantity: confirmedOrderQuantity._0,
                                                        orderQuantity: orderQuantity._0,
                                                        price: price._0,
                                                        producerName: producerName._0,
                                                        producerId: producerId._0,
                                                        buyerName: buyerName._0,
                                                        buyerId: buyerId._0,
                                                        cost: cost._0,
                                                        crop: crop._0,
                                                        orderProductId: orderProductId._0,
                                                        releaseDueDate: releaseDueDate._0,
                                                        cultivar: cultivar._0,
                                                        weight: weight._0,
                                                        weightUnit: weightUnit._0,
                                                        packageType: packageType._0,
                                                        grade: grade._0
                                                      }
                                                    };
                                            }
                                            var e = grade._0;
                                            return {
                                                    TAG: /* Error */1,
                                                    _0: {
                                                      path: ".grade" + e.path,
                                                      message: e.message,
                                                      value: e.value
                                                    }
                                                  };
                                          }
                                          var e$1 = packageType._0;
                                          return {
                                                  TAG: /* Error */1,
                                                  _0: {
                                                    path: ".package-type" + e$1.path,
                                                    message: e$1.message,
                                                    value: e$1.value
                                                  }
                                                };
                                        }
                                        var e$2 = weightUnit._0;
                                        return {
                                                TAG: /* Error */1,
                                                _0: {
                                                  path: ".weight-unit" + e$2.path,
                                                  message: e$2.message,
                                                  value: e$2.value
                                                }
                                              };
                                      }
                                      var e$3 = weight._0;
                                      return {
                                              TAG: /* Error */1,
                                              _0: {
                                                path: ".weight" + e$3.path,
                                                message: e$3.message,
                                                value: e$3.value
                                              }
                                            };
                                    }
                                    var e$4 = cultivar._0;
                                    return {
                                            TAG: /* Error */1,
                                            _0: {
                                              path: ".kind" + e$4.path,
                                              message: e$4.message,
                                              value: e$4.value
                                            }
                                          };
                                  }
                                  var e$5 = releaseDueDate._0;
                                  return {
                                          TAG: /* Error */1,
                                          _0: {
                                            path: ".release-due-date" + e$5.path,
                                            message: e$5.message,
                                            value: e$5.value
                                          }
                                        };
                                }
                                var e$6 = orderProductId._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: ".order-product-id" + e$6.path,
                                          message: e$6.message,
                                          value: e$6.value
                                        }
                                      };
                              }
                              var e$7 = crop._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: ".item" + e$7.path,
                                        message: e$7.message,
                                        value: e$7.value
                                      }
                                    };
                            }
                            var e$8 = cost._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".producer-product-cost" + e$8.path,
                                      message: e$8.message,
                                      value: e$8.value
                                    }
                                  };
                          }
                          var e$9 = buyerId._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".buyer-id" + e$9.path,
                                    message: e$9.message,
                                    value: e$9.value
                                  }
                                };
                        }
                        var e$10 = buyerName._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".buyer-name" + e$10.path,
                                  message: e$10.message,
                                  value: e$10.value
                                }
                              };
                      }
                      var e$11 = producerId._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".producer-id" + e$11.path,
                                message: e$11.message,
                                value: e$11.value
                              }
                            };
                    }
                    var e$12 = producerName._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".producer-name" + e$12.path,
                              message: e$12.message,
                              value: e$12.value
                            }
                          };
                  }
                  var e$13 = price._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".buyer-sell-price" + e$13.path,
                            message: e$13.message,
                            value: e$13.value
                          }
                        };
                }
                var e$14 = orderQuantity._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".order-quantity" + e$14.path,
                          message: e$14.message,
                          value: e$14.value
                        }
                      };
              }
              var e$15 = confirmedOrderQuantity._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".order-quantity-complete" + e$15.path,
                        message: e$15.message,
                        value: e$15.value
                      }
                    };
            }
            var e$16 = orderNo._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".order-no" + e$16.path,
                      message: e$16.message,
                      value: e$16.value
                    }
                  };
          }
          var e$17 = releaseDate._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".release-date" + e$17.path,
                    message: e$17.message,
                    value: e$17.value
                  }
                };
        }
        var e$18 = createdAt._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".created-at" + e$18.path,
                  message: e$18.message,
                  value: e$18.value
                }
              };
      }
      var e$19 = sku._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".sku" + e$19.path,
                message: e$19.message,
                value: e$19.value
              }
            };
    }
    var e$20 = orderProductNo._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".order-product-no" + e$20.path,
              message: e$20.message,
              value: e$20.value
            }
          };
  }
  var e$21 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$21.path,
            message: e$21.message,
            value: e$21.value
          }
        };
}

function offlineOrders_encode(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(offlineOrder_encode, v.data)
              ],
              [
                "count",
                Spice.intToJson(v.count)
              ],
              [
                "offset",
                Spice.intToJson(v.offset)
              ],
              [
                "limit",
                Spice.intToJson(v.limit)
              ]
            ]);
}

function offlineOrders_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(offlineOrder_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var count = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "count"), null));
    if (count.TAG === /* Ok */0) {
      var offset = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "offset"), null));
      if (offset.TAG === /* Ok */0) {
        var limit = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "limit"), null));
        if (limit.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    data: data._0,
                    count: count._0,
                    offset: offset._0,
                    limit: limit._0
                  }
                };
        }
        var e = limit._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".limit" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = offset._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".offset" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = count._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".count" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function use$30(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/offline-order?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var OfflineOrders = {
  offlineOrder_encode: offlineOrder_encode,
  offlineOrder_decode: offlineOrder_decode,
  offlineOrders_encode: offlineOrders_encode,
  offlineOrders_decode: offlineOrders_decode,
  use: use$30
};

function errorCode_encode$1(v) {
  switch (v.TAG | 0) {
    case /* Sku */0 :
        return [
                "Sku",
                Spice.stringToJson(v._0)
              ];
    case /* EncryptedDocument */1 :
        return [
                "EncryptedDocument",
                Spice.stringToJson(v._0)
              ];
    case /* Role */2 :
        return [
                "Role",
                Spice.stringToJson(v._0)
              ];
    case /* Columns */3 :
        return [
                "Columns",
                Spice.stringToJson(v._0)
              ];
    case /* BuyerId */4 :
        return [
                "BuyerId",
                Spice.stringToJson(v._0)
              ];
    case /* ReleaseDueDate */5 :
        return [
                "ReleaseDueDate",
                Spice.stringToJson(v._0)
              ];
    case /* ProductDetail */6 :
        return [
                "ProductDetail",
                Spice.stringToJson(v._0)
              ];
    case /* Etc */7 :
        return [
                "Etc",
                Spice.stringToJson(v._0)
              ];
    
  }
}

function errorCode_decode$1(v) {
  var json_arr = Js_json.classify(v);
  if (typeof json_arr === "number") {
    return Spice.error(undefined, "Not a variant", v);
  }
  if (json_arr.TAG !== /* JSONArray */3) {
    return Spice.error(undefined, "Not a variant", v);
  }
  var json_arr$1 = json_arr._0;
  if (json_arr$1.length === 0) {
    return Spice.error(undefined, "Expected variant, found empty array", v);
  }
  var tagged = json_arr$1.map(Js_json.classify);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match !== "number" && match.TAG === /* JSONString */0) {
    switch (match._0) {
      case "BuyerId" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* BuyerId */4,
                      _0: v0._0
                    }
                  };
          }
          var e = v0._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
      case "Columns" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$1 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$1.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* Columns */3,
                      _0: v0$1._0
                    }
                  };
          }
          var e$1 = v0$1._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
      case "EncryptedDocument" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$2 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$2.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* EncryptedDocument */1,
                      _0: v0$2._0
                    }
                  };
          }
          var e$2 = v0$2._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
      case "Etc" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$3 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$3.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* Etc */7,
                      _0: v0$3._0
                    }
                  };
          }
          var e$3 = v0$3._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$3.path,
                    message: e$3.message,
                    value: e$3.value
                  }
                };
      case "ProductDetail" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$4 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$4.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* ProductDetail */6,
                      _0: v0$4._0
                    }
                  };
          }
          var e$4 = v0$4._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$4.path,
                    message: e$4.message,
                    value: e$4.value
                  }
                };
      case "ReleaseDueDate" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$5 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$5.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* ReleaseDueDate */5,
                      _0: v0$5._0
                    }
                  };
          }
          var e$5 = v0$5._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$5.path,
                    message: e$5.message,
                    value: e$5.value
                  }
                };
      case "Role" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$6 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$6.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* Role */2,
                      _0: v0$6._0
                    }
                  };
          }
          var e$6 = v0$6._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$6.path,
                    message: e$6.message,
                    value: e$6.value
                  }
                };
      case "Sku" :
          if (tagged.length !== 2) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          }
          var v0$7 = Spice.stringFromJson(Belt_Array.getExn(json_arr$1, 1));
          if (v0$7.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      TAG: /* Sku */0,
                      _0: v0$7._0
                    }
                  };
          }
          var e$7 = v0$7._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "[0]" + e$7.path,
                    message: e$7.message,
                    value: e$7.value
                  }
                };
      default:
        
    }
  }
  return Spice.error(undefined, "Invalid variant constructor", Belt_Array.getExn(json_arr$1, 0));
}

function encoderErrorCode$1(v) {
  return v._0;
}

function decoderErrorCode$1(json) {
  var str = Js_json.classify(json);
  if (typeof str === "number") {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONString",
              value: json
            }
          };
  }
  if (str.TAG !== /* JSONString */0) {
    return {
            TAG: /* Error */1,
            _0: {
              path: "",
              message: "Expected JSONString",
              value: json
            }
          };
  }
  switch (str._0) {
    case "buyer-id" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* BuyerId */4,
                  _0: "바이어id 유효성검증에 실패하였습니다."
                }
              };
    case "columns" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* Columns */3,
                  _0: "엑셀데이터 유효성검증에 실패하였습니다."
                }
              };
    case "encrypted-document" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* EncryptedDocument */1,
                  _0: "엑셀 파일에 암호가 걸려 있습니다."
                }
              };
    case "etc" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* Etc */7,
                  _0: "알 수 없는 오류가 발생하였습니다."
                }
              };
    case "product-detail" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* ProductDetail */6,
                  _0: "등록할 상품 상세정보를 기입해주세요."
                }
              };
    case "release-due-date" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* ReleaseDueDate */5,
                  _0: "출고예정일 유효성검증에 실패하였습니다."
                }
              };
    case "role" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* Role */2,
                  _0: "유저 role 유효성검증이 실패하였습다.(admin이 아닌 유저)"
                }
              };
    case "sku" :
        return {
                TAG: /* Ok */0,
                _0: {
                  TAG: /* Sku */0,
                  _0: "옵션코드(C열)에 문제를 발견하였습니다."
                }
              };
    default:
      return {
              TAG: /* Error */1,
              _0: {
                path: "",
                message: "Expected JSONString",
                value: json
              }
            };
  }
}

var codecErrorCode$1 = [
  encoderErrorCode$1,
  decoderErrorCode$1
];

function data_encode$4(v) {
  return Js_dict.fromArray([
              [
                "created-at",
                Spice.stringToJson(v.createdAt)
              ],
              [
                "upload-no",
                Spice.stringToJson(v.uploadNo)
              ],
              [
                "status",
                uploadStatus_encode(v.status)
              ],
              [
                "file-name",
                Spice.stringToJson(v.filename)
              ],
              [
                "error-code",
                Spice.optionToJson(encoderErrorCode$1, v.errorCode)
              ],
              [
                "error-msg",
                Spice.optionToJson(Spice.stringToJson, v.errorMsg)
              ],
              [
                "fail-data-json",
                Spice.optionToJson((function (param) {
                        return Spice.arrayToJson(Spice.intToJson, param);
                      }), v.fileDataRows)
              ]
            ]);
}

function data_decode$4(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var createdAt = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "created-at"), null));
  if (createdAt.TAG === /* Ok */0) {
    var uploadNo = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "upload-no"), null));
    if (uploadNo.TAG === /* Ok */0) {
      var status = uploadStatus_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "status"), null));
      if (status.TAG === /* Ok */0) {
        var filename = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "file-name"), null));
        if (filename.TAG === /* Ok */0) {
          var errorCode = Spice.optionFromJson(decoderErrorCode$1, Belt_Option.getWithDefault(Js_dict.get(dict$1, "error-code"), null));
          if (errorCode.TAG === /* Ok */0) {
            var errorMsg = Spice.optionFromJson(Spice.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "error-msg"), null));
            if (errorMsg.TAG === /* Ok */0) {
              var fileDataRows = Spice.optionFromJson((function (param) {
                      return Spice.arrayFromJson(Spice.intFromJson, param);
                    }), Belt_Option.getWithDefault(Js_dict.get(dict$1, "fail-data-json"), null));
              if (fileDataRows.TAG === /* Ok */0) {
                return {
                        TAG: /* Ok */0,
                        _0: {
                          createdAt: createdAt._0,
                          uploadNo: uploadNo._0,
                          status: status._0,
                          filename: filename._0,
                          errorCode: errorCode._0,
                          errorMsg: errorMsg._0,
                          fileDataRows: fileDataRows._0
                        }
                      };
              }
              var e = fileDataRows._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".fail-data-json" + e.path,
                        message: e.message,
                        value: e.value
                      }
                    };
            }
            var e$1 = errorMsg._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".error-msg" + e$1.path,
                      message: e$1.message,
                      value: e$1.value
                    }
                  };
          }
          var e$2 = errorCode._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".error-code" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
        }
        var e$3 = filename._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".file-name" + e$3.path,
                  message: e$3.message,
                  value: e$3.value
                }
              };
      }
      var e$4 = status._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".status" + e$4.path,
                message: e$4.message,
                value: e$4.value
              }
            };
    }
    var e$5 = uploadNo._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".upload-no" + e$5.path,
              message: e$5.message,
              value: e$5.value
            }
          };
  }
  var e$6 = createdAt._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".created-at" + e$6.path,
            message: e$6.message,
            value: e$6.value
          }
        };
}

function response_encode$9(v) {
  return Js_dict.fromArray([
              [
                "message",
                Spice.stringToJson(v.message)
              ],
              [
                "data",
                Spice.arrayToJson(data_encode$4, v.data)
              ]
            ]);
}

function response_decode$9(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
  if (message.TAG === /* Ok */0) {
    var data = Spice.arrayFromJson(data_decode$4, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
    if (data.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                message: message._0,
                data: data._0
              }
            };
    }
    var e = data._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".data" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = message._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".message" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$31(param) {
  var fetcherOptions = {
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
    refreshInterval: 3000,
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/offline-order/recent-uploads", FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var OfflineUploadStatus = {
  errorCode_encode: errorCode_encode$1,
  errorCode_decode: errorCode_decode$1,
  encoderErrorCode: encoderErrorCode$1,
  decoderErrorCode: decoderErrorCode$1,
  codecErrorCode: codecErrorCode$1,
  data_encode: data_encode$4,
  data_decode: data_decode$4,
  response_encode: response_encode$9,
  response_decode: response_decode$9,
  use: use$31
};

function response_encode$10(v) {
  return Js_dict.fromArray([
              [
                "message",
                Spice.stringToJson(v.message)
              ],
              [
                "download-url",
                Spice.stringToJson(v.downloadUrl)
              ]
            ]);
}

function response_decode$10(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
  if (message.TAG === /* Ok */0) {
    var downloadUrl = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "download-url"), null));
    if (downloadUrl.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                message: message._0,
                downloadUrl: downloadUrl._0
              }
            };
    }
    var e = downloadUrl._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".download-url" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = message._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".message" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

var AdminS3PresignedUrl = {
  response_encode: response_encode$10,
  response_decode: response_decode$10
};

function category_encode(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.intToJson(v.id)
              ],
              [
                "item-id",
                Spice.intToJson(v.cropId)
              ],
              [
                "item",
                Spice.stringToJson(v.crop)
              ],
              [
                "kind",
                Spice.stringToJson(v.cultivar)
              ]
            ]);
}

function category_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var cropId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "item-id"), null));
    if (cropId.TAG === /* Ok */0) {
      var crop = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "item"), null));
      if (crop.TAG === /* Ok */0) {
        var cultivar = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "kind"), null));
        if (cultivar.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    id: id._0,
                    cropId: cropId._0,
                    crop: crop._0,
                    cultivar: cultivar._0
                  }
                };
        }
        var e = cultivar._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".kind" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = crop._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".item" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = cropId._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".item-id" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function data_encode$5(v) {
  return Spice.arrayToJson(category_encode, v);
}

function data_decode$5(v) {
  return Spice.arrayFromJson(category_decode, v);
}

function response_encode$11(v) {
  return Js_dict.fromArray([
              [
                "data",
                Spice.arrayToJson(category_encode, v.data)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ]
            ]);
}

function response_decode$11(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = Spice.arrayFromJson(category_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
    if (message.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                data: data._0,
                message: message._0
              }
            };
    }
    var e = message._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".message" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

var CropCategory = {
  category_encode: category_encode,
  category_decode: category_decode,
  data_encode: data_encode$5,
  data_decode: data_decode$5,
  response_encode: response_encode$11,
  response_decode: response_decode$11
};

function order_encode$5(v) {
  return Js_dict.fromArray([
              [
                "market-short-name",
                Spice.stringToJson(v.marketName)
              ],
              [
                "wholesaler-short-name",
                Spice.stringToJson(v.wholesalerName)
              ],
              [
                "unit-price",
                Spice.floatToJson(v.unitPrice)
              ],
              [
                "quantity",
                Spice.floatToJson(v.quantity)
              ]
            ]);
}

function order_decode$5(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var marketName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "market-short-name"), null));
  if (marketName.TAG === /* Ok */0) {
    var wholesalerName = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "wholesaler-short-name"), null));
    if (wholesalerName.TAG === /* Ok */0) {
      var unitPrice = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "unit-price"), null));
      if (unitPrice.TAG === /* Ok */0) {
        var quantity = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "quantity"), null));
        if (quantity.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    marketName: marketName._0,
                    wholesalerName: wholesalerName._0,
                    unitPrice: unitPrice._0,
                    quantity: quantity._0
                  }
                };
        }
        var e = quantity._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".quantity" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = unitPrice._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".unit-price" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = wholesalerName._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".wholesaler-short-name" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = marketName._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".market-short-name" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function bulksale_encode(v) {
  return Js_dict.fromArray([
              [
                "difference",
                Spice.floatToJson(v.difference)
              ],
              [
                "total-difference",
                Spice.floatToJson(v.totalDiff)
              ],
              [
                "unit-price",
                Spice.floatToJson(v.unitPrice)
              ]
            ]);
}

function bulksale_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var difference = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "difference"), null));
  if (difference.TAG === /* Ok */0) {
    var totalDiff = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-difference"), null));
    if (totalDiff.TAG === /* Ok */0) {
      var unitPrice = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "unit-price"), null));
      if (unitPrice.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  difference: difference._0,
                  totalDiff: totalDiff._0,
                  unitPrice: unitPrice._0
                }
              };
      }
      var e = unitPrice._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".unit-price" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = totalDiff._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".total-difference" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = difference._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".difference" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function wholesale_encode(v) {
  return Js_dict.fromArray([
              [
                "settlement-date",
                Spice.stringToJson(v.date)
              ],
              [
                "item",
                Spice.stringToJson(v.crop)
              ],
              [
                "kind",
                Spice.stringToJson(v.cultivar)
              ],
              [
                "weight",
                Spice.optionToJson(Spice.floatToJson, v.weight)
              ],
              [
                "package-type",
                Spice.stringToJson(v.packageType)
              ],
              [
                "grade",
                Spice.stringToJson(v.grade)
              ],
              [
                "total-quantity",
                Spice.floatToJson(v.totalQuantity)
              ],
              [
                "total-auction-fee",
                Spice.floatToJson(v.totalAuctionFee)
              ],
              [
                "total-transport-cost",
                Spice.floatToJson(v.totalTransportCost)
              ],
              [
                "total-package-cost-support",
                Spice.floatToJson(v.totalPackageCostSpt)
              ],
              [
                "total-settlement-amount",
                Spice.floatToJson(v.totalSettlementAmount)
              ],
              [
                "total-unloading-cost",
                Spice.floatToJson(v.totalUnloadingCost)
              ],
              [
                "total-transport-cost-support",
                Spice.floatToJson(v.totalTransportCostSpt)
              ],
              [
                "avg-unit-price",
                Spice.floatToJson(v.avgUnitPirce)
              ],
              [
                "order-list",
                Spice.arrayToJson(order_encode$5, v.orders)
              ],
              [
                "bulksale",
                Spice.optionToJson(bulksale_encode, v.bulksale)
              ]
            ]);
}

function wholesale_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var date = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "settlement-date"), null));
  if (date.TAG === /* Ok */0) {
    var crop = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "item"), null));
    if (crop.TAG === /* Ok */0) {
      var cultivar = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "kind"), null));
      if (cultivar.TAG === /* Ok */0) {
        var weight = Spice.optionFromJson(Spice.floatFromJson, Belt_Option.getWithDefault(Js_dict.get(dict$1, "weight"), null));
        if (weight.TAG === /* Ok */0) {
          var packageType = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "package-type"), null));
          if (packageType.TAG === /* Ok */0) {
            var grade = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "grade"), null));
            if (grade.TAG === /* Ok */0) {
              var totalQuantity = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-quantity"), null));
              if (totalQuantity.TAG === /* Ok */0) {
                var totalAuctionFee = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-auction-fee"), null));
                if (totalAuctionFee.TAG === /* Ok */0) {
                  var totalTransportCost = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-transport-cost"), null));
                  if (totalTransportCost.TAG === /* Ok */0) {
                    var totalPackageCostSpt = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-package-cost-support"), null));
                    if (totalPackageCostSpt.TAG === /* Ok */0) {
                      var totalSettlementAmount = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-settlement-amount"), null));
                      if (totalSettlementAmount.TAG === /* Ok */0) {
                        var totalUnloadingCost = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-unloading-cost"), null));
                        if (totalUnloadingCost.TAG === /* Ok */0) {
                          var totalTransportCostSpt = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "total-transport-cost-support"), null));
                          if (totalTransportCostSpt.TAG === /* Ok */0) {
                            var avgUnitPirce = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "avg-unit-price"), null));
                            if (avgUnitPirce.TAG === /* Ok */0) {
                              var orders = Spice.arrayFromJson(order_decode$5, Belt_Option.getWithDefault(Js_dict.get(dict$1, "order-list"), null));
                              if (orders.TAG === /* Ok */0) {
                                var bulksale = Spice.optionFromJson(bulksale_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "bulksale"), null));
                                if (bulksale.TAG === /* Ok */0) {
                                  return {
                                          TAG: /* Ok */0,
                                          _0: {
                                            date: date._0,
                                            crop: crop._0,
                                            cultivar: cultivar._0,
                                            weight: weight._0,
                                            packageType: packageType._0,
                                            grade: grade._0,
                                            totalQuantity: totalQuantity._0,
                                            totalAuctionFee: totalAuctionFee._0,
                                            totalTransportCost: totalTransportCost._0,
                                            totalPackageCostSpt: totalPackageCostSpt._0,
                                            totalSettlementAmount: totalSettlementAmount._0,
                                            totalUnloadingCost: totalUnloadingCost._0,
                                            totalTransportCostSpt: totalTransportCostSpt._0,
                                            avgUnitPirce: avgUnitPirce._0,
                                            orders: orders._0,
                                            bulksale: bulksale._0
                                          }
                                        };
                                }
                                var e = bulksale._0;
                                return {
                                        TAG: /* Error */1,
                                        _0: {
                                          path: ".bulksale" + e.path,
                                          message: e.message,
                                          value: e.value
                                        }
                                      };
                              }
                              var e$1 = orders._0;
                              return {
                                      TAG: /* Error */1,
                                      _0: {
                                        path: ".order-list" + e$1.path,
                                        message: e$1.message,
                                        value: e$1.value
                                      }
                                    };
                            }
                            var e$2 = avgUnitPirce._0;
                            return {
                                    TAG: /* Error */1,
                                    _0: {
                                      path: ".avg-unit-price" + e$2.path,
                                      message: e$2.message,
                                      value: e$2.value
                                    }
                                  };
                          }
                          var e$3 = totalTransportCostSpt._0;
                          return {
                                  TAG: /* Error */1,
                                  _0: {
                                    path: ".total-transport-cost-support" + e$3.path,
                                    message: e$3.message,
                                    value: e$3.value
                                  }
                                };
                        }
                        var e$4 = totalUnloadingCost._0;
                        return {
                                TAG: /* Error */1,
                                _0: {
                                  path: ".total-unloading-cost" + e$4.path,
                                  message: e$4.message,
                                  value: e$4.value
                                }
                              };
                      }
                      var e$5 = totalSettlementAmount._0;
                      return {
                              TAG: /* Error */1,
                              _0: {
                                path: ".total-settlement-amount" + e$5.path,
                                message: e$5.message,
                                value: e$5.value
                              }
                            };
                    }
                    var e$6 = totalPackageCostSpt._0;
                    return {
                            TAG: /* Error */1,
                            _0: {
                              path: ".total-package-cost-support" + e$6.path,
                              message: e$6.message,
                              value: e$6.value
                            }
                          };
                  }
                  var e$7 = totalTransportCost._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".total-transport-cost" + e$7.path,
                            message: e$7.message,
                            value: e$7.value
                          }
                        };
                }
                var e$8 = totalAuctionFee._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".total-auction-fee" + e$8.path,
                          message: e$8.message,
                          value: e$8.value
                        }
                      };
              }
              var e$9 = totalQuantity._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".total-quantity" + e$9.path,
                        message: e$9.message,
                        value: e$9.value
                      }
                    };
            }
            var e$10 = grade._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".grade" + e$10.path,
                      message: e$10.message,
                      value: e$10.value
                    }
                  };
          }
          var e$11 = packageType._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".package-type" + e$11.path,
                    message: e$11.message,
                    value: e$11.value
                  }
                };
        }
        var e$12 = weight._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".weight" + e$12.path,
                  message: e$12.message,
                  value: e$12.value
                }
              };
      }
      var e$13 = cultivar._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".kind" + e$13.path,
                message: e$13.message,
                value: e$13.value
              }
            };
    }
    var e$14 = crop._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".item" + e$14.path,
              message: e$14.message,
              value: e$14.value
            }
          };
  }
  var e$15 = date._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".settlement-date" + e$15.path,
            message: e$15.message,
            value: e$15.value
          }
        };
}

function response_encode$12(v) {
  return Js_dict.fromArray([
              [
                "data",
                wholesale_encode(v.data)
              ],
              [
                "message",
                Spice.stringToJson(v.message)
              ]
            ]);
}

function response_decode$12(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var data = wholesale_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
  if (data.TAG === /* Ok */0) {
    var message = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "message"), null));
    if (message.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                data: data._0,
                message: message._0
              }
            };
    }
    var e = message._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".message" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = data._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".data" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$32(queryParams) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/wholesale-market-order?" + queryParams, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var WholeSale = {
  order_encode: order_encode$5,
  order_decode: order_decode$5,
  bulksale_encode: bulksale_encode,
  bulksale_decode: bulksale_decode,
  wholesale_encode: wholesale_encode,
  wholesale_decode: wholesale_decode,
  response_encode: response_encode$12,
  response_decode: response_decode$12,
  use: use$32
};

function response_encode$13(v) {
  return Js_dict.fromArray([
              [
                "url",
                Spice.stringToJson(v.url)
              ],
              [
                "path",
                Spice.stringToJson(v.path)
              ]
            ]);
}

function response_decode$13(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var url = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "url"), null));
  if (url.TAG === /* Ok */0) {
    var path = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "path"), null));
    if (path.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                url: url._0,
                path: path._0
              }
            };
    }
    var e = path._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".path" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = url._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".url" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function use$33(path) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr(Env.restApiUrl + "/farmmorning-bridge/api/bulk-sale/product-sale-ledger/issue-s3-get-url?path=" + path, FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var BulkSaleLedger = {
  response_encode: response_encode$13,
  response_decode: response_decode$13,
  use: use$33
};

function buyerType_encode(v) {
  if (v) {
    return ["NEW_BUYER"];
  } else {
    return ["EXISTING_BUYER"];
  }
}

function buyerType_decode(v) {
  var json_arr = Js_json.classify(v);
  if (typeof json_arr === "number") {
    return Spice.error(undefined, "Not a variant", v);
  }
  if (json_arr.TAG !== /* JSONArray */3) {
    return Spice.error(undefined, "Not a variant", v);
  }
  var json_arr$1 = json_arr._0;
  if (json_arr$1.length === 0) {
    return Spice.error(undefined, "Expected variant, found empty array", v);
  }
  var tagged = json_arr$1.map(Js_json.classify);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match !== "number" && match.TAG === /* JSONString */0) {
    switch (match._0) {
      case "EXISTING_BUYER" :
          if (tagged.length !== 1) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          } else {
            return {
                    TAG: /* Ok */0,
                    _0: /* EXISTING_BUYER */0
                  };
          }
      case "NEW_BUYER" :
          if (tagged.length !== 1) {
            return Spice.error(undefined, "Invalid number of arguments to variant constructor", v);
          } else {
            return {
                    TAG: /* Ok */0,
                    _0: /* NEW_BUYER */1
                  };
          }
      default:
        
    }
  }
  return Spice.error(undefined, "Invalid variant constructor", Belt_Array.getExn(json_arr$1, 0));
}

function response_encode$14(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.intToJson(v.id)
              ],
              [
                "buyerType",
                buyerType_encode(v.buyerType)
              ],
              [
                "name",
                Spice.stringToJson(v.name)
              ],
              [
                "bizNum",
                Spice.stringToJson(v.bizNum)
              ]
            ]);
}

function response_decode$14(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var buyerType = buyerType_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyerType"), null));
    if (buyerType.TAG === /* Ok */0) {
      var name = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
      if (name.TAG === /* Ok */0) {
        var bizNum = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "bizNum"), null));
        if (bizNum.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    id: id._0,
                    buyerType: buyerType._0,
                    name: name._0,
                    bizNum: bizNum._0
                  }
                };
        }
        var e = bizNum._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".bizNum" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = name._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".name" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = buyerType._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".buyerType" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function use$34(userId) {
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr((function (param) {
          return Belt_Option.map(userId, (function (id) {
                        return Env.afterPayApiUrl + "/buyers/" + id.toString() + "/";
                      }));
        }), FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else if (data !== undefined) {
    return {
            TAG: /* Loaded */0,
            _0: Caml_option.valFromOption(data)
          };
  } else {
    return /* Loading */0;
  }
}

var AfterPayBuyer = {
  buyerType_encode: buyerType_encode,
  buyerType_decode: buyerType_decode,
  response_encode: response_encode$14,
  response_decode: response_decode$14,
  use: use$34
};

function buyerType_encode$1(v) {
  if (v) {
    return "NEW_BUYER";
  } else {
    return "EXISTING_BUYER";
  }
}

function buyerType_decode$1(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("EXISTING_BUYER" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* EXISTING_BUYER */0
          };
  } else if ("NEW_BUYER" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* NEW_BUYER */1
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function credit_encode(v) {
  return Js_dict.fromArray([
              [
                "debtTotal",
                Spice.intToJson(v.debtTotal)
              ],
              [
                "debtMax",
                Spice.intToJson(v.debtMax)
              ],
              [
                "debtExpiryDays",
                Spice.intToJson(v.debtExpiryDays)
              ],
              [
                "debtInterestRate",
                Spice.floatToJson(v.debtInterestRate)
              ],
              [
                "isAfterPayEnabled",
                Spice.boolToJson(v.isAfterPayEnabled)
              ]
            ]);
}

function credit_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var debtTotal = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "debtTotal"), null));
  if (debtTotal.TAG === /* Ok */0) {
    var debtMax = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "debtMax"), null));
    if (debtMax.TAG === /* Ok */0) {
      var debtExpiryDays = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "debtExpiryDays"), null));
      if (debtExpiryDays.TAG === /* Ok */0) {
        var debtInterestRate = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "debtInterestRate"), null));
        if (debtInterestRate.TAG === /* Ok */0) {
          var isAfterPayEnabled = Spice.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "isAfterPayEnabled"), null));
          if (isAfterPayEnabled.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      debtTotal: debtTotal._0,
                      debtMax: debtMax._0,
                      debtExpiryDays: debtExpiryDays._0,
                      debtInterestRate: debtInterestRate._0,
                      isAfterPayEnabled: isAfterPayEnabled._0
                    }
                  };
          }
          var e = isAfterPayEnabled._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".isAfterPayEnabled" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = debtInterestRate._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".debtInterestRate" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = debtExpiryDays._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".debtExpiryDays" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = debtMax._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".debtMax" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = debtTotal._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".debtTotal" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function response_encode$15(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.intToJson(v.id)
              ],
              [
                "buyerType",
                v.buyerType ? "NEW_BUYER" : "EXISTING_BUYER"
              ],
              [
                "name",
                Spice.stringToJson(v.name)
              ],
              [
                "bizNum",
                Spice.stringToJson(v.bizNum)
              ],
              [
                "credit",
                credit_encode(v.credit)
              ]
            ]);
}

function response_decode$15(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var buyerType = buyerType_decode$1(Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyerType"), null));
    if (buyerType.TAG === /* Ok */0) {
      var name = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
      if (name.TAG === /* Ok */0) {
        var bizNum = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "bizNum"), null));
        if (bizNum.TAG === /* Ok */0) {
          var credit = credit_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "credit"), null));
          if (credit.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      id: id._0,
                      buyerType: buyerType._0,
                      name: name._0,
                      bizNum: bizNum._0,
                      credit: credit._0
                    }
                  };
          }
          var e = credit._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".credit" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = bizNum._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".bizNum" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = name._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".name" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = buyerType._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".buyerType" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function useGetUrl(param) {
  var user = use$3(undefined);
  var userId = typeof user === "number" ? undefined : user._0.id;
  return Belt_Option.map(userId, (function (id) {
                return Env.afterPayApiUrl + "/buyers/" + id.toString() + "/credit";
              }));
}

function use$35(param) {
  var url = useGetUrl(undefined);
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr((function (param) {
          return url;
        }), FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    if (error.status !== 404) {
      return {
              TAG: /* Error */1,
              _0: error
            };
    } else {
      return /* NotRegistered */1;
    }
  }
  if (data === undefined) {
    return /* Loading */0;
  }
  var data$p = Caml_option.valFromOption(data);
  var response = response_decode$15(data$p);
  if (response.TAG === /* Ok */0) {
    return {
            TAG: /* Loaded */0,
            _0: response._0
          };
  }
  console.log(data$p);
  console.log(response._0);
  return {
          TAG: /* Error */1,
          _0: {
            status: 500,
            info: "decode failed",
            message: undefined
          }
        };
}

var AfterPayCredit = {
  buyerType_encode: buyerType_encode$1,
  buyerType_decode: buyerType_decode$1,
  credit_encode: credit_encode,
  credit_decode: credit_decode,
  response_encode: response_encode$15,
  response_decode: response_decode$15,
  useGetUrl: useGetUrl,
  use: use$35
};

function buyerType_encode$2(v) {
  if (v) {
    return "NEW_BUYER";
  } else {
    return "EXISTING_BUYER";
  }
}

function buyerType_decode$2(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("EXISTING_BUYER" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* EXISTING_BUYER */0
          };
  } else if ("NEW_BUYER" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* NEW_BUYER */1
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function agreement_encode(v) {
  return Js_dict.fromArray([[
                "agreement",
                Spice.stringToJson(v.agreement)
              ]]);
}

function agreement_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var agreement = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict._0, "agreement"), null));
  if (agreement.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              agreement: agreement._0
            }
          };
  }
  var e = agreement._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".agreement" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function response_encode$16(v) {
  return Js_dict.fromArray([
              [
                "id",
                Spice.intToJson(v.id)
              ],
              [
                "buyerType",
                v.buyerType ? "NEW_BUYER" : "EXISTING_BUYER"
              ],
              [
                "name",
                Spice.stringToJson(v.name)
              ],
              [
                "bizNum",
                Spice.stringToJson(v.bizNum)
              ],
              [
                "terms",
                Spice.arrayToJson(agreement_encode, v.terms)
              ]
            ]);
}

function response_decode$16(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var buyerType = buyerType_decode$2(Belt_Option.getWithDefault(Js_dict.get(dict$1, "buyerType"), null));
    if (buyerType.TAG === /* Ok */0) {
      var name = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
      if (name.TAG === /* Ok */0) {
        var bizNum = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "bizNum"), null));
        if (bizNum.TAG === /* Ok */0) {
          var terms = Spice.arrayFromJson(agreement_decode, Belt_Option.getWithDefault(Js_dict.get(dict$1, "terms"), null));
          if (terms.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      id: id._0,
                      buyerType: buyerType._0,
                      name: name._0,
                      bizNum: bizNum._0,
                      terms: terms._0
                    }
                  };
          }
          var e = terms._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".terms" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = bizNum._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".bizNum" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = name._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".name" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = buyerType._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".buyerType" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function use$36(param) {
  var user = use$3(undefined);
  var userId = typeof user === "number" ? undefined : user._0.id;
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr((function (param) {
          return Belt_Option.map(userId, (function (id) {
                        return Env.afterPayApiUrl + "/buyers/" + id.toString() + "/terms";
                      }));
        }), FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  var data = match.data;
  if (error !== undefined) {
    if (error.status !== 404) {
      return {
              TAG: /* Error */1,
              _0: error
            };
    } else {
      return /* NotRegistered */1;
    }
  }
  if (data === undefined) {
    return /* Loading */0;
  }
  var data$p = Caml_option.valFromOption(data);
  var response = response_decode$16(data$p);
  if (response.TAG === /* Ok */0) {
    return {
            TAG: /* Loaded */0,
            _0: response._0
          };
  }
  console.log(data$p);
  console.log(response._0);
  return {
          TAG: /* Error */1,
          _0: {
            status: 500,
            info: "decode failed",
            message: undefined
          }
        };
}

var AfterPayAgreement = {
  buyerType_encode: buyerType_encode$2,
  buyerType_decode: buyerType_decode$2,
  agreement_encode: agreement_encode,
  agreement_decode: agreement_decode,
  response_encode: response_encode$16,
  response_decode: response_decode$16,
  use: use$36
};

function state_encode(v) {
  switch (v) {
    case /* WAITING_REPAYMENT */0 :
        return "WAITING_REPAYMENT";
    case /* FULL_REPAYMENT */1 :
        return "FULL_REPAYMENT";
    case /* CANCELED */2 :
        return "CANCELED";
    case /* OVERDUE */3 :
        return "OVERDUE";
    case /* PARTIAL_REPAYMENT */4 :
        return "PARTIAL_REPAYMENT";
    
  }
}

function state_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number") {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  if (str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  }
  var str$1 = str._0;
  if ("WAITING_REPAYMENT" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* WAITING_REPAYMENT */0
          };
  } else if ("FULL_REPAYMENT" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* FULL_REPAYMENT */1
          };
  } else if ("CANCELED" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* CANCELED */2
          };
  } else if ("OVERDUE" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* OVERDUE */3
          };
  } else if ("PARTIAL_REPAYMENT" === str$1) {
    return {
            TAG: /* Ok */0,
            _0: /* PARTIAL_REPAYMENT */4
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function stateToString(state) {
  switch (state) {
    case /* WAITING_REPAYMENT */0 :
        return "상환전";
    case /* FULL_REPAYMENT */1 :
        return "상환완료";
    case /* CANCELED */2 :
        return "취소";
    case /* OVERDUE */3 :
        return "연체";
    case /* PARTIAL_REPAYMENT */4 :
        return "일부 상환";
    
  }
}

function order_encode$6(v) {
  return Js_dict.fromArray([
              [
                "paymentWithFees",
                Spice.floatToJson(v.paymentWithFees)
              ],
              [
                "payment",
                Spice.floatToJson(v.payment)
              ],
              [
                "debt",
                Spice.floatToJson(v.debt)
              ],
              [
                "loanFees",
                Spice.floatToJson(v.loanFees)
              ],
              [
                "lateFees",
                Spice.floatToJson(v.lateFees)
              ],
              [
                "state",
                state_encode(v.state)
              ],
              [
                "debtDueDate",
                Spice.stringToJson(v.debtDueDate)
              ],
              [
                "createdAt",
                Spice.stringToJson(v.createdAt)
              ]
            ]);
}

function order_decode$6(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var paymentWithFees = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "paymentWithFees"), null));
  if (paymentWithFees.TAG === /* Ok */0) {
    var payment = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "payment"), null));
    if (payment.TAG === /* Ok */0) {
      var debt = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "debt"), null));
      if (debt.TAG === /* Ok */0) {
        var loanFees = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "loanFees"), null));
        if (loanFees.TAG === /* Ok */0) {
          var lateFees = Spice.floatFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "lateFees"), null));
          if (lateFees.TAG === /* Ok */0) {
            var state = state_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "state"), null));
            if (state.TAG === /* Ok */0) {
              var debtDueDate = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "debtDueDate"), null));
              if (debtDueDate.TAG === /* Ok */0) {
                var createdAt = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "createdAt"), null));
                if (createdAt.TAG === /* Ok */0) {
                  return {
                          TAG: /* Ok */0,
                          _0: {
                            paymentWithFees: paymentWithFees._0,
                            payment: payment._0,
                            debt: debt._0,
                            loanFees: loanFees._0,
                            lateFees: lateFees._0,
                            state: state._0,
                            debtDueDate: debtDueDate._0,
                            createdAt: createdAt._0
                          }
                        };
                }
                var e = createdAt._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".createdAt" + e.path,
                          message: e.message,
                          value: e.value
                        }
                      };
              }
              var e$1 = debtDueDate._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".debtDueDate" + e$1.path,
                        message: e$1.message,
                        value: e$1.value
                      }
                    };
            }
            var e$2 = state._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".state" + e$2.path,
                      message: e$2.message,
                      value: e$2.value
                    }
                  };
          }
          var e$3 = lateFees._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".lateFees" + e$3.path,
                    message: e$3.message,
                    value: e$3.value
                  }
                };
        }
        var e$4 = loanFees._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".loanFees" + e$4.path,
                  message: e$4.message,
                  value: e$4.value
                }
              };
      }
      var e$5 = debt._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".debt" + e$5.path,
                message: e$5.message,
                value: e$5.value
              }
            };
    }
    var e$6 = payment._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".payment" + e$6.path,
              message: e$6.message,
              value: e$6.value
            }
          };
  }
  var e$7 = paymentWithFees._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".paymentWithFees" + e$7.path,
            message: e$7.message,
            value: e$7.value
          }
        };
}

function list_encode(v) {
  return Js_dict.fromArray([
              [
                "size",
                Spice.intToJson(v.size)
              ],
              [
                "totalCount",
                Spice.intToJson(v.totalCount)
              ],
              [
                "totalPage",
                Spice.intToJson(v.totalPage)
              ],
              [
                "data",
                Spice.arrayToJson(order_encode$6, v.data)
              ]
            ]);
}

function list_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var size = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "size"), null));
  if (size.TAG === /* Ok */0) {
    var totalCount = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "totalCount"), null));
    if (totalCount.TAG === /* Ok */0) {
      var totalPage = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "totalPage"), null));
      if (totalPage.TAG === /* Ok */0) {
        var data = Spice.arrayFromJson(order_decode$6, Belt_Option.getWithDefault(Js_dict.get(dict$1, "data"), null));
        if (data.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    size: size._0,
                    totalCount: totalCount._0,
                    totalPage: totalPage._0,
                    data: data._0
                  }
                };
        }
        var e = data._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".data" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = totalPage._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".totalPage" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = totalCount._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".totalCount" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = size._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".size" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function use$37(page) {
  var user = use$3(undefined);
  var userId = typeof user === "number" ? undefined : user._0.id;
  var fetcherOptions = {
    onErrorRetry: onErrorRetry
  };
  var match = Swr((function (param) {
          return Belt_Option.map(userId, (function (id) {
                        return Env.afterPayApiUrl + "/orders?buyer_id=" + String(id) + "&page=" + String(page) + "&size=10";
                      }));
        }), FetchHelper.fetcher, fetcherOptions);
  var error = match.error;
  if (error !== undefined) {
    return {
            TAG: /* Error */1,
            _0: error
          };
  }
  var data = match.data;
  if (data === undefined) {
    return /* Loading */0;
  }
  var data$p = Caml_option.valFromOption(data);
  var response = list_decode(data$p);
  if (response.TAG === /* Ok */0) {
    return {
            TAG: /* Loaded */0,
            _0: response._0
          };
  }
  console.log(data$p);
  console.log(response._0);
  return {
          TAG: /* Error */1,
          _0: {
            status: 500,
            info: "decode failed",
            message: undefined
          }
        };
}

var AfterPayOrdersList = {
  state_encode: state_encode,
  state_decode: state_decode,
  stateToString: stateToString,
  order_encode: order_encode$6,
  order_decode: order_decode$6,
  list_encode: list_encode,
  list_decode: list_decode,
  use: use$37
};

function useSmoothScroll(param) {
  React.useEffect((function () {
          var htmlElement = document.documentElement;
          htmlElement.className = "scroll-smooth";
          return (function (param) {
                    var currentClassName = htmlElement.className;
                    var nextClassName = currentClassName.replace("scroll-smooth", "");
                    htmlElement.className = nextClassName;
                    
                  });
        }), []);
  
}

function useDimension(param) {
  var match = React.useState(function () {
        return /* Unknown */0;
      });
  var setDimension = match[1];
  React.useEffect((function () {
          setDimension(function (param) {
                if (window.innerWidth < 1280) {
                  return /* Mobile */2;
                } else {
                  return /* PC */1;
                }
              });
          
        }), []);
  return match[0];
}

var UserAgent = {
  useDimension: useDimension
};

export {
  useSetPassword ,
  useDebounce ,
  Scroll ,
  onErrorRetry ,
  $$IntersectionObserver$1 as $$IntersectionObserver,
  Auth ,
  User ,
  CRMUser ,
  Orders ,
  OrdersAdmin ,
  OrdersAllAdmin ,
  OrdersAdminUncompleted ,
  OrdersSummary ,
  OrdersSummaryFarmerDelivery ,
  OrdersSummaryAdminDashboard ,
  S3PresignedUrl ,
  Courier ,
  SweetTracker ,
  UploadStatus ,
  QueryUser ,
  Products ,
  NoIE ,
  useInvoice ,
  Costs ,
  Settlements ,
  UserDeposit ,
  Transaction ,
  TransactionSummary ,
  Downloads ,
  Shipments ,
  ShipmentSummary ,
  ShipmentMontlyAmount ,
  OfflineOrders ,
  OfflineUploadStatus ,
  AdminS3PresignedUrl ,
  CropCategory ,
  WholeSale ,
  BulkSaleLedger ,
  AfterPayBuyer ,
  AfterPayCredit ,
  AfterPayAgreement ,
  AfterPayOrdersList ,
  useSmoothScroll ,
  UserAgent ,
  
}
/* Env Not a pure module */
