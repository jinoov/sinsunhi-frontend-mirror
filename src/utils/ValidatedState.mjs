// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";

function validate(param, value, vs) {
  return Belt_Array.reduce(vs, {
              TAG: /* Ok */0,
              _0: value
            }, (function (r, v) {
                var match = Curry._1(v, value);
                if (r.TAG === /* Ok */0) {
                  if (match.TAG === /* Ok */0) {
                    return {
                            TAG: /* Ok */0,
                            _0: r._0
                          };
                  } else {
                    return {
                            TAG: /* Error */1,
                            _0: match._0
                          };
                  }
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: r._0
                        };
                }
              }));
}

function use(type_, value, validators) {
  var match = React.useState(function () {
        return value;
      });
  var setValue = match[1];
  var value$1 = match[0];
  var match$1 = React.useState(function () {
        
      });
  var setError = match$1[1];
  var setState = function (newValue, shouldValidateOpt, param) {
    var shouldValidate = shouldValidateOpt !== undefined ? shouldValidateOpt : false;
    setValue(function (param) {
          return newValue;
        });
    if (!shouldValidate) {
      return ;
    }
    var err = validate(type_, newValue, validators);
    var newError;
    newError = err.TAG === /* Ok */0 ? undefined : err._0;
    setError(function (param) {
          return newError;
        });
  };
  var validateState_validate = function (param) {
    var err = validate(type_, value$1, validators);
    var match;
    match = err.TAG === /* Ok */0 ? [
        undefined,
        true
      ] : [
        err._0,
        false
      ];
    var newError = match[0];
    setError(function (param) {
          return newError;
        });
    return match[1];
  };
  var validateState_error = match$1[0];
  var validateState = {
    validate: validateState_validate,
    error: validateState_error
  };
  return [
          value$1,
          setState,
          validateState
        ];
}

export {
  validate ,
  use ,
}
/* react Not a pure module */
