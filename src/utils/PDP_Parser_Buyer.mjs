// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Helper from "./Helper.mjs";
import * as Locale from "./Locale.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_SetString from "rescript/lib/es6/belt_SetString.js";
import Format from "date-fns/format";

function makeWeightLabel(weight, unit) {
  var weightToStr = function (w) {
    return String(Locale.Float.round1(w));
  };
  var unitToStr = function (u) {
    if (u === "G") {
      return "g";
    } else if (u === "T") {
      return "t";
    } else if (u === "KG") {
      return "kg";
    } else {
      return "";
    }
  };
  return Helper.$$Option.map2(Belt_Option.map(weight, weightToStr), Belt_Option.map(unit, unitToStr), (function (wLabel, uLabel) {
                return wLabel + uLabel;
              }));
}

function makeCountPerPkgLabel(max) {
  return Belt_Option.mapWithDefault(max, "", (function (count) {
                return "최대 " + String(count) + "입";
              }));
}

function makePerSizeLabel(max, unit) {
  var unitToStr = function (u) {
    if (u === "M") {
      return "m";
    } else if (u === "CM") {
      return "cm";
    } else if (u === "MM") {
      return "mm";
    } else {
      return "";
    }
  };
  return Helper.$$Option.map2(Belt_Option.map(max, (function (prim) {
                    return String(prim);
                  })), Belt_Option.map(unit, unitToStr), (function (mLabel, uLabel) {
                return "최대 " + mLabel + uLabel;
              }));
}

function makePerWeightLabel(max, unit) {
  var maxWeightToStr = function (w) {
    return String(Locale.Float.round1(w));
  };
  var unitToStr = function (u) {
    if (u === "G") {
      return "g";
    } else if (u === "T") {
      return "t";
    } else if (u === "KG") {
      return "kg";
    } else {
      return "";
    }
  };
  return Helper.$$Option.map2(Belt_Option.map(max, maxWeightToStr), Belt_Option.map(unit, unitToStr), (function (wLabel, uLabel) {
                return "최대 " + wLabel + uLabel;
              }));
}

function makePriceLabel(price, deliveryCost) {
  return Belt_Option.mapWithDefault(price, "", (function (price$p) {
                return Locale.Float.show(undefined, price$p - deliveryCost | 0, 0) + "원";
              }));
}

var ProductOption = {
  makeWeightLabel: makeWeightLabel,
  makeCountPerPkgLabel: makeCountPerPkgLabel,
  makePerSizeLabel: makePerSizeLabel,
  makePerWeightLabel: makePerWeightLabel,
  makePriceLabel: makePriceLabel
};

function makeWeightLabel$1(weightOptions) {
  return Belt_Array.joinWith(Belt_SetString.toArray(Belt_SetString.fromArray(Belt_Array.keepMap(weightOptions, (function (param) {
                            return makeWeightLabel(param[0], param[1]);
                          })))), "/", (function (x) {
                return x;
              }));
}

function makeGradeLabel(grades) {
  var label = Belt_SetString.toArray(Belt_SetString.fromArray(grades)).join("/");
  if (label === "") {
    return ;
  } else {
    return label;
  }
}

function makeCategoryLabel(categoryItem, categoryKind) {
  return Belt_Array.keep([
                categoryItem,
                categoryKind
              ], Belt_Option.isSome).join("/");
}

function makePkgLabel(pkgs) {
  return Belt_Array.joinWith(Belt_SetString.toArray(Belt_SetString.fromArray(pkgs)), "/", (function (x) {
                return x;
              }));
}

function makeNoticeDateLabel(startDate, endDate) {
  if (startDate !== undefined) {
    if (endDate !== undefined) {
      return "적용기준일: " + Format(new Date(startDate), "y.MM.dd") + "~" + Format(new Date(endDate), "y.MM.dd");
    } else {
      return "적용기준일: " + Format(new Date(startDate), "y.MM.dd") + "~";
    }
  } else if (endDate !== undefined) {
    return "적용기준일: ~" + Format(new Date(endDate), "y.MM.dd");
  } else {
    return "";
  }
}

var Normal = {
  makeWeightLabel: makeWeightLabel$1,
  makeGradeLabel: makeGradeLabel,
  makeCategoryLabel: makeCategoryLabel,
  makePkgLabel: makePkgLabel,
  makeNoticeDateLabel: makeNoticeDateLabel
};

var Quatable = {};

var Product = {
  Normal: Normal,
  Quatable: Quatable
};

export {
  ProductOption ,
  Product ,
  
}
/* Helper Not a pure module */
