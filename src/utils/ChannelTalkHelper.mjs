// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as RelayEnv from "../constants/RelayEnv.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ChannelTalk from "../bindings/ChannelTalk.mjs";
import * as CustomHooks from "./CustomHooks.mjs";
import * as DeviceDetect from "../bindings/DeviceDetect.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ChannelTalkHelper_channelIO_Query_graphql from "../__generated__/ChannelTalkHelper_channelIO_Query_graphql.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(ChannelTalkHelper_channelIO_Query_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(ChannelTalkHelper_channelIO_Query_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(ChannelTalkHelper_channelIO_Query_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(ChannelTalkHelper_channelIO_Query_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, ChannelTalkHelper_channelIO_Query_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, ChannelTalkHelper_channelIO_Query_graphql.node, ChannelTalkHelper_channelIO_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: /* Ok */0,
                        _0: ChannelTalkHelper_channelIO_Query_graphql.Internal.convertResponse(res)
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: /* Error */1,
                        _0: err
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  var __x = Hooks.fetchQuery(environment, ChannelTalkHelper_channelIO_Query_graphql.node, ChannelTalkHelper_channelIO_Query_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).toPromise();
  return __x.then(function (res) {
              return Promise.resolve(ChannelTalkHelper_channelIO_Query_graphql.Internal.convertResponse(res));
            });
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(ChannelTalkHelper_channelIO_Query_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(ChannelTalkHelper_channelIO_Query_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(ChannelTalkHelper_channelIO_Query_graphql.node, ChannelTalkHelper_channelIO_Query_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_makeVariables = ChannelTalkHelper_channelIO_Query_graphql.Utils.makeVariables;

var Query = {
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function bootWithProfile(param) {
  fetchPromised(RelayEnv.envSinsunMarket, undefined, undefined, undefined, undefined).then(function (res) {
        return Promise.resolve(Belt_Option.forEach(res.channelIO, (function (param) {
                          return Belt_Option.forEach(param.bootEvent, (function (bootEvent) {
                                        return window.ChannelIO("boot", {
                                                    pluginKey: Env.channelTalkKey,
                                                    memberId: bootEvent.memberId,
                                                    profile: bootEvent.profile
                                                  });
                                      }));
                        })));
      });
  
}

function updateProfile(param) {
  fetchPromised(RelayEnv.envSinsunMarket, undefined, undefined, undefined, undefined).then(function (res) {
        return Promise.resolve(Belt_Option.forEach(res.channelIO, (function (param) {
                          return Belt_Option.forEach(param.bootEvent, (function (param) {
                                        return window.ChannelIO("updateUser", {
                                                    language: "ko",
                                                    profile: param.profile
                                                  });
                                      }));
                        })));
      });
  
}

function logout(param) {
  return window.ChannelIO("boot", {
              pluginKey: Env.channelTalkKey,
              hideChannelButtonOnBoot: true
            });
}

function useBoot(param) {
  React.useEffect((function () {
          var match = typeof window === "undefined" ? undefined : window;
          if (match !== undefined) {
            window.ChannelIO("boot", {
                  pluginKey: Env.channelTalkKey,
                  hideChannelButtonOnBoot: true
                });
          }
          return ChannelTalk.shutdown;
        }), []);
  var user = CustomHooks.Auth.use(undefined);
  React.useEffect((function () {
          if (typeof user === "number" || user._0.role !== 1) {
            
          } else {
            updateProfile(undefined);
          }
          
        }), [user]);
  
}

function use$1(viewModeOpt, trackData, param) {
  var viewMode = viewModeOpt !== undefined ? viewModeOpt : /* PcAndMobile */0;
  React.useEffect((function () {
          var match = DeviceDetect.detectDevice(undefined);
          switch (viewMode) {
            case /* PcAndMobile */0 :
                ChannelTalk.showChannelButton(undefined);
                break;
            case /* PcOnly */1 :
                if (match !== 1) {
                  
                } else {
                  ChannelTalk.showChannelButton(undefined);
                }
                break;
            case /* MobileOnly */2 :
                if (match >= 2) {
                  ChannelTalk.showChannelButton(undefined);
                }
                break;
            
          }
          return ChannelTalk.hideChannelButton;
        }), []);
  React.useEffect((function () {
          if (trackData !== undefined) {
            window.ChannelIO("track", trackData.eventName, trackData.eventProperty);
          }
          
        }), [trackData]);
  
}

var Hook = {
  useBoot: useBoot,
  use: use$1
};

export {
  Query ,
  bootWithProfile ,
  updateProfile ,
  logout ,
  Hook ,
  
}
/* Env Not a pure module */
