// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function pure(error, v) {
  if (v !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: Caml_option.valFromOption(v)
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: error
          };
  }
}

function nonEmpty(error, s) {
  if (s !== undefined && s !== "") {
    return {
            TAG: /* Ok */0,
            _0: s
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: error
          };
  }
}

function shouldBeTrue(error, v) {
  if (v !== undefined && v) {
    return {
            TAG: /* Ok */0,
            _0: v
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: error
          };
  }
}

function $$float(error, v) {
  var v$p = Belt_Option.flatMap(v, Belt_Float.fromString);
  if (v$p !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: v$p
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: error
          };
  }
}

function $$int(error, v) {
  var v$p = Belt_Option.flatMap(v, Belt_Int.fromString);
  if (v$p !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: v$p
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: error
          };
  }
}

var $$Option = {
  pure: pure,
  nonEmpty: nonEmpty,
  shouldBeTrue: shouldBeTrue,
  $$float: $$float,
  $$int: $$int
};

function pure$1(v) {
  return {
          TAG: /* Ok */0,
          _0: v
        };
}

function nonEmpty$1(error, s) {
  if (s === "") {
    return {
            TAG: /* Error */1,
            _0: error
          };
  } else {
    return {
            TAG: /* Ok */0,
            _0: s
          };
  }
}

function shouldBeTrue$1(error, v) {
  if (v) {
    return {
            TAG: /* Ok */0,
            _0: v
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: error
          };
  }
}

function $$float$1(error, v) {
  var v$p = Belt_Float.fromString(v);
  if (v$p !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: v$p
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: error
          };
  }
}

function $$int$1(error, v) {
  var v$p = Belt_Int.fromString(v);
  if (v$p !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: v$p
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: error
          };
  }
}

function map(f, v) {
  if (v.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: Curry._1(f, v._0)
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: [v._0]
          };
  }
}

function ap(f, v) {
  if (f.TAG === /* Ok */0) {
    if (v.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: Curry._1(f._0, v._0)
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: [v._0]
            };
    }
  }
  var errs = f._0;
  if (v.TAG === /* Ok */0) {
    return {
            TAG: /* Error */1,
            _0: errs
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: Belt_Array.concat(errs, [v._0])
          };
  }
}

export {
  $$Option ,
  pure$1 as pure,
  nonEmpty$1 as nonEmpty,
  shouldBeTrue$1 as shouldBeTrue,
  $$float$1 as $$float,
  $$int$1 as $$int,
  map ,
  ap ,
}
/* No side effect */
