// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../constants/Env.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as CustomHooks from "./CustomHooks.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.mjs";
import * as ReactDialog from "@radix-ui/react-dialog";
import Push_dialogSvg from "../../public/images/push_dialog.svg";

var dialogImage = Push_dialogSvg;

function use(param) {
  var match = React.useState(function () {
        
      });
  var setBraze = match[1];
  var braze = match[0];
  React.useEffect((function () {
          var match = window.ReactNativeWebView;
          if (match == null) {
            try {
              Js_promise.$$catch((function (err) {
                      console.log("braze init error: ", err);
                      return Promise.resolve(undefined);
                    }), Js_promise.then_((function (sdk) {
                          setBraze(function (param) {
                                if (sdk == null) {
                                  return ;
                                } else {
                                  return Caml_option.some(sdk);
                                }
                              });
                          return Promise.resolve(undefined);
                        }), import("@braze/web-sdk")));
            }
            catch (raw_err){
              var err = Caml_js_exceptions.internalToOCamlException(raw_err);
              console.log("fail to initize braze: ", err);
            }
          }
          
        }), []);
  React.useEffect((function () {
          var match = window.ReactNativeWebView;
          if (match == null) {
            try {
              Js_promise.$$catch((function (err) {
                      console.log("Failed to register service worker : ", err);
                      return Promise.resolve(undefined);
                    }), Js_promise.then_((function (param) {
                          if (braze !== undefined) {
                            braze.openSession();
                          }
                          return Promise.resolve(undefined);
                        }), window.navigator.serviceWorker.register("/service-worker.js")));
            }
            catch (raw_err){
              var err = Caml_js_exceptions.internalToOCamlException(raw_err);
              console.log("fail to initize braze: ", err);
              Promise.resolve(undefined);
            }
            if (braze !== undefined) {
              braze.initialize(Env.brazeWebApiKey, {
                    baseUrl: "sdk.iad-06.braze.com",
                    enableLogging: false,
                    manageServiceWorkerExternally: true,
                    safariWebsitePushId: "web.com.sinsunhi.app"
                  });
            }
            
          }
          
        }), [braze]);
  return braze;
}

function changeUser(user, braze) {
  var match = user.role;
  if (match >= 2) {
    return ;
  } else if (Env.vercelEnv === "production") {
    return braze.changeUser(String(user.id));
  } else {
    return braze.changeUser("" + String(user.id) + "-dev");
  }
}

function trigger(param) {
  var dialogTrigger = document.getElementById("braze-notification-trigger");
  Belt_Option.forEach(Belt_Option.flatMap((dialogTrigger == null) ? undefined : Caml_option.some(dialogTrigger), Webapi__Dom__Element.asHtmlElement), (function (dialogTrigger$p) {
          dialogTrigger$p.click();
        }));
}

function Braze$PushNotificationRequestDialog(Props) {
  var braze = use(undefined);
  var user = CustomHooks.Auth.use(undefined);
  var match = React.useState(function () {
        return false;
      });
  var setAvailableShow = match[1];
  var match$1 = React.useState(function () {
        return false;
      });
  var setShow = match$1[1];
  var show = match$1[0];
  var requestPushNotification = function (param) {
    setShow(function (param) {
          return false;
        });
    var match = window.ReactNativeWebView;
    if (!(match == null) || !(braze !== undefined && typeof user !== "number")) {
      return ;
    } else {
      changeUser(user._0, braze);
      return braze.requestPushPermission();
    }
  };
  React.useEffect((function () {
          Belt_Option.forEach(braze, (function (braze$p) {
                  setAvailableShow(function (param) {
                        if (Curry._1(braze$p.isPushSupported, undefined) && !Curry._1(braze$p.isPushPermissionGranted, undefined)) {
                          return !Curry._1(braze$p.isPushBlocked, undefined);
                        } else {
                          return false;
                        }
                      });
                }));
        }), [
        braze,
        show
      ]);
  return React.createElement(ReactDialog.Root, {
              children: null,
              open: show && match[0]
            }, React.createElement(ReactDialog.Trigger, {
                  id: "braze-notification-trigger",
                  onClick: (function (param) {
                      setShow(function (param) {
                            return true;
                          });
                    }),
                  children: "",
                  className: "hidden"
                }), React.createElement(ReactDialog.Portal, {
                  children: null
                }, React.createElement(ReactDialog.Overlay, {
                      className: "dialog-overlay"
                    }), React.createElement(ReactDialog.Content, {
                      children: null,
                      className: "dialog-content-fix rounded-xl w-fit flex flex-col items-center justify-center pb-7",
                      onOpenAutoFocus: (function (prim) {
                          prim.preventDefault();
                        })
                    }, React.createElement("img", {
                          className: "rounded-xl",
                          alt: "push-notification-dialog",
                          src: dialogImage
                        }), React.createElement("div", {
                          className: "mt-5 flex justify-center items-center gap-2 text-[17px]"
                        }, React.createElement("button", {
                              className: "w-36 h-13 rounded-xl bg-enabled-L5 text-enabled-L1",
                              type: "button",
                              onClick: (function (param) {
                                  setShow(function (param) {
                                        return false;
                                      });
                                })
                            }, "나중에"), React.createElement("button", {
                              className: "w-36 h-13 rounded-xl bg-primary text-inverted font-bold",
                              type: "button",
                              onClick: requestPushNotification
                            }, "알림동의")))));
}

var PushNotificationRequestDialog = {
  trigger: trigger,
  make: Braze$PushNotificationRequestDialog
};

export {
  dialogImage ,
  use ,
  changeUser ,
  PushNotificationRequestDialog ,
}
/* dialogImage Not a pure module */
