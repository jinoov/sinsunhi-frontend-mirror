"""신선마켓 관리자"""
type AdminUser implements FreshmarketUser & Node {
  """담당하는 안심판매 신청 목록"""
  bulkSaleApplications(after: ID, before: ID, first: Int, last: Int): BulkSaleApplicationConnection!

  """이메일 주소"""
  emailAddress: EmailAddress!

  """ID"""
  id: ID!

  """이름"""
  name: String!
}

type AdminUserConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [AdminUserEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type AdminUserEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: AdminUser!
}

enum AmountUnit {
  EA
  G
  KG
  L
  ML
  T
}

"""연 평균 판매량 구간"""
enum AverageAnnualSalesRange {
  """3천만원 미만"""
  FROM_0_TO_30M

  """3천만원 이상 1억 미만"""
  FROM_30M_TO_100M

  """1억 이상 3억 미만"""
  FROM_100M_TO_300M

  """3억 이상 5억 미만"""
  FROM_300M_TO_500M

  """5억 이상"""
  FROM_500M_TO_INF
}

"""은행 코드 정보"""
type Bank {
  kcpCode: String

  """kcp의 가상계좌 채번용 은행코드. kcp 가상계좌의 은행정보로 사용됩니다."""
  kcpVirtualCode: String

  """은행 식별용 은행명칭. ('은행'은 표기하지 않습니다. 다만 '뱅크'는 영문 고유명사로 판단하고 표기됩니다.)"""
  name: String!
  tossPaymentsCode: String
}

type Banner implements Node {
  """배너 노드 ID"""
  id: ID!

  """모바일에서 사용자가 보게 되는 배너 이미지 주소"""
  imageUrlMobile: String!

  """PC에서 사용자가 보게 되는 배너 이미지 주소"""
  imageUrlPc: String!

  """모바일에서 클릭시 새 탭 생성 여부"""
  isNewTabMobile: Boolean!

  """PC에서 클릭시 새 탭 생성 여부"""
  isNewTabPc: Boolean!

  """사용자가 클릭시 랜딩하게 되는 페이지의 주소"""
  landingUrl: String!
}

type BannerConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [BannerEdge!]!
  pageInfo: PageInfo!
}

type BannerEdge implements Edge {
  cursor: String!
  node: Banner!
}

"""Big Integer"""
scalar BigInt

"""브릭스 (당도)"""
scalar Brix

"""신청자가 선택한 작물의 판매 정보"""
type BulkSaleAnnualProductSalesInfo implements Node {
  """연 평균 판매량"""
  averageAnnualSales: AverageAnnualSalesRange!

  """연도"""
  baseYear: Int!

  """전량판매 신청"""
  bulkSaleApplication: BulkSaleApplication!

  """ID"""
  id: ID!

  """시장 판매 경험 여부"""
  isExperiencedInMarket: Boolean!

  """온라인 판매 경험 여부"""
  isExperiencedInOnline: Boolean!

  """품종"""
  productCategory: ProductCategory!
}

type BulkSaleAnnualProductSalesInfoConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleAnnualProductSalesInfoEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type BulkSaleAnnualProductSalesInfoEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleAnnualProductSalesInfo!
}

"""안심판매 신청"""
type BulkSaleApplication implements Node {
  """신청자명"""
  applicantName: String!

  """신청 일시"""
  appliedAt: DateTime!

  """신청자가 선택한 작물의 판매 정보"""
  bulkSaleAnnualProductSalesInfo(after: ID, before: ID, first: Int, last: Int): BulkSaleAnnualProductSalesInfoConnection!

  """안심판매 캠페인"""
  bulkSaleCampaign: BulkSaleCampaign

  """안심판매 평가들"""
  bulkSaleEvaluations(after: ID, before: ID, first: Int, last: Int, orderBy: BulkSaleEvaluationOrderBy, orderDirection: OrderDirection): BulkSaleEvaluationConnection!

  """안심판매 시장 판매 정보들"""
  bulkSaleMarketSalesInfo(after: ID, before: ID, first: Int, last: Int): BulkSaleMarketSalesInfoConnection!

  """안심판매 온라인 판매 정보들"""
  bulkSaleOnlineSalesInfo(after: ID, before: ID, first: Int, last: Int): BulkSaleOnlineSalesInfoConnection!

  """생산자 정보"""
  bulkSaleProducerDetail: BulkSaleProducerDetail

  """관리자가 입력한 판매원표들"""
  bulkSaleProductSaleLedgers(after: ID, before: ID, first: Int, last: Int): BulkSaleProductSaleLedgerConnection!

  """신청자가 입력한 온라인 판매 정보"""
  bulkSaleRawOnlineSale: BulkSaleRawOnlineSale

  """신청자가 입력한 판매원표들"""
  bulkSaleRawProductSaleLedgers(after: ID, before: ID, first: Int, last: Int): BulkSaleRawProductSaleLedgerConnection!

  """안심판매 샘플 품평들"""
  bulkSaleSampleReviews(after: ID, before: ID, first: Int, last: Int): BulkSaleSampleReviewConnection!

  """신청 취소 일시"""
  canceledAt: DateTime

  """등록 일시"""
  createdAt: DateTime!

  """농장"""
  farm: Farm!

  """신청자"""
  farmmorningUser: FarmmorningUser!

  """ID"""
  id: ID!

  """신청건이 테스트인지 여부"""
  isTest: Boolean!

  """관리자가 자유롭게 작성하는 메모"""
  memo: String!

  """품종"""
  productCategory: ProductCategory!

  """진행 상태"""
  progress: BulkSaleApplicationProgress!

  """담당자"""
  staff: AdminUser

  """담당자"""
  staffKey: StaffKey

  """수정 일시"""
  updatedAt: DateTime!

  """농가 사업 지원"""
  userBusinessSupportInfo: UserBusinessSupportInfo!

  """신청자가 입력한 작물 생산 정보"""
  userPccProduction: UserPccProduction

  """신청자가 입력한 작물 판매 조건"""
  userPccSalesCondition: UserPccSalesCondition
}

type BulkSaleApplicationConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleApplicationEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type BulkSaleApplicationEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleApplication!
}

"""안심판매 변경 내용"""
type BulkSaleApplicationMutationPayload implements MutationPayload {
  """결과"""
  result: BulkSaleApplication
}

"""정렬 기준"""
enum BulkSaleApplicationOrderBy {
  """등록 일시"""
  CREATED_AT

  """ID"""
  ID

  """수정 일시"""
  UPDATED_AT
}

"""안심판매 신청 진행 상태"""
enum BulkSaleApplicationProgress {
  """접수중"""
  APPLIED

  """판매진행"""
  CONFIRMED

  """현장미팅예정"""
  ON_SITE_MEETING_SCHEDULED

  """보류"""
  REJECTED

  """샘플요청"""
  SAMPLE_REQUESTED

  """품평회진행중"""
  SAMPLE_REVIEWING

  """협의중"""
  UNDER_DISCUSSION

  """신청 취소"""
  WITHDRAWN
}

"""안심판매 신청 상태 입력"""
input BulkSaleApplicationProgressInput {
  """진행 상태"""
  progress: BulkSaleApplicationProgress!

  """보류 사유"""
  reason: String
}

"""안심판매 신청 통계"""
type BulkSaleApplicationStatistics implements Node & Statistics {
  """전체 개수"""
  count: Int!

  """ID"""
  id: ID!

  """접수중 개수"""
  progressAppliedCount: Int!

  """판매진행 수"""
  progressConfirmedCount: Int!

  """현장미팅예정"""
  progressOnSiteMeetingScheduledCount: Int!

  """보류 수"""
  progressRejectedCount: Int!

  """샘플요청 개수"""
  progressSampleRequestedCount: Int!

  """품평회 진행중 수"""
  progressSampleReviewingCount: Int!

  """협의중 개수"""
  progressUnderDiscussionCount: Int!

  """신청 취소 개수"""
  progressWithdrawnCount: Int!

  """테스트 개수"""
  testCount: Int!
}

type BulkSaleApplicationStatisticsConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleApplicationStatisticsEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type BulkSaleApplicationStatisticsEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleApplicationStatistics!
}

"""안심판매 업데이트의 입력값"""
input BulkSaleApplicationUpdateInput {
  """메모"""
  memo: String

  """담당자의 node id"""
  staffId: ID
}

"""전량판매 캠페인"""
type BulkSaleCampaign implements Node {
  """전량판매 신청들"""
  bulkSaleApplications(after: ID, before: ID, first: Int, last: Int): BulkSaleApplicationConnection!

  """전량판매 평가들"""
  bulkSaleEvaluations(after: ID, before: ID, first: Int, last: Int): BulkSaleEvaluationConnection!

  """생성 일시"""
  createdAt: DateTime!

  """노출 순서"""
  displayOrder: PositiveInt

  """매입 예상 최고 가격"""
  estimatedPurchasePriceMax: Price!

  """매입 예상 최소 가격"""
  estimatedPurchasePriceMin: Price!

  """판매자 예상 수익률"""
  estimatedSellerEarningRate: Rate!

  """ID"""
  id: ID!

  """모집 상태"""
  isOpen: Boolean!

  """희망 상품포장규격 등급"""
  preferredGrade: ProductPackageGrade!

  """희망 상품포장규격 질량"""
  preferredQuantity: ProductPackageMass!

  """품종"""
  productCategory: ProductCategory!

  """담당자"""
  staffKey: StaffKey!

  """수정 일시"""
  updatedAt: DateTime!
}

type BulkSaleCampaignConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleCampaignEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

"""전량판매 캠페인 입력"""
input BulkSaleCampaignCreateInput {
  """노출 순서"""
  displayOrder: PositiveInt

  """매입 예상 최고 가격"""
  estimatedPurchasePriceMax: Int!

  """매입 예상 최소 가격"""
  estimatedPurchasePriceMin: Int!

  """판매자 예상 수익률"""
  estimatedSellerEarningRate: Float!

  """모집 상태"""
  isOpen: Boolean

  """희망 등급"""
  preferredGrade: String!

  """희망 상품포장규격 질량"""
  preferredQuantity: ProductPackageMassInput!

  """품종 ID"""
  productCategoryId: String!
}

type BulkSaleCampaignEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleCampaign!
}

"""전량판매 캠페인 변경 내용"""
type BulkSaleCampaignMutationPayload implements MutationPayload {
  """결과"""
  result: BulkSaleCampaign
}

"""정렬 기준"""
enum BulkSaleCampaignOrderBy {
  """등록 일시"""
  CREATED_AT

  """노출 순서"""
  DISPLAY_ORDER

  """ID"""
  ID

  """수정 일시"""
  UPDATED_AT
}

"""전량판매 캠페인 통계"""
type BulkSaleCampaignStatistics implements Node & Statistics {
  """전체 개수"""
  count: Int!

  """ID"""
  id: ID!

  """비모집중 캠페인 수"""
  notOpenCount: Int!

  """모집중 캠페인 수"""
  openCount: Int!
}

type BulkSaleCampaignStatisticsConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleCampaignStatisticsEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type BulkSaleCampaignStatisticsEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleCampaignStatistics!
}

"""전량판매 캠페인 수정"""
input BulkSaleCampaignUpdateInput {
  """노출 순서"""
  displayOrder: PositiveInt

  """매입 예상 최고 가격"""
  estimatedPurchasePriceMax: Int

  """매입 예상 최소 가격"""
  estimatedPurchasePriceMin: Int

  """판매자 예상 수익률"""
  estimatedSellerEarningRate: Float

  """모집 상태"""
  isOpen: Boolean

  """희망 등급"""
  preferredGrade: ProductPackageGrade

  """희망 상품포장규격 질량"""
  preferredQuantity: ProductPackageMassInput
}

"""전량판매 평가"""
type BulkSaleEvaluation implements Node {
  """전량판매 신청"""
  bulkSaleApplication: BulkSaleApplication!

  """전량판매 캠페인"""
  bulkSaleCampaign: BulkSaleCampaign!

  """생성 일시"""
  createdAt: DateTime!

  """평가일"""
  date: Date!

  """판매자"""
  farmmorningUser: FarmmorningUser!

  """ID"""
  id: ID!

  """평가 사유"""
  reason: String!

  """평가 결과"""
  result: BulkSaleEvaluationResult!

  """담당자"""
  staffKey: StaffKey!

  """수정 일시"""
  updatedAt: DateTime!
}

type BulkSaleEvaluationConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleEvaluationEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

"""전량판매 평가 입력"""
input BulkSaleEvaluationCreateInput {
  """전량판매 신청 ID"""
  bulkSaleApplicationId: ID!

  """평가일"""
  date: Date!

  """평가 사유"""
  reason: String!
}

type BulkSaleEvaluationEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleEvaluation!
}

"""전량판매 평가 입력 내용"""
type BulkSaleEvaluationMutationPayload implements MutationPayload {
  """결과"""
  result: BulkSaleEvaluation
}

"""정렬 기준"""
enum BulkSaleEvaluationOrderBy {
  """ID"""
  ID
}

"""전량판매 평가 결과 유형"""
enum BulkSaleEvaluationResult {
  """구매결정"""
  CONFIRMED

  """구매보류"""
  REJECTED
}

"""전량판매 시장 판매 정보"""
type BulkSaleMarketSalesInfo implements Node {
  """전량판매 신청"""
  bulkSaleApplication: BulkSaleApplication!

  """생성 일시"""
  createdAt: DateTime!

  """농작물 거래처"""
  farmMarket: FarmMarket!

  """ID"""
  id: ID!
}

type BulkSaleMarketSalesInfoConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleMarketSalesInfoEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type BulkSaleMarketSalesInfoEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleMarketSalesInfo!
}

"""정렬 기준"""
enum BulkSaleMarketSalesInfoOrderBy {
  """ID"""
  ID
}

"""전량판매 온라인 판매 정보"""
type BulkSaleOnlineSalesInfo implements Node {
  """평점"""
  averageReviewScore: Float!

  """전량판매 신청"""
  bulkSaleApplication: BulkSaleApplication!

  """생성 일시"""
  createdAt: DateTime!

  """배송회사"""
  deliveryCompany: DeliveryCompany

  """ID"""
  id: ID!

  """판매처"""
  market: OnlineMarket!

  """댓글수"""
  numberOfComments: Int!

  """수정 일시"""
  updatedAt: DateTime!

  """판매상품 URL"""
  url: Url!
}

type BulkSaleOnlineSalesInfoConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleOnlineSalesInfoEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

"""전량판매 온라인 판매 입력"""
input BulkSaleOnlineSalesInfoCreateInput {
  """평점"""
  averageReviewScore: Float!

  """전량판매 신청 ID"""
  bulkSaleApplicationId: ID!

  """택배사 ID"""
  deliveryCompanyId: ID!

  """판매처"""
  market: OnlineMarket!

  """댓글수"""
  numberOfComments: Int!

  """판매상품 URL"""
  url: Url!
}

type BulkSaleOnlineSalesInfoEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleOnlineSalesInfo!
}

"""전량판매 온라인 판매 정보 변경 내용"""
type BulkSaleOnlineSalesInfoMutationPayload implements MutationPayload {
  """결과"""
  result: BulkSaleOnlineSalesInfo
}

"""정렬 기준"""
enum BulkSaleOnlineSalesInfoOrderBy {
  """ID"""
  ID
}

"""전량판매 온라인 판매 수정"""
input BulkSaleOnlineSalesInfoUpdateInput {
  """평점"""
  averageReviewScore: Float

  """택배사 ID"""
  deliveryCompanyId: ID!

  """판매처"""
  market: OnlineMarket

  """댓글수"""
  numberOfComments: Int

  """판매상품 URL"""
  url: Url
}

"""생산자 정보"""
type BulkSaleProducerDetail implements Node {
  """경력 타입 (0-경력없음, 1-1년 미만, 5-1~5년, 10-5~10년, 20-10~20년, 40-~20년이상"""
  experienceYearType: Int

  """경험한 도매시장 목록"""
  experiencedMarkets: MarketConnection!

  """직접 농사짓는지 여부"""
  handsOn: Boolean

  """온라인 판매 경험 여부"""
  hasOnlineExperience: Boolean

  """ID"""
  id: ID!
  name: String!
  phoneNumber: String!

  """생산자님만의 특별함"""
  producerComment: String
}

type BulkSaleProducerDetailConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleProducerDetailEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type BulkSaleProducerDetailEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleProducerDetail!
}

"""관리자가 입력한 판매원표"""
type BulkSaleProductSaleLedger implements Node {
  """전량판매 신청"""
  bulkSaleApplication: BulkSaleApplication!

  """판매원표 항목"""
  bulkSaleProductSaleLedgerEntries(after: ID, before: ID, first: Int, last: Int): BulkSaleProductSaleLedgerEntryConnection!

  """생성 일시"""
  createdAt: DateTime!

  """판매일자"""
  date: Date!

  """ID"""
  id: ID!

  """가용여부"""
  isAvailable: Boolean!

  """파일 경로"""
  path: String!

  """도매법인"""
  wholesaler: Wholesaler
}

type BulkSaleProductSaleLedgerConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleProductSaleLedgerEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

"""판매원표 입력"""
input BulkSaleProductSaleLedgerCreateInput {
  """전량판매 신청 ID"""
  bulkSaleApplicationId: ID!
  bulkSaleProductSaleLedgerEntries: [BulkSaleProductSaleLedgerEntryCreateInput!]!

  """판매일자"""
  date: Date!

  """파일 경로"""
  path: String!

  """도매법인 ID"""
  wholesalerId: ID!
}

type BulkSaleProductSaleLedgerEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleProductSaleLedger!
}

"""Admin에서 입력한 판매원표 항목"""
type BulkSaleProductSaleLedgerEntry implements Node {
  """전량판매 신청"""
  bulkSaleProductSaleLedger: BulkSaleProductSaleLedger!

  """생성 일시"""
  createdAt: DateTime!

  """등급"""
  grade: String!

  """ID"""
  id: ID!

  """경락단가"""
  price: Int!

  """상품포장규격 질량"""
  quantity: ProductPackageMass!

  """수정 일시"""
  updatedAt: DateTime!

  """거래량"""
  volume: Int!
}

type BulkSaleProductSaleLedgerEntryConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleProductSaleLedgerEntryEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

"""판매원표 항목 입력"""
input BulkSaleProductSaleLedgerEntryCreateInput {
  """등급"""
  grade: String!

  """경락단가"""
  price: Int!

  """상품포장규격 질량"""
  quantity: ProductPackageMassInput!

  """거래량"""
  volume: Int!
}

type BulkSaleProductSaleLedgerEntryEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleProductSaleLedgerEntry!
}

"""판매원표 변경 내용"""
type BulkSaleProductSaleLedgerMutationPayload implements MutationPayload {
  """결과"""
  result: BulkSaleProductSaleLedger
}

"""판매원표 입력"""
input BulkSaleProductSaleLedgerUpdateInput {
  bulkSaleProductSaleLedgerEntries: [BulkSaleProductSaleLedgerEntryCreateInput!]!

  """판매일자"""
  date: Date

  """파일 경로"""
  path: String

  """도매법인 ID"""
  wholesalerId: ID
}

"""신청자가 입력한 온라인 판매 정보"""
type BulkSaleRawOnlineSale implements Node {
  """전량판매 신청"""
  bulkSaleApplication: BulkSaleApplication!

  """생성 일시"""
  createdAt: DateTime!

  """배송회사"""
  deliveryCompany: DeliveryCompany

  """ID"""
  id: ID!

  """신청자가 입력한 판매처"""
  market: OnlineMarket!

  """신청자가 입력한 판매 Url"""
  url: String!
}

type BulkSaleRawOnlineSaleConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleRawOnlineSaleEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type BulkSaleRawOnlineSaleEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleRawOnlineSale!
}

"""신청자가 입력한 판매원표"""
type BulkSaleRawProductSaleLedger implements Node {
  """전량판매 신청"""
  bulkSaleApplication: BulkSaleApplication!

  """생성 일시"""
  createdAt: DateTime!

  """ID"""
  id: ID!

  """파일 경로"""
  path: String!
}

type BulkSaleRawProductSaleLedgerConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleRawProductSaleLedgerEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type BulkSaleRawProductSaleLedgerEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleRawProductSaleLedger!
}

"""전량판매 샘플 품평"""
type BulkSaleSampleReview implements Node {
  """브릭스 (당도)"""
  brix: Brix

  """전량판매 신청"""
  bulkSaleApplication: BulkSaleApplication!

  """생성 일시"""
  createdAt: DateTime!

  """ID"""
  id: ID!

  """상품성 점수"""
  marketabilityScore: ReviewScore!

  """포장 점수"""
  packageScore: ReviewScore!

  """상품포장규격 질량"""
  quantity: ProductPackageMass!

  """담당자"""
  staffKey: StaffKey!

  """수정 일시"""
  updatedAt: DateTime!
}

type BulkSaleSampleReviewConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [BulkSaleSampleReviewEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

"""전량판매 샘플 품평 입력"""
input BulkSaleSampleReviewCreateInput {
  """브릭스"""
  brix: Brix

  """전량판매 신청 ID"""
  bulkSaleApplicationId: ID!

  """상품성 점수"""
  marketabilityScore: ReviewScore

  """포장 점수"""
  packageScore: ReviewScore

  """상품포장규격 질량"""
  quantity: ProductPackageMassInput!
}

type BulkSaleSampleReviewEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: BulkSaleSampleReview!
}

"""전량판매 샘플 품평 변경 내용"""
type BulkSaleSampleReviewMutationPayload implements MutationPayload {
  """결과"""
  result: BulkSaleSampleReview
}

"""정렬 기준"""
enum BulkSaleSampleReviewOrderBy {
  """ID"""
  ID
}

"""전량판매 샘플 품평 수정"""
input BulkSaleSampleReviewUpdateInput {
  """브릭스"""
  brix: Brix

  """상품성 점수"""
  marketabilityScore: ReviewScore

  """포장 점수"""
  packageScore: ReviewScore

  """상품포장규격 질량"""
  quantity: ProductPackageMassInput
}

"""사업자등록번호"""
scalar BusinessRegistrationNumber

enum BusinessRegistrationNumberVerificationStatus {
  REVIEWING
  UNVERIFIED
  VERIFIED
}

"""견적주문 입금 스케쥴 취소 Input"""
input CancelRfqWosOrderDepositScheduleInput {
  """입금 스케쥴 ID"""
  id: ID!
}

"""웹주문서 취소 요청 input"""
input CancelWosOrderProductOptionInput {
  """취소상세사유"""
  detailReason: String

  """취소할 주문상품번호"""
  idsToCancel: [String!]!

  """취소사유 - admin, external-staff 는 필수, buyer는 사용안함"""
  reason: WosOrderCancelType
}

union CancelWosOrderProductOptionPayload = CancelWosOrderProductOptionResult | Error

type CancelWosOrderProductOptionResult {
  """성공 개수"""
  successProductOptionCount: Int!
}

"""장바구니 오류"""
type CartError {
  """문제의 원인이 된 장바구니 아이템 목록"""
  cartItems: [CartItem]

  """오류 코드"""
  code: ErrorCode!

  """오류 메시지"""
  message: String
}

"""장바구니 조회 결과"""
type CartItem {
  """장바구니 아이템 아이디"""
  id: ID!

  """장바구니 아이템 번호"""
  number: Int!

  """장바구니를 담은 유저"""
  owner: User!

  """장바구니에 포함된 단품의 상품"""
  product: Product!

  """장바구니에 포함된 단품"""
  productOption: ProductOption!

  """장바구니에 담았을 시점의 단품 정보"""
  productOptionSnapshot: ProductOptionSnapshot!

  """장바구니에 담았을 시점의 상품 정보"""
  productSnapshot: ProductSnapshot!

  """수량"""
  quantity: Int!

  """최근 변경 DateTime(ISO 8601)"""
  updatedAt: DateTime!
}

type Category implements Node {
  children(
    """True일 시 SALE | SOLDOUT 상태의 matching 상품을 가진 카테고리만 조회합니다."""
    hasMatchingProduct: Boolean = false
  ): [Category!]!

  """스스로를 포함한 전체 표준 카테고리 (ex [{최상위 카테고리} {차상위 카테고리} ... self])"""
  fullyQualifiedName: [Category!]!

  """표준 카테고리 ID"""
  id: ID!

  """작물"""
  item: String

  """품종"""
  kind: String

  """품종 카테고리에 대응하는 매칭상품 - 1:1 관계"""
  matchingProduct: MatchingProduct

  """표준 카테고리 이름"""
  name: String!
  parent: Category

  """팜모닝 작물/품종 데이터 매핑시 참조하는 코드"""
  productCategoryCodeId: String

  """모든 sub category(자손 카테고리)들의 상품을 조회합니다."""
  products(
    after: String
    before: String
    first: Int
    last: Int

    """True일 경우 노출되는 단품이 없는 일반상품을 제외하고 조회합니다."""
    onlyBuyable: Boolean
    orderBy: [ProductsOrderBy!]

    """판매상태"""
    statuses: [ProductStatus!]

    """상품 유형을 지정합니다."""
    type: [ProductType!]
  ): ProductConnection!
}

type CategoryConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
}

type CategoryEdge implements Edge {
  cursor: String!
  node: Category!
}

type ChannelIO {
  bootEvent: ChannelIOBootEvent
}

type ChannelIOBootEvent {
  memberId: String!
  pluginKey: String!
  profile: ChannelIOBootEventProfile!
  unsubscribeEmail: Boolean!
  unsubscribeTexting: Boolean!
}

type ChannelIOBootEventProfile {
  """
  joinTime 필드에 epochMillis 를 넣어야,
                               채널톡 > 고객DB 목록에 바로 업데이트 되어 보였습니다.
  
                               채널톡 쪽 문서에서 어떤 값으로 넣으면 된다는 문구를 찾기 힘듭니다.
                               그러니 경험칙으로 그렇다고 생각하는 것이 편합니다.
  """
  joinTime: Float

  """
  SSTECH-292 에서 노영님께 요청 받았습니다.
  
                                         purchasedAmount 와 사용례에서 별로 차이나지는 않을 것 같기는 하다.
  """
  lastCheckoutAmount: DecimalNumber!

  """
  SSTECH-292 에서 노영님께 요청 받았습니다.
                                 joinTime 과 마찬가리고 epochMillis 를 넣습니다.
  
                                 채널톡 비즈팀 베이지님 알려주길 채널톡으로 ‘CheckoutCompleted’ 이벤트를 보내면
                                 profile.lastCheckoutCompletedAt 을 업데이트 한다고 합니다.
                                 어디 문서에 적힌 것이 있는지 물었지만 답이 없는 것으로 봐서 어떤 문서에도
                                 적혀 있지 않다고 보는 것이 낫겠습니다.
  
                                 track API 로 'CheckoutCompleted' 이벤트를 보내는 것이 깔끔하겠다 싶었는데,
  
                                 1. 위탁: 주문서 업로드 페이지에서 엑셀 업로드가 완료되고 신선캐시 차감이 완료되었을 때
                                 2. 웹주문서: 웹주문서 페이지에서 결제하기 버튼을 눌러 정상적으로 발주가 완료되었을 때
  
                                 이렇게 2군데 넣으려다 보니 2 시점에 track API 를 frontend 에서 호출하는 방법은 명확한데
                                 AWS Lambda 에서 엑셀업로드가 끝나고 channelIO 의 web sdk 를 이용해서 호출하는 것은
                                 말이 잘 안 됩니다.
  
                                 2 시점에 frontend 로 보내기도 하고
                                 1 은 딱히 처리하지 않는 것으로 하고
                                 bootEvent 를 보낼 때도 이 field 의 값으로 보내두는 것으로 해봅니다.
  """
  lastCheckoutCompletedAt: Float
  mobileNumber: String!
  name: String!
  purchasedAmount: DecimalNumber!
  purchasedCount: Int!
}

"""Connection"""
interface Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [Edge!]!

  """Page information"""
  pageInfo: PageInfo!
}

"""국가"""
type Country implements Node {
  """식별자"""
  id: ID!

  """국가명"""
  name: String!
}

"""국가 코드"""
enum CountryCode {
  """오스트리아"""
  AT

  """호주"""
  AU

  """벨기에"""
  BE

  """브라질"""
  BR

  """캐나다"""
  CA

  """칠레"""
  CL

  """덴마크"""
  DK

  """스페인"""
  ES

  """핀란드"""
  FI

  """프랑스"""
  FR

  """아일랜드"""
  IE

  """대한민국"""
  KR

  """멕시코"""
  MX

  """네덜란드"""
  NL

  """뉴질랜드"""
  NZ

  """기타"""
  OTHER

  """포르투갈"""
  PT

  """태국"""
  TH

  """미국"""
  US

  """우루과이"""
  UY
}

type CountryConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [CountryEdge!]!
  pageInfo: PageInfo!
}

type CountryEdge implements Edge {
  cursor: String!
  node: Country!
}

union CreateCartItemsPayload = CreateCartItemsSuccess | Error

"""장바구니 오퍼레이션 결과"""
type CreateCartItemsSuccess {
  """mutation의 결과로써 변경된 장바구니"""
  cart: [CartItem!]!

  """장바구니 오퍼레이션이 성공했다면 true"""
  result: Boolean!
}

"""
매칭 상품을 생성합니다.
    - 상품 인터페이스 기준 추가 전달 필드: releaseStartMonth, releaseEndMonth
"""
input CreateMatchingProductInput {
  """표준 카테고리 node ID"""
  categoryId: ID!

  """상품 설명 editor HTML"""
  description: String!

  """전시 카테고리 node ID"""
  displayCategoryIds: [ID!]!

  """바이어용 상품명"""
  displayName: String!

  """대표 이미지"""
  image: ImageInput!

  """매칭상품 상태 자동관리기능 사용여부"""
  isAutoStatus: Boolean!

  """생산자용 상품명"""
  name: String!

  """공지사항"""
  notice: String

  """공지사항 적용 기간"""
  noticeEndAt: DateTime

  """공지사항 적용 기간"""
  noticeStartAt: DateTime

  """원산지"""
  origin: String!

  """출하 종료 월"""
  releaseEndMonth: Int!

  """출하 시작 월"""
  releaseStartMonth: Int!

  """판매 자료 문서 url"""
  salesDocument: String

  """운영 상태"""
  status: ProductStatus!
}

union CreateMatchingProductPayload = CreateMatchingProductResult | Error

type CreateMatchingProductResult {
  """등록된 상품 정보"""
  product: Product!
}

union CreatePresignedUrlForImagePayload = CreatePresignedUrlForImageResult | Error

type CreatePresignedUrlForImageResult {
  """추가될 Image"""
  image: Image!

  """s3 presigned url"""
  url: String!
}

union CreateProductExcelPayload = CreateProductExcelResult | Error

type CreateProductExcelResult {
  """엑셀 다운로드 요청 성공 여부"""
  result: Boolean!
}

"""
일반 상품을 생성합니다. 
    - 상품인터페이스 기준 추가 전달 필드: producerId/ type, isCourierAvailable, isVat, price, notationInformationType
"""
input CreateProductInput {
  """표준 카테고리 node ID"""
  categoryId: ID!

  """상품 설명 editor HTML"""
  description: String!

  """전시 카테고리 node ID"""
  displayCategoryIds: [ID!]!

  """바이어용 상품명"""
  displayName: String!

  """대표 이미지"""
  image: ImageInput!

  """배송 가능 여부"""
  isCourierAvailable: Boolean!

  """과면세 여부"""
  isVat: Boolean!

  """생산자용 상품명"""
  name: String!

  """필수 고지정보 유형, 농축수산물 | 가공식품"""
  notationInformationType: ProductNotationInformationType!

  """공지사항"""
  notice: String

  """공지사항 적용 기간"""
  noticeEndAt: DateTime

  """공지사항 적용 기간"""
  noticeStartAt: DateTime

  """원산지"""
  origin: String!

  """기준 가격"""
  price: Int!

  """농민 node ID"""
  producerId: ID!

  """판매 자료 문서 url"""
  salesDocument: String

  """판매 유형입니다.  축산 RFQ와 수산매칭이 있습니다."""
  salesType: ProductSalesType

  """운영 상태"""
  status: ProductStatus!

  """일반 상품 타입"""
  type: NormalProductType!
}

"""단품 등록시 원가정보를 생성하기 위한 input입니다. 원가시작일(fromDate)은 항상 생성 시점입니다."""
input CreateProductOptionCostInput {
  """생산자 공급가 타입 지정 안할 시 온라인"""
  contractType: ProductOptionCostContractType!

  """생산자 택배비"""
  deliveryCost: Int!

  """생산자 원물원가"""
  rawCost: Int!

  """생산자 포장작업비"""
  workingCost: Int!
}

union CreateProductOptionExcelPayload = CreateProductOptionExcelResult | Error

type CreateProductOptionExcelResult {
  """엑셀 다운로드 요청 성공 여부"""
  result: Boolean!
}

input CreateProductOptionInput {
  adhocStockIsLimited: Boolean!

  """판매 가능 수량 노출 여부"""
  adhocStockIsNumRemainingVisible: Boolean!

  """공급 수량, 관리자가 세팅한 단품 별 판매가 가능한 총 수량"""
  adhocStockNumLimit: Int

  """수량"""
  amount: Float!

  """무게 단위"""
  amountUnit: AmountUnit!

  """포장당 입수 최대"""
  countPerPackageMax: Int

  """포장당 입수 최소"""
  countPerPackageMin: Int

  """출고 기준 시간"""
  cutOffTime: String

  """등급(용도)"""
  grade: String

  """무료배송 여부"""
  isFreeShipping: Boolean!

  """출고 기준 시간 메모"""
  memo: String

  """단품명"""
  optionName: String!

  """포장재질"""
  packageType: String

  """개당 수량 최대"""
  perAmountMax: Float

  """개당 수량 최소"""
  perAmountMin: Float

  """개당 수량 단위"""
  perAmountUnit: AmountUnit

  """개당 길이 최대"""
  perSizeMax: Float

  """개당 길이 최소"""
  perSizeMin: Float

  """개당 크기 단위"""
  perSizeUnit: SizeUnit

  """바이어 판매가"""
  price: Int!

  """상품 node ID"""
  productId: ID!

  """상품 원가 및 비용 관련 input"""
  productOptionCost: CreateProductOptionCostInput!

  """합포장 단위수량"""
  shippingUnitQuantity: Int!

  """운영상태"""
  status: ProductOptionStatus!
}

union CreateProductPayload = CreateProductResult | Error

type CreateProductResult {
  """등록된 상품 정보"""
  product: Product!
}

"""
견적 상품을 생성합니다.
    - 상품 인터페이스 기준 추가 전달필드: producerId, grade
"""
input CreateQuotedProductInput {
  """표준 카테고리 node ID"""
  categoryId: ID!

  """상품 설명 editor HTML"""
  description: String!

  """전시 카테고리 node ID"""
  displayCategoryIds: [ID!]!

  """바이어용 상품명"""
  displayName: String!

  """견적상품 등급정보"""
  grade: String!

  """대표 이미지"""
  image: ImageInput!

  """생산자용 상품명"""
  name: String!

  """공지사항"""
  notice: String

  """공지사항 적용 기간"""
  noticeEndAt: DateTime

  """공지사항 적용 기간"""
  noticeStartAt: DateTime

  """원산지"""
  origin: String!

  """농민 node ID"""
  producerId: ID!

  """판매 자료 문서 url"""
  salesDocument: String

  """판매 유형입니다.  축산 RFQ와 수산매칭이 있습니다."""
  salesType: ProductSalesType!

  """운영 상태"""
  status: ProductStatus!
}

union CreateQuotedProductPayload = CreateQuotedProductResult | Error

type CreateQuotedProductResult {
  """등록된 견적 상품 정보"""
  product: Product!
}

"""견적서 정보 수동 등록 인풋"""
input CreateRfqInput {
  """희망 배송지"""
  address: String

  """견적을 요청한 구매자 정보"""
  buyerId: ID!

  """견적이 인입된 경로, 페이퍼폼 | 전화상담 | 카톡상담 | 영업활동 | 견적구매"""
  requestedFrom: RfqRequestedFrom!

  """견적서와 함께 추가되는 견적 상품 정보"""
  rfqProduct: CreateRfqProductInput!
}

union CreateRfqPayload = CreateRfqResult | Error

"""견적 상품 추가 정보 Input"""
input CreateRfqProductInput {
  """중량/수량/용량"""
  amount: Float!

  """중량/수량/용량 단위 정보"""
  amountUnit: AmountUnit!

  """품목/품종"""
  categoryId: ID!

  """견적에 대한 설명, 팜모닝 장터에 노출됩니다."""
  description: String

  """크로스셀링(다른 상품도 사라고 영업)을 통해 추가된 상품인지 여부"""
  isCrossSelling: Boolean = false

  """[축산] 브랜드 id"""
  meatBrandId: ID

  """[축산] 등급"""
  meatGradeId: ID

  """메모"""
  memo: String

  """원산지"""
  origin: RfqProductOrigin

  """포장물 수량, 해당 중량에 몇개가 포장되어 와야 하는지."""
  packageAmount: Int

  """기존 납품가"""
  previousPrice: Int

  """가공방식"""
  processingMethod: String

  """희망 배송일"""
  requestedDeliveredAt: DateTime

  """
  견적서 ID, 견적상품 생성시 필수값입니다.
                                                                               견적서 생성시에는 사용하지 않는 파라미터입니다.
  """
  rfqId: ID

  """보관방식"""
  storageMethod: StorageMethod

  """거래 주기"""
  tradeCycle: TradeCycle

  """단위당 희망가"""
  unitPrice: Int!

  """사용 용도"""
  usage: String
}

union CreateRfqProductPayload = CreateRfqProductResult | Error

type CreateRfqProductResult {
  """등록된 견적 상품 정보"""
  createdRfqProduct: RfqProduct!
}

type CreateRfqResult {
  createdRfq: Rfq!
}

"""견적주문 입금스케쥴 상세 추가 정보 Input"""
input CreateRfqWosOrderDepositScheduleDetailInput {
  """입금예정금액"""
  amount: DecimalNumber!

  """입금 스케쥴 ID"""
  rfqWosDepositScheduleId: ID!

  """견적주문상품 ID"""
  rfqWosOrderProductId: ID!
}

type CreateRfqWosOrderDepositScheduleDetailResult {
  """등록된 견적주문 입금 스케쥴 상세"""
  createRfqWosOrderDepositScheduleDetail: RfqWosOrderDepositScheduleDetail!
}

"""견적주문 입금 스케쥴 추가 정보 Input"""
input CreateRfqWosOrderDepositScheduleInput {
  """바이어 ID"""
  buyer: ID!

  """입금예정일"""
  depositDueDate: DateTime

  """입금 타입"""
  depositType: RfqWosDepositType!

  """팩토링 ID"""
  factoring: ID
}

union CreateRfqWosOrderDepositSchedulePayload = Error | RfqWosOrderDepositSchedule

type CreateRfqWosOrderDepositScheduleResult {
  """등록된 견적주문 입금 스케쥴"""
  createRfqWosOrderDepositSchedule: RfqWosOrderDepositSchedule!
}

"""임시 웹주문서(장바구니용) 생성 요청 input"""
input CreateTempWosOrderInput {
  """장바구니 아이템 id 리스트"""
  cartItems: [Int!]!
}

union CreateTempWosOrderPayload = CartError | Error | TempWosOrder

"""임시 웹주문서(단품구매용) 생성 요청 input"""
input CreateTempWosOrderProductOptionsInput {
  """단품(상품옵션) 아이디"""
  productOptions: [TempWosOrderProductOptionsList!]!
}

"""임시 웹주문서(단품구매용) 생성 요청 input"""
input CreateTempWosOrderSingleInput {
  """단품(상품옵션) 아이디"""
  productOptionId: Int!

  """구매 수량"""
  quantity: Int!
}

type CreateWosOrderResult {
  """주문서 번호"""
  orderNo: String!

  """임시 주문서 번호(ID)"""
  tempOrderId: Int!
}

"""품목(작물)"""
type Crop implements Node {
  """상위 분류"""
  category: CropCategory!

  """ID"""
  id: ID!

  """이름"""
  name: String!

  """품종들 (하위 분류)"""
  productCategories(after: ID, before: ID, first: Int, last: Int): ProductCategoryConnection!
}

"""품목 분류"""
enum CropCategory {
  """소"""
  BEEF

  """닭"""
  CHICKEN

  """양곡"""
  CROP

  """수산"""
  FISH

  """화훼"""
  FLOWER

  """돼지"""
  FORK

  """과일"""
  FRUIT

  """특용/약용"""
  HERB

  """버섯"""
  MUSHROOM

  """채소"""
  VEGETABLE
}

type CropConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [CropEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type CropEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: Crop!
}

"""정렬 기준"""
enum CropOrderBy {
  """ID"""
  ID

  """작물명"""
  NAME
}

"""ISO8601 형식의 date YYYY-MM-DD"""
scalar Date

"""
ISO8601 형식의 UTC 기준 datetime (YYYY-MM-DDTHH:mm:ssZ, 소수점 이하는 있어도 무방)
                 (참고: https://github.com/green-labs/web-adr/blob/main/DateTime.md)
"""
scalar DateTime

"""실수. 부동소수점 수 오차 방지. 텍스트로 통신."""
scalar DecimalNumber

"""장바구니 아이템 삭제 Input"""
input DeleteCartItemsInput {
  """삭제할 상품 옵션 Id"""
  productOptionIds: [Int]!
}

union DeleteCartItemsPayload = DeleteCartItemsSuccess | Error

"""장바구니 아이템 제거 Payload"""
type DeleteCartItemsSuccess {
  """제거된 장바구니 아이템 개수"""
  count: Int!
}

union DeleteRfqProductPayload = DeleteRfqProductResult | Error

type DeleteRfqProductResult {
  """삭제된 견적 상품 ID"""
  deletedRfqProductId: ID!
}

"""삭제 성공시 페이로드"""
type DeleteSuccess {
  deletedId: ID!
}

"""배송회사"""
type DeliveryCompany implements Node {
  """코드"""
  code: String!

  """ID"""
  id: ID!

  """가용여부"""
  isAvailable: Boolean!

  """회사명"""
  name: String!
}

type DeliveryCompanyConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [DeliveryCompanyEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type DeliveryCompanyEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: DeliveryCompany!
}

"""정렬 기준"""
enum DeliveryCompanyOrderBy {
  """ID"""
  ID

  """회사명"""
  NAME

  """수치순"""
  NUMERIC_ORDER
}

"""가능한 배송 패키지 목록"""
enum DeliveryPackage {
  """콘티박스"""
  CONTI

  """톤백"""
  TON_BAG
}

type Depth0Category {
  id: ID!
  itemCategories: [ItemCategory!]!
  name: String!
}

"""사용자 디바이스"""
enum Device {
  MOBILE
  PC
}

type DisplayCategory implements Node {
  children(
    onlyDisplayable: Boolean
    onlyHasBuyableProducts: Boolean
    orderBy: [DisplayCategoryOrderBy!]

    """null을 명시적으로 주면 null로 해석되고, 값을 주지 않을 시 MAIN으로 해석됩니다."""
    section: SectionType = MAIN
    types: [DisplayCategoryType!]
  ): [DisplayCategory!]!

  """[{최상위} {차상위} ... self]"""
  fullyQualifiedName: [DisplayCategory!]!
  id: ID!
  image: Image
  name: String!

  """전시 카테고리의 unique 구분자입니다."""
  number: Int!
  parent: DisplayCategory
  products(
    """pagination cursor 이 id 이후의 product에 대해서 조회합니다"""
    after: ID

    """최대 몇개를 조회할 지 페이지 사이즈를 지정합니다.  기본적으로 최대 25개를 조회합니다"""
    first: Int

    """매칭상품 시세의 변동량 관련 필터입니다."""
    marketPriceDiffFilter: MarketPriceDiffFilter

    """True일 경우 노출되는 단품이 없는 일반상품을 제외하고 조회합니다."""
    onlyBuyable: Boolean
    orderBy: [ProductsOrderBy!]

    """상품의 순서를 지정합니다.  기본값은 UPDATED_DESC입니다"""
    sort: DisplayCategoryProductsSort

    """상품 유형을 지정합니다."""
    type: [ProductType!]
  ): ProductConnection!
  type: DisplayCategoryType!
}

type DisplayCategoryConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [DisplayCategoryEdge!]!
  pageInfo: PageInfo!
}

type DisplayCategoryEdge implements Edge {
  cursor: String!
  node: DisplayCategory!
}

input DisplayCategoryOrderBy {
  buyableProductsCount: OrderDirection
  displayOrder: NullableOrderDirection
  updatedAt: OrderDirection
}

enum DisplayCategoryProductsSort {
  PRICE_ASC
  PRICE_DESC
  PRICE_PER_KG_ASC
  PRICE_PER_KG_DESC
  UPDATED_ASC
  UPDATED_DESC
}

enum DisplayCategoryType {
  NORMAL
  SHOWCASE
}

"""Edge"""
interface Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: Node!
}

"""이메일 주소"""
scalar EmailAddress

enum EmailVerificationStatus {
  UNVERIFIED
  VERIFIED
}

type Error {
  code: ErrorCode!
  message: String
}

"""Mutation 공통 에러"""
enum ErrorCode {
  """단품의 판매수량이 부족"""
  ADHOC_STOCK_SOLD_OUT

  """요청값이 올바르지 않은 경우"""
  INVALID_REQUEST

  """요청한, 또는 수정 대상이 되는 객체에 접근 및 수정할 권한이 없는 경우 (ex. admin기능에 farmer가 요청한 경우)"""
  NOT_ALLOWED

  """로그인이 되어있지 않은 경우"""
  NOT_AUTHENTICATED

  """권한 이외 다른 필드의 값에 의해 객체의 값을 수정할 수 없는 경우 (ex. 서비스 정책적으로 가능하지 않은 케이스)"""
  NOT_AVAILABLE

  """요청한, 또는 수정 대상이 되는 객체가 존재하지 않거나 접근할 수 없는 경우"""
  NOT_EXIST

  """기타 서버 에러"""
  UNKNOWN_ERROR
}

"""경력 타입"""
enum ExperienceYearsRange {
  """1년 미만"""
  FROM_0_TO_1

  """1년 이상 5년 미만"""
  FROM_1_TO_5

  """5년 이상 10년 미만"""
  FROM_5_TO_10

  """10년 이상 20년 미만"""
  FROM_10_TO_20

  """20년 이상"""
  FROM_20_TO_INF

  """경력없음"""
  NEWCOMER
}

"""시설유형"""
enum FacilityType {
  """유리온실"""
  GLASS

  """노지"""
  OPEN_FIELD

  """비닐하우스(필드)"""
  VINYL_HOUSE_FIELD

  """비닐하우스(스마트팜)"""
  VINYL_HOUSE_SMART_FARM
}

"""팩토링"""
type Factoring implements Node {
  """계좌번호"""
  accountNo: String!

  """은행"""
  bank: Bank

  """생성된 시간"""
  createdAt: DateTime!

  """팩토링사명"""
  displayName: String!

  """팩토링 ID"""
  id: ID!

  """수정된 시간"""
  updatedAt: DateTime!
}

type FactoringConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [FactoringEdge!]!
  pageInfo: PageInfo!
}

type FactoringEdge implements Edge {
  cursor: String!
  node: Factoring!
}

"""농장"""
type Farm implements Node {
  """주소"""
  address: String

  """상세주소"""
  addressDetail: String

  """전량판매 신청들"""
  bulkSaleApplications(after: ID, before: ID, first: Int, last: Int): BulkSaleApplicationConnection!

  """등록 일시"""
  createdAt: DateTime!

  """ID"""
  id: ID!

  """우편번호"""
  zipCode: String
}

type FarmConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [FarmEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type FarmEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: Farm!
}

"""농작물 거래처"""
type FarmMarket implements Node {
  """전량판매 시장 판매 정보"""
  bulkSaleMarketSalesInfo(after: ID, before: ID, first: Int, last: Int): BulkSaleMarketSalesInfoConnection!

  """농작물 거래처 코드"""
  code: String!

  """ID"""
  id: ID!

  """농작물 거래처 코드 사용 유무"""
  isAvailable: Boolean!

  """농작물 거래처명"""
  name: String!

  """농작물 거래처명 (deprecated)"""
  wholesaleCompanyName: String!
}

type FarmMarketConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [FarmMarketEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type FarmMarketEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: FarmMarket!
}

"""정렬 기준"""
enum FarmMarketOrderBy {
  """ID"""
  ID
}

"""정렬 기준"""
enum FarmOrderBy {
  """ID"""
  ID
}

"""팜모닝 사용자"""
type FarmmorningUser implements Node {
  """전량판매 신청들"""
  bulkSaleApplications(after: ID, before: ID, first: Int, last: Int): BulkSaleApplicationConnection!

  """전량판매 평가들"""
  bulkSaleEvaluations(after: ID, before: ID, first: Int, last: Int): BulkSaleEvaluationConnection!

  """생성 일시"""
  createdAt: DateTime!

  """삭제 일시"""
  deletedAt: DateTime

  """이메일 주소"""
  emailAddress: EmailAddress!

  """ID"""
  id: ID!

  """삭제 여부"""
  isDeleted: Boolean!

  """이름"""
  name: String!

  """전화번호"""
  phoneNumber: PhoneNumber!

  """신청자 사업 정보"""
  userBusinessRegistrationInfo: UserBusinessRegistrationInfo
}

type FarmmorningUserConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [FarmmorningUserEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type FarmmorningUserEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: FarmmorningUser!
}

"""정렬 기준"""
enum FarmmorningUserOrderBy {
  """ID"""
  ID
}

"""피쳐"""
type Feature {
  """피쳐 활성화 여부"""
  active: Boolean!

  """피쳐 설명"""
  description: String!

  """피쳐 플래그 타입"""
  type: FeatureType!
}

"""피쳐 플래그 타입"""
enum FeatureType {
  """메인 홈 UI/UX 개편"""
  HOME_UI_UX

  """2022년 4분기 PDP 개편"""
  MATCHING_PDP_RENEW_Q4_2022
}

input FeaturedDisplayCategoryOrderBy {
  displayOrder: OrderDirection
}

"""신선마켓 사용자"""
interface FreshmarketUser {
  """이메일 주소"""
  emailAddress: EmailAddress!

  """이름"""
  name: String!
}

type GnbBanner implements Node {
  id: ID!

  """모바일에서 새 탭 생성 여부"""
  isNewTabMobile: Boolean!

  """PC에서 새 탭 생성 여부"""
  isNewTabPc: Boolean!

  """랜딩페이지 url"""
  landingUrl: String!

  """GNB 배너 제목"""
  title: String!
}

type GnbBannerConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [GnbBannerEdge!]!
  pageInfo: PageInfo!
}

type GnbBannerEdge implements Edge {
  cursor: String!
  node: GnbBanner!
}

"""공휴일"""
type Holiday {
  """날짜"""
  date: Date!

  """이름"""
  name: String!

  """종류"""
  type: HolidayType!
}

"""공휴일 종류"""
enum HolidayType {
  """사내 휴일"""
  IN_HOUSE_HOLIDAY

  """국가기념일"""
  NATIONAL_ANNIVERSARY

  """국경일"""
  NATIONAL_HOLIDAY
}

type Image {
  """원본 이미지"""
  original: String!

  """100x100"""
  thumb100x100: String!

  """400x400"""
  thumb400x400: String!

  """800x800"""
  thumb800x800: String!

  """800xall"""
  thumb800xall: String

  """1000x1000"""
  thumb1000x1000: String!

  """1920x1920"""
  thumb1920x1920: String!
}

input ImageInput {
  """원본 이미지"""
  original: String!

  """100x100"""
  thumb100x100: String!

  """400x400"""
  thumb400x400: String!

  """800x800"""
  thumb800x800: String!

  """800xall"""
  thumb800xall: String!

  """1000x1000"""
  thumb1000x1000: String!

  """1920x1920"""
  thumb1920x1920: String!
}

"""개인/법인 유형"""
enum IndividualOrCompany {
  """법인"""
  COMPANY

  """개인"""
  INDIVIDUAL
}

type InterestedCategoryListing {
  depth0Categories: [Depth0Category!]!
}

type ItemCategoriesListing {
  """ItemCategory의 ID를 이용하여 ItemCategory Text를 만들어냅니다. 예. 사과..."""
  itemCategories: [ItemCategory!]
}

type ItemCategory {
  id: ID!
  name: String!
}

input LikeProductInput {
  """상품 node ID"""
  id: ID!
}

union LikeProductPayload = Error | LikeProductResult

type LikeProductResult {
  """찜한 상품 정보"""
  product: Product!
}

input LikeProductsInput {
  """찜할 상품 ID 리스트"""
  productIds: [ID!]!
}

union LikeProductsPayload = Error | LikeProductsResult

type LikeProductsResult {
  """찜한 상품 리스트"""
  likedProducts: [Product!]!

  """viewer를 통해 mutation 후 변경된 likedProductCount를 연속으로 조회할 수 있습니다."""
  viewer: User!
}

type LikedProductConnection {
  edges: [LikedProductEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LikedProductEdge {
  cursor: String!
  likedAt: DateTime!
  node: Product!
}

input LikedProductsOrderBy {
  direction: OrderByDirection!
  field: LikedProductsOrderField!
}

enum LikedProductsOrderField {
  DAILY_MARKET_PRICE_DIFF_PER_KG
  DAILY_MARKET_PRICE_DIFF_RATE
  LIKED_AT
  RFQ_DISPLAY_ORDER
  WEEKLY_MARKET_PRICE_DIFF_PER_KG
  WEEKLY_MARKET_PRICE_DIFF_RATE
}

"""field 제약이 없는 기본 맵 타입"""
scalar Map

input MarkProductAsViewedInput {
  """조회한 상품 노드 ID"""
  productId: ID!
}

union MarkProductAsViewedPayload = Error | MarkProductAsViewedResult

type MarkProductAsViewedResult {
  """조회한 상품"""
  markedProduct: Product!

  """조회한 상품 노드 ID"""
  markedProductId: ID! @deprecated(reason: "Use markedProduct instead")
}

"""농작물 거래처"""
type Market implements Node {
  """농작물 거래처 코드"""
  code: String!

  """ID"""
  id: ID!

  """농작물 거래처 코드 사용 유무"""
  isAvailable: Boolean!

  """농작물 거래처명"""
  name: String!
}

type MarketConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [MarketEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type MarketEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: Market!
}

type MarketPrice {
  """거래 일자"""
  dealingDate: Date!

  """최대가 (kg당)"""
  higher: Int

  """최소가 (kg당)"""
  lower: Int

  """가중 평균가 (kg당, 가중치: 반입량)"""
  mean: Int
}

type MarketPriceDiff {
  """두 번째 최신 시세 제공일 대비 시세 변동량 (전일대비)"""
  dailyMarketPriceDiff: Int

  """두 번째 최신 시세 제공일 대비 kg당 시세 변동량 (전일대비)"""
  dailyMarketPriceDiffPerKg: Int

  """두 번째 최신 시세 제공일 대비 시세 변동률 (전일대비)"""
  dailyMarketPriceDiffRate: Float

  """최신 시세 제공일의 시세"""
  latestDailyMarketPrice: Int!

  """최신 시세 제공일"""
  latestDealingDate: Date!

  """두 번째 최신 시세 제공일의 시세"""
  previousDailyMarketPrice: Int

  """두 번째 최신 시세 제공일의 kg당 시세"""
  previousDailyMarketPricePerKg: Int

  """두 번째 최신 시세 제공일"""
  previousLatestDealingDate: Date

  """최신 시세제공일 전 7일의 시세 평균"""
  previousWeeklyMarketPrice: Int

  """두 번째 최신 시세 제공일의 kg당 시세"""
  previousWeeklyMarketPricePerKg: Int

  """가격 그룹 순위"""
  priceGroupPriority: Int!

  """최신 시세제공일 전 7일 대비 시세 변동량 (지난 7일 대비)"""
  weeklyMarketPriceDiff: Int

  """최신 시세제공일 전 7일 대비 kg당 시세 변동량 (지난 7일 대비)"""
  weeklyMarketPriceDiffPerKg: Int

  """최신 시세제공일 전 7일 대비 시세 변동률 (지난 7일 대비)"""
  weeklyMarketPriceDiffRate: Float
}

input MarketPriceDiffFilter {
  """최신 시세 제공일이 최신 영업일인지 여부"""
  isFromLatestBusinessDay: Boolean
  sign: MarketPriceDiffSign!
  unit: MarketPriceDiffUnit!
}

enum MarketPriceDiffSign {
  """급락"""
  MINUS

  """급등"""
  PLUS
}

"""시세 변동 단위"""
enum MarketPriceDiffUnit {
  """두 번째 최신 시세 제공일 대비 (전일대비)"""
  DAILY

  """최신 시세제공일 전 7일 대비 (지난 7일 대비)"""
  WEEKLY
}

type MarketPriceDiffWithPriceGroupPriority {
  """가격 그룹의 시세 변동"""
  marketPriceDiff: MarketPriceDiff!

  """가격 그룹 등급"""
  priceGroupPriority: Int!
}

type MarketPricePerPriceGroup {
  high: MarketPrice!
  low: MarketPrice!
  medium: MarketPrice!
}

type MarketPriceWithPriceGroupPriority {
  """조회된 시장 가격"""
  marketPrice: MarketPrice!

  """가격 그룹 등급"""
  priceGroupPriority: Int!
}

type MarketPricesPerPriceGroup {
  high: [MarketPrice!]!
  low: [MarketPrice!]!
  medium: [MarketPrice!]!
}

type MarketPricesWithPriceGroupPriority {
  """조회된 시장 가격"""
  marketPrices: [MarketPrice!]!

  """가격 그룹 등급"""
  priceGroupPriority: Int!
}

"""
매칭상품: Product interface에서 releaseStartMonth, releaseEndMonth 그리고 demeter 관련 field들이 추가됩니다.
"""
type MatchingProduct implements Node & Product {
  """표준 카테고리 (작물 코드)"""
  category: Category!

  """상품 설명 html 문자열"""
  description: String!

  """전시 카테고리"""
  displayCategories: [DisplayCategory!]!

  """전시 상품명"""
  displayName: String!
  id: ID!

  """대표이미지"""
  image: Image!

  """매칭상품 상태 자동관리기능 사용여부"""
  isAutoStatus: Boolean!

  """가격 그룹의 시세 변동"""
  marketPriceDiffs: [MarketPriceDiffWithPriceGroupPriority!]!

  """담당 md"""
  md: User

  """생산자 작명 상품명"""
  name: String!

  """공지사항"""
  notice: String

  """ISO 8601 공지사항 만료 시점"""
  noticeEndAt: DateTime

  """ISO 8601 공지사항 시작 시점"""
  noticeStartAt: DateTime

  """상품번호"""
  number: Int!

  """원산지"""
  origin: String

  """대표 가격 (kg당 가격 * 대표 무게)"""
  price: Int

  """kg당 가격"""
  pricePerKg: Int

  """상품 상세 정보의 이미지 리스트"""
  productQualityImages: [ProductQualityImage!]!

  """품종 품질규격 정보 (품종 카테고리에만 유효함)"""
  qualityStandard: QualityStandardPerPriceGroup! @deprecated(reason: "qualityStandards로 대체 됩니다.")

  """품종 품질규격 정보들 (품종 카테고리에만 유효함), 오름차순 정렬됩니다."""
  qualityStandards: [QualityStandard!]!

  """최근 시세가 (품종 카테고리에만 유효함)"""
  recentMarketPrice: MarketPricePerPriceGroup

  """최근 시세가 (품종 카테고리에만 유효함). with PriceGroupPriority"""
  recentMarketPrices: [MarketPriceWithPriceGroupPriority!]!

  """출하 종료 월"""
  releaseEndMonth: Int!

  """출하 시작 월"""
  releaseStartMonth: Int!

  """대표 가격 그룹의 시세 변동"""
  repMarketPriceDiff: MarketPriceDiff

  """매칭 상품의 대표 중량 (kg, 반입량 1등 중량)"""
  representativeWeight: Float!

  """판매 자료 문서 url"""
  salesDocument: String

  """운영상태"""
  status: ProductStatus!

  """대표 화물비 리스트"""
  transportationFreights: [RepresentativeFreight!]!

  """현재 로그인한 유저의 상품 찜 여부"""
  viewerHasLiked: Boolean

  """최근 일주일치 시세가 (품종 카테고리에만 유효함)"""
  weeklyMarketPrices: MarketPricesPerPriceGroup

  """최근 일주일치 시세가에 PriceGroupPriority를 매핑"""
  weeklyMarketPrices2: [MarketPricesWithPriceGroupPriority!]!
}

type MatchingProductConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [MatchingProductEdge!]!
  pageInfo: PageInfo!
}

type MatchingProductEdge implements Edge {
  cursor: String!
  node: MatchingProduct!
}

"""육류 브랜드"""
type MeatBrand implements Node {
  """국가 정보"""
  country: Country!

  """생성일시"""
  createdAt: DateTime!

  """식별자"""
  id: ID!

  """가용여부"""
  isAvailable: Boolean!

  """국내산 여부"""
  isDomestic: Boolean!

  """원산지"""
  madeIn: CountryCode!

  """육류 축종"""
  meatSpecies: MeatSpecies!

  """이름"""
  name: String!

  """수정일시"""
  updatedAt: DateTime!
}

type MeatBrandConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [MeatBrandEdge!]!
  pageInfo: PageInfo!
}

type MeatBrandEdge implements Edge {
  cursor: String!
  node: MeatBrand!
}

"""정렬 기준"""
enum MeatBrandOrderBy {
  """등록 일시"""
  CREATED_AT

  """ID"""
  ID

  """이름"""
  NAME

  """수정 일시"""
  UPDATED_AT
}

"""육류 등급"""
type MeatGrade implements Node {
  """등급"""
  grade: String!

  """식별자"""
  id: ID!

  """가용여부"""
  isAvailable: Boolean!

  """국내산여부"""
  isDomestic: Boolean!

  """원산지"""
  madeIn: CountryCode!

  """육류 축종"""
  meatSpecies: MeatSpecies!
}

type MeatGradeConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [MeatGradeEdge!]!
  pageInfo: PageInfo!
}

type MeatGradeEdge implements Edge {
  cursor: String!
  node: MeatGrade!
}

"""정렬 기준"""
enum MeatGradeOrderBy {
  """등급"""
  GRADE

  """ID"""
  ID

  """순위"""
  RANKING
}

"""육류 부위"""
type MeatPart implements Node {
  """식별자"""
  id: ID!

  """가용여부"""
  isAvailable: Boolean!

  """국내산 여부"""
  isDomestic: Boolean!

  """육류 축종"""
  meatSpecies: MeatSpecies!

  """이름"""
  name: String!
}

type MeatPartConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [MeatPartEdge!]!
  pageInfo: PageInfo!
}

type MeatPartEdge implements Edge {
  cursor: String!
  node: MeatPart!
}

"""정렬 기준"""
enum MeatPartOrderBy {
  """ID"""
  ID

  """이름"""
  NAME
}

"""육류 축종 ex) 소/돼지/닭"""
type MeatSpecies implements Node {
  """식별부호, id와 내용은 같음"""
  code: String!

  """식별자이며 의미를 가지는 ID"""
  id: ID!

  """가용여부"""
  isAvailable: Boolean!

  """관련 육류 브랜드들"""
  meatBrands(after: ID, before: ID, first: Int, last: Int): MeatBrandConnection!

  """관련 육류 등급들"""
  meatGrades(after: ID, before: ID, first: Int, last: Int, orderBy: MeatGradeOrderBy, orderDirection: OrderDirection): MeatGradeConnection!

  """관련 육류 부위들"""
  meatParts(after: ID, before: ID, first: Int, last: Int): MeatPartConnection!

  """관련 육류 용도들"""
  meatUsages(after: ID, before: ID, first: Int, last: Int): MeatUsageConnection!

  """이름"""
  name: String!

  """짧은 이름"""
  shortName: String!
}

type MeatSpeciesConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [MeatSpeciesEdge!]!
  pageInfo: PageInfo!
}

type MeatSpeciesEdge implements Edge {
  cursor: String!
  node: MeatSpecies!
}

"""정렬 기준"""
enum MeatSpeciesOrderBy {
  """ID"""
  ID

  """이름"""
  NAME

  """우선순위"""
  PRIORITY
}

"""육류 용도"""
type MeatUsage implements Node {
  """식별자"""
  id: ID!

  """가용여부"""
  isAvailable: Boolean!

  """육류 축종"""
  meatSpecies: MeatSpecies!

  """이름"""
  name: String!
}

type MeatUsageConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [MeatUsageEdge!]!
  pageInfo: PageInfo!
}

type MeatUsageEdge implements Edge {
  cursor: String!
  node: MeatUsage!
}

"""정렬 기준"""
enum MeatUsageOrderBy {
  """ID"""
  ID

  """이름"""
  NAME
}

type Mutation {
  """장바구니에 새로운 아이템을 추가합니다. 추가에 성공하면 true를 리턴합니다."""
  addCartItem(input: RequestCreateCartItem!): Boolean! @deprecated(reason: "createCartItems mutation으로 대체해서 사용합니다.")

  """견적주문 입금스케쥴 취소 처리"""
  cancelRfqWosOrderDepositSchedule(input: CancelRfqWosOrderDepositScheduleInput!): RfqWosOrderDepositSchedulePayload

  """신선하이 웹주문서 주문단품을 취소합니다."""
  cancelWosOrderProductOption(input: CancelWosOrderProductOptionInput!): CancelWosOrderProductOptionPayload

  """안심판매 신청 진행 상태 변경"""
  changeBulkSaleApplicationProgress(id: ID!, input: BulkSaleApplicationProgressInput!): BulkSaleApplicationMutationPayload

  """전량판매 캠페인 등록"""
  createBulkSaleCampaign(input: BulkSaleCampaignCreateInput!): BulkSaleCampaignMutationPayload

  """전량판매 온라인 판매 정보 등록"""
  createBulkSaleOnlineSalesInfo(input: BulkSaleOnlineSalesInfoCreateInput!): BulkSaleOnlineSalesInfoMutationPayload

  """판매원표 등록"""
  createBulkSaleProductSaleLedger(input: BulkSaleProductSaleLedgerCreateInput!): BulkSaleProductSaleLedgerMutationPayload

  """전량판매 샘플 품평 등록"""
  createBulkSaleSampleReview(input: BulkSaleSampleReviewCreateInput!): BulkSaleSampleReviewMutationPayload

  """장바구니에 새로운 아이템들을 추가합니다. 추가에 성공하면 true를 리턴합니다."""
  createCartItems(input: [RequestCreateCartItem!]!): CreateCartItemsPayload!

  """매칭 상품 등록"""
  createMatchingProduct(input: CreateMatchingProductInput!): CreateMatchingProductPayload!
  createPresignedUrlForImage(filename: String!): CreatePresignedUrlForImagePayload!

  """상품 등록"""
  createProduct(input: CreateProductInput!): CreateProductPayload!

  """상품 목록 엑셀 다운로드 요청"""
  createProductExcel(
    """표준카테고리"""
    categoryId: ID

    """전시카테고리"""
    displayCategoryId: ID

    """택배 가능 여부"""
    isCourierAvailable: Boolean

    """상품명"""
    name: String

    """True일 경우 노출되는 단품이 없는 일반상품을 제외하고 조회합니다."""
    onlyBuyable: Boolean

    """생산자번호"""
    producerCodes: [String!]

    """생산자 이름"""
    producerName: String

    """상품번호들"""
    productNos: [Int!]

    """판매상태"""
    statuses: [ProductStatus!]

    """상품 유형을 지정합니다."""
    type: [ProductType!]
  ): CreateProductExcelPayload!

  """단품 목록 엑셀 다운로드 요청"""
  createProductOptionExcel(
    """표준카테고리 id"""
    categoryId: Int

    """생산자명"""
    producerName: String

    """상품 아이디"""
    productIds: [Int!]

    """상품명"""
    productName: String

    """판매상태"""
    productOptionStatus: ProductOptionStatus

    """단품 스큐번호"""
    skuNos: [String!]
  ): CreateProductOptionExcelPayload!

  """견적 상품 등록"""
  createQuotedProduct(input: CreateQuotedProductInput!): CreateQuotedProductPayload!

  """견적서 수동 등록합니다. 견적서 등록시 전달된 정보를 토대로 견적 상품이 추가됩니다."""
  createRfq(input: CreateRfqInput!): CreateRfqPayload
  createRfqOrder(input: RfqOrderCreateInput!): RfqOrderCreateResponse!

  """견적서내 상품을 등록합니다."""
  createRfqProduct(input: CreateRfqProductInput!): CreateRfqProductPayload
  createRfqQuotationMeat(input: RfqQuotationMeatInput!): RfqQuotationMeatCreateResponse!
  createRfqRequest(input: RfqRequestCreateInput!): RfqRequestCreateResponse!
  createRfqRequestItemsMeat(input: RfqRequestItemMeatCreateInput!): RfqRequestItemMeatCreateResponse!

  """견적주문 입금스케쥴 추가"""
  createRfqWosOrderDepositSchedule(input: CreateRfqWosOrderDepositScheduleInput!): RfqWosOrderDepositSchedulePayload

  """견적주문 입금스케쥴 상세 추가"""
  createRfqWosOrderDepositScheduleDetail(input: CreateRfqWosOrderDepositScheduleDetailInput!): RfqWosOrderDepositScheduleDetailPayload

  """임시 웹주문서 생성 요청(장바구니용)"""
  createTempWosOrder(input: CreateTempWosOrderInput!): CreateTempWosOrderPayload

  """임시 웹주문서 생성 요청(여러 건 단품구매)"""
  createTempWosOrderProductOptions(input: CreateTempWosOrderProductOptionsInput!): CreateTempWosOrderPayload

  """임시 웹주문서 생성 요청(단품구매)용"""
  createTempWosOrderSingle(input: CreateTempWosOrderSingleInput!): CreateTempWosOrderPayload
  createTerm(input: TermCreateInput!): TermMutationResponse!

  """[거래매칭] 수요 생성"""
  createTradematchDemand(
    """생성 내용"""
    input: TradematchDemandCreateInput!
  ): TradematchDemandMutationResponse!

  """판매원표 삭제"""
  deleteBulkSaleProductSaleLedger(id: ID!): BulkSaleProductSaleLedgerMutationPayload

  """장바구니 아이템을 제거합니다."""
  deleteCartItems(input: DeleteCartItemsInput!): DeleteCartItemsPayload!

  """컨택대기 상태인 견적상품을 삭제합니다."""
  deleteRfqProduct(
    """삭제할 견적상품의 ID"""
    id: ID!
  ): DeleteRfqProductPayload
  deleteRfqQuotationMeat(id: ID!): RfqQuotationMeatDeleteResponse!
  deleteRfqRequest(id: ID!): RfqRequestDeleteResponse!
  deleteRfqRequestItemsMeat(id: ID!): RfqRequestItemMeatDeleteResponse!

  """[거래매칭] 수요 삭제"""
  deleteTradematchDemand(
    """삭제 대상 ID"""
    id: ID!
  ): TradematchDemandDeleteResponse!

  """상품 찜하기"""
  likeProduct(input: LikeProductInput!): LikeProductPayload!

  """상품 벌크 찜하기"""
  likeProducts(input: LikeProductsInput!): LikeProductsPayload!

  """상품을 조회했다고 마킹합니다."""
  markProductAsViewed(input: MarkProductAsViewedInput!): MarkProductAsViewedPayload!

  """[거래매칭] 수요 부분 수정"""
  partialUpdateTradematchDemand(
    """부분 수정 대상 ID"""
    id: ID!

    """부분 수정 내용"""
    input: TradematchDemandPartialUpdateInput!
  ): TradematchDemandMutationResponse!

  """찜한 상품 중 견적 요청 상품들을 새로운 상품 목록으로 교체합니다."""
  replaceRfqLikedProducts(input: ReplaceRfqLikedProductsInput!): ReplaceRfqLikedProductsPayload!

  """결제요청 - 결제요청정보를 등록 후, 등록된 정보를 반환합니다."""
  requestPayment(input: RequestPaymentInput!): RequestPaymentPayload

  """KCP 결제승인요청"""
  requestPaymentApprovalKCP(input: RequestPaymentApprovalKCPInput!): RequestPaymentApprovalKCPPayload

  """토스페이먼츠 결제승인요청"""
  requestPaymentApprovalTossPayments(input: RequestPaymentApprovalTossPaymentsInput!): RequestPaymentApprovalTossPaymentsPayload
  setInterestedItemCategories(input: SetInterestedItemCategoriesInput!): SetInterestedItemCategoriesPayload!
  setSelfReportedBusinessSectors(input: SetSelfReportedBusinessSectorsInput!): SetSelfReportedBusinessSectorsPayload!
  setSelfReportedSalesBin(input: SetSelfReportedSalesBinInput): SetSelfReportedSalesBinPayload!

  """상품 찜하기 취소"""
  unlikeProduct(input: UnlikeProductInput!): UnlikeProductPayload!

  """찜한 상품 목록 삭제"""
  unlikeProducts(input: UnlikeProductsInput!): UnlikeProductsPayload!

  """찜한 상품 목록 전체 삭제. excludedProductIds 인자로 특정 상품들은 삭제에서 제외할 수 있습니다."""
  unlikeProductsAll(input: UnlikeProductsAllInput!): UnlikeProductsAllPayload!

  """상품을 조회했단 기록을 excludedProductIds를 제외하고 모두 지웁니다."""
  unmarkAllProductsAsViewed(input: UnmarkAllProductsAsViewedInput!): UnmarkAllProductsAsViewedPayload!

  """상품을 조회했단 기록을 지웁니다."""
  unmarkProductsAsViewed(input: UnmarkProductsAsViewedInput!): UnmarkProductsAsViewedPayload!

  """안심판매 신청 업데이트"""
  updateBulkSaleApplication(id: ID!, input: BulkSaleApplicationUpdateInput!): BulkSaleApplicationMutationPayload

  """전량판매 캠페인 수정"""
  updateBulkSaleCampaign(id: ID!, input: BulkSaleCampaignUpdateInput!): BulkSaleCampaignMutationPayload

  """전량판매 온라인 판매 정보 수정"""
  updateBulkSaleOnlineSalesInfo(id: ID!, input: BulkSaleOnlineSalesInfoUpdateInput!): BulkSaleOnlineSalesInfoMutationPayload

  """판매원표 수정"""
  updateBulkSaleProductSaleLedger(id: ID!, input: BulkSaleProductSaleLedgerUpdateInput!): BulkSaleProductSaleLedgerMutationPayload

  """전량판매 샘플 품평 수정"""
  updateBulkSaleSampleReview(id: ID!, input: BulkSaleSampleReviewUpdateInput!): BulkSaleSampleReviewMutationPayload

  """장바구니 아이템의 수량을 수정합니다."""
  updateCartItemQuantity(input: UpdateCartItemQuantityInput!): UpdateCartItemQuantityPayload!

  """매칭 상품 수정"""
  updateMatchingProduct(input: UpdateMatchingProductInput!): UpdateMatchingProductPayload!

  """상품 수정"""
  updateProduct(input: UpdateProductInput!): UpdateProductPayload!

  """단품의 원가 정보를 수정 합니다, 변경할 값만 입력하여 부분 업데이트 가능"""
  updateProductOptionCosts(input: [UpdateProductOptionCostsInput!]!): UpdateProductOptionCostsPayload!

  """견적 상품 수정"""
  updateQuotedProduct(input: UpdateQuotedProductInput!): UpdateQuotedProductPayload!

  """견적서를 수정합니다."""
  updateRfq(input: UpdateRfqInput!): UpdateRfqPayload

  """
  견적서내 상품을 업데이트 합니다.
                   * null인 필드인 경우 null로 업데이트 합니다. 
                   * 필수인 값을 null로 업데이트 시도할 경우 에러를 반환합니다.
  """
  updateRfqProducts(input: [UpdateRfqProductsInput!]!): UpdateRfqProductsPayload
  updateRfqQuotationMeat(id: ID!, input: RfqQuotationMeatInput!): RfqQuotationMeatUpdateResponse!
  updateRfqRequest(id: ID!, input: RfqRequestUpdateInput!): RfqRequestUpdateResponse!
  updateRfqRequestItemsMeat(id: ID!, input: RfqRequestItemMeatUpdateInput!): RfqRequestItemMeatUpdateResponse!

  """견적주문 입금스케쥴 수정"""
  updateRfqWosOrderDepositSchedule(input: UpdateRfqWosOrderDepositScheduleInput!): RfqWosOrderDepositSchedulePayload

  """견적주문 입금스케쥴 통합 업데이트"""
  updateRfqWosOrderDepositScheduleIntegrated(input: UpdateRfqWosOrderDepositScheduleIntegratedInput!): RfqWosOrderDepositSchedulePayload

  """견적주문상품 정보변경"""
  updateRfqWosOrderProduct(input: UpdateRfqWosOrderProductInput!): UpdateRfqWosOrderProductPayload

  """임시 주문서 업데이트 요청(결제 전에 호출)"""
  updateTempWosOrder(input: UpdateTempWosOrderInput!): UpdateTempWosOrderPayload
  updateUser(input: UpdateUserInput): UpdateUserPayload!

  """단품 복수 등록 및 수정"""
  upsertProductOptions(input: UpsertProductOptionsInput!): UpsertProductOptionsPayload
}

"""변경 내용"""
interface MutationPayload {
  """결과"""
  result: Node
}

"""Node"""
interface Node {
  """ID"""
  id: ID!
}

"""
일반상품: Product interface에서 producer, price, isCourierAvailable, isVat, productOptions, notationInformationType가 추가됩니다.
"""
type NormalProduct implements Node & Product {
  """표준 카테고리 (작물 코드)"""
  category: Category!

  """상품 설명 html 문자열"""
  description: String!

  """전시 카테고리"""
  displayCategories: [DisplayCategory!]!

  """전시 상품명"""
  displayName: String!
  id: ID!

  """대표이미지"""
  image: Image!

  """배송 가능 여부"""
  isCourierAvailable: Boolean!

  """과면세 여부"""
  isVat: Boolean!

  """담당 md"""
  md: User

  """생산자 작명 상품명"""
  name: String!

  """필수 표기정보를 구분하기 위한 플래그, 농축수산물(WHOLE_FOOD) | 가공식품(PROCESSED_FOOD)"""
  notationInformationType: ProductNotationInformationType!

  """공지사항"""
  notice: String

  """ISO 8601 공지사항 만료 시점"""
  noticeEndAt: DateTime

  """ISO 8601 공지사항 시작 시점"""
  noticeStartAt: DateTime

  """상품번호"""
  number: Int!

  """원산지"""
  origin: String

  """판매가격"""
  price: Int

  """생산자"""
  producer: User!

  """연관 단품 리스트입니다. connection 타입을 따르지만 파라미터에 따라 스펙이 적용되어있지 않습니다."""
  productOptions(
    """N/A"""
    after: ID

    """N/A"""
    first: Int
  ): ProductOptionConnection!

  """판매 자료 문서 url"""
  salesDocument: String

  """운영상태"""
  status: ProductStatus!

  """현재 로그인한 유저의 상품 찜 여부"""
  viewerHasLiked: Boolean
}

type NormalProductConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [NormalProductEdge!]!
  pageInfo: PageInfo!
}

type NormalProductEdge implements Edge {
  cursor: String!
  node: NormalProduct!
}

"""일반상품 중 서로 변경이 호환되는 상품 타입"""
enum NormalProductType {
  """일반상품"""
  NORMAL

  """견적 요청이 가능한 일반 상품"""
  QUOTABLE
}

"""Order direction considering the position of the null"""
enum NullableOrderDirection {
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
}

"""온라인 판매처"""
enum OnlineMarket {
  """옥션"""
  AUCTION

  """쿠팡"""
  COUPANG

  """지마켓"""
  GMARKET

  """지에스샵"""
  GSSHOP

  """인터파크"""
  INTERPARK

  """네이버"""
  NAVER

  """기타"""
  OTHER

  """SSG"""
  SSG

  """11번가"""
  ST11

  """티몬"""
  TMON

  """위메프"""
  WEMAKEPRICE
}

"""All order directions, including nullable or not"""
enum OrderByDirection {
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
}

"""Order Direction"""
enum OrderDirection {
  """low to high"""
  ASC

  """high to low"""
  DESC
}

"""상태별 개수를 표현합니다"""
type OrderProductCountByStatusItem {
  count: Int!
  status: OrderProductStatus!
}

enum OrderProductStatus {
  CANCEL
  COMPLETE
  CREATE
  DELIVERING
  DEPARTURE
  DEPOSIT_PENDING
  ERROR
  NEGOTIATING
  PACKING
  REFUND
}

"""Page information"""
type PageInfo {
  """Cursor of the last edge in this page"""
  endCursor: String!

  """Does it have next page?"""
  hasNextPage: Boolean!

  """Does it have previous page?"""
  hasPreviousPage: Boolean!

  """Cursor of the first edge in this page"""
  startCursor: String!
}

"""결제정보"""
type Payment implements Node {
  """결제금액"""
  amount: Int
  createdAt: DateTime!
  id: ID!

  """결제수단"""
  method: PaymentMethod

  """결제 일시"""
  paidAt: DateTime

  """PG코드"""
  pgCode: PgCode

  """PG사 거래 고유번호"""
  pgPaymentId: String

  """PG사에서 전달된 최종적인 거래 응답"""
  pgResponse: Map
  status: PaymentStatus!
  updatedAt: DateTime!
  virtualAccount: VirtualAccount
}

type PaymentConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [PaymentEdge!]!
  pageInfo: PageInfo!
}

type PaymentEdge implements Edge {
  cursor: String!
  node: Payment!
}

"""결제 수단"""
enum PaymentMethod {
  """신용카드"""
  CREDIT_CARD

  """계좌이체(enum-value)"""
  TRANSFER

  """가상계좌"""
  VIRTUAL_ACCOUNT
}

"""결제용도 (결제하여 얻는 것)"""
enum PaymentPurpose {
  """주문"""
  ORDER

  """신선캐시"""
  SINSUN_CASH
}

"""결제 상태"""
enum PaymentStatus {
  """결제 완료"""
  COMPLETE

  """결제 실패"""
  FAILURE

  """결제 대기 상태"""
  PENDING
}

"""PG사 구분 정보"""
enum PgCode {
  KCP
  TOSS_PAYMENTS
}

"""전화번호"""
scalar PhoneNumber

enum PhoneVerificationStatus {
  UNVERIFIED
  VERIFIED
}

"""양의 정수"""
scalar PositiveInt

"""가격"""
scalar Price

"""상품 기본 인터페이스"""
interface Product {
  """표준 카테고리 (작물 코드)"""
  category: Category!

  """상품 설명 html 문자열"""
  description: String!

  """전시 카테고리"""
  displayCategories: [DisplayCategory!]!

  """전시 상품명"""
  displayName: String!
  id: ID!

  """대표이미지"""
  image: Image!

  """담당 md"""
  md: User

  """생산자 작명 상품명"""
  name: String!

  """공지사항"""
  notice: String

  """ISO 8601 공지사항 만료 시점"""
  noticeEndAt: DateTime

  """ISO 8601 공지사항 시작 시점"""
  noticeStartAt: DateTime

  """상품번호"""
  number: Int!

  """원산지"""
  origin: String

  """판매 자료 문서 url"""
  salesDocument: String

  """운영상태"""
  status: ProductStatus!

  """현재 로그인한 유저의 상품 찜 여부"""
  viewerHasLiked: Boolean
}

"""품종"""
type ProductCategory implements Node {
  """전량판매 신청들"""
  bulkSaleApplications(after: ID, before: ID, first: Int, last: Int): BulkSaleApplicationConnection!

  """전량판매 캠페인들"""
  bulkSaleCampaigns(after: ID, before: ID, first: Int, last: Int): BulkSaleCampaignConnection!

  """품목 (상위 분류)"""
  crop: Crop!

  """선택 가능 상품포장규격 등급들 (예: ["특", "상", "기타"])"""
  grades: [ProductPackageGrade!]!

  """ID"""
  id: ID!

  """가용여부"""
  isAvailable: Boolean!

  """이름"""
  name: String!

  """자주 거래되는 상품포장규격 등급들 (예: ["특", "상", "기타"])"""
  popularGrades: [ProductPackageGrade!]!

  """자주 거래되는 상품포장규격 질량들"""
  popularQuantities: [ProductPackageMass!]!

  """선택 가능 상품포장규격 질량들"""
  quantities: [ProductPackageMass!]!
}

type ProductCategoryConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [ProductCategoryEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type ProductCategoryEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: ProductCategory!
}

"""정렬 기준"""
enum ProductCategoryOrderBy {
  """ID"""
  ID

  """품목명"""
  NAME
}

type ProductConnection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductEdge {
  cursor: String!
  node: Product!
}

"""법적으로 필수 표기해야 하는 정보를 구분하는 값입니다."""
enum ProductNotationInformationType {
  """가공식품"""
  PROCESSED_FOOD

  """농축수산물"""
  WHOLE_FOOD
}

"""
일반(NormalProduct) | 견적가능(QuotableProduct) 상품의 단품입니다. 재고번호를 가지며 실제 거래의 단위가 됩니다.
"""
type ProductOption implements Node {
  adhocStockIsLimited: Boolean!

  """판매 가능 수량 노출 여부"""
  adhocStockIsNumRemainingVisible: Boolean!

  """공급 수량, 관리자가 세팅한 단품 별 판매가 가능한 총 수량"""
  adhocStockNumLimit: Int

  """판매 가능 수량, 공급 수량 - 판매 수량. 현 시점에서 바이어가 실제로 구매할 수 있는 수량"""
  adhocStockNumRemaining: Int

  """판매된 수량"""
  adhocStockNumSold: Int

  """단위 수량"""
  amount: Float!

  """수량 단위"""
  amountUnit: AmountUnit!

  """포장당 입수 최대"""
  countPerPackageMax: Int

  """포장당 입수 최소"""
  countPerPackageMin: Int

  """출고 기준 시간"""
  cutOffTime: String

  """등급"""
  grade: String
  id: ID!

  """무료배송 프로모션 제공 여부"""
  isFreeShipping: Boolean!

  """출고 기준 시간 메모"""
  memo: String

  """단품번호"""
  number: Int!

  """단품 이름"""
  optionName: String!

  """포장 재질"""
  packageType: String

  """개당 수량 최대"""
  perAmountMax: Float

  """개당 수량 최소"""
  perAmountMin: Float

  """개당 수량 단위"""
  perAmountUnit: AmountUnit

  """개당 크기 최대"""
  perSizeMax: Float

  """개당 크기 최소"""
  perSizeMin: Float

  """개당 크기 단위"""
  perSizeUnit: SizeUnit

  """바이어(구매자)에게 보이는 판매가"""
  price: Int

  """포함된 상품"""
  product: Product!

  """현재시점 기준 적용되는 원가 정보"""
  productOptionCost: ProductOptionCost!

  """합포장 단위수량"""
  shippingUnitQuantity: Int!

  """판매 상태 ex 판매중, 매진, ..."""
  status: ProductOptionStatus!

  """단품 sku"""
  stockSku: String!
}

type ProductOptionConnection {
  edges: [ProductOptionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductOptionCost implements Node {
  """원가 생성 어드민"""
  admin: User!

  """배송 비용"""
  deliveryCost: Int!

  """원가 시작일"""
  fromDate: DateTime!
  id: ID!

  """생산자"""
  producer: User!

  """상품"""
  product: Product!

  """단품"""
  productOption: ProductOption!

  """현재 원물원가; 배송비나 작업비용이 빠진 물건만의 비용"""
  rawCost: Int

  """작업 비용"""
  workingCost: Int
}

type ProductOptionCostConnection {
  edges: [ProductOptionCostEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""생산자 공급가 타입"""
enum ProductOptionCostContractType {
  """전량판매"""
  BULKSALE

  """온라인 택배"""
  ONLINE
}

type ProductOptionCostEdge implements Edge {
  cursor: String!
  node: ProductOptionCost!
}

enum ProductOptionCostSort {
  """sku 번호 기준 오름차순"""
  SKU_ASC

  """sku 번호 기준 내림차순"""
  SKU_DESC
}

type ProductOptionEdge implements Edge {
  cursor: String!
  node: ProductOption!
}

"""단품 snapshot"""
type ProductOptionSnapshot {
  id: ID!

  """단품 이름"""
  optionName: String!

  """바이어(구매자)에게 보이는 판매가"""
  price: Int!

  """판매 상태 ex 판매중, 매진, ..."""
  status: ProductOptionStatus!
}

enum ProductOptionSort {
  """sku 번호 기준 내림차순"""
  SKU_DESC
}

enum ProductOptionStatus {
  NOSALE
  RETIRE
  SALE
  SOLDOUT
}

"""상품포장규격 등급"""
scalar ProductPackageGrade

"""상품포장규격 질량"""
type ProductPackageMass {
  """양"""
  amount: Float!

  """표현"""
  display: String!

  """단위"""
  unit: ProductPackageMassUnit!
}

"""상품포장규격 질량 입력"""
input ProductPackageMassInput {
  """양"""
  amount: Float!

  """단위"""
  unit: ProductPackageMassUnit!
}

"""상품포장규격 질량 단위"""
enum ProductPackageMassUnit {
  """그램"""
  G

  """킬로그램"""
  KG

  """밀리그램"""
  MG
}

"""Product의 상세 상품 이미지 정보"""
type ProductQualityImage {
  """Url"""
  imageUrl: Image!

  """메모"""
  memo: String!
}

"""견적상품과 견적 요청이 가능한 일반 상품의 판매 유형입니다.  이 값에 따라 판매 경로가 달라집니다."""
enum ProductSalesType {
  """축산 RFQ를 통해 판매하는 상품입니다."""
  RFQ_LIVESTOCK

  """수산 매칭을 통해 판매하는 상품입니다."""
  TRADEMATCH_AQUATIC
}

"""상품 snapshot"""
type ProductSnapshot {
  """전시 상품명"""
  displayName: String!
  id: ID!

  """운영상태"""
  status: ProductStatus!
}

enum ProductStatus {
  HIDDEN_SALE
  NOSALE
  RETIRE
  SALE
  SOLDOUT
}

enum ProductType {
  """매칭 상품"""
  MATCHING

  """일반상품"""
  NORMAL

  """견적 요청이 가능한 일반 상품"""
  QUOTABLE

  """견적상품"""
  QUOTED
}

"""작물 인증"""
enum ProductionCertificate {
  """친환경(무농약, 유기농) 인증"""
  ECO_FRIENDLY

  """GAP 인증"""
  GAP

  """저탄소 인증"""
  LOW_CARBON
}

"""상품 커넥션 정렬 옵션"""
input ProductsOrderBy {
  direction: OrderByDirection!
  field: ProductsOrderField!
}

enum ProductsOrderField {
  DAILY_MARKET_PRICE_DIFF_PER_KG
  DAILY_MARKET_PRICE_DIFF_RATE

  """인기순 정렬, DESC만 지원합니다."""
  POPULARITY
  PRICE
  PRICE_PER_KG

  """품절 상품을 맨 뒤로 보냅니다."""
  STATUS_PRIORITY
  UPDATED_AT
  WEEKLY_MARKET_PRICE_DIFF_PER_KG
  WEEKLY_MARKET_PRICE_DIFF_RATE
}

enum ProductsQueryInputSort {
  PRICE_ASC
  PRICE_DESC
  PRICE_PER_KG_ASC
  PRICE_PER_KG_DESC
  UPDATED_ASC
  UPDATED_DESC
}

type QualityStandard {
  """색택"""
  color: String

  """간략 설명"""
  description: String!

  """결점"""
  fault: String

  """이물"""
  foreignMatter: String

  """신선"""
  freshness: String

  """길이"""
  length: String

  """품질 그룹 이름"""
  name: String!

  """낱개 고르기"""
  perRegularity: String

  """낱개 크기"""
  perSize: String

  """품질 그룹 간의 순위"""
  priceGroupPriority: Int!

  """모양"""
  shape: String

  """당도"""
  sugar: String

  """손질"""
  trimming: String
}

type QualityStandardPerPriceGroup {
  high: QualityStandard!
  low: QualityStandard!
  medium: QualityStandard!
}

type Query {
  """신선마켓 관리자 검색"""
  adminUsers(after: ID, before: ID, first: Int, last: Int, name: String): AdminUserConnection!

  """안심판매 신청 통계"""
  bulkSaleApplicationStatistics(applicantNameMatch: String, appliedDateGe: Date, appliedDateGt: Date, appliedDateLe: Date, appliedDateLt: Date, businessNameMatch: String, cropIds: [ID!], farmAddressMatch: String, ids: [ID!], isTest: Boolean, productCategoryIds: [ID!], productCategoryNameMatch: String, progresses: [BulkSaleApplicationProgress!], staffIds: [ID!], staffKeys: [StaffKey!]): BulkSaleApplicationStatistics!

  """안심판매 취소 사유 목록"""
  bulkSaleApplicationWithdrawalReasons(applicationId: ID!): [String!]!

  """안심판매 신청 조회"""
  bulkSaleApplications(after: ID, applicantNameMatch: String, appliedDateGe: Date, appliedDateGt: Date, appliedDateLe: Date, appliedDateLt: Date, before: ID, businessNameMatch: String, cropIds: [ID!], farmAddressMatch: String, first: Int, ids: [ID!], isTest: Boolean, last: Int, orderBy: BulkSaleApplicationOrderBy, orderDirection: OrderDirection, productCategoryIds: [ID!], productCategoryNameMatch: String, progresses: [BulkSaleApplicationProgress!], staffIds: [ID!], staffKeys: [StaffKey!]): BulkSaleApplicationConnection!

  """전량판매 캠페인 통계"""
  bulkSaleCampaignStatistics: BulkSaleCampaignStatistics!

  """전량판매 캠페인 조회"""
  bulkSaleCampaigns(after: ID, before: ID, first: Int, ids: [ID!], isOpen: Boolean, last: Int, orderBy: BulkSaleCampaignOrderBy, orderDirection: OrderDirection): BulkSaleCampaignConnection!

  """전량판매 평가 조회"""
  bulkSaleEvaluations(after: ID, before: ID, first: Int, ids: [ID!], last: Int, orderBy: BulkSaleEvaluationOrderBy, orderDirection: OrderDirection, results: [BulkSaleEvaluationResult!]): BulkSaleEvaluationConnection!

  """전량판매 시장 판매 정보 조회"""
  bulkSaleMarketSalesInfo(after: ID, before: ID, bulkSaleApplicationIds: [ID!], first: Int, ids: [ID!], last: Int, orderBy: BulkSaleMarketSalesInfoOrderBy, orderDirection: OrderDirection): BulkSaleMarketSalesInfoConnection!

  """전량판매 온라인 판매 정보 조회"""
  bulkSaleOnlineSalesInfo(after: ID, before: ID, bulkSaleApplicationIds: [ID!], first: Int, ids: [ID!], last: Int, orderBy: BulkSaleOnlineSalesInfoOrderBy, orderDirection: OrderDirection): BulkSaleOnlineSalesInfoConnection!

  """전량판매 샘플 품평 조회"""
  bulkSaleSampleReviews(after: ID, before: ID, bulkSaleApplicationIds: [ID!], first: Int, ids: [ID!], last: Int, orderBy: BulkSaleSampleReviewOrderBy, orderDirection: OrderDirection): BulkSaleSampleReviewConnection!

  """유저의 장바구니 아이템 개수를 조회합니다."""
  cartItemCount: Int!

  """장바구니를 조회합니다."""
  cartItems: [CartItem!]!
  categories(
    """부모 표준 카테고리의 id, null일 경우 최상위 표준 카테고리를 조회한다"""
    parentId: ID
  ): [Category!]!

  """ChannelIO 의 `boot` event 에 넣을 value 를 조회합니다"""
  channelIO: ChannelIO

  """국가 조회"""
  countries(after: ID, before: ID, first: Int, last: Int): CountryConnection!

  """품목 조회"""
  crops(after: ID, before: ID, categories: [CropCategory!], first: Int, ids: [ID!], last: Int, nameMatch: String, orderBy: CropOrderBy, orderDirection: OrderDirection): CropConnection!

  """배송회사 목록 조회"""
  deliveryCompanies(after: ID, before: ID, codes: [String!], first: Int, ids: [String!], isAvailable: Boolean, last: Int, names: [String!], orderBy: DeliveryCompanyOrderBy, orderDirection: OrderDirection): DeliveryCompanyConnection!
  displayCategories(
    """true일 경우, 노출 여부가 활성화된 전시 카테고리만 조회된다"""
    onlyDisplayable: Boolean

    """부모 전시 카테고리의 id, null일 경우 최상위 전시 카테고리를 조회한다"""
    parentId: ID

    """조회할 전시 카테고리의 타입, null일 경우 타입제한 없이 조회한다"""
    types: [DisplayCategoryType!]
  ): [DisplayCategory!]! @deprecated(reason: "하위 카테고리 조회는 DisplayCategory.children으로 통일하고, 루트 (depth0) 전시 카테고리들은 rootDisplayCategories 쿼리로 조회합니다.")
  displayCategory(number: Int!): DisplayCategory

  """팩토링 목록 조회"""
  factoring: [Factoring!]

  """농작물 거래처 조회"""
  farmMarkets(after: ID, before: ID, first: Int, ids: [ID!], last: Int, orderBy: FarmMarketOrderBy, orderDirection: OrderDirection): FarmMarketConnection!

  """팜모닝 사용자 조회"""
  farmmorningUsers(after: ID, before: ID, first: Int, ids: [ID!], last: Int, orderBy: FarmmorningUserOrderBy, orderDirection: OrderDirection): FarmmorningUserConnection!

  """농장 조회"""
  farms(after: ID, before: ID, first: Int, ids: [ID!], last: Int, orderBy: FarmOrderBy, orderDirection: OrderDirection): FarmConnection!
  featuredDisplayCategories(
    """true일 경우, 노출 여부가 활성화된 전시 카테고리만 조회된다"""
    onlyDisplayable: Boolean

    """true일 경우, 구매 가능한 상품이 있는 전시 카테고리만 조회된다"""
    onlyHasBuyableProducts: Boolean
    orderBy: [FeaturedDisplayCategoryOrderBy!]
    section: SectionType!
    type: DisplayCategoryType!
  ): [DisplayCategory!]!

  """피쳐 목록"""
  features: [Feature!]!
  gnbBanners: [GnbBanner!]!

  """공휴일 목록"""
  holidays(endDate: Date!, startDate: Date!): [Holiday!]!

  """바이어 정보받기에서 관심(표준카테고리)를 사용자에게 표시할 때 사용합니다."""
  interestedCategoryListing: InterestedCategoryListing

  """CategoryItemId를 ItemCategory 형태로 convert하여 줍니다."""
  itemCategoriesListing(ids: [ID!]): ItemCategoriesListing
  mainBanners: [Banner!]!
  mainDisplayCategories(
    """true일 경우, 노출 여부가 활성화된 전시 카테고리만 조회된다"""
    onlyDisplayable: Boolean
  ): [DisplayCategory!]!

  """육류 브랜드 조회"""
  meatBrands(after: ID, before: ID, first: Int, isDomestic: Boolean, last: Int, madeIns: [CountryCode!], meatSpeciesIds: [ID!], orderBy: MeatBrandOrderBy, orderDirection: OrderDirection): MeatBrandConnection!

  """육류 등급 조회"""
  meatGrades(after: ID, before: ID, first: Int, isDomestic: Boolean, last: Int, meatSpeciesIds: [ID!], orderBy: MeatGradeOrderBy, orderDirection: OrderDirection): MeatGradeConnection!

  """육류 부위 조회"""
  meatParts(after: ID, before: ID, first: Int, isDomestic: Boolean, last: Int, meatSpeciesIds: [ID!], orderBy: MeatPartOrderBy, orderDirection: OrderDirection): MeatPartConnection!

  """육류 축종 조회"""
  meatSpecies(after: ID, before: ID, first: Int, last: Int, orderBy: MeatSpeciesOrderBy, orderDirection: OrderDirection): MeatSpeciesConnection!

  """육류 용도 조회"""
  meatUsages(after: ID, before: ID, first: Int, last: Int, meatSpeciesIds: [ID!], orderBy: MeatUsageOrderBy, orderDirection: OrderDirection): MeatUsageConnection!
  node(id: ID!): Node

  """충전내역을 조회합니다."""
  payments(method: PaymentMethod!, status: PaymentStatus!): [Payment!]!
  product(
    """Number id of product"""
    number: Int!
  ): Product

  """품종 목록 조회"""
  productCategories(after: ID, before: ID, cropIds: [ID!], first: Int, ids: [ID!], isAvailable: Boolean, last: Int, nameMatch: String, orderBy: ProductCategoryOrderBy, orderDirection: OrderDirection): ProductCategoryConnection!

  """원가를 조회합니다."""
  productOptionCosts(
    after: String
    before: String
    first: Int
    last: Int
    offset: Int

    """현재 효력이 있는 원가만 조회할 지 여부"""
    onlyCurrent: Boolean = false

    """생산자명 User.name"""
    producerName: String

    """상품 아이디 리스트 Product.id"""
    productIds: [ID!]

    """상품명 Product.displayName"""
    productName: String

    """상품 번호 리스트 Product.number"""
    productNumbers: [Int!]

    """판매상태 ProductOption.status"""
    productOptionStatus: ProductOptionStatus

    """단품 스큐번호 리스트 ProductOption.stockSku"""
    skus: [String!]

    """정렬 기준"""
    sort: ProductOptionCostSort = SKU_DESC
  ): ProductOptionCostConnection!
  productOptions(
    after: String
    before: String

    """표준카테고리 id"""
    categoryId: Int
    first: Int
    last: Int
    offset: Int

    """생산자명"""
    producerName: String

    """상품 아이디"""
    productIds: [Int!]

    """상품명"""
    productName: String

    """판매상태"""
    productOptionStatus: ProductOptionStatus

    """단품 스큐번호"""
    skuNos: [String!]

    """정렬 기준"""
    sort: ProductOptionSort
  ): ProductOptionConnection!
  products(
    """after + first"""
    after: String

    """before + last"""
    before: String

    """표준카테고리"""
    categoryId: ID

    """전시카테고리"""
    displayCategoryId: ID

    """first 단독 사용도 가능"""
    first: Int

    """택배 가능 여부"""
    isCourierAvailable: Boolean
    last: Int

    """매칭상품 시세의 변동량 관련 필터입니다."""
    marketPriceDiffFilter: MarketPriceDiffFilter

    """상품명"""
    name: String

    """offset + first"""
    offset: Int

    """True일 경우 노출되는 단품이 없는 일반상품을 제외하고 조회합니다."""
    onlyBuyable: Boolean
    orderBy: [ProductsOrderBy!]

    """생산자번호"""
    producerCodes: [String!]

    """생산자 이름"""
    producerName: String

    """상품번호들"""
    productNos: [Int!]
    sort: ProductsQueryInputSort

    """판매상태"""
    statuses: [ProductStatus!]

    """상품 유형을 지정합니다."""
    type: [ProductType!]
  ): ProductConnection!

  """대표 화물 배송 요금 조회"""
  representativeFreightDeliveryCosts: [RepresentativeFreight!]!
  reviews: [Review!]!
  rfq(
    """Number id of rfq"""
    number: Int!
  ): Rfq!

  """RFQ 배송지 조회"""
  rfqDeliveryPlaces(after: ID, before: ID, first: Int, last: Int, orderDirection: OrderDirection): RfqDeliveryPlaceConnection!
  rfqMinQuotedPriceForMeat(
    """RFQ 견적요청 상품 ID"""
    rfqRequestItemId: ID!
  ): RfqMinQuotedPrice!
  rfqNextAcceptableDeliveryDate: RfqNextAcceptableDeliveryDate!
  rfqOrders(after: ID, before: ID, first: Int, last: Int, orderDirection: OrderDirection): RfqOrderConnection!

  """견적 아이템들을 조회합니다."""
  rfqProducts(
    after: String
    before: String

    """encoded depth0 categoryId"""
    categoryId: ID
    first: Int
    from: DateTime
    last: Int

    """담당자(소싱 및 컨택) 이름"""
    mdName: String
    offset: Int

    """품목 또는 품종 이름"""
    productName: String

    """정렬 기준"""
    sort: RfqProductSort = CREATED_DESC

    """진행상태"""
    status: RfqProductStatus
    to: DateTime
  ): RfqProductConnection!
  rfqQuotationsMeat(after: ID, before: ID, first: Int, last: Int, orderDirection: OrderDirection): RfqQuotationMeatConnection!
  rfqRecommendedPriceForMeat(
    """RFQ 견적요청 상품 ID"""
    rfqRequestItemId: ID!
  ): RfqRecommendedPrice!
  rfqRequestItemsMeat(after: ID, before: ID, first: Int, last: Int, orderBy: RfqRequestItemMeatOrderBy, orderDirection: OrderDirection, requestIds: [ID!]): RfqRequestItemMeatConnection!
  rfqRequests(after: ID, before: ID, first: Int, last: Int, orderDirection: OrderDirection): RfqRequestConnection!
  rfqSelectedQuotationsMeat(after: ID, before: ID, buyerIds: [ID!], first: Int, last: Int, orderDirection: OrderDirection, requestIds: [ID!], requestItemIds: [ID!]): RfqSelectedQuotationMeatConnection!

  """RFQ 판매자 조회"""
  rfqSellerItems(after: ID, before: ID, first: Int, last: Int, meatSpeciesIds: [ID!], orderDirection: OrderDirection): RfqSellerItemConnection!

  """RFQ 판매자 조회"""
  rfqSellers(after: ID, before: ID, first: Int, last: Int, orderDirection: OrderDirection): RfqSellerConnection!

  """RFQ WOS 입금 스케쥴 단일 조회"""
  rfqWosOrderDepositSchedule(
    """RFQ WOS 입금 스케쥴 아이디"""
    id: ID!
  ): RfqWosOrderDepositSchedule

  """RFQ WOS 입금 스케쥴 목록을 조회합니다."""
  rfqWosOrderDepositSchedules(buyerId: Int, factoring: Boolean, first: Int, fromDate: DateTime, offset: Int, status: RfqWosDepositScheduleStatus, toDate: DateTime): RfqWosOrderDepositScheduleConnection!

  """견적주문상품 단건 조회"""
  rfqWosOrderProduct(rfqWosOrderProductNo: Int!): RfqWosOrderProductResult

  """견적주문상품 아이템들을 조회합니다."""
  rfqWosOrderProducts(buyerId: Int, first: Int, offset: Int, rfqId: Int): RfqWosOrderProductConnection!
  rootDisplayCategories(
    onlyDisplayable: Boolean
    onlyHasBuyableProducts: Boolean
    orderBy: [DisplayCategoryOrderBy!]

    """null을 명시적으로 주면 null로 해석되고, 값을 주지 않을 시 MAIN으로 해석됩니다."""
    section: SectionType = MAIN
    types: [DisplayCategoryType!]
  ): [DisplayCategory!]!

  """바이어 정보받기에서 관심(표준카테고리)를 사용자가 검색한다고 요청 받았을 때, 검색결과를 리턴합니다."""
  searchInterestedItemCategoryListing(
    """검색 query"""
    q: String
  ): SearchInterestedItemCategoryListing

  """OpenSearch를 이용한 검색 기능이 고도화된 상품 검색 쿼리"""
  searchProducts(
    after: String
    before: String

    """true일 경우, 유저의 찜한 상품을 제외하고 조회합니다."""
    excludeLikedProducts: Boolean
    first: Int
    last: Int

    """상품명, null일 시 모든 상품이 조회 대상입니다."""
    name: String

    """true일 경우, 노출되는 단품이 없는 일반상품을 제외하고 조회합니다."""
    onlyBuyable: Boolean
    orderBy: [SearchProductsOrderBy!]

    """상품 유형"""
    types: [ProductType!]
  ): ProductConnection!
  seasonDisplayCategory: DisplayCategory
  section(type: SectionType!): Section

  """바이어 정보받기에서 업종정보를 화면에 표시할 때 자료로 쓰는 목록입니다."""
  selfReportedBusinessSectorListing: [SelfReportedBusinessSectorListingItem!]

  """바이어 정보받기에서 연매출을 화면에 표시할 때 자료로 쓰는 목록입니다."""
  selfReportedSalesBinListing: [SelfReportedSalesBinListingItem!]

  """시/도 조회"""
  sellerProfileRegion2s(after: ID, before: ID, first: Int, last: Int): Region2Connection!

  """구/군 조회"""
  sellerProfileRegion3s(
    after: ID
    before: ID
    first: Int
    last: Int

    """시/도 ID"""
    region2Ids: [ID]
  ): Region3Connection!

  """판매 상품 조회"""
  sellerProfileSaleItems(
    after: ID
    before: ID

    """판매하는 상품 카테고리 ID"""
    categoryIds: [ID]

    """상호명"""
    companyName: String
    first: Int

    """택배 배송 가능 여부"""
    isCourierAvailable: Boolean

    """판매자 자체 물류 가능 여부"""
    isDirectDeliveryAvailable: Boolean

    """화물 배송 가능 여부"""
    isFreightAvailable: Boolean

    """창고출고 가능 여부"""
    isWarehouseReleaseAvailable: Boolean

    """창고이체 가능 여부"""
    isWarehouseTransferAvailable: Boolean
    last: Int

    """육류 브랜드 ID"""
    meatBrandIds: [ID]
    orderBy: [SellerProfileSaleItemOrderBy!]

    """원산지 (시/도) ID"""
    originRegion2Ids: [ID]

    """원산지 (구/군) ID"""
    originRegion3Ids: [ID]
  ): SellerProfileSaleItemConnection!

  """판매자 프로필"""
  sellerProfiles(after: ID, before: ID, first: Int, last: Int, orderBy: [SellerProfileOrderBy!]): SellerProfileConnection!
  specialDisplayCategories(
    """true일 경우, 노출 여부가 활성화된 전시 카테고리만 조회된다"""
    onlyDisplayable: Boolean
  ): [DisplayCategory!]!
  subBanners: [Banner!]!

  """서비스 점검 스케쥴을 조회합니다."""
  systemMaintenance: SystemMaintenance
  tempWosOrder(
    """임시주문서 아이디"""
    tempWosOrderId: Int!
  ): TempWosOrder
  termAgreementTypes(after: ID, before: ID, first: Int, last: Int): TermAgreementTypeConnection!
  terms(after: ID, before: ID, first: Int, last: Int): TermConnection!

  """[거래매칭] 배송정책 조회"""
  tradematchDeliveryPolicy: TradematchDeliveryPolicy

  """[거래매칭] 수요 목록"""
  tradematchDemands(after: ID, before: ID, first: Int, last: Int, orderBy: TradematchDemandOrderBy, orderDirection: OrderDirection, productIds: [ID!], productTypes: [TradematchProductType!], statuses: [TradematchDemandStatus!]): TradematchDemandConnection!

  """농가 사업 지원 목록 조회"""
  userBusinessSupportInfo(after: ID, before: ID, facilities: [UserBusinessSupportFacility!], first: Int, ids: [ID!], last: Int, orderBy: UserBusinessSupportInfoOrderBy, orderDirection: OrderDirection): UserBusinessSupportInfoConnection!
  users(
    """검색할 유의 이름 like %{name}%"""
    name: String
    roles: [UserRole!]
  ): UserConnection!

  """요청한 유저 자신의 정보를 조회합니다"""
  viewer: User

  """도매법인 시장 목록 조회"""
  wholesalerMarkets(after: ID, before: ID, first: Int, last: Int): WholesalerMarketConnection!

  """도매법인 목록 조회"""
  wholesalers(after: ID, before: ID, first: Int, last: Int, marketIds: [String!], orderBy: WholesalerOrderBy, orderDirection: OrderDirection): WholesalerConnection!
  wosOrder(
    """주문서번호"""
    orderNo: String!

    """주문상품번호"""
    orderProductNo: String

    """EventLogType 필터"""
    wosOrderEventLogTypes: [WosOrderEventLogType]
  ): WosOrder
}

"""
일반+견적상품: Product interface에서 producer, price, isCourierAvailable, isVat, productOptions, notationInformationType가 추가됩니다.
"""
type QuotableProduct implements Node & Product {
  """표준 카테고리 (작물 코드)"""
  category: Category!

  """상품 설명 html 문자열"""
  description: String!

  """전시 카테고리"""
  displayCategories: [DisplayCategory!]!

  """전시 상품명"""
  displayName: String!
  id: ID!

  """대표이미지"""
  image: Image!

  """배송 가능 여부"""
  isCourierAvailable: Boolean!

  """과면세 여부"""
  isVat: Boolean!

  """담당 md"""
  md: User

  """생산자 작명 상품명"""
  name: String!

  """필수 표기정보를 구분하기 위한 플래그, 농축수산물(WHOLE_FOOD) | 가공식품(PROCESSED_FOOD)"""
  notationInformationType: ProductNotationInformationType!

  """공지사항"""
  notice: String

  """ISO 8601 공지사항 만료 시점"""
  noticeEndAt: DateTime

  """ISO 8601 공지사항 시작 시점"""
  noticeStartAt: DateTime

  """상품번호"""
  number: Int!

  """원산지"""
  origin: String

  """판매가격"""
  price: Int

  """생산자"""
  producer: User!

  """연관 단품 리스트입니다. connection 타입을 따르지만 파라미터에 따라 스펙이 적용되어있지 않습니다."""
  productOptions(
    """N/A"""
    after: ID

    """N/A"""
    first: Int
  ): ProductOptionConnection!

  """판매 자료 문서 url"""
  salesDocument: String

  """판매 유형입니다.  축산 RFQ와 수산매칭이 있습니다."""
  salesType: ProductSalesType!

  """운영상태"""
  status: ProductStatus!

  """현재 로그인한 유저의 상품 찜 여부"""
  viewerHasLiked: Boolean
}

type QuotableProductConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [QuotableProductEdge!]!
  pageInfo: PageInfo!
}

type QuotableProductEdge implements Edge {
  cursor: String!
  node: QuotableProduct!
}

"""견적상품: Product interface에서 producer, grade가 추가됩니다."""
type QuotedProduct implements Node & Product {
  """표준 카테고리 (작물 코드)"""
  category: Category!

  """상품 설명 html 문자열"""
  description: String!

  """전시 카테고리"""
  displayCategories: [DisplayCategory!]!

  """전시 상품명"""
  displayName: String!

  """상품 등급, 견적상품에만 필수로 존재합니다."""
  grade: String!
  id: ID!

  """대표이미지"""
  image: Image!

  """담당 md"""
  md: User

  """생산자 작명 상품명"""
  name: String!

  """공지사항"""
  notice: String

  """ISO 8601 공지사항 만료 시점"""
  noticeEndAt: DateTime

  """ISO 8601 공지사항 시작 시점"""
  noticeStartAt: DateTime

  """상품번호"""
  number: Int!

  """원산지"""
  origin: String

  """생산자"""
  producer: User!

  """판매 자료 문서 url"""
  salesDocument: String

  """판매 유형입니다.  축산 RFQ와 수산매칭이 있습니다."""
  salesType: ProductSalesType!

  """운영상태"""
  status: ProductStatus!

  """현재 로그인한 유저의 상품 찜 여부"""
  viewerHasLiked: Boolean
}

type QuotedProductConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [QuotedProductEdge!]!
  pageInfo: PageInfo!
}

type QuotedProductEdge implements Edge {
  cursor: String!
  node: QuotedProduct!
}

"""율"""
scalar Rate

"""시/도"""
type Region2 implements Node {
  """약자"""
  abbr: String
  id: ID!

  """이름"""
  name: String
}

type Region2Connection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [Region2Edge!]!
  pageInfo: PageInfo!
}

type Region2Edge implements Edge {
  cursor: String!
  node: Region2!
}

"""구/군"""
type Region3 implements Node {
  """약자"""
  abbr: String
  id: ID!

  """이름"""
  name: String
  region2: Region2
}

type Region3Connection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [Region3Edge!]!
  pageInfo: PageInfo!
}

type Region3Edge implements Edge {
  cursor: String!
  node: Region3!
}

input ReplaceRfqLikedProductsInput {
  """교체할 상품 ID 리스트"""
  productIds: [ID!]!
}

union ReplaceRfqLikedProductsPayload = Error | ReplaceRfqLikedProductsResult

type ReplaceRfqLikedProductsResult {
  """viewer를 통해 mutation 후 변경된 likedProductCount를 연속으로 조회할 수 있습니다."""
  viewer: User!
}

"""대표 운송 정보"""
type RepresentativeFreight {
  """운송 가능 무게"""
  availableWeight: Int!

  """10km 요금"""
  km10: Int!

  """20km 요금"""
  km20: Int!

  """30km 요금"""
  km30: Int!

  """50km 요금"""
  km50: Int!

  """70km 요금"""
  km70: Int!

  """90km 요금"""
  km90: Int!

  """110km 요금"""
  km110: Int!

  """130km 요금"""
  km130: Int!

  """150km 요금"""
  km150: Int!

  """170km 요금"""
  km170: Int!

  """190km 요금"""
  km190: Int!

  """210km 요금"""
  km210: Int!

  """230km 요금"""
  km230: Int!

  """250km 요금"""
  km250: Int!

  """270km 요금"""
  km270: Int!

  """290km 요금"""
  km290: Int!

  """310km 요금"""
  km310: Int!

  """330km 요금"""
  km330: Int!

  """350km 요금"""
  km350: Int!

  """370km 요금"""
  km370: Int!

  """390km 요금"""
  km390: Int!

  """410km 요금"""
  km410: Int!

  """430km 요금"""
  km430: Int!

  """450km 요금"""
  km450: Int!

  """470km 요금"""
  km470: Int!

  """490km 요금"""
  km490: Int!

  """510km 요금"""
  km510: Int!

  """530km 요금"""
  km530: Int!

  """550km 요금"""
  km550: Int!

  """570km 요금"""
  km570: Int!

  """590km 요금"""
  km590: Int!
}

"""새로운 장바구니 아이템 추가 입력"""
input RequestCreateCartItem {
  """상품 옵션 디테일 아이디"""
  productOptionId: Int!

  """상품 수량"""
  quantity: Int!
}

"""결제승인요청에 필요한 입력값 집합"""
input RequestPaymentApprovalKCPInput {
  """결제창 인증결과 암호화 정보"""
  encData: String!

  """결제창 인증결과 암호화 정보"""
  encInfo: String!

  """실제 결제요청 금액"""
  ordrMony: Int!

  """결제 레코드 아이디"""
  paymentId: Int!

  """KCP 발급 사이트(상점)코드"""
  siteCd: String!

  """KCP 발급 사이트(상점)키"""
  siteKey: String!

  """발급받은 임시 주문서 아이디"""
  tempOrderId: Int

  """KCP에서 정의한 결제요청 타입"""
  tranCd: String!
}

union RequestPaymentApprovalKCPPayload = Error | RequestPaymentApprovalKCPResult

"""
결제 승인 요청 결과
승인 성공시 필드: res_cd, res_msg, res_en_msg, tno, amount
승인 실패시 필드: res_cd, res_msg
"""
type RequestPaymentApprovalKCPResult {
  """결제 금액(12자리 정수)"""
  amount: Int

  """결제 레코드 아이디"""
  paymentId: Int!

  """결과코드(정상 승인이면 0000)"""
  resCd: String!

  """영문 결과메시지"""
  resEnMsg: String

  """결과메시지"""
  resMsg: String!

  """NHN KCP 거래 고유번호(14자리 정수)"""
  tno: String
}

"""토스 페이먼츠 결제 승인 요청에 필요한 입력값 집합"""
input RequestPaymentApprovalTossPaymentsInput {
  """실제 결제요청 금액"""
  amount: Int!

  """결제 아이디"""
  orderId: String!

  """결제 레코드 아이디"""
  paymentId: Int!

  """토스 페이먼츠 결제 고유키"""
  paymentKey: String!

  """발급받은 임시 주문서 아이디"""
  tempOrderId: Int
}

union RequestPaymentApprovalTossPaymentsPayload = Error | RequestPaymentApprovalTossPaymentsResult

"""토스페이먼츠 결제 승인 요청 결과"""
type RequestPaymentApprovalTossPaymentsResult {
  """결제 금액(12자리 정수)"""
  amount: Int

  """결제 레코드 아이디"""
  paymentId: Int!

  """TOSS PAYMENTS 거래 고유 아이디"""
  paymentKey: String!

  """결과코드(정상 승인이면 DONE)"""
  status: String!
}

"""결제요청에 필요한 입력값 집합"""
input RequestPaymentInput {
  """결제금액"""
  amount: Int!

  """사용자 디바이스"""
  device: Device

  """결제수단"""
  paymentMethod: PaymentMethod!

  """결제용도 (결제하여 얻는 것)"""
  purpose: PaymentPurpose!
}

"""새로운 충전 레코드를 생성하고, KCP 결제창 생성용 고정값을 응답합니다."""
type RequestPaymentKCPResult {
  """회원 uid"""
  buyrName: String!

  """결제 화폐"""
  currency: String!

  """결제할 주문번호"""
  ordrIdxx: String!

  """결제ID"""
  paymentId: Int!

  """회원"""
  shopUser: User!

  """회원 아이디"""
  shopUserId: String! @deprecated(reason: "Use shopUser instead")

  """KCP site cd"""
  siteCd: String!

  """KCP site key"""
  siteKey: String!

  """커머스 회사 이름(신선마켓)"""
  siteName: String!
}

union RequestPaymentPayload = Error | RequestPaymentKCPResult | RequestPaymentTossPaymentsResult

"""새로운 충전 레코드를 생성하고, TossPayments 결제창 생성용 고정값을 응답합니다."""
type RequestPaymentTossPaymentsResult {
  """결제 금액(12자리 정수)"""
  amount: Int!

  """토스 페이먼츠 API 클라이언트 키"""
  clientKey: String!

  """유저이메일"""
  customerEmail: String!

  """유저이름"""
  customerName: String!

  """주문번호"""
  orderId: ID!

  """결제ID"""
  paymentId: Int!
}

"""후기"""
type Review implements Node {
  """수량 또는 중량의 단위"""
  amountUnit: AmountUnit!

  """유저의 업종"""
  businessSector: String!

  """표준 카테고리 (작물 코드)"""
  category: Category!

  """후기 내용"""
  content: String!
  id: ID!

  """상품 점수 0 ~ 5 (0.5 단위)"""
  productScore: Float!

  """유저의 프로파일 이미지"""
  profileImageUrl: String

  """구매 일시"""
  purchasedAt: DateTime!

  """배송 점수 0 ~ 5 (0.5 단위)"""
  shippingScore: Float!

  """총 구매 수량 또는 중량"""
  totalAmount: Float!
}

type ReviewConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [ReviewEdge!]!
  pageInfo: PageInfo!
}

type ReviewEdge implements Edge {
  cursor: String!
  node: Review!
}

"""평점"""
enum ReviewScore {
  """불량"""
  BAD

  """양호"""
  GOOD

  """매우 불량"""
  VERY_BAD

  """매우 양호"""
  VERY_GOOD
}

"""견적서 정보"""
type Rfq implements Node {
  """희망 배송지"""
  address: String

  """견적을 생성한 admin (수동 생성시에만 존재)"""
  admin: User

  """견적을 요청한 구매자"""
  buyer: User

  """구매자와의 연락을 담당하는 MD"""
  contactMd: User

  """생성일시"""
  createdAt: DateTime!
  id: ID!
  number: Int!

  """
  견적이 인입된 경로, 페이퍼폼 | 전화상담 | 카톡상담 | 영업활동 | 견적구매 | 팜모닝 판로 개척 | FINANCE(자금 중개 거래)
  """
  requestedFrom: RfqRequestedFrom!

  """견적서에 주문된 상품 목록. connection 타입을 따르지만 파라미터에 따라 스펙이 적용되어있지 않습니다."""
  rfqProducts(
    """N/A"""
    after: ID

    """N/A"""
    before: ID

    """조회할 갯수"""
    first: Int

    """N/A"""
    last: ID
  ): RfqProductConnection!

  """견적상품의 조달을 담당하는 MD"""
  sourcingMd1: User

  """구매자와의 연락을 담당하는 MD"""
  sourcingMd2: User

  """구매자와의 연락을 담당하는 MD"""
  sourcingMd3: User

  """수정일시"""
  updatedAt: DateTime!
}

type RfqConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [RfqEdge!]!
  pageInfo: PageInfo!
}

"""RFQ 가능 배송 방식"""
enum RfqDeliveryMethod {
  """전부 다 가능"""
  ANY

  """직접 배송"""
  DIRECT_DELIVERY

  """기타"""
  OTHER

  """창고 수령"""
  WAREHOUSE_PICKUP

  """창고 배송"""
  WAREHOUSE_TRANSFER
}

"""RFQ 배송지"""
type RfqDeliveryPlace implements Node {
  """주소"""
  address: String!

  """주소 상세"""
  addressDetail: String!

  """별칭"""
  alias: String!

  """생성일시"""
  createdAt: DateTime!

  """식별자"""
  id: ID!

  """가용여부"""
  isAvailable: Boolean!

  """수정일시"""
  updatedAt: DateTime!

  """사용자"""
  user: User!

  """우편번호"""
  zipCode: String!
}

type RfqDeliveryPlaceConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [RfqDeliveryPlaceEdge!]!
  pageInfo: PageInfo!
}

type RfqDeliveryPlaceEdge implements Edge {
  cursor: String!
  node: RfqDeliveryPlace!
}

type RfqEdge implements Edge {
  cursor: String!
  node: Rfq!
}

"""육류 포장 방식"""
enum RfqMeatPackageMethod {
  """모두"""
  ANY

  """세절"""
  CUT

  """그 외"""
  OTHER

  """원료육(박스육)"""
  RAW

  """소분"""
  SPLIT
}

"""육류 저장 방식"""
enum RfqMeatStorageMethod {
  """모두"""
  ANY

  """냉장"""
  CHILLED

  """동결"""
  FREEZE_DRIED

  """냉동"""
  FROZEN

  """그 외"""
  OTHER
}

"""RFQ 최저 견적가"""
type RfqMinQuotedPrice {
  """최저 견적단가"""
  pricePerKg: DecimalNumber
}

"""[RFQ] 다음 배송 가능일"""
type RfqNextAcceptableDeliveryDate {
  """날짜"""
  date: Date!
}

"""RFQ 주문"""
type RfqOrder implements Node {
  """구매자"""
  buyer: User!

  """생성 일시"""
  createdAt: DateTime!

  """배송 주소"""
  deliveryAddress: String!

  """배송 주소 상세"""
  deliveryAddressDetail: String!

  """배송비"""
  deliveryFee: Int!

  """배송 방식"""
  deliveryMethod: RfqDeliveryMethod!

  """배송 우편번호"""
  deliveryZipCode: String!

  """식별자"""
  id: ID!

  """가격"""
  price: BigInt!

  """견적"""
  quotation: RfqQuotation!

  """견적 요청"""
  request: RfqRequest!

  """견적 요청 상품"""
  requestItem: RfqRequestItem!

  """판매자"""
  seller: User!

  """상태"""
  status: RfqOrderStatus!

  """수정일시"""
  updatedAt: DateTime!
}

type RfqOrderConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [RfqOrderEdge!]!
  pageInfo: PageInfo!
}

"""[RFQ] 발주 생성 Input"""
input RfqOrderCreateInput {
  deliveryMethod: RfqDeliveryMethod!
  quotationId: ID!
}

union RfqOrderCreateResponse = Error | RfqOrderMutationPayload

type RfqOrderEdge implements Edge {
  cursor: String!
  node: RfqOrder!
}

"""[RFQ] 발주 Mutation 내용"""
type RfqOrderMutationPayload implements MutationPayload {
  result: RfqOrder
}

"""모름"""
enum RfqOrderStatus {
  UNKNOWN
}

"""견적서 하위의 견적 상품 정보"""
type RfqProduct implements Node {
  """마지막으로 생성/수정/삭제 한 어드민"""
  admin: User

  """수량; `amount` `unit`이 거래를 원하는 수량"""
  amount: Float!

  """단위"""
  amountUnit: RfqProductUnit!

  """견적상품이 속한 표준 카테고리"""
  category: Category!
  createdAt: DateTime!

  """배송비"""
  deliveryFee: Int

  """배송 방법"""
  deliveryMethod: RfqProductDeliveryMethod

  """상품에 대한 설명, 팜모닝 장터 연동 시 노출"""
  description: String

  """소싱 실패 횟수"""
  failCount: Int!
  id: ID!

  """크로스셀링을 통해 진행된 상품 여부"""
  isCrossSelling: Boolean!

  """삭제 가능한 단품 여부, 견적의 생성과 동시에 생성된 견적상품은 삭제 불가능"""
  isDeletable: Boolean!

  """축산 브랜드"""
  meatBrand: MeatBrand

  """축산 등급"""
  meatGrade: MeatGrade

  """메모"""
  memo: String

  """견적상품번호"""
  number: Int!

  """원산지"""
  origin: RfqProductOrigin

  """포장물 수량"""
  packageAmount: Int

  """기존에 바이어가 납품받았던 참고용 가격"""
  previousPrice: Int

  """단위당 가격 * 수량 = 가격"""
  price: Float!

  """가공 방법"""
  processingMethod: String

  """신선하이를 통해 주문된 매칭상품의 경우 해당하는 상품 정보"""
  product: Product

  """소싱 실패시 바이어에게 추천된 신선하이 일반상품 정보"""
  promotedProduct: Product

  """희망 배송일"""
  requestedDeliveredAt: DateTime
  rfq: Rfq!

  """판매자"""
  seller: User

  """셀러 공급가"""
  sellerPrice: Int

  """견적상품의 상태 컨택대기 | 소싱진행 | 소싱성공 | 소싱실패 | 매칭성공 | 매칭실패"""
  status: RfqProductStatus!

  """소싱 진행 상태별 상세 정보"""
  statusInfo: RfqProductStatusInfo

  """저장 방법"""
  storageMethod: StorageMethod

  """결제 주기 (어드민 참고용으로 사용)"""
  tradeCycle: TradeCycle

  """단위당 가격"""
  unitPrice: Int!
  updatedAt: DateTime!

  """용도"""
  usage: String
}

type RfqProductConnection {
  edges: [RfqProductEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""견적상품의 배송방법"""
enum RfqProductDeliveryMethod {
  """바이어 직접 수령, 바이어가 셀러에게 직접 가서 상품을 가져감"""
  BUYER_TAKE

  """택배배송"""
  COURIER

  """화물배송"""
  FREIGHT

  """자체물류, 판매자가 구매자에게 전달"""
  SELLER_DELIVERY
}

type RfqProductEdge {
  cursor: String!
  node: RfqProduct!
}

"""RFQ 상품의 원산지"""
enum RfqProductOrigin {
  """호주산"""
  AU

  """캐나다산"""
  CA

  """국내산"""
  KR

  """뉴질랜드산"""
  NZ

  """수입산"""
  OTHER

  """미국산"""
  US
}

"""견적 신청 리스트 정렬 방식"""
enum RfqProductSort {
  """낮은 중량/수량/용량 순"""
  AMOUNT_ASC

  """높은 중량/수량/용량 순"""
  AMOUNT_DESC

  """견적 신청 오래된 순"""
  CREATED_ASC

  """견적 신청 최신 순"""
  CREATED_DESC

  """낮은 가격 순"""
  PRICE_ASC

  """높은 가격 순"""
  PRICE_DESC
}

"""견적 상품의 견적 프로세스 진행 상태"""
enum RfqProductStatus {
  """5. 매칭 성공"""
  COMPLETE

  """5. 매칭 실패"""
  FAIL

  """4. 매칭 진행"""
  MATCHING

  """3. 소싱 성공"""
  SOURCED

  """2. 소싱 진행"""
  SOURCING

  """3. 소싱 실패"""
  SOURCING_FAIL

  """1. 컨택 대기"""
  WAIT
}

"""견적 프로세스 진행 상태별 상세 정보"""
enum RfqProductStatusInfo {
  """[매칭 실패] 바이어 견적 거절: 바이어가 셀러의 견적서를 거절하여 매칭이 실패한 케이스"""
  FAIL_BUYER_DECLINED

  """[매칭 실패] 바이어 연락 끊김: 소싱 성공 이후, 바이어 연락 끊긴 상태"""
  FAIL_BUYER_UNAVAILABLE

  """[매칭 실패] 배송비 문제: 소싱 성공 이후, 배송비 또는 배송방식의 문제로 인해 실패될 경우"""
  FAIL_DELIVERY

  """[매칭 실패] 매칭 지연 이슈: 매칭 리드타임이 오래되어 취소된 경우"""
  FAIL_EXPIRED

  """[소싱 실패] 바이어 희망가 거절: 바이어가 제시한 희망가가 너무 터무니 없어 실패하는 경우"""
  SOURCING_FAIL_ADMIN_DECLINED_PRICE

  """[소싱 실패] 바이어 소량 주문: 바이어 소량주문으로 인한 실패상태"""
  SOURCING_FAIL_BUYER_ORDER

  """[소싱 실패] 바이어 연락 두절: 바이어가 매칭 도중 연락이 더 이상 되지 않는 상태"""
  SOURCING_FAIL_BUYER_UNAVAILABLE

  """[소싱 실패] 바이어 거래의사 없음: 컨택시 바이어 구매 의사가 없는 상태"""
  SOURCING_FAIL_BUYER_WITHDRAW

  """[소싱 실패] 배송 이슈: 배송비 또는 배송방식의 문제로 인해 실패될 경우"""
  SOURCING_FAIL_DELIVERY

  """[소싱 실패] 기타 종료"""
  SOURCING_FAIL_ETC

  """[소싱 실패] 셀러 소싱 실패: 셀러 소싱이 실패할 경우"""
  SOURCING_FAIL_NO_SELLERS

  """[소싱 실패] 지방권: 현재 정책상 거래 가능 지역이 아닌 경우"""
  SOURCING_FAIL_REGION

  """[소싱 실패] 셀러 중량 거절: 셀러가 바이어의 구매 희망 중량/용량/수량을 거절 할 경우"""
  SOURCING_FAIL_SELLER_DECLINED_AMOUNT

  """[소싱 실패] 셀러 단가 거절: 셀러가 바이어가 제시한 희망가에 맞출 수 없는 경우"""
  SOURCING_FAIL_SELLER_DECLINED_PRICE

  """[소싱 실패] 상품 판매 종료: 셀러가 더 이상 상품을 판매하지 않을 경우"""
  SOURCING_FAIL_SELLER_RETIRE

  """[소싱 진행] 미트 카트 를 통해 소싱이 진행되는 경우"""
  SOURCING_MEAT_CART

  """[소싱 진행] 미트 터치를 통해 소싱이 진행되는 경우"""
  SOURCING_MEAT_TOUCH
}

"""견적상품의 거래단위"""
enum RfqProductUnit {
  """each"""
  EA

  """gram"""
  G

  """kilogram"""
  KG

  """liter"""
  L

  """milliliter"""
  ML

  """tonne"""
  T
}

interface RfqQuotation {
  """구매자"""
  buyer: User!

  """생성 일시"""
  createdAt: DateTime!

  """배송비"""
  deliveryFee: Int!

  """노드 ID"""
  id: ID!

  """[RFQ] 주문"""
  order: RfqOrder

  """가격"""
  price: BigInt!

  """중량 단위(1kg)당 가격"""
  pricePerKg: DecimalNumber!

  """[RFQ] 견적 요청"""
  request: RfqRequest!

  """[RFQ] 견적 요청 상품"""
  requestItem: RfqRequestItem!

  """판매자"""
  seller: User!

  """[RFQ] 견적 상태"""
  status: RfqQuotationStatus!

  """수정 일시"""
  updatedAt: DateTime!

  """중량(kg)"""
  weightKg: DecimalNumber!
}

"""RfqQuotation Connection"""
type RfqQuotationConnection {
  count: Int!
  edges: [RfqQuotationEdge!]!
  pageInfo: PageInfo!
}

"""RfqQuotation Edge"""
type RfqQuotationEdge {
  cursor: String!
  node: RfqQuotation!
}

"""RFQ 견적 - 고기"""
type RfqQuotationMeat implements Node & RfqQuotation {
  """브랜드"""
  brand: String!

  """구매자"""
  buyer: User!

  """생성 일시"""
  createdAt: DateTime!

  """배송비"""
  deliveryFee: Int!

  """등급"""
  grade: MeatGrade!

  """식별자"""
  id: ID!

  """[RFQ] 주문"""
  order: RfqOrder

  """가격"""
  price: BigInt!

  """중량 단위(1kg)당 가격"""
  pricePerKg: DecimalNumber!

  """견적 요청"""
  request: RfqRequest!

  """견적 요청 상품"""
  requestItem: RfqRequestItemMeat!

  """판매자"""
  seller: User!

  """견적 상태"""
  status: RfqQuotationStatus!

  """수정 일시"""
  updatedAt: DateTime!

  """중량(kg)"""
  weightKg: DecimalNumber!
}

type RfqQuotationMeatConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [RfqQuotationMeatEdge!]!
  pageInfo: PageInfo!
}

union RfqQuotationMeatCreateResponse = Error | RfqQuotationMeatMutationPayload

union RfqQuotationMeatDeleteResponse = DeleteSuccess | Error

type RfqQuotationMeatEdge implements Edge {
  cursor: String!
  node: RfqQuotationMeat!
}

"""RFQ 견적 입력"""
input RfqQuotationMeatInput {
  brand: String!
  deliveryFee: Int
  meatGradeId: ID!
  pricePerKg: DecimalNumber!
  rfqRequestItemId: ID!
}

"""RFQ 견적<육류> 뮤테이션 결과"""
type RfqQuotationMeatMutationPayload implements MutationPayload {
  result: RfqQuotationMeat
}

union RfqQuotationMeatUpdateResponse = Error | RfqQuotationMeatMutationPayload

"""견적 상태"""
enum RfqQuotationStatus {
  DROPPED_BY_SYSTEM
  DROPPED_BY_USER
  ORDERED
  SELECTED_BY_SYSTEM
  WAITING_FOR_SELECTION
}

"""RFQ 추천가"""
type RfqRecommendedPrice {
  """추천단가"""
  pricePerKg: DecimalNumber!
}

"""RFQ 견적 요청"""
type RfqRequest implements Node {
  """구매자"""
  buyer: User!

  """취소일시"""
  canceledAt: DateTime

  """마감일시"""
  closedAt: DateTime!

  """생성일시"""
  createdAt: DateTime!

  """배송주소"""
  deliveryAddress: String!

  """정기공급주기"""
  deliveryCycle: String!

  """배송방식"""
  deliveryMethod: RfqDeliveryMethod!

  """희망최초납품일"""
  desiredDeliveryDate: DateTime!

  """식별자"""
  id: ID!

  """견적 요청 상품 목록"""
  items(after: ID, before: ID, first: Int, last: Int): RfqRequestItemConnection!

  """주문 목록"""
  orders(after: ID, before: ID, first: Int, last: Int): RfqOrderConnection!

  """견적 목록"""
  quotations(after: ID, before: ID, first: Int, last: Int): RfqQuotationConnection!

  """견적 요청의 남은 유효 시간"""
  remainSecondsUntilQuotationExpired: Int!

  """신청일시"""
  requestedAt: DateTime!

  """선정된 견적 목록"""
  selectedQuotations(after: ID, before: ID, first: Int, last: Int): RfqSelectedQuotationConnection!

  """상태"""
  status: RfqRequestStatus!

  """수정일시"""
  updatedAt: DateTime!
}

type RfqRequestConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [RfqRequestEdge!]!
  pageInfo: PageInfo!
}

"""RFQ 요청 생성 Input"""
input RfqRequestCreateInput {
  status: RfqRequestStatus!
}

union RfqRequestCreateResponse = Error | RfqRequestMutationPayload

union RfqRequestDeleteResponse = DeleteSuccess | Error

type RfqRequestEdge implements Edge {
  cursor: String!
  node: RfqRequest!
}

interface RfqRequestItem {
  """생성 일시"""
  createdAt: DateTime!

  """노드 ID"""
  id: ID!

  """기타 요청사항"""
  otherRequirements: String!

  """RFQ 견적 요청"""
  request: RfqRequest!

  """작성 상태"""
  status: RfqRequestItemStatus!

  """수정 일시"""
  updatedAt: DateTime!

  """중량 (kg 단위)"""
  weightKg: DecimalNumber
}

"""RfqRequestItem 인터페이스의 Connection"""
type RfqRequestItemConnection {
  count: Int!
  edges: [RfqRequestItemEdge!]!
  pageInfo: PageInfo!
}

"""RfqRequestItem 인터페이스의 Edge"""
type RfqRequestItemEdge {
  cursor: String!
  node: RfqRequestItem!
}

"""[RFQ] 견적 요청 상품 <고기>"""
type RfqRequestItemMeat implements Node & RfqRequestItem {
  """브랜드 목록"""
  brands(after: ID, before: ID, first: Int, last: Int): MeatBrandConnection!

  """생성일시"""
  createdAt: DateTime!

  """등급"""
  grade: MeatGrade

  """식별자"""
  id: ID!

  """기타 요청사항"""
  otherRequirements: String!

  """포장 방식"""
  packageMethod: RfqMeatPackageMethod

  """부위"""
  part: MeatPart

  """선호 브랜드"""
  preferredBrand: String!

  """기존 거래 단가"""
  prevTradePricePerKg: Int

  """기존 거래 업체명"""
  prevTradeSellerName: String!

  """RFQ 견적 목록 커넥션"""
  quotations(after: ID, before: ID, first: Int, last: Int): RfqQuotationMeatConnection!

  """RFQ 견적 요청"""
  request: RfqRequest!

  """선정된 견적 목록"""
  selectedQuotations(after: ID, before: ID, first: Int, last: Int): RfqSelectedQuotationMeatConnection!

  """축종"""
  species: MeatSpecies

  """작성 상태"""
  status: RfqRequestItemStatus!

  """보관 방식"""
  storageMethod: RfqMeatStorageMethod

  """수정일시"""
  updatedAt: DateTime!

  """용도들"""
  usages(after: ID, before: ID, first: Int, last: Int): MeatUsageConnection!

  """중량 (kg 단위), 주문량"""
  weightKg: DecimalNumber
}

type RfqRequestItemMeatConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [RfqRequestItemMeatEdge!]!
  pageInfo: PageInfo!
}

"""RFQ 요청 아이템 생성 Input"""
input RfqRequestItemMeatCreateInput {
  meatBrandIds: [ID!]!
  meatGradeId: ID
  meatPartId: ID
  meatSpeciesId: ID
  meatUsageIds: [ID!]!
  otherRequirements: String
  packageMethod: String
  prevTradePricePerKg: String
  prevTradeSellerName: String
  rfqRequestId: ID!

  """작성 상태"""
  status: RfqRequestItemStatus!
  storageMethod: String
  weightKg: DecimalNumber
}

union RfqRequestItemMeatCreateResponse = Error | RfqRequestItemMeatMutationPayload

union RfqRequestItemMeatDeleteResponse = DeleteSuccess | Error

type RfqRequestItemMeatEdge implements Edge {
  cursor: String!
  node: RfqRequestItemMeat!
}

"""RFQ 축산 아이템 Mutation 내용"""
type RfqRequestItemMeatMutationPayload implements MutationPayload {
  result: RfqRequestItemMeat
}

"""견적 요청 상품 <고기> 정렬 기준"""
enum RfqRequestItemMeatOrderBy {
  """ID"""
  ID

  """육류 축종 우선순위"""
  MEAT_SPECIES_PRIORITY
}

"""RFQ 요청 아이템 변경 Input"""
input RfqRequestItemMeatUpdateInput {
  meatBrandIds: [ID!]!
  meatGradeId: ID
  meatPartId: ID
  meatSpeciesId: ID
  meatUsageIds: [ID!]!
  otherRequirements: String
  packageMethod: String
  prevTradePricePerKg: String
  prevTradeSellerName: String

  """작성 상태"""
  status: RfqRequestItemStatus!
  storageMethod: String
  weightKg: DecimalNumber
}

union RfqRequestItemMeatUpdateResponse = Error | RfqRequestItemMeatMutationPayload

"""견적요청 항목 상태"""
enum RfqRequestItemStatus {
  """견적요청 작성중"""
  DRAFT

  """견적요청 발송 후, 매치 실패"""
  MATCH_FAILED

  """견적 수신 후, 발주 완료"""
  ORDERED

  """견적 수신 후, 발주 기한 초과"""
  ORDER_TIMEOUT

  """견적요청 발송 준비 완료"""
  READY_TO_REQUEST

  """견적요청 발송 후, 취소"""
  REQUEST_CANCELED

  """검토 필요"""
  REVIEW_REQUIRED

  """견적 수신 후, 발주 대기중"""
  WAITING_FOR_ORDER

  """견적요청 발송 후, 견적 대기중"""
  WAITING_FOR_QUOTATION
}

"""RFQ 요청 Mutation 내용"""
type RfqRequestMutationPayload implements MutationPayload {
  result: RfqRequest
}

"""견적요청 상태"""
enum RfqRequestStatus {
  """견적요청 작성중"""
  DRAFT

  """견적요청 발송 준비 완료"""
  READY_TO_REQUEST

  """견적요청 발송 후, 취소"""
  REQUEST_CANCELED

  """견적요청 처리 완료"""
  REQUEST_PROCESSED

  """검토 필요"""
  REVIEW_REQUIRED

  """견적요청 발송 후, 견적 대기중"""
  WAITING_FOR_QUOTATION
}

"""RFQ 요청 서브 타입"""
enum RfqRequestSubtype {
  """축산"""
  MEAT
}

"""RFQ 요청 변경 Input"""
input RfqRequestUpdateInput {
  deliveryAddress: String
  deliveryCycle: String
  deliveryMethod: RfqDeliveryMethod
  desiredDeliveryDate: DateTime
  status: RfqRequestStatus!
}

union RfqRequestUpdateResponse = Error | RfqRequestMutationPayload

"""견적 신청서 유입경로"""
enum RfqRequestedFrom {
  """팜모닝 판로 개척"""
  FARMMORNING

  """신선하이가 중간에서 자금을 융통해주는 거래, 판매자에게 선 지불 후 구매자에게 나중에 받음"""
  FINANCE

  """카톡 문의"""
  KAKAOTALK

  """페이퍼 폼"""
  PAPERFORM

  """농축수산 rfq를 통한 유입"""
  RFQ

  """영업 활동"""
  SALES

  """전화 문의"""
  TELEPHONE
}

"""RFQ 선정된 견적"""
interface RfqSelectedQuotation {
  """구매자"""
  buyer: User!

  """배송비"""
  deliveryFee: Int!

  """노드 ID"""
  id: ID!

  """주문"""
  order: RfqOrder

  """가격"""
  price: BigInt!

  """단위 중량(1kg)당 가격"""
  pricePerKg: DecimalNumber!

  """견적 요청"""
  request: RfqRequest!

  """견적 요청 상품"""
  requestItem: RfqRequestItem!

  """중량(kg)"""
  weightKg: DecimalNumber!
}

"""RFQ 선정된 견적의 릴레이 커넥션"""
type RfqSelectedQuotationConnection {
  count: Int!
  edges: [RfqSelectedQuotationEdge!]!
  pageInfo: PageInfo!
}

"""RFQ 선정된 견적의 릴레이 엣지"""
type RfqSelectedQuotationEdge {
  cursor: String!
  node: RfqSelectedQuotation!
}

"""RFQ 선정된 견적 <육류>"""
type RfqSelectedQuotationMeat implements Node & RfqSelectedQuotation {
  """브랜드"""
  brand: String!

  """구매자"""
  buyer: User!

  """배송비"""
  deliveryFee: Int!

  """등급"""
  grade: MeatGrade!

  """노드 ID"""
  id: ID!

  """주문"""
  order: RfqOrder

  """가격"""
  price: BigInt!

  """중량 단위(1kg)당 가격"""
  pricePerKg: DecimalNumber!

  """견적 요청"""
  request: RfqRequest!

  """견적 요청 상품"""
  requestItem: RfqRequestItemMeat!

  """중량(kg)"""
  weightKg: DecimalNumber!
}

type RfqSelectedQuotationMeatConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [RfqSelectedQuotationMeatEdge!]!
  pageInfo: PageInfo!
}

type RfqSelectedQuotationMeatEdge implements Edge {
  cursor: String!
  node: RfqSelectedQuotationMeat!
}

"""RFQ 판매자"""
type RfqSeller implements Node {
  """연간 이익"""
  annualRevenue: Int!

  """업체명"""
  companyName: String!

  """생성일시"""
  createdAt: DateTime!

  """배송 방식들"""
  deliveryMethods: [String!]!

  """식별자"""
  id: ID!

  """가용여부"""
  isAvailable: Boolean!

  """배송 가능 여부"""
  isDeliverable: Boolean!

  """주문 목록"""
  orders(after: ID, before: ID, first: Int, last: Int): RfqOrderConnection!

  """견적 목록"""
  quotations(after: ID, before: ID, first: Int, last: Int): RfqQuotationConnection!

  """수정일시"""
  updatedAt: DateTime!

  """사용자 ID"""
  user: User!
}

type RfqSellerConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [RfqSellerEdge!]!
  pageInfo: PageInfo!
}

type RfqSellerEdge implements Edge {
  cursor: String!
  node: RfqSeller!
}

"""RFQ 판매자 상품"""
type RfqSellerItem implements Node {
  """식별자"""
  id: ID!

  """견적요청 수신 여부"""
  isSubscribed: Boolean!

  """육류 원산지"""
  madeIn: CountryCode!

  """육류 축종"""
  meatSpecies: MeatSpecies!

  """RFQ 판매자"""
  rfqSeller: RfqSeller!
}

type RfqSellerItemConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [RfqSellerItemEdge!]!
  pageInfo: PageInfo!
}

type RfqSellerItemEdge implements Edge {
  cursor: String!
  node: RfqSellerItem!
}

"""입금 스케쥴 상태"""
enum RfqWosDepositScheduleStatus {
  """스케쥴 취소"""
  CANCEL

  """입금 완료"""
  DEPOSIT_COMPLETE

  """입금 대기"""
  PENDING
}

"""입금 타입"""
enum RfqWosDepositType {
  """팩토링"""
  FACTORING

  """유저별 고정가상계좌"""
  USER
}

"""RfqWosOrder 배송타입"""
enum RfqWosOrderDeliveryStatus {
  """배송전"""
  BEFORE_DELIVERY

  """배송완료"""
  COMPLETE
}

"""RFQ WOS 입금 스케쥴"""
type RfqWosOrderDepositSchedule implements Node {
  """바이어"""
  buyer: User

  """생성된 시간"""
  createdAt: DateTime!

  """입금 예정일"""
  depositDueDate: DateTime

  """입금 타입"""
  depositType: RfqWosDepositType

  """입금 스케쥴 상세 목록"""
  details: [RfqWosOrderDepositScheduleDetail]!

  """팩토링"""
  factoring: Factoring

  """RFQ WOS 입금 스케쥴 아이디"""
  id: ID!

  """입금 스케쥴 상태"""
  status: RfqWosDepositScheduleStatus!

  """수정된 시간"""
  updatedAt: DateTime!
}

type RfqWosOrderDepositScheduleConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [RfqWosOrderDepositScheduleEdge!]!
  pageInfo: PageInfo!
}

"""RFQ WOS 입금 스케쥴 상세"""
type RfqWosOrderDepositScheduleDetail {
  """입금예정 금액"""
  amount: DecimalNumber!

  """생성된 시간"""
  createdAt: DateTime!

  """RFQ WOS 입금 스케쥴 상세 아이디"""
  id: ID!

  """견적주문상품"""
  rfqWosOrderProduct: RfqWosOrderProduct!

  """수정된 시간"""
  updatedAt: DateTime!
}

union RfqWosOrderDepositScheduleDetailPayload = Error | RfqWosOrderDepositScheduleDetail

type RfqWosOrderDepositScheduleEdge implements Edge {
  cursor: String!
  node: RfqWosOrderDepositSchedule!
}

union RfqWosOrderDepositSchedulePayload = Error | RfqWosOrderDepositSchedule

"""견적주문상품"""
type RfqWosOrderProduct implements Node {
  """주소"""
  address: String

  """중량/수/용량"""
  amount: DecimalNumber!

  """단위"""
  amountUnit: String!

  """바이어"""
  buyer: User

  """견적상품이 속한 표준 카테고리"""
  category: Category!

  """생성시간"""
  createdAt: DateTime

  """배송비"""
  deliveryFee: Int

  """배송 방법"""
  deliveryMethod: RfqProductDeliveryMethod

  """배송상태"""
  deliveryStatus: RfqWosOrderDeliveryStatus
  id: ID!

  """메모"""
  memo: String

  """원산지"""
  origin: String

  """단위당 희망가"""
  packageAmount: Int

  """포장작업비"""
  packageFee: Int

  """결제완료금액 혹은 누적지불금액"""
  paidAmountAcc: DecimalNumber

  """가격 = (unitPrice X amount) - deliveryFee"""
  price: DecimalNumber!

  """가공방식"""
  processingMethod: String

  """잔여금액"""
  remainingBalance: DecimalNumber

  """배송희망일"""
  requestedDeliveredAt: DateTime
  rfq: Rfq!
  rfqProduct: RfqProduct!

  """견적주문상품번호"""
  rfqWosOrderProductNo: Int!

  """판매자"""
  seller: User

  """셀러 공급가"""
  sellerPrice: Int

  """상태"""
  status: RfqWosOrderProductStatus!

  """보관방식"""
  storageMethod: String

  """단위당 희망가"""
  unitPrice: Int!

  """사용용도"""
  usage: String
}

type RfqWosOrderProductConnection {
  count: Int!
  edges: [RfqWosOrderProductEdge!]!
}

type RfqWosOrderProductEdge implements Edge {
  cursor: String!
  node: RfqWosOrderProduct!
}

union RfqWosOrderProductResult = Error | RfqWosOrderProduct

"""RfqWosOrder 상태"""
enum RfqWosOrderProductStatus {
  """수량확정됨"""
  AMOUNT_CONFIRMED

  """생성됨"""
  CREATED
}

type SearchInterestedItemCategoryListing {
  itemCategories: [ItemCategory!]
}

input SearchProductsOrderBy {
  direction: OrderByDirection!
  field: SearchProductsOrderField!
}

enum SearchProductsOrderField {
  """인기순 정렬, DESC만 지원합니다."""
  POPULARITY
  PRICE
  PRICE_PER_KG

  """OpenSearch 검색 결과의 _score 값"""
  RELEVANCE_SCORE

  """품절 상품을 맨 뒤로 보냅니다."""
  STATUS_PRIORITY
  UPDATED_AT
}

type Section {
  displayCategories(
    onlyDisplayable: Boolean
    onlyHasBuyableProducts: Boolean
    orderBy: [SectionDisplayCategoryOrderBy!]

    """카테고리의 부모 ID"""
    parentId: ID
    types: [DisplayCategoryType!]
  ): [DisplayCategory!]!

  """이 전시 카테고리는 어드민이 노출 순서를 직접 지정해 둘 수 있음. 사용 예) 홈 화면 - 전체 카테고리, 기획전 카테고리"""
  featuredDisplayCategories(
    onlyDisplayable: Boolean
    onlyHasBuyableProducts: Boolean
    orderBy: [SectionFeaturedDisplayCategoryOrderBy!]

    """전시 카테고리 타입"""
    type: DisplayCategoryType!
  ): [DisplayCategory!]!
  name: String!
  type: SectionType!
}

"""섹션에 대한 전시카테고리 정렬 옵션"""
input SectionDisplayCategoryOrderBy {
  buyableProductsCount: OrderDirection
  id: OrderDirection
}

"""섹션에 어드민이 노출 순서를 직접 지정할 수 있는 전시카테고리 정렬 옵션"""
input SectionFeaturedDisplayCategoryOrderBy {
  displayOrder: OrderDirection
}

enum SectionType {
  DELIVERY
  MAIN
  MATCHING
}

enum SelfReportedBusinessSector {
  """정육점"""
  BUCHER_SHOP

  """카페"""
  CAFE

  """위탁 쇼핑몰"""
  CONSIGNMENT_SALES

  """기타"""
  ETC

  """식품 제조"""
  FOOD_PROCESSING

  """프랜차이즈 본사"""
  FRANCHISE

  """청과매장"""
  FRUIT_STORE

  """마트"""
  MART

  """전처리 공장"""
  PREPROCESSING_FACTORY

  """사입 쇼핑몰"""
  PURCHASE_AND_SALES

  """식당"""
  RESTAURANT

  """급식 유통"""
  SUBSISTENCES

  """슈퍼마켓"""
  SUPERMARKET

  """도매유통사"""
  WHOLESALE
}

type SelfReportedBusinessSectorListingItem {
  id: ID!
  label: String!
  value: SelfReportedBusinessSector!
}

"""
바이어 정보 받기의 일환으로, 연매출을 사용자에게 설문해서 받습니다.
                 입력항목을 Bin 으로 정해두었습니다. R 에서 구간을 Bin 이라고 지칭할 때가
                 많아서 단어 Bin 를 썼습니다.
"""
enum SelfReportedSalesBin {
  """창업예정"""
  BIN_0_NO_SALES_YET
  BIN_0_TO_50M
  BIN_1B_TO_5B
  BIN_5B_TO_10B
  BIN_10B_TO_INF
  BIN_50M_TO_100M
  BIN_100M_TO_500M
  BIN_500M_TO_1B
}

type SelfReportedSalesBinListingItem {
  id: ID!
  label: String!
  value: SelfReportedSalesBin!
}

"""판매자 프로필 정보"""
type SellerProfile implements Node {
  """주소"""
  address: String

  """사업자 등록번호"""
  businessRegistrationNumber: String

  """등록 일시"""
  createdAt: DateTime!

  """이메일"""
  email: String
  id: ID!

  """담당자 이름"""
  managerName: String

  """담당자 휴대폰번호"""
  managerPhone: String

  """이름"""
  name: String

  """휴대폰번호"""
  phone: String

  """지역2"""
  region2: Region2

  """지역3"""
  region3: Region3

  """대표자 이름"""
  representativeName: String

  """취급품목들"""
  saleItems: SellerProfileSaleItemConnection

  """
  판매자 타입 - (farmer:농부, farming-association:영농조합, livestock-direct-import:직수입사, livestock-korean-beef:한우중도매인, livestock-others:기타, livestock-processed:가공제조업, livestock-wholesaler:도소매인, others:기타, seafood-fishermen:어민, seafood-others:기타, seafood-processed:가공제조업, seafood-vendor:벤더사, seafood-wholesaler:도소매인, vendor:벤더사, wholesaler:중도메인)
  """
  sellerType: String

  """원천 데이터에서 사용하던 uid"""
  uid: String

  """수정 일시"""
  updatedAt: DateTime!

  """사용자 그룹 (SINSHUNHI, FARMMORNING, GREENLABS, OFFLINE)"""
  userGroup: String
}

type SellerProfileConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [SellerProfileEdge!]!
  pageInfo: PageInfo!
}

"""배송방법"""
enum SellerProfileDeliveryMethod {
  """택배"""
  COURIER

  """직접배송"""
  DIRECT_DELIVERY

  """화물"""
  FREIGHT

  """기타"""
  OTHER

  """창고출고"""
  WAREHOUSE_RELEASE

  """창고이체"""
  WAREHOUSE_TRANSFER
}

type SellerProfileEdge implements Edge {
  cursor: String!
  node: SellerProfile!
}

"""수확주기"""
enum SellerProfileHarvestCycle {
  """매일"""
  DAILY

  """월1~2회"""
  MONTHLY

  """주1~2회"""
  ONCE_A_WEEK

  """기타"""
  OTHER

  """주3~5회"""
  THREE_TIMES_A_WEEK
}

"""판매자 프로필 정렬 기준"""
input SellerProfileOrderBy {
  direction: OrderByDirection!
  field: SellerProfileOrderField!
}

"""판매자 프로필 정렬 기준"""
enum SellerProfileOrderField {
  ID
}

"""판매 상품 정보"""
type SellerProfileSaleItem implements Node {
  """카테고리"""
  category: Category

  """인증정보 목록"""
  certifications: [String]

  """등록 일시"""
  createdAt: DateTime!

  """일일출하량"""
  dailyShipments: Int

  """
  배송방법 - (COURIER:택배, FREIGHT:화물, WAREHOUSE_TRANSFER:창고이체, WAREHOUSE_RELEASE:창고출고, DIRECT_DELIVERY:직접배송)
  """
  deliveryMethods: [SellerProfileDeliveryMethod]

  """가공공장 ID 목록"""
  estIds: [String]

  """
  수확주기 - (DAILY:매일, ONCE_A_WEEK:주1~2회, THREE_TIMES_A_WEEK:주3~5회, MONTHLY:월1~2회)
  """
  harvestCycle: SellerProfileHarvestCycle
  id: ID!

  """판매의향여부"""
  isSelling: Boolean!

  """거래여부"""
  isTraded: Boolean!

  """축산 브랜드"""
  meatBrand: MeatBrand

  """원산지 (원천 데이터)"""
  origin: String

  """원산지 국가"""
  originCountry: Country

  """원산지 지역2"""
  originRegion2: Region2

  """원산지 지역3"""
  originRegion3: Region3

  """포장규격들 (예: ["1.5kg", "20kg"])"""
  packagingUnits: [String]

  """판매자 프로필"""
  sellerProfile: SellerProfile

  """판매시작시기(월) (당월 포함)"""
  startSellingMonth: Int

  """판매중단시기(월) (당월 포함)"""
  stopSellingMonth: Int

  """유통보관방법 - (OTHER:기타, ANY:모두, CHILLED:냉장, FROZEN:냉동, LIVE:활, DRIED:건조)"""
  storageMethod: SellerProfileStorageMethod

  """수정 일시"""
  updatedAt: DateTime!
}

type SellerProfileSaleItemConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [SellerProfileSaleItemEdge!]!
  pageInfo: PageInfo!
}

type SellerProfileSaleItemEdge implements Edge {
  cursor: String!
  node: SellerProfileSaleItem!
}

"""판매 상품 정렬 기준"""
input SellerProfileSaleItemOrderBy {
  direction: OrderByDirection!
  field: SellerProfileSaleItemOrderField!
}

"""판매 상품 조회 정렬 기준"""
enum SellerProfileSaleItemOrderField {
  ID
}

"""보관방법"""
enum SellerProfileStorageMethod {
  """모두"""
  ANY

  """냉장"""
  CHILLED

  """건조"""
  DRIED

  """동결"""
  FREEZE_DRIED

  """냉동"""
  FROZEN

  """활"""
  LIVE

  """기타"""
  OTHER
}

input SetInterestedItemCategoriesInput {
  itemCategoryIds: [ID!]
}

union SetInterestedItemCategoriesPayload = Error | SetInterestedItemCategoriesResponse

type SetInterestedItemCategoriesResponse {
  itemCategoryIds: [ID!]
  viewer: User
}

input SetSelfReportedBusinessSectorsInput {
  businessSectorIds: [ID!]
}

union SetSelfReportedBusinessSectorsPayload = Error | SetSelfReportedBusinessSectorsResponse

type SetSelfReportedBusinessSectorsResponse {
  businessSectors: [SelfReportedBusinessSectorListingItem!]
  viewer: User
}

input SetSelfReportedSalesBinInput {
  binId: ID!
}

union SetSelfReportedSalesBinPayload = Error | SetSelfReportedSalesBinResponse

type SetSelfReportedSalesBinResponse {
  bin: SelfReportedSalesBinListingItem
  viewer: User
}

enum SizeUnit {
  CM
  M
  MM
}

"""신선마켓 담당자 ID"""
scalar StaffKey

"""통계"""
interface Statistics {
  """전체 개수"""
  count: Int!
}

"""저장 방식"""
enum StorageMethod {
  """상온"""
  AMBIENT

  """냉장"""
  CHILLED

  """동결"""
  FREEZE_DRIED

  """냉동"""
  FROZEN
}

"""출하 시작 종료 날짜"""
type SupplyDate {
  dayOfMonth: SupplyDayOfMonth!
  month: Int!
}

"""공급 시점"""
enum SupplyDayOfMonth {
  """초순"""
  EARLY

  """하순"""
  LATE

  """중순"""
  MIDDLE
}

"""공급 주기"""
enum SupplyFrequecy {
  """매일"""
  DAILY

  """월 1~2회"""
  MONTHLY

  """주 1회"""
  ONCE_A_WEEK

  """주 3~5회"""
  THREE_TIMES_A_WEEK
}

type SystemMaintenance implements Node {
  """점검 종료 시간"""
  endAt: DateTime!
  id: ID!

  """점검 메시지"""
  message: String

  """점검 시작 시간"""
  startAt: DateTime!

  """타켓정보 farmer, buyer, admin"""
  targets: [String!]!
}

type SystemMaintenanceConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [SystemMaintenanceEdge!]!
  pageInfo: PageInfo!
}

type SystemMaintenanceEdge implements Edge {
  cursor: String!
  node: SystemMaintenance!
}

"""임시 웹주문서"""
type TempWosOrder {
  """임시 주문서 상세 정보"""
  data: TempWosOrderData

  """주문서"""
  order: WosOrder!

  """임시 주문서 ID"""
  tempOrderId: Int!

  """고객"""
  user: User!

  """고객 ID"""
  userId: Int! @deprecated(reason: "Use user instead")
}

"""임시 웹주문서 상세정보"""
type TempWosOrderData {
  """주문 생성자(관리자일 수 있음)"""
  createUser: User!

  """주문 생성자 아이디(관리자일 수 있음)"""
  createUserId: Int! @deprecated(reason: "Use createUser instead")

  """임시 주문서 생성일시"""
  createdAt: String!

  """orders 테이블 식별자"""
  orderNo: String!

  """주문자"""
  orderUser: User!

  """주문자 아이디"""
  orderUserId: Int! @deprecated(reason: "Use orderUser instead")

  """주문 목적"""
  paymentPurpose: PaymentPurpose!

  """주문 단품정보 리스트"""
  productOptions: [WosProductOption]!

  """총 배송비"""
  totalDeliveryCost: Int!

  """총 주문(상품) 금액"""
  totalOrderPrice: Int!
}

"""임시 웹주문서 생성 요청시 필요한 단품(상품옵션) 정보"""
input TempWosOrderProductOptionsInput {
  """단품(상품옵션) 가격"""
  price: Int!

  """상품 번호"""
  productId: Int!

  """단품(상품옵션) 번호"""
  productOptionId: Int!
}

"""임시 웹주문서(단품구매용) 생성 요청"""
input TempWosOrderProductOptionsList {
  """상품 옵션 아이디"""
  productOptionId: Int!

  """구매 수량"""
  quantity: Int!
}

"""사용자 약관"""
type Term implements Node {
  """동의여부"""
  agreement: String!

  """아이디"""
  id: ID!
}

"""사용자 약관 동의 종류"""
type TermAgreementType implements Node {
  """설명"""
  description: String!

  """아이디"""
  id: ID!

  """종류"""
  type: String!
}

type TermAgreementTypeConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [TermAgreementTypeEdge!]!
  pageInfo: PageInfo!
}

type TermAgreementTypeEdge implements Edge {
  cursor: String!
  node: TermAgreementType!
}

type TermConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [TermEdge!]!
  pageInfo: PageInfo!
}

"""사용자 약관 동의 Input"""
input TermCreateInput {
  agreement: String!
}

type TermEdge implements Edge {
  cursor: String!
  node: Term!
}

"""사용자 약관 동의 여부 변경"""
type TermMutationPayload implements MutationPayload {
  result: Term
}

union TermMutationResponse = Error | TermMutationPayload

"""거래주기"""
enum TradeCycle {
  """매일"""
  DAILY

  """월 1~2회"""
  MONTHLY_1TO2

  """일회성 주문"""
  ONCE

  """주 1~2회"""
  WEEKLY_1TO2

  """주 3~5회"""
  WEEKLY_3TO5
}

"""[거래매칭] 배송정책"""
type TradematchDeliveryPolicy {
  """가능 배송일"""
  acceptableDeliveryDate: Date!
}

"""[거래매칭] 수요"""
type TradematchDemand implements Node {
  """취소일시"""
  canceledAt: DateTime

  """배송지 주소 (전체)"""
  deliveryAddress: String!

  """배송지 주소 1 (부분)"""
  deliveryAddress1: String!

  """배송지 주소 2 (부분)"""
  deliveryAddress2: String!

  """배송일"""
  deliveryDate: DateTime

  """배송 지역"""
  deliveryRegion: String!

  """배송지 우편번호"""
  deliveryZipCode: String!

  """작성일시"""
  draftedAt: DateTime!

  """식별자"""
  id: ID!

  """포장물수량/거래"""
  numberOfPackagesPerTrade: Int

  """포장량 단위"""
  packageQuantityUnit: TradematchPackageQuantityUnit

  """가격 그룹"""
  priceGroup: String

  """희망가/거래"""
  pricePerTrade: BigInt

  """상품 품종 코드"""
  productCategoryCode: String!

  """상품 ID"""
  productId: ID

  """상품 원산지"""
  productOrigin: String!

  """상품 가공"""
  productProcess: String!

  """상품 요청사항"""
  productRequirements: String!

  """상품 크기"""
  productSize: String!

  """상품 보관 방식"""
  productStorageMethod: String!

  """상품 종류"""
  productType: TradematchProductType!

  """양/포장"""
  quantityPerPackage: Float

  """양/거래"""
  quantityPerTrade: Float

  """요청일시"""
  requestedAt: DateTime

  """상태"""
  status: TradematchDemandStatus!

  """거래주기"""
  tradeCycle: String!

  """희망가/포장"""
  wantedPricePerPackage: Int
}

type TradematchDemandConnection implements Connection {
  """Number of edges"""
  count: Int!
  edges: [TradematchDemandEdge!]!
  pageInfo: PageInfo!
}

"""[거래매칭] 수요 생성 입력"""
input TradematchDemandCreateInput {
  """배송지 주소 1 (부분)"""
  deliveryAddress1: String

  """배송지 주소 2 (부분)"""
  deliveryAddress2: String

  """배송일"""
  deliveryDate: DateTime

  """배송 지역"""
  deliveryRegion: String

  """배송지 우편번호"""
  deliveryZipCode: String

  """포장물수량/거래"""
  numberOfPackagesPerTrade: Int

  """포장량 단위"""
  packageQuantityUnit: TradematchPackageQuantityUnit

  """가격 그룹"""
  priceGroup: String

  """상품 품종 코드"""
  productCategoryCode: String

  """상품 ID"""
  productId: ID

  """상품 원산지"""
  productOrigin: String

  """상품 가공"""
  productProcess: String

  """상품 요청사항"""
  productRequirements: String

  """상품 크기"""
  productSize: String

  """상품 보관 방식"""
  productStorageMethod: String

  """상품 종류"""
  productType: TradematchProductType

  """양/포장"""
  quantityPerPackage: Float

  """거래주기"""
  tradeCycle: String

  """희망가/포장"""
  wantedPricePerPackage: Int
}

"""[거래매칭] 수요 삭제 응답"""
union TradematchDemandDeleteResponse = DeleteSuccess | Error

type TradematchDemandEdge implements Edge {
  cursor: String!
  node: TradematchDemand!
}

"""[거래매칭] 수요 뮤테이션 응답 본문"""
type TradematchDemandMutationPayload implements MutationPayload {
  """결과"""
  result: TradematchDemand
}

"""[거래매칭] 수요 뮤테이션 응답"""
union TradematchDemandMutationResponse = Error | TradematchDemandMutationPayload

"""[거래매칭] 수요 정렬 기준"""
enum TradematchDemandOrderBy {
  """작성일시"""
  DRAFTED_AT

  """식별자"""
  ID

  """요청일시"""
  REQUESTED_AT
}

"""[거래매칭] 수요 부분 수정 입력"""
input TradematchDemandPartialUpdateInput {
  """배송지 주소 1 (부분)"""
  deliveryAddress1: String

  """배송지 주소 2 (부분)"""
  deliveryAddress2: String

  """배송일"""
  deliveryDate: DateTime

  """배송 지역"""
  deliveryRegion: String

  """배송지 우편번호"""
  deliveryZipCode: String

  """포장물수량/거래"""
  numberOfPackagesPerTrade: Int

  """포장량 단위"""
  packageQuantityUnit: TradematchPackageQuantityUnit

  """가격 그룹"""
  priceGroup: String

  """상품 품종 코드"""
  productCategoryCode: String

  """상품 ID"""
  productId: ID

  """상품 원산지"""
  productOrigin: String

  """상품 가공"""
  productProcess: String

  """상품 요청사항"""
  productRequirements: String

  """상품 크기"""
  productSize: String

  """상품 보관 방식"""
  productStorageMethod: String

  """상품 종류"""
  productType: TradematchProductType

  """양/포장"""
  quantityPerPackage: Float

  """상태"""
  status: TradematchDemandStatus

  """거래주기"""
  tradeCycle: String

  """희망가/포장"""
  wantedPricePerPackage: Int
}

"""[거래매칭] 수요 상태"""
enum TradematchDemandStatus {
  """취소"""
  CANCELED

  """작성중"""
  DRAFT

  """요청"""
  REQUESTED
}

"""[거래매칭] 포장량 단위"""
enum TradematchPackageQuantityUnit {
  """ea"""
  EA

  """g"""
  G

  """kg"""
  KG

  """l"""
  L

  """mg"""
  MG

  """ml"""
  ML
}

"""[거래매칭] 상품 종류"""
enum TradematchProductType {
  """농산물"""
  AGRICULTURAL

  """수산물/건수산"""
  AQUATIC

  """축산물"""
  LIVESTOCK

  """기타"""
  OTHER
}

input UnlikeProductInput {
  """상품 node ID"""
  id: ID!
}

union UnlikeProductPayload = Error | UnlikeProductResult

type UnlikeProductResult {
  """찜 취소 상품 정보"""
  product: Product!
}

input UnlikeProductsAllInput {
  """전체 상품 삭제 시, 삭제에서 제외할 상품 ID 리스트"""
  excludedProductIds: [ID!]!

  """상품 유형을 지정해 지정한 유형의 상품들만 삭제할 수 있습니다."""
  types: [ProductType!]
}

union UnlikeProductsAllPayload = Error | UnlikeProductsAllResult

type UnlikeProductsAllResult {
  """찜한 상품 목록에서 삭제된 상품 ID 리스트"""
  unlikedProductIds: [ID!]!

  """viewer를 통해 mutation 후 변경된 likedProductCount를 연속으로 조회할 수 있습니다."""
  viewer: User!
}

input UnlikeProductsInput {
  """삭제할 상품 ID 리스트"""
  productIds: [ID!]!
}

union UnlikeProductsPayload = Error | UnlikeProductsResult

type UnlikeProductsResult {
  """찜한 상품 목록에서 삭제된 상품 ID 리스트"""
  unlikedProductIds: [ID!]!

  """viewer를 통해 mutation 후 변경된 likedProductCount를 연속으로 조회할 수 있습니다."""
  viewer: User!
}

input UnmarkAllProductsAsViewedInput {
  """전체 조회 기록을 지울 시 제외할 상품 노드 ID 리스트"""
  excludedProductIds: [ID!]!
}

union UnmarkAllProductsAsViewedPayload = Error | UnmarkAllProductsAsViewedResult

type UnmarkAllProductsAsViewedResult {
  """조회한 기록을 지울 상품 노드 ID 리스트"""
  unmarkedProductIds: [ID!]!
  viewer: User!
}

input UnmarkProductsAsViewedInput {
  """조회한 기록을 지울 상품 노드 ID 리스트"""
  productIds: [ID!]!
}

union UnmarkProductsAsViewedPayload = Error | UnmarkProductsAsViewedResult

type UnmarkProductsAsViewedResult {
  """조회한 기록을 지울 상품 노드 ID 리스트"""
  unmarkedProductIds: [ID!]!
  viewer: User!
}

"""장바구니 아이템의 개수 수정 Input"""
input UpdateCartItemQuantityInput {
  """장바구니 아이템 아이디"""
  cartId: Int!

  """상품 수량"""
  quantity: Int!
}

union UpdateCartItemQuantityPayload = Error | UpdateCartItemQuantitySuccess

"""장바구니 아이템 개수 수정 Payload"""
type UpdateCartItemQuantitySuccess {
  """변경된 장바구니 아이템 아이디"""
  cartId: Int!
}

"""
매칭 상품을 업데이트 합니다.
    - 상품 인터페이스 기준 추가 전달 필드: releaseStartMonth, releaseEndMonth
"""
input UpdateMatchingProductInput {
  """상품 설명 editor HTML"""
  description: String!

  """전시 카테고리 node ID"""
  displayCategoryIds: [ID!]!

  """바이어용 상품명"""
  displayName: String!

  """상품 node ID"""
  id: ID!

  """대표 이미지"""
  image: ImageInput!

  """매칭상품 상태 자동관리기능 사용여부"""
  isAutoStatus: Boolean!

  """생산자용 상품명"""
  name: String!

  """공지사항"""
  notice: String

  """공지사항 적용 기간"""
  noticeEndAt: DateTime

  """공지사항 적용 기간"""
  noticeStartAt: DateTime

  """원산지"""
  origin: String!

  """출하 종료 월"""
  releaseEndMonth: Int!

  """출하 시작 월"""
  releaseStartMonth: Int!

  """판매 자료 문서 url"""
  salesDocument: String

  """운영 상태"""
  status: ProductStatus!
}

union UpdateMatchingProductPayload = Error | UpdateMatchingProductResult

type UpdateMatchingProductResult {
  """등록된 상품 정보"""
  product: Product!
}

"""
일반/일반+견적 상품을 업데이트합니다. 
    - 상품 인터페이스 기준 추가 전달 필드: producerId, type, isCourierAvailable, isVat, price, notationInformationType
"""
input UpdateProductInput {
  """표준 카테고리 node ID"""
  categoryId: ID!

  """상품 설명 editor HTML"""
  description: String!

  """전시 카테고리 node ID"""
  displayCategoryIds: [ID!]!

  """바이어용 상품명"""
  displayName: String!

  """상품 node ID"""
  id: ID!

  """대표 이미지"""
  image: ImageInput!

  """배송 가능 여부"""
  isCourierAvailable: Boolean!

  """생산자용 상품명"""
  name: String!

  """필수 고지정보 유형, 농축수산물 | 가공식품"""
  notationInformationType: ProductNotationInformationType!

  """공지사항"""
  notice: String

  """공지사항 적용 기간"""
  noticeEndAt: DateTime

  """공지사항 적용 기간"""
  noticeStartAt: DateTime

  """원산지"""
  origin: String!

  """기준 가격"""
  price: Int!

  """판매 자료 문서 url"""
  salesDocument: String

  """판매 유형입니다.  축산 RFQ와 수산매칭이 있습니다."""
  salesType: ProductSalesType

  """운영 상태"""
  status: ProductStatus!

  """일반/일반+견적 상품간 변경가능한 타입"""
  type: NormalProductType!
}

"""Mutation.updateProductOptionCosts 수행 중 실패한 생성에 대한 정보"""
type UpdateProductOptionCostError {
  """실패한 UpdateProductOption.id"""
  inputProductOptionId: ID!

  """실패 이유"""
  message: String!

  """실패한 ProductOption, id가 invalid할 경우 null"""
  productOption: ProductOption
}

"""Mutation.updateProductOptionCosts의 입력"""
input UpdateProductOptionCostsInput {
  """원가 계약 타입"""
  contractType: ProductOptionCostContractType

  """새로운 ProductOptionCost.deliveryCost"""
  deliveryCost: Int

  """새로운 ProductOption.price"""
  price: Int

  """원가를 갱신 할 ProductOption의 id"""
  productOptionId: ID!

  """새로운 ProductOptionCost.rawCost"""
  rawCost: Int

  """새로운 ProductOptionCost.workingCost"""
  workingCost: Int
}

union UpdateProductOptionCostsPayload = Error | UpdateProductOptionCostsResult

"""Mutation.updateProductOptionCosts의 반환값"""
type UpdateProductOptionCostsResult {
  """원가의 생성에 실패한 ProductOption에 대한 에러"""
  error: [UpdateProductOptionCostError!]!

  """생성에 성공한 ProductOptionCost list"""
  ok: [ProductOption!]!
}

input UpdateProductOptionInput {
  adhocStockIsLimited: Boolean!

  """판매 가능 수량 노출 여부"""
  adhocStockIsNumRemainingVisible: Boolean!

  """공급 수량, 관리자가 세팅한 단품 별 판매가 가능한 총 수량"""
  adhocStockNumLimit: Int

  """출고 기준 시간"""
  cutOffTime: String

  """단품 node ID"""
  id: ID!

  """무료배송 여부"""
  isFreeShipping: Boolean!

  """출고 기준 시간 메모"""
  memo: String

  """단품명"""
  optionName: String!

  """합포장 단위수량"""
  shippingUnitQuantity: Int!

  """운영상태"""
  status: ProductOptionStatus!
}

union UpdateProductPayload = Error | UpdateProductResult

type UpdateProductResult {
  """수정된 상품 정보"""
  product: Product!
}

"""
견적 상품을 업데이트 합니다.
    - 상품 인터페이스 기준 추가 전달 필드: producerId, grade
"""
input UpdateQuotedProductInput {
  """표준 카테고리 node ID"""
  categoryId: ID!

  """상품 설명 editor HTML"""
  description: String!

  """전시 카테고리 node ID"""
  displayCategoryIds: [ID!]!

  """바이어용 상품명"""
  displayName: String!

  """등급"""
  grade: String!

  """상품 node ID"""
  id: ID!

  """대표 이미지"""
  image: ImageInput!

  """생산자용 상품명"""
  name: String!

  """공지사항"""
  notice: String

  """공지사항 적용 기간"""
  noticeEndAt: DateTime

  """공지사항 적용 기간"""
  noticeStartAt: DateTime

  """원산지"""
  origin: String!

  """판매 자료 문서 url"""
  salesDocument: String

  """판매 유형입니다.  축산 RFQ와 수산매칭이 있습니다."""
  salesType: ProductSalesType!

  """운영 상태"""
  status: ProductStatus!
}

union UpdateQuotedProductPayload = Error | UpdateQuotedProductResult

type UpdateQuotedProductResult {
  """수정된 견적 상품 정보"""
  product: Product!
}

"""견적서 수정 인풋"""
input UpdateRfqInput {
  """희망 배송지"""
  address: String

  """견적을 요청한 구매자 정보"""
  buyerId: ID

  """컨택 담당 MD"""
  contactMdId: ID
  id: ID!

  """견적이 인입된 경로, 페이퍼폼 | 전화상담 | 카톡상담 | 영업활동 | 견적구매"""
  requestedFrom: RfqRequestedFrom

  """소싱 담당 MD 1"""
  sourcingMdId1: ID

  """소싱 담당 MD 2"""
  sourcingMdId2: ID

  """소싱 담당 MD 3"""
  sourcingMdId3: ID
}

union UpdateRfqPayload = Error | UpdateRfqResult

"""견적 상품 업데이트 정보 Input"""
input UpdateRfqProductsInput {
  """중량/수량/용량"""
  amount: Float

  """중량/수량/용량"""
  amountUnit: AmountUnit

  """배송비"""
  deliveryFee: Int

  """배송 방법"""
  deliveryMethod: RfqProductDeliveryMethod

  """견적에 대한 설명, 팜모닝 장터에 노출됩니다."""
  description: String

  """견적상품 ID, 견적상품 업데이트시 필수값입니다."""
  id: ID!

  """크로스셀링(다른 상품도 사라고 영업)을 통해 추가된 상품인지 여부"""
  isCrossSelling: Boolean = false

  """[축산] 브랜드 id"""
  meatBrandId: ID

  """[축산] 등급"""
  meatGradeId: ID

  """메모"""
  memo: String

  """원산지"""
  origin: RfqProductOrigin

  """포장물 수량, 해당 중량에 몇개가 포장되어 와야 하는지."""
  packageAmount: Int

  """기존 납품가"""
  previousPrice: Int

  """가공방식"""
  processingMethod: String

  """
  소싱 실패시 바이어에게 추천된 신선하이 일반상품 정보 
                                                                                *주의 클라이언트가 직접 입력하는 정보이므로 node id가 아닌 number id정보를 받습니다.
  """
  promotedProductId: Int

  """희망 배송일"""
  requestedDeliveredAt: DateTime

  """셀러 정보"""
  sellerId: ID

  """셀러 공급가"""
  sellerPrice: Int

  """진행 상태"""
  status: RfqProductStatus

  """진행 상태 상세 정보"""
  statusInfo: RfqProductStatusInfo

  """보관방식"""
  storageMethod: StorageMethod

  """거래 주기"""
  tradeCycle: TradeCycle

  """단위당 희망가"""
  unitPrice: Int

  """사용 용도"""
  usage: String
}

union UpdateRfqProductsPayload = Error | UpdateRfqProductsResult

type UpdateRfqProductsResult {
  """업데이트된 견적 상품 정보"""
  updatedRfqProducts: [RfqProduct!]!
}

type UpdateRfqResult {
  updatedRfq: Rfq!
}

"""견적주문 입금스케쥴 상세 금액 업데이트 Input"""
input UpdateRfqWosOrderDepositScheduleAmountInput {
  """입금예정금액"""
  amount: DecimalNumber!

  """입금 스케쥴 상세 ID (null이면 입금스케쥴 상세를 insert하는 명령이 됩니다)"""
  id: ID

  """견적주문상품 ID (이 값은 insert 명령인 경우에만 씁니다)"""
  orderProductId: Int
}

"""견적주문 입금 스케쥴 업데이트 Input"""
input UpdateRfqWosOrderDepositScheduleInput {
  """입금예정일"""
  depositDueDate: DateTime

  """입금 타입"""
  depositType: RfqWosDepositType

  """팩토링 ID"""
  factoring: ID

  """입금 스케쥴 ID"""
  id: ID!

  """입금 스케쥴 상태"""
  status: RfqWosDepositScheduleStatus!
}

"""입금스케쥴 통합 업데이트 Input (id 가 있으면 update, 없으면 insert)"""
input UpdateRfqWosOrderDepositScheduleIntegratedInput {
  """바이어 ID"""
  buyer: ID

  """입금예정일"""
  depositDueDate: DateTime

  """입금 타입"""
  depositType: RfqWosDepositType

  """견적주문상품 상세 결제예정금액 업데이트 리스트"""
  details: [UpdateRfqWosOrderDepositScheduleAmountInput]!

  """팩토링 ID"""
  factoring: ID

  """입금 스케쥴 ID"""
  id: ID

  """입금 스케쥴 상태"""
  status: RfqWosDepositScheduleStatus
}

"""견적주문상품변경 Input"""
input UpdateRfqWosOrderProductInput {
  address: String!
  amount: DecimalNumber!
  deliveryFee: Int!
  deliveryMethod: RfqProductDeliveryMethod
  packageFee: Int
  rfqWosOrderProductNo: Int!

  """셀러 공급가"""
  sellerPrice: Int!
  status: RfqWosOrderProductStatus!
  unitPrice: Int!
}

union UpdateRfqWosOrderProductPayload = Error | RfqWosOrderProduct

"""결제 전, 고객이 입력한 주문 정보(배송지 등)를 저장합니다."""
input UpdateTempWosOrderInput {
  """구매자 ID"""
  orderUserId: Int!

  """결제 목적"""
  paymentPurpose: String!

  """상품 정보 리스트"""
  productOptions: [WosProductOptionInput!]!

  """임시 주문서 ID"""
  tempOrderId: Int!

  """총 배송비"""
  totalDeliveryCost: Int!

  """총 주문 금액"""
  totalOrderPrice: Int!
}

union UpdateTempWosOrderPayload = CreateWosOrderResult | Error | WosError | WosOrder

input UpdateUserInput {
  address: String
  businessRegistrationNumber: String
  email: String
  manager: String

  """이름 또는 회사명"""
  name: String
  password: String
  phone: String
  shopUrl: String
  terms: [UpdateUserTermInputItem!]
  zipCode: String
}

union UpdateUserPayload = Error | User

input UpdateUserTermInputItem {
  agreement: String!
  isAgreedByViewer: Boolean!
}

input UpsertProductOptionsInput {
  createProductOptions: [CreateProductOptionInput!]
  updateProductOptions: [UpdateProductOptionInput!]
}

union UpsertProductOptionsPayload = Error | UpsertProductOptionsResult

type UpsertProductOptionsResult {
  createdProductOptions: [ProductOption!]!
  updatedProductOptions: [ProductOption!]!
}

"""Url"""
scalar Url

type User implements Node {
  address: String

  """대표명"""
  bossName: String
  businessRegistrationNumber: String

  """유저의 미결제(나중결제) 금액; 나중결제 유저가 아닌 경우 null"""
  debtAmount: Int
  email: String

  """견적요청을 했던 적이 있는지 여부"""
  hasUsedRfq: Boolean!
  id: ID!
  interestedItemCategories: [ItemCategory!]
  likedProductCount: Int!

  """유저의 찜한 상품 목록"""
  likedProducts(
    after: String
    before: String
    first: Int
    last: Int

    """매칭상품 시세의 변동량 관련 필터입니다."""
    marketPriceDiffFilter: MarketPriceDiffFilter
    orderBy: [LikedProductsOrderBy!]

    """상품 유형을 지정합니다."""
    types: [ProductType!]
  ): LikedProductConnection!
  manager: String
  name: String!

  """유저의 상태별 주문수"""
  orderProductCountByStatus(
    """yyyyMMdd KST"""
    from: String!

    """yyyyMMdd KST"""
    to: String!
  ): [OrderProductCountByStatusItem!]!
  phone: String!
  producerCode: String
  products(input: UserProductsInput): ProductConnection!

  """RFQ 판매자"""
  rfqSeller: RfqSeller
  rowId: Int!
  selfReportedBusinessSectors: [SelfReportedBusinessSectorListingItem!]
  selfReportedSalesBin: SelfReportedSalesBinListingItem

  """고객이 운영 중인 사이트"""
  shopUrl: String
  sinsunCashDeposit: Int!

  """고객의 이용약관"""
  terms(after: ID, before: ID, first: Int, last: Int): TermConnection!
  uid: String!
  userRole: UserRole!

  """유저 정보 별 인증 여부"""
  verifications: UserVerifications
  viewedProductCount: Int!
  viewedProducts(after: String, before: String, first: Int, last: Int, orderBy: [ViewedProductsOrderBy!]): ViewedProductConnection!
  zipCode: String
}

"""신청자 사업 정보"""
type UserBusinessRegistrationInfo implements Node {
  """사업자등록번호"""
  businessRegistrationNumber: BusinessRegistrationNumber!

  """개인/법인 유형"""
  businessType: IndividualOrCompany!

  """생성 일시"""
  createdAt: DateTime!

  """신청자"""
  farmmorningUser: FarmmorningUser!

  """ID"""
  id: ID!

  """사업자명"""
  name: String!

  """수정 일시"""
  updatedAt: DateTime!
}

type UserBusinessRegistrationInfoConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [UserBusinessRegistrationInfoEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type UserBusinessRegistrationInfoEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: UserBusinessRegistrationInfo!
}

"""시설 유형"""
enum UserBusinessSupportFacility {
  """온실"""
  GLASS

  """노지"""
  OPEN_FIELD

  """비닐하우스"""
  VINYL_HOUSE_FIELD

  """비닐하우스 스마트팜"""
  VINYL_HOUSE_SMART_FARM
}

"""농가 사업 지원"""
type UserBusinessSupportInfo implements Node {
  """농지 면적"""
  area: Int

  """전량판매 신청들"""
  bulkSaleApplications(after: ID, before: ID, first: Int, last: Int): BulkSaleApplicationConnection!

  """경력 타입"""
  experiencedYearsRange: ExperienceYearsRange

  """시설 유형"""
  facility: UserBusinessSupportFacility

  """신청자"""
  farmmorningUser: FarmmorningUser!

  """ID"""
  id: ID!

  """5년 이내 귀농인 여부"""
  isJuniorMigrant: Boolean

  """작년 수익"""
  lastYearIncome: Int

  """수정 일시"""
  updatedAt: DateTime!

  """신청자 유형 ID"""
  userTypeId: ID
}

type UserBusinessSupportInfoConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [UserBusinessSupportInfoEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type UserBusinessSupportInfoEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: UserBusinessSupportInfo!
}

"""정렬 기준"""
enum UserBusinessSupportInfoOrderBy {
  """ID"""
  ID
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}

"""생산정보"""
type UserPccProduction implements Node {
  """작물 인증 목록"""
  certificates: [ProductionCertificate!]!

  """시설타입"""
  facilityType: FacilityType!

  """작물 등급"""
  grade: String!

  """ID"""
  id: ID!

  """작물 이미지 목록"""
  images: [Url!]!
  productCategory: ProductCategory
}

type UserPccProductionConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [UserPccProductionEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type UserPccProductionEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: UserPccProduction!
}

"""판매조건"""
type UserPccSalesCondition implements Node {
  """연간판매량"""
  averageAnnualSales: AverageAnnualSalesRange

  """택배가능여부"""
  canDeliver: Boolean!
  createdAt: DateTime!

  """택배가능시 하루 택배 처리 가능한 물량"""
  deliveryDailyCapacity: String

  """가능한 배송 패키지 목록"""
  deliveryPackages: [DeliveryPackage!]!

  """택배가능시 포장 무게"""
  deliveryWeightUnit: String

  """ID"""
  id: ID!
  productCategory: ProductCategory

  """예상 출하 시작"""
  supplyBegin: SupplyDate

  """예상 출하 종료"""
  supplyEnd: SupplyDate

  """공급 주기"""
  supplyFrequency: SupplyFrequecy!
  updatedAt: DateTime!
}

type UserPccSalesConditionConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [UserPccSalesConditionEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type UserPccSalesConditionEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: UserPccSalesCondition!
}

input UserProductsInput {
  """after + first"""
  after: String

  """before + last"""
  before: String

  """first 단독 사용도 가능"""
  first: Int
  last: Int

  """offset + limit"""
  limit: Int

  """offset + limit"""
  offset: Int
  sort: UserProductsInputSort!
}

enum UserProductsInputSort {
  PRICE_ASC
  PRICE_DESC
  UPDATED_ASC
  UPDATED_DESC
}

enum UserRole {
  ADMIN
  BUYER
  EXTERNAL_STAFF
  PRODUCER
}

type UserVerifications {
  """사업자등록번호 본인 인증 여부"""
  businessRegistrationNumberVerificationStatus: BusinessRegistrationNumberVerificationStatus!

  """이메일 인증 여부"""
  emailVerificationStatus: EmailVerificationStatus!

  """사업자등록번호 진위 여부"""
  isValidBusinessRegistrationNumberByViewer: Boolean!

  """핸드폰 번호 인증 여부"""
  phoneVerificationStatus: PhoneVerificationStatus!
}

type ViewedProductConnection {
  edges: [ViewedProductEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ViewedProductEdge {
  cursor: String!
  node: Product!
  viewedAt: DateTime!
}

input ViewedProductsOrderBy {
  viewedAt: OrderDirection
}

"""가상계좌 정보"""
type VirtualAccount {
  accountNo: String!
  bank: Bank!
  createdAt: DateTime!
  expiredAt: DateTime!
}

"""도매법인"""
type Wholesaler implements Node {
  """도매법인 코드"""
  code: String!

  """ID"""
  id: ID!

  """도매법인명"""
  name: String!

  """도매법인 시장"""
  wholesalerMarket: WholesalerMarket!
}

type WholesalerConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [WholesalerEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type WholesalerEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: Wholesaler!
}

"""도매법인 시장"""
type WholesalerMarket implements Node {
  """시장 코드"""
  code: String!

  """ID"""
  id: ID!

  """시장명"""
  name: String!

  """도매법인들"""
  wholesalers(after: ID, before: ID, first: Int, last: Int): WholesalerConnection!
}

type WholesalerMarketConnection implements Connection {
  """Number of edges"""
  count: Int!

  """Edges"""
  edges: [WholesalerMarketEdge!]!

  """Page information"""
  pageInfo: PageInfo!
}

type WholesalerMarketEdge implements Edge {
  """Cursor"""
  cursor: String!

  """Node"""
  node: WholesalerMarket!
}

"""정렬 기준"""
enum WholesalerOrderBy {
  """ID"""
  ID
}

enum WosDeliveryStatus {
  CANCEL
  COMPLETE
  CREATE
  DELIVERING
  DEPARTURE
  NEGOTIATING
  PACKING
  REFUND
}

enum WosDeliveryType {
  FREIGHT
  PARCEL
  SELF
}

type WosError {
  code: WosErrorCode!
  message: String
}

"""웹주문서용 Error"""
enum WosErrorCode {
  """단품의 판매수량이 부족"""
  ADHOC_STOCK_SOLD_OUT

  """유효하지 않은 배송 정보"""
  INVALID_DELIVERY

  """유효하지 않은 주문 정보"""
  INVALID_ORDER

  """유효하지 않은 결제 목적"""
  INVALID_PAYMENT_PURPOSE

  """유효하지 않은 상품 정보인 경우 (상품의 가격변경 또는 구매할 수 없는 상태)"""
  INVALID_PRODUCT
}

"""주문서"""
type WosOrder {
  """주문서 생성자"""
  createUser: User!

  """주문서 생성자 ID (어드민이 대리 생성할 수 있기 때문)"""
  createUserId: Int! @deprecated(reason: "Use createUser instead")
  eventLogs: [WosOrderEventLog]!

  """주문서 번호"""
  orderNo: String!

  """주문 단품번호 리스트"""
  orderProducts: [WosOrderProduct]!

  """구매자"""
  orderUser: User!

  """구매자 ID"""
  orderUserId: Int! @deprecated(reason: "Use orderUser instead")

  """주문서 결제 타입"""
  payType: WosOrderPayType!
  payment: Payment

  """주문서 상태"""
  status: WosOrderStatus!

  """총 배송비"""
  totalDeliveryCost: Int

  """총 주문(상품) 금액"""
  totalOrderPrice: Int!
}

enum WosOrderCancelType {
  """단순변심"""
  CHANGED_MIND

  """배송사고"""
  DELIVERY_ACCIDENT

  """배송지연"""
  DELIVERY_DELAY

  """배송불가"""
  DELIVERY_NOT_POSSIBLE

  """중복주문"""
  DUPLICATED_ORDER

  """기타"""
  ETC

  """상품품절"""
  PRODUCT_SOLDOUT
}

"""이벤트 로그"""
type WosOrderEventLog {
  """생성된 시간"""
  createdAt: DateTime!

  """이벤트 JSON"""
  detailJson: String

  """이벤트 타입"""
  eventType: WosOrderEventLogType!
}

enum WosOrderEventLogType {
  """주문완료"""
  ORDER_PAY_COMPLETE

  """주문상품취소"""
  PRODUCT_CANCELED

  """주문상품환불"""
  PRODUCT_REFUNDED
}

enum WosOrderPayType {
  AFTER_PAY
  OFFLINE
  PAID
}

"""주문 단품"""
type WosOrderProduct {
  """배송비"""
  deliveryCost: Int

  """배송 희망일 (yyyy-MM-dd) KST"""
  deliveryDesiredDate: String

  """배송 관련 요청사항"""
  deliveryMessage: String

  """배송 상태"""
  deliveryStatus: WosDeliveryStatus!

  """배송 방법"""
  deliveryType: WosDeliveryType!
  eventLogs: [WosOrderEventLog]!

  """등급"""
  grade: String

  """이미지 url"""
  image: Image

  """상품의 과세 유무"""
  isTaxFree: Boolean!

  """주문서 번호"""
  orderNo: String!

  """주문 단품번호"""
  orderProductNo: String!

  """구매자 이름"""
  ordererName: String!

  """구매자 번호"""
  ordererPhone: String!

  """바이어(구매자)에게 보이는 판매가"""
  price: Int!

  """상품"""
  product: Product!

  """상품 번호"""
  productId: Int! @deprecated(reason: "Use product instead")

  """상품 이름"""
  productName: String!

  """단품"""
  productOption: ProductOption!

  """단품 이름"""
  productOptionName: String!

  """구매 수량"""
  quantity: Int!

  """수령자 주소"""
  receiverAddress: String

  """수령자 이름"""
  receiverName: String

  """수령자 번호"""
  receiverPhone: String

  """수령자 우편번호"""
  receiverZipCode: String

  """단품 번호"""
  stockSku: String! @deprecated(reason: "Use productOption instead")

  """상품의 과세 금액"""
  taxAmount: Int

  """단위 중량"""
  weight: Float
}

enum WosOrderStatus {
  COMPLETE
  DEPOSIT_PENDING
  FAIL
  PROCESSING
  SUCCESS
  WAITING
}

"""임시 주문서에 포함되는 Product Option Detail 정보"""
type WosProductOption {
  """장바구니에서 가장 최근 변경된 날짜(현재 정렬에서 사용)"""
  cartUpdatedAt: String
  createdAt: String

  """단품 등급"""
  grade: String

  """product option detail 아이디"""
  id: Int!

  """단품 이름"""
  optionName: String

  """가격"""
  price: Int!

  """상품"""
  product: Product

  """product 아이디"""
  productId: Int @deprecated(reason: "Use product instead")

  """단품"""
  productOption: ProductOption!

  """주문 수량"""
  quantity: Int!

  """단품 상태"""
  status: String!

  """단품 고유 번호"""
  stockSku: String! @deprecated(reason: "Use productOption instead")
  updatedAt: String
}

"""주문서 생성시 필요한 상품 정보입니다. order_product 테이블 참조하세요"""
input WosProductOptionInput {
  """배송비"""
  deliveryCost: Int

  """배송 희망일 (yyyy-MM-dd) KST"""
  deliveryDesiredDate: String

  """배송 관련 요청사항"""
  deliveryMessage: String

  """배송 방법"""
  deliveryType: WosDeliveryType!

  """상품의 과세 유무"""
  isTaxFree: Boolean!

  """구매자 이름"""
  ordererName: String!

  """구매자 번호"""
  ordererPhone: String!

  """상품 번호"""
  productId: Int!

  """수령자 주소"""
  receiverAddress: String

  """수령자 이름"""
  receiverName: String

  """수령자 번호"""
  receiverPhone: String

  """수령자 우편번호"""
  receiverZipCode: String

  """단품 번호"""
  stockSku: String!
}

"""웹주문서 가상계좌 정보"""
type WosVirtualAccount {
  """계좌번호"""
  accountNo: String!

  """은행명"""
  bankName: String!

  """만료일"""
  expiredAt: DateTime!
}